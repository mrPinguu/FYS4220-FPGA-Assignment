
rtos.elf:     file format elf32-littlenios2
rtos.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00019634 memsz 0x00019634 flags r-x
    LOAD off    0x0001a654 vaddr 0x00059654 paddr 0x0005b1cc align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x0001cd44 vaddr 0x0005cd44 paddr 0x0005cd44 align 2**12
         filesz 0x00000000 memsz 0x000073f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018fd0  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000454  00059200  00059200  0001a200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  00059654  0005b1cc  0001a654  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073f8  0005cd44  0005cd44  0001cd44  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0006413c  0006413c  0001c1cc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001c1cc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001090  00000000  00000000  0001c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d71f  00000000  00000000  0001d280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000af0b  00000000  00000000  0004a99f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000dee4  00000000  00000000  000558aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003398  00000000  00000000  00063790  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004cfa  00000000  00000000  00066b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001827c  00000000  00000000  0006b822  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00083aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001988  00000000  00000000  00083ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0008a05a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0008a060  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008a063  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008a064  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008a065  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008a069  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008a06d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0008a071  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0008a07a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0008a083  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0008a08c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004c  00000000  00000000  0008a098  2**0
                  CONTENTS, READONLY
 29 .jdi          00004a17  00000000  00000000  0008a0e4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004e3ad  00000000  00000000  0008eafb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00059200 l    d  .rodata	00000000 .rodata
00059654 l    d  .rwdata	00000000 .rwdata
0005cd44 l    d  .bss	00000000 .bss
0006413c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../rtos_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
0004026c l     F .text	00000064 handle_interrupts
000402d0 l     F .text	0000006c init_interrupt_pio
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0005937e l     O .rodata	00000010 zeroes.4404
00043158 l     F .text	000000bc __sbprintf
0005938e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00043368 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00044ec0 l     F .text	00000008 __fp_unlock
00044ed4 l     F .text	0000019c __sinit.part.1
00045070 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00059654 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00059a98 l     O .rwdata	00000020 lc_ctype_charset
00059a78 l     O .rwdata	00000020 lc_message_charset
00059ab8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000593c0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00047a54 l     F .text	000000fc __sprint_r.part.0
000594e4 l     O .rodata	00000010 zeroes.4349
00049090 l     F .text	000000bc __sbprintf
000594f4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0004dbd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004dce8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004dd14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0004e0a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004e190 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004e27c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0004e450 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0005b144 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004e6c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0005b148 l     O .rwdata	00000004 lockid
0005cd84 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0005b14c l     O .rwdata	00000004 lockid
0005cd8c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000500fc l     F .text	00000048 OS_InitMisc
00050144 l     F .text	0000006c OS_InitRdyList
000502b0 l     F .text	000000e4 OS_InitTCBList
0005001c l     F .text	000000e0 OS_InitEventList
000501b0 l     F .text	00000080 OS_InitTaskIdle
00050230 l     F .text	00000080 OS_InitTaskStat
00050520 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00052230 l     F .text	000000f4 OS_FlagTaskRdy
00051ff0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00056dd0 l     F .text	00000034 alt_dev_reg
0005a0a0 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0005714c l     F .text	000002a4 altera_avalon_jtag_uart_irq
000573f0 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00057bcc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 i2c_avalon_mm_if.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00058080 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000582dc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0005843c l     F .text	0000003c alt_get_errno
00058478 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0005cde4 g     O .bss	00000004 alt_instruction_exception_handler
00047564 g     F .text	00000074 _mprec_log10
0005b19a g     O .rwdata	00000002 OSTaskNameSize
00047650 g     F .text	0000008c __any_on
00049b0c g     F .text	00000054 _isatty_r
000593cc g     O .rodata	00000028 __mprec_tinytens
0004e394 g     F .text	000000bc alt_main
00060e18 g     O .bss	00000100 alt_irq
00049b60 g     F .text	00000060 _lseek_r
00053518 g     F .text	000000d8 OS_MemInit
0005b1cc g       *ABS*	00000000 __flash_rwdata_start
00056d70 g     F .text	00000060 OSTimeSet
0004c610 g     F .text	00000088 .hidden __eqdf2
0004ed70 g     F .text	00000610 OSEventPendMulti
0006413c g       *ABS*	00000000 __alt_heap_start
00058ab4 g     F .text	00000024 OSTaskCreateHook
00040e24 g     F .text	0000003c printf
0005b172 g     O .rwdata	00000002 OSMboxEn
0004f3d8 g     F .text	0000004c OSIntEnter
0004a438 g     F .text	0000009c _wcrtomb_r
0004787c g     F .text	0000005c __sseek
00045220 g     F .text	00000010 __sinit
0004a2e0 g     F .text	00000140 __swbuf_r
0005b182 g     O .rwdata	00000002 OSQEn
0004582c g     F .text	0000007c _setlocale_r
00045078 g     F .text	00000078 __sfmoreglue
0004ea44 g     F .text	000000cc __malloc_unlock
00058b1c g     F .text	00000020 OSTaskStatHook
00057d9c g     F .text	00000198 read_from_i2c_device
0005cd94 g     O .bss	00000001 OSLockNesting
00057cc0 g     F .text	00000044 check_mm_if_busy
0005b1c0 g     O .rwdata	00000002 OSDataSize
0005cd95 g     O .bss	00000001 OSRunning
00049bc0 g     F .text	0000015c memmove
00058b5c g     F .text	00000020 OSInitHookBegin
0005b1b8 g     O .rwdata	00000002 OSTmrSize
00045208 g     F .text	00000018 _cleanup
00046624 g     F .text	000000a8 _Balloc
0005cd98 g     O .bss	00000004 OSIdleCtr
0004c698 g     F .text	000000dc .hidden __gtdf2
00058864 g     F .text	00000024 altera_nios2_gen2_irq_init
00058934 g       .text	00000000 OSStartTsk
00050850 g     F .text	000002d4 OS_TCBInit
00040000 g     F .entry	0000000c __reset
0005cd44 g     O .bss	00000004 edge_capture
0005b1be g     O .rwdata	00000002 OSTmrWheelTblSize
00040020 g       *ABS*	00000000 __flash_exceptions_start
0005b15e g     O .rwdata	00000002 OSEventSize
0005cd9c g     O .bss	00000001 OSPrioHighRdy
000495e8 g     F .text	0000005c _fstat_r
00058ad8 g     F .text	00000024 OSTaskDelHook
0005cd6c g     O .bss	00000004 errno
000477f8 g     F .text	00000008 __seofread
00058914 g       .text	00000000 OSStartHighRdy
000557f0 g     F .text	000001e4 OSTaskCreateExt
00051b38 g     F .text	00000060 OSFlagPendGetFlagsRdy
0005b19e g     O .rwdata	00000002 OSTaskStatStkSize
00050cb4 g     F .text	00000308 OSFlagAccept
00053b5c g     F .text	000000b8 OSQFlush
000535f0 g     F .text	00000140 OSQAccept
0005cd7c g     O .bss	00000004 alt_argv
0006310c g       *ABS*	00000000 _gp
00055644 g     F .text	000001ac OSTaskCreate
00055154 g     F .text	000004f0 OSTaskChangePrio
0005cd90 g     O .bss	00000004 alt_heapsem
00050b24 g     F .text	00000190 OSDebugInit
000559d4 g     F .text	00000344 OSTaskDel
00059f20 g     O .rwdata	00000180 alt_fd_list
00060f18 g     O .bss	00000370 OSFlagTbl
0004fdfc g     F .text	000000b8 OS_EventTaskRemove
00058be0 g     F .text	00000090 alt_find_dev
000463b4 g     F .text	00000148 memcpy
0005b188 g     O .rwdata	00000002 OSRdyTblSize
00044ec8 g     F .text	0000000c _cleanup_r
0004da50 g     F .text	000000dc .hidden __floatsidf
000583c0 g     F .text	0000007c alt_io_redirect
0004c774 g     F .text	000000f4 .hidden __ltdf2
00059200 g       *ABS*	00000000 __DTOR_END__
00058240 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004eb10 g     F .text	00000120 OSEventNameGet
0005b16c g     O .rwdata	00000002 OSFlagMax
000476dc g     F .text	00000074 __fpclassifyd
000474c0 g     F .text	000000a4 __ratio
0004f424 g     F .text	000000f8 OSIntExit
00049074 g     F .text	0000001c __vfiprintf_internal
0005b1a6 g     O .rwdata	00000002 OSTCBSize
0005cd9d g     O .bss	00000001 OSPrioCur
0005764c g     F .text	000002bc altera_avalon_jtag_uart_read
00040df4 g     F .text	00000030 _printf_r
0004b2d8 g     F .text	00000064 .hidden __udivsi3
0004e0e4 g     F .text	000000ac isatty
0005b18c g     O .rwdata	00000002 OSStkWidth
0005941c g     O .rodata	000000c8 __mprec_tens
0005b180 g     O .rwdata	00000002 OSPtrSize
000458a8 g     F .text	0000000c __locale_charset
0005b160 g     O .rwdata	00000002 OSEventTblSize
0005cd48 g     O .bss	00000004 key1_sem
00058888 g       .text	00000000 OSCtxSw
0005cd68 g     O .bss	00000004 __malloc_top_pad
0005cda0 g     O .bss	00000004 OSTCBList
0005cd70 g     O .bss	00000004 alt_fd_list_lock
0005b118 g     O .rwdata	00000004 __mb_cur_max
000458d8 g     F .text	0000000c _localeconv_r
00049644 g     F .text	000004c8 __sfvwrite_r
00046a58 g     F .text	0000003c __i2b
00061288 g     O .bss	00000c30 OSMemTbl
0005cda4 g     O .bss	00000001 OSTickStepState
00047750 g     F .text	00000054 _sbrk_r
0005ce18 g     O .bss	00002000 task_accel_stk
0005b184 g     O .rwdata	00000002 OSQMax
00061eb8 g     O .bss	00000800 OSTaskStatStk
00053154 g     F .text	000000f0 OSMemNameGet
0005b164 g     O .rwdata	00000002 OSFlagEn
00049d1c g     F .text	00000060 _read_r
0005b1aa g     O .rwdata	00000002 OSTimeTickHookEn
0005400c g     F .text	00000168 OSQPost
00052324 g     F .text	000000a4 OS_FlagUnlink
0005b138 g     O .rwdata	00000004 alt_max_fd
000503e8 g     F .text	00000068 OS_MemCopy
00050450 g     F .text	000000d0 OS_Sched
000492dc g     F .text	000000f0 _fclose_r
00053064 g     F .text	000000f0 OSMemGet
00052d80 g     F .text	00000110 OSMboxQuery
00056000 g     F .text	000001b4 OSTaskNameSet
00044e90 g     F .text	00000030 fflush
0005cd64 g     O .bss	00000004 __malloc_max_sbrked_mem
0005cda8 g     O .bss	00000004 OSCtxSwCtr
00058b3c g     F .text	00000020 OSTimeTickHook
0005b16e g     O .rwdata	00000002 OSFlagNameSize
00040c80 g     F .text	00000110 .hidden __extendsfdf2
0004feb4 g     F .text	00000100 OS_EventTaskRemoveMulti
0004b394 g     F .text	000008ac .hidden __adddf3
0004fcac g     F .text	00000150 OS_EventTaskWaitMulti
00047268 g     F .text	0000010c __b2d
0005b186 g     O .rwdata	00000002 OSQSize
0004ac1c g     F .text	000005c4 .hidden __umoddi3
0004e2b8 g     F .text	000000dc lseek
00054abc g     F .text	0000020c OSSemPend
0005b110 g     O .rwdata	00000004 _global_impure_ptr
0005ee18 g     O .bss	00002000 task_interrupt_stk
00049d7c g     F .text	00000564 _realloc_r
0005b170 g     O .rwdata	00000002 OSLowestPrio
0006413c g       *ABS*	00000000 __bss_end
0004dfb8 g     F .text	000000f0 alt_iic_isr_register
00058bbc g     F .text	00000024 OSTCBInitHook
0005b1b6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0005875c g     F .text	00000108 alt_tick
00052b14 g     F .text	00000110 OSMboxPost
0004a620 g     F .text	000005fc .hidden __udivdi3
00049544 g     F .text	00000024 _fputwc_r
0005b158 g     O .rwdata	00000002 OSEventEn
000593f4 g     O .rodata	00000028 __mprec_bigtens
0004683c g     F .text	00000104 __s2b
0005b1b2 g     O .rwdata	00000002 OSTmrCfgNameSize
0004db2c g     F .text	000000a8 .hidden __floatunsidf
00046fa8 g     F .text	00000060 __mcmp
00045240 g     F .text	00000018 __fp_lock_all
0004df6c g     F .text	0000004c alt_ic_irq_enabled
00052150 g     F .text	000000e0 OS_FlagInit
000586c0 g     F .text	0000009c alt_alarm_stop
0005b194 g     O .rwdata	00000002 OSTaskIdleStkSize
0005cd74 g     O .bss	00000004 alt_irq_active
000546f4 g     F .text	000000b0 OSSemAccept
00053358 g     F .text	000000d8 OSMemPut
00052e90 g     F .text	000001d4 OSMemCreate
0005cdac g     O .bss	00000004 OSIdleCtrMax
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400fc g     F .exceptions	000000d4 alt_irq_handler
00059ef8 g     O .rwdata	00000028 alt_dev_null
0005b1a8 g     O .rwdata	00000002 OSTicksPerSec
00058888 g       .text	00000000 OSIntCtxSw
00058060 g     F .text	00000020 alt_dcache_flush_all
00046940 g     F .text	00000068 __hi0bits
0004d9d0 g     F .text	00000080 .hidden __fixdfsi
0005cdb0 g     O .bss	00000004 OSTCBFreeList
0005b1cc g       *ABS*	00000000 __ram_rwdata_end
00054cc8 g     F .text	0000016c OSSemPendAbort
0005b130 g     O .rwdata	00000008 alt_dev_list
00057d04 g     F .text	00000098 write_to_i2c_device
0004e700 g     F .text	00000100 write
0005cd4c g     O .bss	00000004 msg_box
0005b1ac g     O .rwdata	00000002 OSVersionNbr
00059654 g       *ABS*	00000000 __ram_rodata_end
0004dd50 g     F .text	000000b8 fstat
0004c774 g     F .text	000000f4 .hidden __ledf2
0005b154 g     O .rwdata	00000004 OSEndiannessTest
00046d20 g     F .text	00000140 __pow5mult
00047b68 g     F .text	0000150c ___vfiprintf_internal_r
0005cd5c g     O .bss	00000004 __nlocale_changed
0004b33c g     F .text	00000058 .hidden __umodsi3
0005b166 g     O .rwdata	00000002 OSFlagGrpSize
0006413c g       *ABS*	00000000 end
000403f4 g     F .text	0000023c task_accel
00057004 g     F .text	00000148 altera_avalon_jtag_uart_init
000506b8 g     F .text	000000cc OS_TaskStat
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00059200 g       *ABS*	00000000 __CTOR_LIST__
00065800 g       *ABS*	00000000 __alt_stack_pointer
00057c44 g     F .text	0000007c alt_avalon_timer_sc_init
00040d90 g     F .text	00000064 .hidden __clzsi2
00057908 g     F .text	000002c4 altera_avalon_jtag_uart_write
00045230 g     F .text	00000004 __sfp_lock_acquire
000462d0 g     F .text	000000e4 memchr
00050394 g     F .text	00000054 OS_MemClr
00040e60 g     F .text	000022dc ___vfprintf_internal_r
00058958 g     F .text	0000015c OSTaskStkInit
00045394 g     F .text	00000310 _free_r
000458b4 g     F .text	00000010 __locale_mb_cur_max
0004fa04 g     F .text	00000198 OS_EventTaskRdy
0005904c g     F .text	00000180 __call_exitprocs
0005cdb4 g     O .bss	00000001 OSCPUUsage
0005cd58 g     O .bss	00000004 __mlocale_changed
0005b11c g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
0005cde8 g     O .bss	00000004 _alt_tick_rate
00053c14 g     F .text	0000028c OSQPend
000568c0 g     F .text	00000104 OSTimeDly
00046e60 g     F .text	00000148 __lshift
0005cdec g     O .bss	00000004 _alt_nticks
0004e48c g     F .text	00000104 read
00056e3c g     F .text	00000064 alt_sys_init
00040b5c g     F .text	00000124 .hidden __floatsisf
00058f34 g     F .text	00000118 __register_exitproc
0005cdb5 g     O .bss	00000001 OSTaskCtr
000569c4 g     F .text	0000017c OSTimeDlyHMSM
00046a94 g     F .text	0000028c __multiply
000574f4 g     F .text	00000068 altera_avalon_jtag_uart_close
00040704 g     F .text	00000028 .hidden __mulsi3
00059654 g       *ABS*	00000000 __ram_rwdata_start
00059200 g       *ABS*	00000000 __ram_rodata_start
0005cdf0 g     O .bss	00000028 __malloc_current_mallinfo
0005b15a g     O .rwdata	00000002 OSEventMax
00047374 g     F .text	0000014c __d2b
00054e34 g     F .text	00000110 OSSemPost
0004f5a8 g     F .text	000000dc OSSchedUnlock
00056ea0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00058d78 g     F .text	000000f4 alt_get_fd
0005cdb8 g     O .bss	00000004 OSMemFreeList
0004f6f4 g     F .text	000000b0 OSStatInit
00051f2c g     F .text	000000c4 OSFlagQuery
0005b190 g     O .rwdata	00000002 OSTaskCreateExtEn
000491ac g     F .text	00000054 _close_r
00058eb8 g     F .text	0000007c memcmp
0004f9e4 g     F .text	00000020 OS_Dummy
00056f60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0006413c g       *ABS*	00000000 __alt_stack_base
00056fb0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00043214 g     F .text	00000154 __swsetup_r
000626b8 g     O .bss	000001e0 OSQTbl
0004bc40 g     F .text	000009d0 .hidden __divdf3
000450f0 g     F .text	00000118 __sfp
000475d8 g     F .text	00000078 __copybits
00059af0 g     O .rwdata	00000408 __malloc_av_
0004523c g     F .text	00000004 __sinit_lock_release
0005cdbc g     O .bss	00000004 OSTCBHighRdy
0004c868 g     F .text	0000086c .hidden __muldf3
000477a4 g     F .text	00000054 __sread
0005cdc0 g     O .bss	00000004 OSQFreeList
00058c70 g     F .text	00000108 alt_find_file
000580bc g     F .text	000000a4 alt_dev_llist_insert
0004e924 g     F .text	00000120 __malloc_lock
0004e614 g     F .text	000000b0 sbrk
0004ec30 g     F .text	00000140 OSEventNameSet
00044e34 g     F .text	0000005c _fflush_r
00049200 g     F .text	000000dc _calloc_r
0005cdc4 g     O .bss	00000001 OSRdyGrp
0005cd44 g       *ABS*	00000000 __bss_start
000464fc g     F .text	00000128 memset
00040630 g     F .text	000000d4 main
0005cd80 g     O .bss	00000004 alt_envp
0005cd60 g     O .bss	00000004 __malloc_max_total_mem
00056f00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004a420 g     F .text	00000018 __swbuf
00059520 g     O .rodata	00000100 OSUnMapTbl
0005b18a g     O .rwdata	00000002 OSSemEn
00051b98 g     F .text	00000394 OSFlagPost
000478d8 g     F .text	00000008 __sclose
00065800 g       *ABS*	00000000 __alt_heap_limit
000493cc g     F .text	00000014 fclose
0004fb9c g     F .text	00000110 OS_EventTaskWait
00050784 g     F .text	000000cc OS_TaskStatStkChk
00055d18 g     F .text	00000150 OSTaskDelReq
00043590 g     F .text	00001688 _dtoa_r
00045ac4 g     F .text	0000080c _malloc_r
0004a594 g     F .text	00000030 __ascii_wctomb
0005b13c g     O .rwdata	00000004 alt_errno
0004f684 g     F .text	00000070 OSStart
0004e8c4 g     F .text	00000060 __env_unlock
000456a4 g     F .text	000000c4 _fwalk
000561b4 g     F .text	000001d4 OSTaskResume
00053430 g     F .text	000000e8 OSMemQuery
0005b19c g     O .rwdata	00000002 OSTaskStatEn
0005b176 g     O .rwdata	00000002 OSMemMax
00054174 g     F .text	00000170 OSQPostFront
0004b1e0 g     F .text	00000084 .hidden __divsi3
0005cdc5 g     O .bss	00000003 OSRdyTbl
0005b150 g     O .rwdata	00000002 OSDebugEn
00045270 g     F .text	00000124 _malloc_trim_r
00059200 g       *ABS*	00000000 __CTOR_END__
0004072c g     F .text	00000430 .hidden __mulsf3
0005b168 g     O .rwdata	00000002 OSFlagNodeSize
0005b10c g     O .rwdata	00000001 adxl_addr
0005b1b0 g     O .rwdata	00000002 OSTmrCfgMax
000478e0 g     F .text	000000dc strcmp
00053730 g     F .text	000001ac OSQCreate
00055e68 g     F .text	00000198 OSTaskNameGet
00059200 g       *ABS*	00000000 __flash_rodata_start
000542e4 g     F .text	0000020c OSQPostOpt
0004f7a4 g     F .text	00000220 OSTimeTick
0005b198 g     O .rwdata	00000002 OSTaskMax
00059200 g       *ABS*	00000000 __DTOR_LIST__
000547a4 g     F .text	000000d8 OSSemCreate
0005b1bc g     O .rwdata	00000002 OSTmrWheelSize
0004c610 g     F .text	00000088 .hidden __nedf2
0005b192 g     O .rwdata	00000002 OSTaskDelEn
00054f44 g     F .text	00000110 OSSemQuery
000538dc g     F .text	00000280 OSQDel
00053ea0 g     F .text	0000016c OSQPendAbort
00056e04 g     F .text	00000038 alt_irq_init
0004e590 g     F .text	00000084 alt_release_fd
00059239 g     O .rodata	00000100 .hidden __clz_tab
0005cd54 g     O .bss	00000004 _PathLocale
00058e6c g     F .text	00000014 atexit
0004914c g     F .text	00000060 _write_r
0004f51c g     F .text	0000008c OSSchedLock
000458e4 g     F .text	00000018 setlocale
00050fbc g     F .text	00000108 OSFlagCreate
0005b114 g     O .rwdata	00000004 _impure_ptr
0005cd78 g     O .bss	00000004 alt_argc
00044c18 g     F .text	0000021c __sflush_r
000581c0 g     F .text	00000060 _do_dtors
000458d0 g     F .text	00000008 __locale_cjk_lang
0005b162 g     O .rwdata	00000002 OSEventMultiEn
0004033c g     F .text	000000b8 task_interrupt
000510c4 g     F .text	00000248 OSFlagDel
0005cdc8 g     O .bss	00000004 OSEventFreeList
000529a8 g     F .text	0000016c OSMboxPendAbort
00040020 g       .exceptions	00000000 alt_irq_entry
00047204 g     F .text	00000064 __ulp
00051580 g     F .text	000005b8 OSFlagPend
0005b1ae g     O .rwdata	00000002 OSTmrEn
00045258 g     F .text	00000018 __fp_unlock_all
0005b128 g     O .rwdata	00000008 alt_fs_list
00050594 g     F .text	00000074 OS_StrCopy
0005b178 g     O .rwdata	00000002 OSMemNameSize
00058b7c g     F .text	00000020 OSInitHookEnd
00040020 g       *ABS*	00000000 __ram_exceptions_start
0005b1a4 g     O .rwdata	00000002 OSTCBPrioTblMax
000458fc g     F .text	0000000c localeconv
0005b1a0 g     O .rwdata	00000002 OSTaskStatStkChkEn
00052460 g     F .text	000000d4 OSMboxCreate
0004de08 g     F .text	00000050 alt_ic_isr_register
0005b174 g     O .rwdata	00000002 OSMemEn
0005b17e g     O .rwdata	00000002 OSMutexEn
0005b1cc g       *ABS*	00000000 _edata
0006413c g       *ABS*	00000000 _end
0005cdcc g     O .bss	00000001 OSIntNesting
000493e0 g     F .text	00000164 __fputwc
00040230 g       *ABS*	00000000 __ram_exceptions_end
0005755c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00056b40 g     F .text	000001d4 OSTimeDlyResume
00051434 g     F .text	0000014c OSFlagNameSet
00052774 g     F .text	00000234 OSMboxPend
0005cd50 g     O .bss	00000004 shared_jtag_sem
00056388 g     F .text	000001c0 OSTaskStkChk
0004dee0 g     F .text	0000008c alt_ic_irq_disable
0005b17a g     O .rwdata	00000002 OSMemSize
00047800 g     F .text	0000007c __swrite
0005b120 g     O .rwdata	00000004 __malloc_trim_threshold
000458c4 g     F .text	0000000c __locale_msgcharset
0005cdd0 g     O .bss	00000004 OSTCBCur
00058e80 g     F .text	00000038 exit
0005b17c g     O .rwdata	00000002 OSMemTblSize
00045768 g     F .text	000000c4 _fwalk_reent
00047008 g     F .text	000001fc __mdiff
0004b264 g     F .text	00000074 .hidden __modsi3
000523c8 g     F .text	00000098 OSMboxAccept
00065800 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00045234 g     F .text	00000004 __sfp_lock_release
0004f380 g     F .text	00000058 OSInit
0005672c g     F .text	00000124 OSTaskQuery
0005464c g     F .text	000000a8 OS_QInit
00050608 g     F .text	00000054 OS_StrLen
00053244 g     F .text	00000114 OSMemNameSet
0005b196 g     O .rwdata	00000002 OSTaskProfileEn
0005cdd4 g     O .bss	00000004 OSTime
00062898 g     O .bss	00000800 OSTaskIdleStk
000591cc g     F .text	00000034 _exit
00052c24 g     F .text	0000015c OSMboxPostOpt
00057f34 g     F .text	0000012c alt_alarm_start
0005130c g     F .text	00000128 OSFlagNameGet
00056d14 g     F .text	0000005c OSTimeGet
00045908 g     F .text	000001bc __smakebuf_r
000479bc g     F .text	00000098 strlen
00058afc g     F .text	00000020 OSTaskSwHook
00058564 g     F .text	0000015c open
00063098 g     O .bss	00000b40 OSEventTbl
0004c698 g     F .text	000000dc .hidden __gedf2
00063bd8 g     O .bss	00000510 OSTCBTbl
00055054 g     F .text	00000100 OSSemSet
0005b124 g     O .rwdata	00000004 __wctomb
00047b50 g     F .text	00000018 __sprint_r
00058220 g     F .text	00000020 alt_icache_flush_all
0005b140 g     O .rwdata	00000004 alt_priority_mask
0005487c g     F .text	00000240 OSSemDel
0005cdd8 g     O .bss	00000004 OSFlagFreeList
0004de58 g     F .text	00000088 alt_ic_irq_enable
0005b15c g     O .rwdata	00000002 OSEventNameSize
00052534 g     F .text	00000240 OSMboxDel
0004313c g     F .text	0000001c __vfprintf_internal
0005cddc g     O .bss	00000001 OSStatRdy
000640e8 g     O .bss	00000054 OSTCBPrioTbl
0004a5c4 g     F .text	0000005c _wctomb_r
0004e800 g     F .text	000000c4 __env_lock
0005b1a2 g     O .rwdata	00000002 OSTaskSwHookEn
0004d0d4 g     F .text	000008fc .hidden __subdf3
000469a8 g     F .text	000000b0 __lo0bits
0005b1c4 g     O .rwdata	00000008 alt_alarm_list
0005b16a g     O .rwdata	00000002 OSFlagWidth
00058160 g     F .text	00000060 _do_ctors
0004a4d4 g     F .text	000000c0 wcrtomb
0004dc10 g     F .text	000000d8 close
0005cd88 g     O .bss	00000004 alt_envsem
0005cde0 g     O .bss	00000004 OSIdleCtrRun
0004f9c4 g     F .text	00000020 OSVersion
0005b1b4 g     O .rwdata	00000002 OSTmrCfgWheelSize
0004e1f8 g     F .text	00000084 alt_load
00056850 g     F .text	00000070 OS_TaskStkClr
0005b18e g     O .rwdata	00000002 OSTaskCreateEn
0004ffb4 g     F .text	00000068 OS_EventWaitListInit
00049568 g     F .text	00000080 fputwc
00058b9c g     F .text	00000020 OSTaskIdleHook
00045238 g     F .text	00000004 __sinit_lock_acquire
000466f4 g     F .text	00000148 __multadd
00056548 g     F .text	000001e4 OSTaskSuspend
000466cc g     F .text	00000028 _Bfree
0005065c g     F .text	0000005c OS_TaskIdle
0005b1ba g     O .rwdata	00000002 OSTmrTblSize
000544f0 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	004f3d80 	call	4f3d8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10838604 	addi	r2,r2,3608
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10838604 	addi	r2,r2,3608
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffda92c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffda920>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	004f4240 	call	4f424 <OSIntExit>
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a73617 	ldw	r2,-25384(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a73617 	ldw	r2,-25384(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	ded60014 	ori	sp,sp,22528
    movhi gp, %hi(_gp)
   40238:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   4023c:	d68c4314 	ori	gp,gp,12556
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40244:	10b35114 	ori	r2,r2,52548

    movhi r3, %hi(__bss_end)
   40248:	00c001b4 	movhi	r3,6
    ori r3, r3, %lo(__bss_end)
   4024c:	18d04f14 	ori	r3,r3,16700

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffdaa54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	004e1f80 	call	4e1f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	004e3940 	call	4e394 <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffdaa68>

0004026c <handle_interrupts>:



//ISR that will be called when the system signals an interrupt.
static void handle_interrupts(void* context)
{
   4026c:	defffc04 	addi	sp,sp,-16
   40270:	dfc00315 	stw	ra,12(sp)
   40274:	df000215 	stw	fp,8(sp)
   40278:	df000204 	addi	fp,sp,8
   4027c:	e13fff15 	stw	r4,-4(fp)
	//Cast context to edge_capture's type, volatile to avoid compiler optimization
	volatile int* edge_capture_ptr = (volatile int*) context;
   40280:	e0bfff17 	ldw	r2,-4(fp)
   40284:	e0bffe15 	stw	r2,-8(fp)
	//read capture register on the pio and store the value
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_PIO_BASE);
   40288:	00800234 	movhi	r2,8
   4028c:	10841304 	addi	r2,r2,4172
   40290:	10c00037 	ldwio	r3,0(r2)
   40294:	e0bffe17 	ldw	r2,-8(fp)
   40298:	10c00015 	stw	r3,0(r2)
	//Write to edge capture register and reset it
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_PIO_BASE,0);
   4029c:	0007883a 	mov	r3,zero
   402a0:	00800234 	movhi	r2,8
   402a4:	10841304 	addi	r2,r2,4172
   402a8:	10c00035 	stwio	r3,0(r2)

	//Post interrupt semaphore
	OSSemPost(key1_sem);
   402ac:	d0a70f17 	ldw	r2,-25540(gp)
   402b0:	1009883a 	mov	r4,r2
   402b4:	0054e340 	call	54e34 <OSSemPost>

}
   402b8:	0001883a 	nop
   402bc:	e037883a 	mov	sp,fp
   402c0:	dfc00117 	ldw	ra,4(sp)
   402c4:	df000017 	ldw	fp,0(sp)
   402c8:	dec00204 	addi	sp,sp,8
   402cc:	f800283a 	ret

000402d0 <init_interrupt_pio>:

//initializes and registers the interrupt handler
static void init_interrupt_pio()
{
   402d0:	defffc04 	addi	sp,sp,-16
   402d4:	dfc00315 	stw	ra,12(sp)
   402d8:	df000215 	stw	fp,8(sp)
   402dc:	df000204 	addi	fp,sp,8
	//recast the edge_capture point to match the alt_irq_register() function
	void* edge_capture_ptr = (void*)&edge_capture;
   402e0:	d0a70e04 	addi	r2,gp,-25544
   402e4:	e0bfff15 	stw	r2,-4(fp)

	//Enable all 3 interrupt inputs
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INTERRUPT_PIO_BASE,0x7);
   402e8:	00c001c4 	movi	r3,7
   402ec:	00800234 	movhi	r2,8
   402f0:	10841204 	addi	r2,r2,4168
   402f4:	10c00035 	stwio	r3,0(r2)

	//Reset the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_PIO_BASE,0);
   402f8:	0007883a 	mov	r3,zero
   402fc:	00800234 	movhi	r2,8
   40300:	10841304 	addi	r2,r2,4172
   40304:	10c00035 	stwio	r3,0(r2)

	//Register the interrupt handler
	alt_ic_isr_register(INTERRUPT_PIO_IRQ_INTERRUPT_CONTROLLER_ID, INTERRUPT_PIO_IRQ, handle_interrupts, edge_capture_ptr,0x0);
   40308:	d8000015 	stw	zero,0(sp)
   4030c:	e1ffff17 	ldw	r7,-4(fp)
   40310:	01800134 	movhi	r6,4
   40314:	31809b04 	addi	r6,r6,620
   40318:	000b883a 	mov	r5,zero
   4031c:	0009883a 	mov	r4,zero
   40320:	004de080 	call	4de08 <alt_ic_isr_register>
}
   40324:	0001883a 	nop
   40328:	e037883a 	mov	sp,fp
   4032c:	dfc00117 	ldw	ra,4(sp)
   40330:	df000017 	ldw	fp,0(sp)
   40334:	dec00204 	addi	sp,sp,8
   40338:	f800283a 	ret

0004033c <task_interrupt>:

//task for interrupt handeling
void task_interrupt(void* pdata)
{
   4033c:	defffb04 	addi	sp,sp,-20
   40340:	dfc00415 	stw	ra,16(sp)
   40344:	df000315 	stw	fp,12(sp)
   40348:	df000304 	addi	fp,sp,12
   4034c:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code = OS_NO_ERR;
   40350:	e03ffe05 	stb	zero,-8(fp)
	INT16U timeout;

	int sw_data = 0;
   40354:	e03ffd15 	stw	zero,-12(fp)
	while (1)
	{
		OSSemPend(key1_sem,0,&error_code);
   40358:	d0a70f17 	ldw	r2,-25540(gp)
   4035c:	e0fffe04 	addi	r3,fp,-8
   40360:	180d883a 	mov	r6,r3
   40364:	000b883a 	mov	r5,zero
   40368:	1009883a 	mov	r4,r2
   4036c:	0054abc0 	call	54abc <OSSemPend>
		//read position of slide switches and calculate new timeout value
		sw_data = IORD(SW_PIO_BASE,0);
   40370:	00800234 	movhi	r2,8
   40374:	10841404 	addi	r2,r2,4176
   40378:	10800037 	ldwio	r2,0(r2)
   4037c:	e0bffd15 	stw	r2,-12(fp)
		IOWR(LED_PIO_BASE,0,sw_data);
   40380:	00800234 	movhi	r2,8
   40384:	10841804 	addi	r2,r2,4192
   40388:	e0fffd17 	ldw	r3,-12(fp)
   4038c:	10c00035 	stwio	r3,0(r2)
		timeout = sw_data*50;
   40390:	e0bffd17 	ldw	r2,-12(fp)
   40394:	01400c84 	movi	r5,50
   40398:	1009883a 	mov	r4,r2
   4039c:	00407040 	call	40704 <__mulsi3>
   403a0:	e0bffe8d 	sth	r2,-6(fp)
		OSMboxPost(msg_box, (void*)&timeout);
   403a4:	d0a71017 	ldw	r2,-25536(gp)
   403a8:	e0fffe84 	addi	r3,fp,-6
   403ac:	180b883a 	mov	r5,r3
   403b0:	1009883a 	mov	r4,r2
   403b4:	0052b140 	call	52b14 <OSMboxPost>



		OSSemPend(shared_jtag_sem,0,&error_code);
   403b8:	d0a71117 	ldw	r2,-25532(gp)
   403bc:	e0fffe04 	addi	r3,fp,-8
   403c0:	180d883a 	mov	r6,r3
   403c4:	000b883a 	mov	r5,zero
   403c8:	1009883a 	mov	r4,r2
   403cc:	0054abc0 	call	54abc <OSSemPend>

		printf("Interrupt value %d\n",edge_capture);
   403d0:	d0a70e17 	ldw	r2,-25544(gp)
   403d4:	100b883a 	mov	r5,r2
   403d8:	010001b4 	movhi	r4,6
   403dc:	21248004 	addi	r4,r4,-28160
   403e0:	0040e240 	call	40e24 <printf>

		OSSemPost(shared_jtag_sem);
   403e4:	d0a71117 	ldw	r2,-25532(gp)
   403e8:	1009883a 	mov	r4,r2
   403ec:	0054e340 	call	54e34 <OSSemPost>



	}
   403f0:	003fd906 	br	40358 <__alt_data_end+0xfffdab58>

000403f4 <task_accel>:
}

//Task for reading adxl345 values
void task_accel(void* pdata)
{
   403f4:	defff304 	addi	sp,sp,-52
   403f8:	dfc00c15 	stw	ra,48(sp)
   403fc:	df000b15 	stw	fp,44(sp)
   40400:	df000b04 	addi	fp,sp,44
   40404:	e13fff15 	stw	r4,-4(fp)
	INT16U timeout = 100;
   40408:	00801904 	movi	r2,100
   4040c:	e0bff50d 	sth	r2,-44(fp)
	INT16U *msg_rx;
	INT8U error_code = OS_NO_ERR;
   40410:	e03ffd05 	stb	zero,-12(fp)

	alt_16 ax, ay,az;
	float axf, ayf, azf;
	float scale = 1.0/256; //1g/lsb
   40414:	008ee034 	movhi	r2,15232
   40418:	e0bff615 	stw	r2,-40(fp)
	alt_u8 data[6] = {0};
   4041c:	e03ffd45 	stb	zero,-11(fp)
   40420:	e03ffd85 	stb	zero,-10(fp)
   40424:	e03ffdc5 	stb	zero,-9(fp)
   40428:	e03ffe05 	stb	zero,-8(fp)
   4042c:	e03ffe45 	stb	zero,-7(fp)
   40430:	e03ffe85 	stb	zero,-6(fp)

	//wake up adxl345
	write_to_i2c_device(adxl_addr,0x2d,1,0x8);
   40434:	008014c4 	movi	r2,83
   40438:	10803fcc 	andi	r2,r2,255
   4043c:	01c00204 	movi	r7,8
   40440:	01800044 	movi	r6,1
   40444:	01400b44 	movi	r5,45
   40448:	1009883a 	mov	r4,r2
   4044c:	0057d040 	call	57d04 <write_to_i2c_device>

	//configure adxl345 device
	alt_u8 set_accel_config = 0x20 | 0x8 | 0x1;
   40450:	00800a44 	movi	r2,41
   40454:	e0bff705 	stb	r2,-36(fp)
	write_to_i2c_device(adxl_addr,0x31,1,set_accel_config);
   40458:	008014c4 	movi	r2,83
   4045c:	10803fcc 	andi	r2,r2,255
   40460:	e0fff703 	ldbu	r3,-36(fp)
   40464:	180f883a 	mov	r7,r3
   40468:	01800044 	movi	r6,1
   4046c:	01400c44 	movi	r5,49
   40470:	1009883a 	mov	r4,r2
   40474:	0057d040 	call	57d04 <write_to_i2c_device>

	while (1)
	{

		read_from_i2c_device(adxl_addr,0x32,6,&data[0]);
   40478:	008014c4 	movi	r2,83
   4047c:	10803fcc 	andi	r2,r2,255
   40480:	e0fffd44 	addi	r3,fp,-11
   40484:	180f883a 	mov	r7,r3
   40488:	01800184 	movi	r6,6
   4048c:	01400c84 	movi	r5,50
   40490:	1009883a 	mov	r4,r2
   40494:	0057d9c0 	call	57d9c <read_from_i2c_device>

		ax = (alt_16)(data[1]<<8|data[0]);
   40498:	e0bffd83 	ldbu	r2,-10(fp)
   4049c:	10803fcc 	andi	r2,r2,255
   404a0:	1004923a 	slli	r2,r2,8
   404a4:	1007883a 	mov	r3,r2
   404a8:	e0bffd43 	ldbu	r2,-11(fp)
   404ac:	10803fcc 	andi	r2,r2,255
   404b0:	1884b03a 	or	r2,r3,r2
   404b4:	e0bff78d 	sth	r2,-34(fp)
		ay = (alt_16)(data[1]<<8|data[2]);
   404b8:	e0bffd83 	ldbu	r2,-10(fp)
   404bc:	10803fcc 	andi	r2,r2,255
   404c0:	1004923a 	slli	r2,r2,8
   404c4:	1007883a 	mov	r3,r2
   404c8:	e0bffdc3 	ldbu	r2,-9(fp)
   404cc:	10803fcc 	andi	r2,r2,255
   404d0:	1884b03a 	or	r2,r3,r2
   404d4:	e0bff80d 	sth	r2,-32(fp)
		az = (alt_16)(data[1]<<8|data[4]);
   404d8:	e0bffd83 	ldbu	r2,-10(fp)
   404dc:	10803fcc 	andi	r2,r2,255
   404e0:	1004923a 	slli	r2,r2,8
   404e4:	1007883a 	mov	r3,r2
   404e8:	e0bffe43 	ldbu	r2,-7(fp)
   404ec:	10803fcc 	andi	r2,r2,255
   404f0:	1884b03a 	or	r2,r3,r2
   404f4:	e0bff88d 	sth	r2,-30(fp)

		axf = ax*scale;
   404f8:	e0bff78f 	ldh	r2,-34(fp)
   404fc:	1009883a 	mov	r4,r2
   40500:	0040b5c0 	call	40b5c <__floatsisf>
   40504:	1007883a 	mov	r3,r2
   40508:	e17ff617 	ldw	r5,-40(fp)
   4050c:	1809883a 	mov	r4,r3
   40510:	004072c0 	call	4072c <__mulsf3>
   40514:	1007883a 	mov	r3,r2
   40518:	e0fff915 	stw	r3,-28(fp)
		ayf = ay*scale;
   4051c:	e0bff80f 	ldh	r2,-32(fp)
   40520:	1009883a 	mov	r4,r2
   40524:	0040b5c0 	call	40b5c <__floatsisf>
   40528:	1007883a 	mov	r3,r2
   4052c:	e17ff617 	ldw	r5,-40(fp)
   40530:	1809883a 	mov	r4,r3
   40534:	004072c0 	call	4072c <__mulsf3>
   40538:	1007883a 	mov	r3,r2
   4053c:	e0fffa15 	stw	r3,-24(fp)
		azf = az*scale;
   40540:	e0bff88f 	ldh	r2,-30(fp)
   40544:	1009883a 	mov	r4,r2
   40548:	0040b5c0 	call	40b5c <__floatsisf>
   4054c:	1007883a 	mov	r3,r2
   40550:	e17ff617 	ldw	r5,-40(fp)
   40554:	1809883a 	mov	r4,r3
   40558:	004072c0 	call	4072c <__mulsf3>
   4055c:	1007883a 	mov	r3,r2
   40560:	e0fffb15 	stw	r3,-20(fp)

		msg_rx = (INT16U*)OSMboxPend(msg_box,timeout,&error_code);
   40564:	d0a71017 	ldw	r2,-25536(gp)
   40568:	e0fff50b 	ldhu	r3,-44(fp)
   4056c:	e13ffd04 	addi	r4,fp,-12
   40570:	200d883a 	mov	r6,r4
   40574:	180b883a 	mov	r5,r3
   40578:	1009883a 	mov	r4,r2
   4057c:	00527740 	call	52774 <OSMboxPend>
   40580:	e0bffc15 	stw	r2,-16(fp)
		if(error_code == OS_NO_ERR)
   40584:	e0bffd03 	ldbu	r2,-12(fp)
   40588:	10803fcc 	andi	r2,r2,255
   4058c:	1000031e 	bne	r2,zero,4059c <task_accel+0x1a8>
		{
			timeout = *msg_rx;
   40590:	e0bffc17 	ldw	r2,-16(fp)
   40594:	1080000b 	ldhu	r2,0(r2)
   40598:	e0bff50d 	sth	r2,-44(fp)


		}
		OSSemPend(shared_jtag_sem,0,&error_code);
   4059c:	d0a71117 	ldw	r2,-25532(gp)
   405a0:	e0fffd04 	addi	r3,fp,-12
   405a4:	180d883a 	mov	r6,r3
   405a8:	000b883a 	mov	r5,zero
   405ac:	1009883a 	mov	r4,r2
   405b0:	0054abc0 	call	54abc <OSSemPend>
		printf("ax = %.2f, ",axf);
   405b4:	e13ff917 	ldw	r4,-28(fp)
   405b8:	0040c800 	call	40c80 <__extendsfdf2>
   405bc:	100d883a 	mov	r6,r2
   405c0:	180f883a 	mov	r7,r3
   405c4:	300b883a 	mov	r5,r6
   405c8:	380d883a 	mov	r6,r7
   405cc:	010001b4 	movhi	r4,6
   405d0:	21248504 	addi	r4,r4,-28140
   405d4:	0040e240 	call	40e24 <printf>
		printf("ay = %.2f, ",azf);
   405d8:	e13ffb17 	ldw	r4,-20(fp)
   405dc:	0040c800 	call	40c80 <__extendsfdf2>
   405e0:	100d883a 	mov	r6,r2
   405e4:	180f883a 	mov	r7,r3
   405e8:	300b883a 	mov	r5,r6
   405ec:	380d883a 	mov	r6,r7
   405f0:	010001b4 	movhi	r4,6
   405f4:	21248804 	addi	r4,r4,-28128
   405f8:	0040e240 	call	40e24 <printf>
		printf("az = %.2f\n, ",ayf);
   405fc:	e13ffa17 	ldw	r4,-24(fp)
   40600:	0040c800 	call	40c80 <__extendsfdf2>
   40604:	100d883a 	mov	r6,r2
   40608:	180f883a 	mov	r7,r3
   4060c:	300b883a 	mov	r5,r6
   40610:	380d883a 	mov	r6,r7
   40614:	010001b4 	movhi	r4,6
   40618:	21248b04 	addi	r4,r4,-28116
   4061c:	0040e240 	call	40e24 <printf>
		OSSemPost(shared_jtag_sem);
   40620:	d0a71117 	ldw	r2,-25532(gp)
   40624:	1009883a 	mov	r4,r2
   40628:	0054e340 	call	54e34 <OSSemPost>
	}
   4062c:	003f9206 	br	40478 <__alt_data_end+0xfffdac78>

00040630 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
   40630:	defff904 	addi	sp,sp,-28
   40634:	dfc00615 	stw	ra,24(sp)
   40638:	df000515 	stw	fp,20(sp)
   4063c:	df000504 	addi	fp,sp,20
	//create semaphores and initialize them
	shared_jtag_sem = OSSemCreate(1);
   40640:	01000044 	movi	r4,1
   40644:	00547a40 	call	547a4 <OSSemCreate>
   40648:	d0a71115 	stw	r2,-25532(gp)
	key1_sem = OSSemCreate(0);
   4064c:	0009883a 	mov	r4,zero
   40650:	00547a40 	call	547a4 <OSSemCreate>
   40654:	d0a70f15 	stw	r2,-25540(gp)
	//create an empty mailbox
	msg_box = OSMboxCreate((void*)NULL);
   40658:	0009883a 	mov	r4,zero
   4065c:	00524600 	call	52460 <OSMboxCreate>
   40660:	d0a71015 	stw	r2,-25536(gp)

	init_interrupt_pio();
   40664:	00402d00 	call	402d0 <init_interrupt_pio>
	//initialize the interrupts



	OSTaskCreateExt(task_interrupt,
   40668:	d8000415 	stw	zero,16(sp)
   4066c:	d8000315 	stw	zero,12(sp)
   40670:	00820004 	movi	r2,2048
   40674:	d8800215 	stw	r2,8(sp)
   40678:	008001b4 	movhi	r2,6
   4067c:	10bb8604 	addi	r2,r2,-4584
   40680:	d8800115 	stw	r2,4(sp)
   40684:	00800084 	movi	r2,2
   40688:	d8800015 	stw	r2,0(sp)
   4068c:	01c00084 	movi	r7,2
   40690:	018001b4 	movhi	r6,6
   40694:	31838504 	addi	r6,r6,3604
   40698:	000b883a 	mov	r5,zero
   4069c:	01000134 	movhi	r4,4
   406a0:	2100cf04 	addi	r4,r4,828
   406a4:	00557f00 	call	557f0 <OSTaskCreateExt>
				  TASK_STACKSIZE,
				  NULL,
				  0);


	OSTaskCreateExt(task_accel,
   406a8:	d8000415 	stw	zero,16(sp)
   406ac:	d8000315 	stw	zero,12(sp)
   406b0:	00820004 	movi	r2,2048
   406b4:	d8800215 	stw	r2,8(sp)
   406b8:	008001b4 	movhi	r2,6
   406bc:	10b38604 	addi	r2,r2,-12776
   406c0:	d8800115 	stw	r2,4(sp)
   406c4:	008000c4 	movi	r2,3
   406c8:	d8800015 	stw	r2,0(sp)
   406cc:	01c000c4 	movi	r7,3
   406d0:	018001b4 	movhi	r6,6
   406d4:	31bb8504 	addi	r6,r6,-4588
   406d8:	000b883a 	mov	r5,zero
   406dc:	01000134 	movhi	r4,4
   406e0:	2100fd04 	addi	r4,r4,1012
   406e4:	00557f00 	call	557f0 <OSTaskCreateExt>
				  TASK_ACCEL_PRIORITY,
				  task_accel_stk,
				  TASK_STACKSIZE,
				  NULL,
				  0);
	OSStart();
   406e8:	004f6840 	call	4f684 <OSStart>
	return 0;
   406ec:	0005883a 	mov	r2,zero
}
   406f0:	e037883a 	mov	sp,fp
   406f4:	dfc00117 	ldw	ra,4(sp)
   406f8:	df000017 	ldw	fp,0(sp)
   406fc:	dec00204 	addi	sp,sp,8
   40700:	f800283a 	ret

00040704 <__mulsi3>:
   40704:	0005883a 	mov	r2,zero
   40708:	20000726 	beq	r4,zero,40728 <__mulsi3+0x24>
   4070c:	20c0004c 	andi	r3,r4,1
   40710:	2008d07a 	srli	r4,r4,1
   40714:	18000126 	beq	r3,zero,4071c <__mulsi3+0x18>
   40718:	1145883a 	add	r2,r2,r5
   4071c:	294b883a 	add	r5,r5,r5
   40720:	203ffa1e 	bne	r4,zero,4070c <__alt_data_end+0xfffdaf0c>
   40724:	f800283a 	ret
   40728:	f800283a 	ret

0004072c <__mulsf3>:
   4072c:	defff504 	addi	sp,sp,-44
   40730:	dc000115 	stw	r16,4(sp)
   40734:	2020d5fa 	srli	r16,r4,23
   40738:	dd400615 	stw	r21,24(sp)
   4073c:	202ad7fa 	srli	r21,r4,31
   40740:	dc800315 	stw	r18,12(sp)
   40744:	04802034 	movhi	r18,128
   40748:	df000915 	stw	fp,36(sp)
   4074c:	dd000515 	stw	r20,20(sp)
   40750:	94bfffc4 	addi	r18,r18,-1
   40754:	dfc00a15 	stw	ra,40(sp)
   40758:	ddc00815 	stw	r23,32(sp)
   4075c:	dd800715 	stw	r22,28(sp)
   40760:	dcc00415 	stw	r19,16(sp)
   40764:	dc400215 	stw	r17,8(sp)
   40768:	84003fcc 	andi	r16,r16,255
   4076c:	9124703a 	and	r18,r18,r4
   40770:	a829883a 	mov	r20,r21
   40774:	af003fcc 	andi	fp,r21,255
   40778:	80005426 	beq	r16,zero,408cc <__mulsf3+0x1a0>
   4077c:	00803fc4 	movi	r2,255
   40780:	80802f26 	beq	r16,r2,40840 <__mulsf3+0x114>
   40784:	91002034 	orhi	r4,r18,128
   40788:	202490fa 	slli	r18,r4,3
   4078c:	843fe044 	addi	r16,r16,-127
   40790:	0023883a 	mov	r17,zero
   40794:	002f883a 	mov	r23,zero
   40798:	2804d5fa 	srli	r2,r5,23
   4079c:	282cd7fa 	srli	r22,r5,31
   407a0:	01002034 	movhi	r4,128
   407a4:	213fffc4 	addi	r4,r4,-1
   407a8:	10803fcc 	andi	r2,r2,255
   407ac:	2166703a 	and	r19,r4,r5
   407b0:	b1803fcc 	andi	r6,r22,255
   407b4:	10004c26 	beq	r2,zero,408e8 <__mulsf3+0x1bc>
   407b8:	00c03fc4 	movi	r3,255
   407bc:	10c04726 	beq	r2,r3,408dc <__mulsf3+0x1b0>
   407c0:	99002034 	orhi	r4,r19,128
   407c4:	202690fa 	slli	r19,r4,3
   407c8:	10bfe044 	addi	r2,r2,-127
   407cc:	0007883a 	mov	r3,zero
   407d0:	80a1883a 	add	r16,r16,r2
   407d4:	010003c4 	movi	r4,15
   407d8:	1c44b03a 	or	r2,r3,r17
   407dc:	b56af03a 	xor	r21,r22,r21
   407e0:	81c00044 	addi	r7,r16,1
   407e4:	20806b36 	bltu	r4,r2,40994 <__mulsf3+0x268>
   407e8:	100490ba 	slli	r2,r2,2
   407ec:	01000134 	movhi	r4,4
   407f0:	21020004 	addi	r4,r4,2048
   407f4:	1105883a 	add	r2,r2,r4
   407f8:	10800017 	ldw	r2,0(r2)
   407fc:	1000683a 	jmp	r2
   40800:	00040994 	movui	zero,4134
   40804:	00040854 	movui	zero,4129
   40808:	00040854 	movui	zero,4129
   4080c:	00040850 	cmplti	zero,zero,4129
   40810:	00040978 	rdprs	zero,zero,4133
   40814:	00040978 	rdprs	zero,zero,4133
   40818:	00040964 	muli	zero,zero,4133
   4081c:	00040850 	cmplti	zero,zero,4129
   40820:	00040978 	rdprs	zero,zero,4133
   40824:	00040964 	muli	zero,zero,4133
   40828:	00040978 	rdprs	zero,zero,4133
   4082c:	00040850 	cmplti	zero,zero,4129
   40830:	00040984 	movi	zero,4134
   40834:	00040984 	movi	zero,4134
   40838:	00040984 	movi	zero,4134
   4083c:	00040a94 	movui	zero,4138
   40840:	90003b1e 	bne	r18,zero,40930 <__mulsf3+0x204>
   40844:	04400204 	movi	r17,8
   40848:	05c00084 	movi	r23,2
   4084c:	003fd206 	br	40798 <__alt_data_end+0xfffdaf98>
   40850:	302b883a 	mov	r21,r6
   40854:	00800084 	movi	r2,2
   40858:	18802626 	beq	r3,r2,408f4 <__mulsf3+0x1c8>
   4085c:	008000c4 	movi	r2,3
   40860:	1880b826 	beq	r3,r2,40b44 <__mulsf3+0x418>
   40864:	00800044 	movi	r2,1
   40868:	1880af1e 	bne	r3,r2,40b28 <__mulsf3+0x3fc>
   4086c:	a829883a 	mov	r20,r21
   40870:	0007883a 	mov	r3,zero
   40874:	0009883a 	mov	r4,zero
   40878:	18803fcc 	andi	r2,r3,255
   4087c:	100695fa 	slli	r3,r2,23
   40880:	a0803fcc 	andi	r2,r20,255
   40884:	100a97fa 	slli	r5,r2,31
   40888:	00802034 	movhi	r2,128
   4088c:	10bfffc4 	addi	r2,r2,-1
   40890:	2084703a 	and	r2,r4,r2
   40894:	10c4b03a 	or	r2,r2,r3
   40898:	1144b03a 	or	r2,r2,r5
   4089c:	dfc00a17 	ldw	ra,40(sp)
   408a0:	df000917 	ldw	fp,36(sp)
   408a4:	ddc00817 	ldw	r23,32(sp)
   408a8:	dd800717 	ldw	r22,28(sp)
   408ac:	dd400617 	ldw	r21,24(sp)
   408b0:	dd000517 	ldw	r20,20(sp)
   408b4:	dcc00417 	ldw	r19,16(sp)
   408b8:	dc800317 	ldw	r18,12(sp)
   408bc:	dc400217 	ldw	r17,8(sp)
   408c0:	dc000117 	ldw	r16,4(sp)
   408c4:	dec00b04 	addi	sp,sp,44
   408c8:	f800283a 	ret
   408cc:	90000d1e 	bne	r18,zero,40904 <__mulsf3+0x1d8>
   408d0:	04400104 	movi	r17,4
   408d4:	05c00044 	movi	r23,1
   408d8:	003faf06 	br	40798 <__alt_data_end+0xfffdaf98>
   408dc:	9806c03a 	cmpne	r3,r19,zero
   408e0:	18c00084 	addi	r3,r3,2
   408e4:	003fba06 	br	407d0 <__alt_data_end+0xfffdafd0>
   408e8:	9800141e 	bne	r19,zero,4093c <__mulsf3+0x210>
   408ec:	00c00044 	movi	r3,1
   408f0:	003fb706 	br	407d0 <__alt_data_end+0xfffdafd0>
   408f4:	a829883a 	mov	r20,r21
   408f8:	00ffffc4 	movi	r3,-1
   408fc:	0009883a 	mov	r4,zero
   40900:	003fdd06 	br	40878 <__alt_data_end+0xfffdb078>
   40904:	9009883a 	mov	r4,r18
   40908:	d9400015 	stw	r5,0(sp)
   4090c:	0040d900 	call	40d90 <__clzsi2>
   40910:	10fffec4 	addi	r3,r2,-5
   40914:	10801d84 	addi	r2,r2,118
   40918:	90e4983a 	sll	r18,r18,r3
   4091c:	00a1c83a 	sub	r16,zero,r2
   40920:	0023883a 	mov	r17,zero
   40924:	002f883a 	mov	r23,zero
   40928:	d9400017 	ldw	r5,0(sp)
   4092c:	003f9a06 	br	40798 <__alt_data_end+0xfffdaf98>
   40930:	04400304 	movi	r17,12
   40934:	05c000c4 	movi	r23,3
   40938:	003f9706 	br	40798 <__alt_data_end+0xfffdaf98>
   4093c:	9809883a 	mov	r4,r19
   40940:	d9800015 	stw	r6,0(sp)
   40944:	0040d900 	call	40d90 <__clzsi2>
   40948:	10fffec4 	addi	r3,r2,-5
   4094c:	10801d84 	addi	r2,r2,118
   40950:	98e6983a 	sll	r19,r19,r3
   40954:	0085c83a 	sub	r2,zero,r2
   40958:	0007883a 	mov	r3,zero
   4095c:	d9800017 	ldw	r6,0(sp)
   40960:	003f9b06 	br	407d0 <__alt_data_end+0xfffdafd0>
   40964:	01002034 	movhi	r4,128
   40968:	0029883a 	mov	r20,zero
   4096c:	213fffc4 	addi	r4,r4,-1
   40970:	00ffffc4 	movi	r3,-1
   40974:	003fc006 	br	40878 <__alt_data_end+0xfffdb078>
   40978:	9027883a 	mov	r19,r18
   4097c:	b807883a 	mov	r3,r23
   40980:	003fb406 	br	40854 <__alt_data_end+0xfffdb054>
   40984:	9027883a 	mov	r19,r18
   40988:	e02b883a 	mov	r21,fp
   4098c:	b807883a 	mov	r3,r23
   40990:	003fb006 	br	40854 <__alt_data_end+0xfffdb054>
   40994:	9028d43a 	srli	r20,r18,16
   40998:	982cd43a 	srli	r22,r19,16
   4099c:	94bfffcc 	andi	r18,r18,65535
   409a0:	9cffffcc 	andi	r19,r19,65535
   409a4:	980b883a 	mov	r5,r19
   409a8:	9009883a 	mov	r4,r18
   409ac:	d9c00015 	stw	r7,0(sp)
   409b0:	00407040 	call	40704 <__mulsi3>
   409b4:	a00b883a 	mov	r5,r20
   409b8:	9809883a 	mov	r4,r19
   409bc:	1023883a 	mov	r17,r2
   409c0:	00407040 	call	40704 <__mulsi3>
   409c4:	a009883a 	mov	r4,r20
   409c8:	b00b883a 	mov	r5,r22
   409cc:	1027883a 	mov	r19,r2
   409d0:	00407040 	call	40704 <__mulsi3>
   409d4:	b00b883a 	mov	r5,r22
   409d8:	9009883a 	mov	r4,r18
   409dc:	1029883a 	mov	r20,r2
   409e0:	00407040 	call	40704 <__mulsi3>
   409e4:	8806d43a 	srli	r3,r17,16
   409e8:	14c5883a 	add	r2,r2,r19
   409ec:	d9c00017 	ldw	r7,0(sp)
   409f0:	1885883a 	add	r2,r3,r2
   409f4:	14c0022e 	bgeu	r2,r19,40a00 <__mulsf3+0x2d4>
   409f8:	00c00074 	movhi	r3,1
   409fc:	a0e9883a 	add	r20,r20,r3
   40a00:	1026943a 	slli	r19,r2,16
   40a04:	8c7fffcc 	andi	r17,r17,65535
   40a08:	1004d43a 	srli	r2,r2,16
   40a0c:	9c63883a 	add	r17,r19,r17
   40a10:	882691ba 	slli	r19,r17,6
   40a14:	1505883a 	add	r2,r2,r20
   40a18:	8822d6ba 	srli	r17,r17,26
   40a1c:	100891ba 	slli	r4,r2,6
   40a20:	9826c03a 	cmpne	r19,r19,zero
   40a24:	9c62b03a 	or	r17,r19,r17
   40a28:	8926b03a 	or	r19,r17,r4
   40a2c:	9882002c 	andhi	r2,r19,2048
   40a30:	10000426 	beq	r2,zero,40a44 <__mulsf3+0x318>
   40a34:	9804d07a 	srli	r2,r19,1
   40a38:	9900004c 	andi	r4,r19,1
   40a3c:	3821883a 	mov	r16,r7
   40a40:	1126b03a 	or	r19,r2,r4
   40a44:	80c01fc4 	addi	r3,r16,127
   40a48:	00c0210e 	bge	zero,r3,40ad0 <__mulsf3+0x3a4>
   40a4c:	988001cc 	andi	r2,r19,7
   40a50:	10000426 	beq	r2,zero,40a64 <__mulsf3+0x338>
   40a54:	988003cc 	andi	r2,r19,15
   40a58:	01000104 	movi	r4,4
   40a5c:	11000126 	beq	r2,r4,40a64 <__mulsf3+0x338>
   40a60:	9927883a 	add	r19,r19,r4
   40a64:	9882002c 	andhi	r2,r19,2048
   40a68:	10000426 	beq	r2,zero,40a7c <__mulsf3+0x350>
   40a6c:	00be0034 	movhi	r2,63488
   40a70:	10bfffc4 	addi	r2,r2,-1
   40a74:	80c02004 	addi	r3,r16,128
   40a78:	98a6703a 	and	r19,r19,r2
   40a7c:	00803f84 	movi	r2,254
   40a80:	10ff9c16 	blt	r2,r3,408f4 <__alt_data_end+0xfffdb0f4>
   40a84:	980891ba 	slli	r4,r19,6
   40a88:	a829883a 	mov	r20,r21
   40a8c:	2008d27a 	srli	r4,r4,9
   40a90:	003f7906 	br	40878 <__alt_data_end+0xfffdb078>
   40a94:	9080102c 	andhi	r2,r18,64
   40a98:	10000826 	beq	r2,zero,40abc <__mulsf3+0x390>
   40a9c:	9880102c 	andhi	r2,r19,64
   40aa0:	1000061e 	bne	r2,zero,40abc <__mulsf3+0x390>
   40aa4:	00802034 	movhi	r2,128
   40aa8:	99001034 	orhi	r4,r19,64
   40aac:	10bfffc4 	addi	r2,r2,-1
   40ab0:	b029883a 	mov	r20,r22
   40ab4:	2088703a 	and	r4,r4,r2
   40ab8:	003fad06 	br	40970 <__alt_data_end+0xfffdb170>
   40abc:	00802034 	movhi	r2,128
   40ac0:	91001034 	orhi	r4,r18,64
   40ac4:	10bfffc4 	addi	r2,r2,-1
   40ac8:	2088703a 	and	r4,r4,r2
   40acc:	003fa806 	br	40970 <__alt_data_end+0xfffdb170>
   40ad0:	00800044 	movi	r2,1
   40ad4:	10c7c83a 	sub	r3,r2,r3
   40ad8:	008006c4 	movi	r2,27
   40adc:	10ff6316 	blt	r2,r3,4086c <__alt_data_end+0xfffdb06c>
   40ae0:	00800804 	movi	r2,32
   40ae4:	10c5c83a 	sub	r2,r2,r3
   40ae8:	9884983a 	sll	r2,r19,r2
   40aec:	98c6d83a 	srl	r3,r19,r3
   40af0:	1004c03a 	cmpne	r2,r2,zero
   40af4:	1884b03a 	or	r2,r3,r2
   40af8:	10c001cc 	andi	r3,r2,7
   40afc:	18000426 	beq	r3,zero,40b10 <__mulsf3+0x3e4>
   40b00:	10c003cc 	andi	r3,r2,15
   40b04:	01000104 	movi	r4,4
   40b08:	19000126 	beq	r3,r4,40b10 <__mulsf3+0x3e4>
   40b0c:	1105883a 	add	r2,r2,r4
   40b10:	10c1002c 	andhi	r3,r2,1024
   40b14:	18000626 	beq	r3,zero,40b30 <__mulsf3+0x404>
   40b18:	a829883a 	mov	r20,r21
   40b1c:	00c00044 	movi	r3,1
   40b20:	0009883a 	mov	r4,zero
   40b24:	003f5406 	br	40878 <__alt_data_end+0xfffdb078>
   40b28:	3821883a 	mov	r16,r7
   40b2c:	003fc506 	br	40a44 <__alt_data_end+0xfffdb244>
   40b30:	100491ba 	slli	r2,r2,6
   40b34:	a829883a 	mov	r20,r21
   40b38:	0007883a 	mov	r3,zero
   40b3c:	1008d27a 	srli	r4,r2,9
   40b40:	003f4d06 	br	40878 <__alt_data_end+0xfffdb078>
   40b44:	00802034 	movhi	r2,128
   40b48:	99001034 	orhi	r4,r19,64
   40b4c:	10bfffc4 	addi	r2,r2,-1
   40b50:	a829883a 	mov	r20,r21
   40b54:	2088703a 	and	r4,r4,r2
   40b58:	003f8506 	br	40970 <__alt_data_end+0xfffdb170>

00040b5c <__floatsisf>:
   40b5c:	defffd04 	addi	sp,sp,-12
   40b60:	dfc00215 	stw	ra,8(sp)
   40b64:	dc400115 	stw	r17,4(sp)
   40b68:	dc000015 	stw	r16,0(sp)
   40b6c:	20003526 	beq	r4,zero,40c44 <__floatsisf+0xe8>
   40b70:	2021883a 	mov	r16,r4
   40b74:	2022d7fa 	srli	r17,r4,31
   40b78:	20003616 	blt	r4,zero,40c54 <__floatsisf+0xf8>
   40b7c:	8009883a 	mov	r4,r16
   40b80:	0040d900 	call	40d90 <__clzsi2>
   40b84:	00c02784 	movi	r3,158
   40b88:	1887c83a 	sub	r3,r3,r2
   40b8c:	01002584 	movi	r4,150
   40b90:	20c01416 	blt	r4,r3,40be4 <__floatsisf+0x88>
   40b94:	20c9c83a 	sub	r4,r4,r3
   40b98:	8120983a 	sll	r16,r16,r4
   40b9c:	00802034 	movhi	r2,128
   40ba0:	10bfffc4 	addi	r2,r2,-1
   40ba4:	8809883a 	mov	r4,r17
   40ba8:	80a0703a 	and	r16,r16,r2
   40bac:	18803fcc 	andi	r2,r3,255
   40bb0:	100695fa 	slli	r3,r2,23
   40bb4:	20803fcc 	andi	r2,r4,255
   40bb8:	100897fa 	slli	r4,r2,31
   40bbc:	00802034 	movhi	r2,128
   40bc0:	10bfffc4 	addi	r2,r2,-1
   40bc4:	8084703a 	and	r2,r16,r2
   40bc8:	10c4b03a 	or	r2,r2,r3
   40bcc:	1104b03a 	or	r2,r2,r4
   40bd0:	dfc00217 	ldw	ra,8(sp)
   40bd4:	dc400117 	ldw	r17,4(sp)
   40bd8:	dc000017 	ldw	r16,0(sp)
   40bdc:	dec00304 	addi	sp,sp,12
   40be0:	f800283a 	ret
   40be4:	01002644 	movi	r4,153
   40be8:	20c01c16 	blt	r4,r3,40c5c <__floatsisf+0x100>
   40bec:	20c9c83a 	sub	r4,r4,r3
   40bf0:	8120983a 	sll	r16,r16,r4
   40bf4:	013f0034 	movhi	r4,64512
   40bf8:	213fffc4 	addi	r4,r4,-1
   40bfc:	814001cc 	andi	r5,r16,7
   40c00:	8108703a 	and	r4,r16,r4
   40c04:	28000426 	beq	r5,zero,40c18 <__floatsisf+0xbc>
   40c08:	840003cc 	andi	r16,r16,15
   40c0c:	01400104 	movi	r5,4
   40c10:	81400126 	beq	r16,r5,40c18 <__floatsisf+0xbc>
   40c14:	2149883a 	add	r4,r4,r5
   40c18:	2141002c 	andhi	r5,r4,1024
   40c1c:	28000526 	beq	r5,zero,40c34 <__floatsisf+0xd8>
   40c20:	00c027c4 	movi	r3,159
   40c24:	1887c83a 	sub	r3,r3,r2
   40c28:	00bf0034 	movhi	r2,64512
   40c2c:	10bfffc4 	addi	r2,r2,-1
   40c30:	2088703a 	and	r4,r4,r2
   40c34:	202091ba 	slli	r16,r4,6
   40c38:	8809883a 	mov	r4,r17
   40c3c:	8020d27a 	srli	r16,r16,9
   40c40:	003fda06 	br	40bac <__alt_data_end+0xfffdb3ac>
   40c44:	0009883a 	mov	r4,zero
   40c48:	0007883a 	mov	r3,zero
   40c4c:	0021883a 	mov	r16,zero
   40c50:	003fd606 	br	40bac <__alt_data_end+0xfffdb3ac>
   40c54:	0121c83a 	sub	r16,zero,r4
   40c58:	003fc806 	br	40b7c <__alt_data_end+0xfffdb37c>
   40c5c:	01002e44 	movi	r4,185
   40c60:	20c9c83a 	sub	r4,r4,r3
   40c64:	01400144 	movi	r5,5
   40c68:	8108983a 	sll	r4,r16,r4
   40c6c:	288bc83a 	sub	r5,r5,r2
   40c70:	8160d83a 	srl	r16,r16,r5
   40c74:	2008c03a 	cmpne	r4,r4,zero
   40c78:	8120b03a 	or	r16,r16,r4
   40c7c:	003fdd06 	br	40bf4 <__alt_data_end+0xfffdb3f4>

00040c80 <__extendsfdf2>:
   40c80:	200ad5fa 	srli	r5,r4,23
   40c84:	defffd04 	addi	sp,sp,-12
   40c88:	dc400115 	stw	r17,4(sp)
   40c8c:	29403fcc 	andi	r5,r5,255
   40c90:	29800044 	addi	r6,r5,1
   40c94:	04402034 	movhi	r17,128
   40c98:	dc000015 	stw	r16,0(sp)
   40c9c:	8c7fffc4 	addi	r17,r17,-1
   40ca0:	dfc00215 	stw	ra,8(sp)
   40ca4:	31803fcc 	andi	r6,r6,255
   40ca8:	00800044 	movi	r2,1
   40cac:	8922703a 	and	r17,r17,r4
   40cb0:	2020d7fa 	srli	r16,r4,31
   40cb4:	1180110e 	bge	r2,r6,40cfc <__extendsfdf2+0x7c>
   40cb8:	880cd0fa 	srli	r6,r17,3
   40cbc:	8822977a 	slli	r17,r17,29
   40cc0:	2940e004 	addi	r5,r5,896
   40cc4:	2941ffcc 	andi	r5,r5,2047
   40cc8:	2804953a 	slli	r2,r5,20
   40ccc:	01400434 	movhi	r5,16
   40cd0:	800697fa 	slli	r3,r16,31
   40cd4:	297fffc4 	addi	r5,r5,-1
   40cd8:	314a703a 	and	r5,r6,r5
   40cdc:	288ab03a 	or	r5,r5,r2
   40ce0:	28c6b03a 	or	r3,r5,r3
   40ce4:	8805883a 	mov	r2,r17
   40ce8:	dfc00217 	ldw	ra,8(sp)
   40cec:	dc400117 	ldw	r17,4(sp)
   40cf0:	dc000017 	ldw	r16,0(sp)
   40cf4:	dec00304 	addi	sp,sp,12
   40cf8:	f800283a 	ret
   40cfc:	2800111e 	bne	r5,zero,40d44 <__extendsfdf2+0xc4>
   40d00:	88001c26 	beq	r17,zero,40d74 <__extendsfdf2+0xf4>
   40d04:	8809883a 	mov	r4,r17
   40d08:	0040d900 	call	40d90 <__clzsi2>
   40d0c:	00c00284 	movi	r3,10
   40d10:	18801b16 	blt	r3,r2,40d80 <__extendsfdf2+0x100>
   40d14:	018002c4 	movi	r6,11
   40d18:	308dc83a 	sub	r6,r6,r2
   40d1c:	11000544 	addi	r4,r2,21
   40d20:	8986d83a 	srl	r3,r17,r6
   40d24:	8922983a 	sll	r17,r17,r4
   40d28:	0180e244 	movi	r6,905
   40d2c:	01400434 	movhi	r5,16
   40d30:	3085c83a 	sub	r2,r6,r2
   40d34:	297fffc4 	addi	r5,r5,-1
   40d38:	194c703a 	and	r6,r3,r5
   40d3c:	1141ffcc 	andi	r5,r2,2047
   40d40:	003fe006 	br	40cc4 <__alt_data_end+0xfffdb4c4>
   40d44:	88000826 	beq	r17,zero,40d68 <__extendsfdf2+0xe8>
   40d48:	880cd0fa 	srli	r6,r17,3
   40d4c:	00800434 	movhi	r2,16
   40d50:	10bfffc4 	addi	r2,r2,-1
   40d54:	31800234 	orhi	r6,r6,8
   40d58:	8822977a 	slli	r17,r17,29
   40d5c:	308c703a 	and	r6,r6,r2
   40d60:	0141ffc4 	movi	r5,2047
   40d64:	003fd706 	br	40cc4 <__alt_data_end+0xfffdb4c4>
   40d68:	0141ffc4 	movi	r5,2047
   40d6c:	000d883a 	mov	r6,zero
   40d70:	003fd406 	br	40cc4 <__alt_data_end+0xfffdb4c4>
   40d74:	000b883a 	mov	r5,zero
   40d78:	000d883a 	mov	r6,zero
   40d7c:	003fd106 	br	40cc4 <__alt_data_end+0xfffdb4c4>
   40d80:	11bffd44 	addi	r6,r2,-11
   40d84:	8986983a 	sll	r3,r17,r6
   40d88:	0023883a 	mov	r17,zero
   40d8c:	003fe606 	br	40d28 <__alt_data_end+0xfffdb528>

00040d90 <__clzsi2>:
   40d90:	00bfffd4 	movui	r2,65535
   40d94:	11000536 	bltu	r2,r4,40dac <__clzsi2+0x1c>
   40d98:	00803fc4 	movi	r2,255
   40d9c:	11000f36 	bltu	r2,r4,40ddc <__clzsi2+0x4c>
   40da0:	00800804 	movi	r2,32
   40da4:	0007883a 	mov	r3,zero
   40da8:	00000506 	br	40dc0 <__clzsi2+0x30>
   40dac:	00804034 	movhi	r2,256
   40db0:	10bfffc4 	addi	r2,r2,-1
   40db4:	11000c2e 	bgeu	r2,r4,40de8 <__clzsi2+0x58>
   40db8:	00800204 	movi	r2,8
   40dbc:	00c00604 	movi	r3,24
   40dc0:	20c8d83a 	srl	r4,r4,r3
   40dc4:	00c001b4 	movhi	r3,6
   40dc8:	18e48e44 	addi	r3,r3,-28103
   40dcc:	1909883a 	add	r4,r3,r4
   40dd0:	20c00003 	ldbu	r3,0(r4)
   40dd4:	10c5c83a 	sub	r2,r2,r3
   40dd8:	f800283a 	ret
   40ddc:	00800604 	movi	r2,24
   40de0:	00c00204 	movi	r3,8
   40de4:	003ff606 	br	40dc0 <__alt_data_end+0xfffdb5c0>
   40de8:	00800404 	movi	r2,16
   40dec:	1007883a 	mov	r3,r2
   40df0:	003ff306 	br	40dc0 <__alt_data_end+0xfffdb5c0>

00040df4 <_printf_r>:
   40df4:	defffd04 	addi	sp,sp,-12
   40df8:	2805883a 	mov	r2,r5
   40dfc:	dfc00015 	stw	ra,0(sp)
   40e00:	d9800115 	stw	r6,4(sp)
   40e04:	d9c00215 	stw	r7,8(sp)
   40e08:	21400217 	ldw	r5,8(r4)
   40e0c:	d9c00104 	addi	r7,sp,4
   40e10:	100d883a 	mov	r6,r2
   40e14:	0040e600 	call	40e60 <___vfprintf_internal_r>
   40e18:	dfc00017 	ldw	ra,0(sp)
   40e1c:	dec00304 	addi	sp,sp,12
   40e20:	f800283a 	ret

00040e24 <printf>:
   40e24:	defffc04 	addi	sp,sp,-16
   40e28:	dfc00015 	stw	ra,0(sp)
   40e2c:	d9400115 	stw	r5,4(sp)
   40e30:	d9800215 	stw	r6,8(sp)
   40e34:	d9c00315 	stw	r7,12(sp)
   40e38:	008001b4 	movhi	r2,6
   40e3c:	10ac4504 	addi	r2,r2,-20204
   40e40:	10800017 	ldw	r2,0(r2)
   40e44:	200b883a 	mov	r5,r4
   40e48:	d9800104 	addi	r6,sp,4
   40e4c:	11000217 	ldw	r4,8(r2)
   40e50:	004313c0 	call	4313c <__vfprintf_internal>
   40e54:	dfc00017 	ldw	ra,0(sp)
   40e58:	dec00404 	addi	sp,sp,16
   40e5c:	f800283a 	ret

00040e60 <___vfprintf_internal_r>:
   40e60:	deffb804 	addi	sp,sp,-288
   40e64:	dfc04715 	stw	ra,284(sp)
   40e68:	ddc04515 	stw	r23,276(sp)
   40e6c:	dd404315 	stw	r21,268(sp)
   40e70:	d9002d15 	stw	r4,180(sp)
   40e74:	282f883a 	mov	r23,r5
   40e78:	302b883a 	mov	r21,r6
   40e7c:	d9c02e15 	stw	r7,184(sp)
   40e80:	df004615 	stw	fp,280(sp)
   40e84:	dd804415 	stw	r22,272(sp)
   40e88:	dd004215 	stw	r20,264(sp)
   40e8c:	dcc04115 	stw	r19,260(sp)
   40e90:	dc804015 	stw	r18,256(sp)
   40e94:	dc403f15 	stw	r17,252(sp)
   40e98:	dc003e15 	stw	r16,248(sp)
   40e9c:	00458d80 	call	458d8 <_localeconv_r>
   40ea0:	10800017 	ldw	r2,0(r2)
   40ea4:	1009883a 	mov	r4,r2
   40ea8:	d8803415 	stw	r2,208(sp)
   40eac:	00479bc0 	call	479bc <strlen>
   40eb0:	d8803715 	stw	r2,220(sp)
   40eb4:	d8802d17 	ldw	r2,180(sp)
   40eb8:	10000226 	beq	r2,zero,40ec4 <___vfprintf_internal_r+0x64>
   40ebc:	10800e17 	ldw	r2,56(r2)
   40ec0:	1000fb26 	beq	r2,zero,412b0 <___vfprintf_internal_r+0x450>
   40ec4:	b880030b 	ldhu	r2,12(r23)
   40ec8:	10c8000c 	andi	r3,r2,8192
   40ecc:	1800061e 	bne	r3,zero,40ee8 <___vfprintf_internal_r+0x88>
   40ed0:	b9001917 	ldw	r4,100(r23)
   40ed4:	00f7ffc4 	movi	r3,-8193
   40ed8:	10880014 	ori	r2,r2,8192
   40edc:	20c6703a 	and	r3,r4,r3
   40ee0:	b880030d 	sth	r2,12(r23)
   40ee4:	b8c01915 	stw	r3,100(r23)
   40ee8:	10c0020c 	andi	r3,r2,8
   40eec:	1800c326 	beq	r3,zero,411fc <___vfprintf_internal_r+0x39c>
   40ef0:	b8c00417 	ldw	r3,16(r23)
   40ef4:	1800c126 	beq	r3,zero,411fc <___vfprintf_internal_r+0x39c>
   40ef8:	1080068c 	andi	r2,r2,26
   40efc:	00c00284 	movi	r3,10
   40f00:	10c0c626 	beq	r2,r3,4121c <___vfprintf_internal_r+0x3bc>
   40f04:	d8c00404 	addi	r3,sp,16
   40f08:	050001b4 	movhi	r20,6
   40f0c:	d9001e04 	addi	r4,sp,120
   40f10:	a524df84 	addi	r20,r20,-27778
   40f14:	d8c01e15 	stw	r3,120(sp)
   40f18:	d8002015 	stw	zero,128(sp)
   40f1c:	d8001f15 	stw	zero,124(sp)
   40f20:	d8003315 	stw	zero,204(sp)
   40f24:	d8003615 	stw	zero,216(sp)
   40f28:	d8003815 	stw	zero,224(sp)
   40f2c:	1811883a 	mov	r8,r3
   40f30:	d8003915 	stw	zero,228(sp)
   40f34:	d8003a15 	stw	zero,232(sp)
   40f38:	d8002f15 	stw	zero,188(sp)
   40f3c:	d9002815 	stw	r4,160(sp)
   40f40:	a8800007 	ldb	r2,0(r21)
   40f44:	10028b26 	beq	r2,zero,41974 <___vfprintf_internal_r+0xb14>
   40f48:	00c00944 	movi	r3,37
   40f4c:	a823883a 	mov	r17,r21
   40f50:	10c0021e 	bne	r2,r3,40f5c <___vfprintf_internal_r+0xfc>
   40f54:	00001406 	br	40fa8 <___vfprintf_internal_r+0x148>
   40f58:	10c00326 	beq	r2,r3,40f68 <___vfprintf_internal_r+0x108>
   40f5c:	8c400044 	addi	r17,r17,1
   40f60:	88800007 	ldb	r2,0(r17)
   40f64:	103ffc1e 	bne	r2,zero,40f58 <__alt_data_end+0xfffdb758>
   40f68:	8d61c83a 	sub	r16,r17,r21
   40f6c:	80000e26 	beq	r16,zero,40fa8 <___vfprintf_internal_r+0x148>
   40f70:	d8c02017 	ldw	r3,128(sp)
   40f74:	d8801f17 	ldw	r2,124(sp)
   40f78:	45400015 	stw	r21,0(r8)
   40f7c:	1c07883a 	add	r3,r3,r16
   40f80:	10800044 	addi	r2,r2,1
   40f84:	d8c02015 	stw	r3,128(sp)
   40f88:	44000115 	stw	r16,4(r8)
   40f8c:	d8801f15 	stw	r2,124(sp)
   40f90:	00c001c4 	movi	r3,7
   40f94:	1880a916 	blt	r3,r2,4123c <___vfprintf_internal_r+0x3dc>
   40f98:	42000204 	addi	r8,r8,8
   40f9c:	d9402f17 	ldw	r5,188(sp)
   40fa0:	2c0b883a 	add	r5,r5,r16
   40fa4:	d9402f15 	stw	r5,188(sp)
   40fa8:	88800007 	ldb	r2,0(r17)
   40fac:	1000aa26 	beq	r2,zero,41258 <___vfprintf_internal_r+0x3f8>
   40fb0:	8d400044 	addi	r21,r17,1
   40fb4:	8c400047 	ldb	r17,1(r17)
   40fb8:	0021883a 	mov	r16,zero
   40fbc:	00bfffc4 	movi	r2,-1
   40fc0:	0025883a 	mov	r18,zero
   40fc4:	dc002905 	stb	r16,164(sp)
   40fc8:	d8002785 	stb	zero,158(sp)
   40fcc:	d8002b05 	stb	zero,172(sp)
   40fd0:	d8802a15 	stw	r2,168(sp)
   40fd4:	d8003115 	stw	zero,196(sp)
   40fd8:	04c01604 	movi	r19,88
   40fdc:	05800244 	movi	r22,9
   40fe0:	9021883a 	mov	r16,r18
   40fe4:	4039883a 	mov	fp,r8
   40fe8:	ad400044 	addi	r21,r21,1
   40fec:	88bff804 	addi	r2,r17,-32
   40ff0:	98833236 	bltu	r19,r2,41cbc <___vfprintf_internal_r+0xe5c>
   40ff4:	100490ba 	slli	r2,r2,2
   40ff8:	00c00134 	movhi	r3,4
   40ffc:	18c40304 	addi	r3,r3,4108
   41000:	10c5883a 	add	r2,r2,r3
   41004:	10800017 	ldw	r2,0(r2)
   41008:	1000683a 	jmp	r2
   4100c:	00041bb4 	movhi	zero,4206
   41010:	00041cbc 	xorhi	zero,zero,4210
   41014:	00041cbc 	xorhi	zero,zero,4210
   41018:	00041bd4 	movui	zero,4207
   4101c:	00041cbc 	xorhi	zero,zero,4210
   41020:	00041cbc 	xorhi	zero,zero,4210
   41024:	00041cbc 	xorhi	zero,zero,4210
   41028:	00041cbc 	xorhi	zero,zero,4210
   4102c:	00041cbc 	xorhi	zero,zero,4210
   41030:	00041cbc 	xorhi	zero,zero,4210
   41034:	000412bc 	xorhi	zero,zero,4170
   41038:	00041ac4 	movi	zero,4203
   4103c:	00041cbc 	xorhi	zero,zero,4210
   41040:	00041180 	call	4118 <OSCtxSw_SWITCH_PC+0x40d8>
   41044:	000412e0 	cmpeqi	zero,zero,4171
   41048:	00041cbc 	xorhi	zero,zero,4210
   4104c:	00041330 	cmpltui	zero,zero,4172
   41050:	0004133c 	xorhi	zero,zero,4172
   41054:	0004133c 	xorhi	zero,zero,4172
   41058:	0004133c 	xorhi	zero,zero,4172
   4105c:	0004133c 	xorhi	zero,zero,4172
   41060:	0004133c 	xorhi	zero,zero,4172
   41064:	0004133c 	xorhi	zero,zero,4172
   41068:	0004133c 	xorhi	zero,zero,4172
   4106c:	0004133c 	xorhi	zero,zero,4172
   41070:	0004133c 	xorhi	zero,zero,4172
   41074:	00041cbc 	xorhi	zero,zero,4210
   41078:	00041cbc 	xorhi	zero,zero,4210
   4107c:	00041cbc 	xorhi	zero,zero,4210
   41080:	00041cbc 	xorhi	zero,zero,4210
   41084:	00041cbc 	xorhi	zero,zero,4210
   41088:	00041cbc 	xorhi	zero,zero,4210
   4108c:	00041cbc 	xorhi	zero,zero,4210
   41090:	00041cbc 	xorhi	zero,zero,4210
   41094:	00041cbc 	xorhi	zero,zero,4210
   41098:	00041cbc 	xorhi	zero,zero,4210
   4109c:	00041378 	rdprs	zero,zero,4173
   410a0:	00041440 	call	4144 <OSCtxSw_SWITCH_PC+0x4104>
   410a4:	00041cbc 	xorhi	zero,zero,4210
   410a8:	00041440 	call	4144 <OSCtxSw_SWITCH_PC+0x4104>
   410ac:	00041cbc 	xorhi	zero,zero,4210
   410b0:	00041cbc 	xorhi	zero,zero,4210
   410b4:	00041cbc 	xorhi	zero,zero,4210
   410b8:	00041cbc 	xorhi	zero,zero,4210
   410bc:	000414ec 	andhi	zero,zero,4179
   410c0:	00041cbc 	xorhi	zero,zero,4210
   410c4:	00041cbc 	xorhi	zero,zero,4210
   410c8:	000414f8 	rdprs	zero,zero,4179
   410cc:	00041cbc 	xorhi	zero,zero,4210
   410d0:	00041cbc 	xorhi	zero,zero,4210
   410d4:	00041cbc 	xorhi	zero,zero,4210
   410d8:	00041cbc 	xorhi	zero,zero,4210
   410dc:	00041cbc 	xorhi	zero,zero,4210
   410e0:	0004197c 	xorhi	zero,zero,4197
   410e4:	00041cbc 	xorhi	zero,zero,4210
   410e8:	00041cbc 	xorhi	zero,zero,4210
   410ec:	000419e8 	cmpgeui	zero,zero,4199
   410f0:	00041cbc 	xorhi	zero,zero,4210
   410f4:	00041cbc 	xorhi	zero,zero,4210
   410f8:	00041cbc 	xorhi	zero,zero,4210
   410fc:	00041cbc 	xorhi	zero,zero,4210
   41100:	00041cbc 	xorhi	zero,zero,4210
   41104:	00041cbc 	xorhi	zero,zero,4210
   41108:	00041cbc 	xorhi	zero,zero,4210
   4110c:	00041cbc 	xorhi	zero,zero,4210
   41110:	00041cbc 	xorhi	zero,zero,4210
   41114:	00041cbc 	xorhi	zero,zero,4210
   41118:	00041c60 	cmpeqi	zero,zero,4209
   4111c:	00041be0 	cmpeqi	zero,zero,4207
   41120:	00041440 	call	4144 <OSCtxSw_SWITCH_PC+0x4104>
   41124:	00041440 	call	4144 <OSCtxSw_SWITCH_PC+0x4104>
   41128:	00041440 	call	4144 <OSCtxSw_SWITCH_PC+0x4104>
   4112c:	00041c00 	call	41c0 <OSCtxSw_SWITCH_PC+0x4180>
   41130:	00041be0 	cmpeqi	zero,zero,4207
   41134:	00041cbc 	xorhi	zero,zero,4210
   41138:	00041cbc 	xorhi	zero,zero,4210
   4113c:	00041c0c 	andi	zero,zero,4208
   41140:	00041cbc 	xorhi	zero,zero,4210
   41144:	00041c20 	cmpeqi	zero,zero,4208
   41148:	00041aa4 	muli	zero,zero,4202
   4114c:	0004118c 	andi	zero,zero,4166
   41150:	00041adc 	xori	zero,zero,4203
   41154:	00041cbc 	xorhi	zero,zero,4210
   41158:	00041ae8 	cmpgeui	zero,zero,4203
   4115c:	00041cbc 	xorhi	zero,zero,4210
   41160:	00041b4c 	andi	zero,zero,4205
   41164:	00041cbc 	xorhi	zero,zero,4210
   41168:	00041cbc 	xorhi	zero,zero,4210
   4116c:	00041b6c 	andhi	zero,zero,4205
   41170:	d8c03117 	ldw	r3,196(sp)
   41174:	d8802e15 	stw	r2,184(sp)
   41178:	00c7c83a 	sub	r3,zero,r3
   4117c:	d8c03115 	stw	r3,196(sp)
   41180:	84000114 	ori	r16,r16,4
   41184:	ac400007 	ldb	r17,0(r21)
   41188:	003f9706 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   4118c:	00800c04 	movi	r2,48
   41190:	d8802705 	stb	r2,156(sp)
   41194:	00801e04 	movi	r2,120
   41198:	d8802745 	stb	r2,157(sp)
   4119c:	d9002a17 	ldw	r4,168(sp)
   411a0:	d8802e17 	ldw	r2,184(sp)
   411a4:	d8002785 	stb	zero,158(sp)
   411a8:	e011883a 	mov	r8,fp
   411ac:	10c00104 	addi	r3,r2,4
   411b0:	14c00017 	ldw	r19,0(r2)
   411b4:	002d883a 	mov	r22,zero
   411b8:	80800094 	ori	r2,r16,2
   411bc:	2002ca16 	blt	r4,zero,41ce8 <___vfprintf_internal_r+0xe88>
   411c0:	00bfdfc4 	movi	r2,-129
   411c4:	80a4703a 	and	r18,r16,r2
   411c8:	d8c02e15 	stw	r3,184(sp)
   411cc:	94800094 	ori	r18,r18,2
   411d0:	9802b41e 	bne	r19,zero,41ca4 <___vfprintf_internal_r+0xe44>
   411d4:	014001b4 	movhi	r5,6
   411d8:	2964d804 	addi	r5,r5,-27808
   411dc:	d9403915 	stw	r5,228(sp)
   411e0:	04401e04 	movi	r17,120
   411e4:	d8802a17 	ldw	r2,168(sp)
   411e8:	0039883a 	mov	fp,zero
   411ec:	1001fa26 	beq	r2,zero,419d8 <___vfprintf_internal_r+0xb78>
   411f0:	0027883a 	mov	r19,zero
   411f4:	002d883a 	mov	r22,zero
   411f8:	00021906 	br	41a60 <___vfprintf_internal_r+0xc00>
   411fc:	d9002d17 	ldw	r4,180(sp)
   41200:	b80b883a 	mov	r5,r23
   41204:	00432140 	call	43214 <__swsetup_r>
   41208:	1005dc1e 	bne	r2,zero,4297c <___vfprintf_internal_r+0x1b1c>
   4120c:	b880030b 	ldhu	r2,12(r23)
   41210:	00c00284 	movi	r3,10
   41214:	1080068c 	andi	r2,r2,26
   41218:	10ff3a1e 	bne	r2,r3,40f04 <__alt_data_end+0xfffdb704>
   4121c:	b880038f 	ldh	r2,14(r23)
   41220:	103f3816 	blt	r2,zero,40f04 <__alt_data_end+0xfffdb704>
   41224:	d9c02e17 	ldw	r7,184(sp)
   41228:	d9002d17 	ldw	r4,180(sp)
   4122c:	a80d883a 	mov	r6,r21
   41230:	b80b883a 	mov	r5,r23
   41234:	00431580 	call	43158 <__sbprintf>
   41238:	00001106 	br	41280 <___vfprintf_internal_r+0x420>
   4123c:	d9002d17 	ldw	r4,180(sp)
   41240:	d9801e04 	addi	r6,sp,120
   41244:	b80b883a 	mov	r5,r23
   41248:	0047b500 	call	47b50 <__sprint_r>
   4124c:	1000081e 	bne	r2,zero,41270 <___vfprintf_internal_r+0x410>
   41250:	da000404 	addi	r8,sp,16
   41254:	003f5106 	br	40f9c <__alt_data_end+0xfffdb79c>
   41258:	d8802017 	ldw	r2,128(sp)
   4125c:	10000426 	beq	r2,zero,41270 <___vfprintf_internal_r+0x410>
   41260:	d9002d17 	ldw	r4,180(sp)
   41264:	d9801e04 	addi	r6,sp,120
   41268:	b80b883a 	mov	r5,r23
   4126c:	0047b500 	call	47b50 <__sprint_r>
   41270:	b880030b 	ldhu	r2,12(r23)
   41274:	1080100c 	andi	r2,r2,64
   41278:	1005c01e 	bne	r2,zero,4297c <___vfprintf_internal_r+0x1b1c>
   4127c:	d8802f17 	ldw	r2,188(sp)
   41280:	dfc04717 	ldw	ra,284(sp)
   41284:	df004617 	ldw	fp,280(sp)
   41288:	ddc04517 	ldw	r23,276(sp)
   4128c:	dd804417 	ldw	r22,272(sp)
   41290:	dd404317 	ldw	r21,268(sp)
   41294:	dd004217 	ldw	r20,264(sp)
   41298:	dcc04117 	ldw	r19,260(sp)
   4129c:	dc804017 	ldw	r18,256(sp)
   412a0:	dc403f17 	ldw	r17,252(sp)
   412a4:	dc003e17 	ldw	r16,248(sp)
   412a8:	dec04804 	addi	sp,sp,288
   412ac:	f800283a 	ret
   412b0:	d9002d17 	ldw	r4,180(sp)
   412b4:	00452200 	call	45220 <__sinit>
   412b8:	003f0206 	br	40ec4 <__alt_data_end+0xfffdb6c4>
   412bc:	d9002e17 	ldw	r4,184(sp)
   412c0:	d9402e17 	ldw	r5,184(sp)
   412c4:	21000017 	ldw	r4,0(r4)
   412c8:	28800104 	addi	r2,r5,4
   412cc:	d9003115 	stw	r4,196(sp)
   412d0:	203fa716 	blt	r4,zero,41170 <__alt_data_end+0xfffdb970>
   412d4:	d8802e15 	stw	r2,184(sp)
   412d8:	ac400007 	ldb	r17,0(r21)
   412dc:	003f4206 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   412e0:	ac400007 	ldb	r17,0(r21)
   412e4:	01000a84 	movi	r4,42
   412e8:	a8c00044 	addi	r3,r21,1
   412ec:	89075826 	beq	r17,r4,43050 <___vfprintf_internal_r+0x21f0>
   412f0:	8cbff404 	addi	r18,r17,-48
   412f4:	b486ae36 	bltu	r22,r18,42db0 <___vfprintf_internal_r+0x1f50>
   412f8:	0009883a 	mov	r4,zero
   412fc:	1823883a 	mov	r17,r3
   41300:	01400284 	movi	r5,10
   41304:	00407040 	call	40704 <__mulsi3>
   41308:	88c00007 	ldb	r3,0(r17)
   4130c:	1489883a 	add	r4,r2,r18
   41310:	8d400044 	addi	r21,r17,1
   41314:	1cbff404 	addi	r18,r3,-48
   41318:	a823883a 	mov	r17,r21
   4131c:	b4bff82e 	bgeu	r22,r18,41300 <__alt_data_end+0xfffdbb00>
   41320:	1823883a 	mov	r17,r3
   41324:	2005f616 	blt	r4,zero,42b00 <___vfprintf_internal_r+0x1ca0>
   41328:	d9002a15 	stw	r4,168(sp)
   4132c:	003f2f06 	br	40fec <__alt_data_end+0xfffdb7ec>
   41330:	84002014 	ori	r16,r16,128
   41334:	ac400007 	ldb	r17,0(r21)
   41338:	003f2b06 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   4133c:	8cbff404 	addi	r18,r17,-48
   41340:	d8003115 	stw	zero,196(sp)
   41344:	0009883a 	mov	r4,zero
   41348:	a823883a 	mov	r17,r21
   4134c:	01400284 	movi	r5,10
   41350:	00407040 	call	40704 <__mulsi3>
   41354:	88c00007 	ldb	r3,0(r17)
   41358:	9089883a 	add	r4,r18,r2
   4135c:	ad400044 	addi	r21,r21,1
   41360:	1cbff404 	addi	r18,r3,-48
   41364:	a823883a 	mov	r17,r21
   41368:	b4bff82e 	bgeu	r22,r18,4134c <__alt_data_end+0xfffdbb4c>
   4136c:	1823883a 	mov	r17,r3
   41370:	d9003115 	stw	r4,196(sp)
   41374:	003f1d06 	br	40fec <__alt_data_end+0xfffdb7ec>
   41378:	8025883a 	mov	r18,r16
   4137c:	dc002903 	ldbu	r16,164(sp)
   41380:	e011883a 	mov	r8,fp
   41384:	84003fcc 	andi	r16,r16,255
   41388:	8007531e 	bne	r16,zero,430d8 <___vfprintf_internal_r+0x2278>
   4138c:	94800414 	ori	r18,r18,16
   41390:	9080080c 	andi	r2,r18,32
   41394:	1003a326 	beq	r2,zero,42224 <___vfprintf_internal_r+0x13c4>
   41398:	d9002e17 	ldw	r4,184(sp)
   4139c:	20800117 	ldw	r2,4(r4)
   413a0:	24c00017 	ldw	r19,0(r4)
   413a4:	21000204 	addi	r4,r4,8
   413a8:	d9002e15 	stw	r4,184(sp)
   413ac:	102d883a 	mov	r22,r2
   413b0:	10047316 	blt	r2,zero,42580 <___vfprintf_internal_r+0x1720>
   413b4:	d9002a17 	ldw	r4,168(sp)
   413b8:	df002783 	ldbu	fp,158(sp)
   413bc:	2003e416 	blt	r4,zero,42350 <___vfprintf_internal_r+0x14f0>
   413c0:	00ffdfc4 	movi	r3,-129
   413c4:	9d84b03a 	or	r2,r19,r22
   413c8:	90e4703a 	and	r18,r18,r3
   413cc:	10018026 	beq	r2,zero,419d0 <___vfprintf_internal_r+0xb70>
   413d0:	b003ab26 	beq	r22,zero,42280 <___vfprintf_internal_r+0x1420>
   413d4:	dc402915 	stw	r17,164(sp)
   413d8:	dc001e04 	addi	r16,sp,120
   413dc:	b023883a 	mov	r17,r22
   413e0:	402d883a 	mov	r22,r8
   413e4:	9809883a 	mov	r4,r19
   413e8:	880b883a 	mov	r5,r17
   413ec:	01800284 	movi	r6,10
   413f0:	000f883a 	mov	r7,zero
   413f4:	004ac1c0 	call	4ac1c <__umoddi3>
   413f8:	10800c04 	addi	r2,r2,48
   413fc:	843fffc4 	addi	r16,r16,-1
   41400:	9809883a 	mov	r4,r19
   41404:	880b883a 	mov	r5,r17
   41408:	80800005 	stb	r2,0(r16)
   4140c:	01800284 	movi	r6,10
   41410:	000f883a 	mov	r7,zero
   41414:	004a6200 	call	4a620 <__udivdi3>
   41418:	1027883a 	mov	r19,r2
   4141c:	10c4b03a 	or	r2,r2,r3
   41420:	1823883a 	mov	r17,r3
   41424:	103fef1e 	bne	r2,zero,413e4 <__alt_data_end+0xfffdbbe4>
   41428:	d8c02817 	ldw	r3,160(sp)
   4142c:	dc402917 	ldw	r17,164(sp)
   41430:	b011883a 	mov	r8,r22
   41434:	1c07c83a 	sub	r3,r3,r16
   41438:	d8c02b15 	stw	r3,172(sp)
   4143c:	00005f06 	br	415bc <___vfprintf_internal_r+0x75c>
   41440:	8025883a 	mov	r18,r16
   41444:	dc002903 	ldbu	r16,164(sp)
   41448:	e011883a 	mov	r8,fp
   4144c:	84003fcc 	andi	r16,r16,255
   41450:	80071e1e 	bne	r16,zero,430cc <___vfprintf_internal_r+0x226c>
   41454:	9080020c 	andi	r2,r18,8
   41458:	1004af26 	beq	r2,zero,42718 <___vfprintf_internal_r+0x18b8>
   4145c:	d9002e17 	ldw	r4,184(sp)
   41460:	d9402e17 	ldw	r5,184(sp)
   41464:	d8802e17 	ldw	r2,184(sp)
   41468:	21000017 	ldw	r4,0(r4)
   4146c:	29400117 	ldw	r5,4(r5)
   41470:	10800204 	addi	r2,r2,8
   41474:	d9003615 	stw	r4,216(sp)
   41478:	d9403815 	stw	r5,224(sp)
   4147c:	d8802e15 	stw	r2,184(sp)
   41480:	d9003617 	ldw	r4,216(sp)
   41484:	d9403817 	ldw	r5,224(sp)
   41488:	da003d15 	stw	r8,244(sp)
   4148c:	04000044 	movi	r16,1
   41490:	00476dc0 	call	476dc <__fpclassifyd>
   41494:	da003d17 	ldw	r8,244(sp)
   41498:	1404441e 	bne	r2,r16,425ac <___vfprintf_internal_r+0x174c>
   4149c:	d9003617 	ldw	r4,216(sp)
   414a0:	d9403817 	ldw	r5,224(sp)
   414a4:	000d883a 	mov	r6,zero
   414a8:	000f883a 	mov	r7,zero
   414ac:	004c7740 	call	4c774 <__ledf2>
   414b0:	da003d17 	ldw	r8,244(sp)
   414b4:	1005e316 	blt	r2,zero,42c44 <___vfprintf_internal_r+0x1de4>
   414b8:	df002783 	ldbu	fp,158(sp)
   414bc:	008011c4 	movi	r2,71
   414c0:	1445580e 	bge	r2,r17,42a24 <___vfprintf_internal_r+0x1bc4>
   414c4:	040001b4 	movhi	r16,6
   414c8:	8424d004 	addi	r16,r16,-27840
   414cc:	00c000c4 	movi	r3,3
   414d0:	00bfdfc4 	movi	r2,-129
   414d4:	d8c02915 	stw	r3,164(sp)
   414d8:	90a4703a 	and	r18,r18,r2
   414dc:	d8c02b15 	stw	r3,172(sp)
   414e0:	d8002a15 	stw	zero,168(sp)
   414e4:	d8003215 	stw	zero,200(sp)
   414e8:	00003a06 	br	415d4 <___vfprintf_internal_r+0x774>
   414ec:	84000214 	ori	r16,r16,8
   414f0:	ac400007 	ldb	r17,0(r21)
   414f4:	003ebc06 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   414f8:	8025883a 	mov	r18,r16
   414fc:	dc002903 	ldbu	r16,164(sp)
   41500:	e011883a 	mov	r8,fp
   41504:	84003fcc 	andi	r16,r16,255
   41508:	8007001e 	bne	r16,zero,4310c <___vfprintf_internal_r+0x22ac>
   4150c:	94800414 	ori	r18,r18,16
   41510:	9080080c 	andi	r2,r18,32
   41514:	1002fa26 	beq	r2,zero,42100 <___vfprintf_internal_r+0x12a0>
   41518:	d9002e17 	ldw	r4,184(sp)
   4151c:	d9402a17 	ldw	r5,168(sp)
   41520:	d8002785 	stb	zero,158(sp)
   41524:	20800204 	addi	r2,r4,8
   41528:	24c00017 	ldw	r19,0(r4)
   4152c:	25800117 	ldw	r22,4(r4)
   41530:	2804b116 	blt	r5,zero,427f8 <___vfprintf_internal_r+0x1998>
   41534:	013fdfc4 	movi	r4,-129
   41538:	9d86b03a 	or	r3,r19,r22
   4153c:	d8802e15 	stw	r2,184(sp)
   41540:	9124703a 	and	r18,r18,r4
   41544:	1802fb1e 	bne	r3,zero,42134 <___vfprintf_internal_r+0x12d4>
   41548:	d8c02a17 	ldw	r3,168(sp)
   4154c:	0039883a 	mov	fp,zero
   41550:	1805e526 	beq	r3,zero,42ce8 <___vfprintf_internal_r+0x1e88>
   41554:	0027883a 	mov	r19,zero
   41558:	002d883a 	mov	r22,zero
   4155c:	dc001e04 	addi	r16,sp,120
   41560:	9806d0fa 	srli	r3,r19,3
   41564:	b008977a 	slli	r4,r22,29
   41568:	b02cd0fa 	srli	r22,r22,3
   4156c:	9cc001cc 	andi	r19,r19,7
   41570:	98800c04 	addi	r2,r19,48
   41574:	843fffc4 	addi	r16,r16,-1
   41578:	20e6b03a 	or	r19,r4,r3
   4157c:	80800005 	stb	r2,0(r16)
   41580:	9d86b03a 	or	r3,r19,r22
   41584:	183ff61e 	bne	r3,zero,41560 <__alt_data_end+0xfffdbd60>
   41588:	90c0004c 	andi	r3,r18,1
   4158c:	18014126 	beq	r3,zero,41a94 <___vfprintf_internal_r+0xc34>
   41590:	10803fcc 	andi	r2,r2,255
   41594:	1080201c 	xori	r2,r2,128
   41598:	10bfe004 	addi	r2,r2,-128
   4159c:	00c00c04 	movi	r3,48
   415a0:	10c13c26 	beq	r2,r3,41a94 <___vfprintf_internal_r+0xc34>
   415a4:	80ffffc5 	stb	r3,-1(r16)
   415a8:	d8c02817 	ldw	r3,160(sp)
   415ac:	80bfffc4 	addi	r2,r16,-1
   415b0:	1021883a 	mov	r16,r2
   415b4:	1887c83a 	sub	r3,r3,r2
   415b8:	d8c02b15 	stw	r3,172(sp)
   415bc:	d8802b17 	ldw	r2,172(sp)
   415c0:	d9002a17 	ldw	r4,168(sp)
   415c4:	1100010e 	bge	r2,r4,415cc <___vfprintf_internal_r+0x76c>
   415c8:	2005883a 	mov	r2,r4
   415cc:	d8802915 	stw	r2,164(sp)
   415d0:	d8003215 	stw	zero,200(sp)
   415d4:	e7003fcc 	andi	fp,fp,255
   415d8:	e700201c 	xori	fp,fp,128
   415dc:	e73fe004 	addi	fp,fp,-128
   415e0:	e0000326 	beq	fp,zero,415f0 <___vfprintf_internal_r+0x790>
   415e4:	d8c02917 	ldw	r3,164(sp)
   415e8:	18c00044 	addi	r3,r3,1
   415ec:	d8c02915 	stw	r3,164(sp)
   415f0:	90c0008c 	andi	r3,r18,2
   415f4:	d8c02c15 	stw	r3,176(sp)
   415f8:	18000326 	beq	r3,zero,41608 <___vfprintf_internal_r+0x7a8>
   415fc:	d8c02917 	ldw	r3,164(sp)
   41600:	18c00084 	addi	r3,r3,2
   41604:	d8c02915 	stw	r3,164(sp)
   41608:	90c0210c 	andi	r3,r18,132
   4160c:	d8c03015 	stw	r3,192(sp)
   41610:	1801c51e 	bne	r3,zero,41d28 <___vfprintf_internal_r+0xec8>
   41614:	d9003117 	ldw	r4,196(sp)
   41618:	d8c02917 	ldw	r3,164(sp)
   4161c:	20e7c83a 	sub	r19,r4,r3
   41620:	04c1c10e 	bge	zero,r19,41d28 <___vfprintf_internal_r+0xec8>
   41624:	02400404 	movi	r9,16
   41628:	d8c02017 	ldw	r3,128(sp)
   4162c:	d8801f17 	ldw	r2,124(sp)
   41630:	4cc52f0e 	bge	r9,r19,42af0 <___vfprintf_internal_r+0x1c90>
   41634:	014001b4 	movhi	r5,6
   41638:	2964e384 	addi	r5,r5,-27762
   4163c:	dc403b15 	stw	r17,236(sp)
   41640:	d9403515 	stw	r5,212(sp)
   41644:	9823883a 	mov	r17,r19
   41648:	482d883a 	mov	r22,r9
   4164c:	9027883a 	mov	r19,r18
   41650:	070001c4 	movi	fp,7
   41654:	8025883a 	mov	r18,r16
   41658:	dc002d17 	ldw	r16,180(sp)
   4165c:	00000306 	br	4166c <___vfprintf_internal_r+0x80c>
   41660:	8c7ffc04 	addi	r17,r17,-16
   41664:	42000204 	addi	r8,r8,8
   41668:	b440130e 	bge	r22,r17,416b8 <___vfprintf_internal_r+0x858>
   4166c:	010001b4 	movhi	r4,6
   41670:	18c00404 	addi	r3,r3,16
   41674:	10800044 	addi	r2,r2,1
   41678:	2124e384 	addi	r4,r4,-27762
   4167c:	41000015 	stw	r4,0(r8)
   41680:	45800115 	stw	r22,4(r8)
   41684:	d8c02015 	stw	r3,128(sp)
   41688:	d8801f15 	stw	r2,124(sp)
   4168c:	e0bff40e 	bge	fp,r2,41660 <__alt_data_end+0xfffdbe60>
   41690:	d9801e04 	addi	r6,sp,120
   41694:	b80b883a 	mov	r5,r23
   41698:	8009883a 	mov	r4,r16
   4169c:	0047b500 	call	47b50 <__sprint_r>
   416a0:	103ef31e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   416a4:	8c7ffc04 	addi	r17,r17,-16
   416a8:	d8c02017 	ldw	r3,128(sp)
   416ac:	d8801f17 	ldw	r2,124(sp)
   416b0:	da000404 	addi	r8,sp,16
   416b4:	b47fed16 	blt	r22,r17,4166c <__alt_data_end+0xfffdbe6c>
   416b8:	9021883a 	mov	r16,r18
   416bc:	9825883a 	mov	r18,r19
   416c0:	8827883a 	mov	r19,r17
   416c4:	dc403b17 	ldw	r17,236(sp)
   416c8:	d9403517 	ldw	r5,212(sp)
   416cc:	98c7883a 	add	r3,r19,r3
   416d0:	10800044 	addi	r2,r2,1
   416d4:	41400015 	stw	r5,0(r8)
   416d8:	44c00115 	stw	r19,4(r8)
   416dc:	d8c02015 	stw	r3,128(sp)
   416e0:	d8801f15 	stw	r2,124(sp)
   416e4:	010001c4 	movi	r4,7
   416e8:	2082c516 	blt	r4,r2,42200 <___vfprintf_internal_r+0x13a0>
   416ec:	df002787 	ldb	fp,158(sp)
   416f0:	42000204 	addi	r8,r8,8
   416f4:	e0000c26 	beq	fp,zero,41728 <___vfprintf_internal_r+0x8c8>
   416f8:	d8801f17 	ldw	r2,124(sp)
   416fc:	d9002784 	addi	r4,sp,158
   41700:	18c00044 	addi	r3,r3,1
   41704:	10800044 	addi	r2,r2,1
   41708:	41000015 	stw	r4,0(r8)
   4170c:	01000044 	movi	r4,1
   41710:	41000115 	stw	r4,4(r8)
   41714:	d8c02015 	stw	r3,128(sp)
   41718:	d8801f15 	stw	r2,124(sp)
   4171c:	010001c4 	movi	r4,7
   41720:	20825e16 	blt	r4,r2,4209c <___vfprintf_internal_r+0x123c>
   41724:	42000204 	addi	r8,r8,8
   41728:	d8802c17 	ldw	r2,176(sp)
   4172c:	10000c26 	beq	r2,zero,41760 <___vfprintf_internal_r+0x900>
   41730:	d8801f17 	ldw	r2,124(sp)
   41734:	d9002704 	addi	r4,sp,156
   41738:	18c00084 	addi	r3,r3,2
   4173c:	10800044 	addi	r2,r2,1
   41740:	41000015 	stw	r4,0(r8)
   41744:	01000084 	movi	r4,2
   41748:	41000115 	stw	r4,4(r8)
   4174c:	d8c02015 	stw	r3,128(sp)
   41750:	d8801f15 	stw	r2,124(sp)
   41754:	010001c4 	movi	r4,7
   41758:	20825816 	blt	r4,r2,420bc <___vfprintf_internal_r+0x125c>
   4175c:	42000204 	addi	r8,r8,8
   41760:	d9003017 	ldw	r4,192(sp)
   41764:	00802004 	movi	r2,128
   41768:	2081bb26 	beq	r4,r2,41e58 <___vfprintf_internal_r+0xff8>
   4176c:	d9402a17 	ldw	r5,168(sp)
   41770:	d8802b17 	ldw	r2,172(sp)
   41774:	28adc83a 	sub	r22,r5,r2
   41778:	0580310e 	bge	zero,r22,41840 <___vfprintf_internal_r+0x9e0>
   4177c:	07000404 	movi	fp,16
   41780:	d8801f17 	ldw	r2,124(sp)
   41784:	e584360e 	bge	fp,r22,42860 <___vfprintf_internal_r+0x1a00>
   41788:	014001b4 	movhi	r5,6
   4178c:	2964df84 	addi	r5,r5,-27778
   41790:	dc402a15 	stw	r17,168(sp)
   41794:	d9402c15 	stw	r5,176(sp)
   41798:	b023883a 	mov	r17,r22
   4179c:	04c001c4 	movi	r19,7
   417a0:	a82d883a 	mov	r22,r21
   417a4:	902b883a 	mov	r21,r18
   417a8:	8025883a 	mov	r18,r16
   417ac:	dc002d17 	ldw	r16,180(sp)
   417b0:	00000306 	br	417c0 <___vfprintf_internal_r+0x960>
   417b4:	8c7ffc04 	addi	r17,r17,-16
   417b8:	42000204 	addi	r8,r8,8
   417bc:	e440110e 	bge	fp,r17,41804 <___vfprintf_internal_r+0x9a4>
   417c0:	18c00404 	addi	r3,r3,16
   417c4:	10800044 	addi	r2,r2,1
   417c8:	45000015 	stw	r20,0(r8)
   417cc:	47000115 	stw	fp,4(r8)
   417d0:	d8c02015 	stw	r3,128(sp)
   417d4:	d8801f15 	stw	r2,124(sp)
   417d8:	98bff60e 	bge	r19,r2,417b4 <__alt_data_end+0xfffdbfb4>
   417dc:	d9801e04 	addi	r6,sp,120
   417e0:	b80b883a 	mov	r5,r23
   417e4:	8009883a 	mov	r4,r16
   417e8:	0047b500 	call	47b50 <__sprint_r>
   417ec:	103ea01e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   417f0:	8c7ffc04 	addi	r17,r17,-16
   417f4:	d8c02017 	ldw	r3,128(sp)
   417f8:	d8801f17 	ldw	r2,124(sp)
   417fc:	da000404 	addi	r8,sp,16
   41800:	e47fef16 	blt	fp,r17,417c0 <__alt_data_end+0xfffdbfc0>
   41804:	9021883a 	mov	r16,r18
   41808:	a825883a 	mov	r18,r21
   4180c:	b02b883a 	mov	r21,r22
   41810:	882d883a 	mov	r22,r17
   41814:	dc402a17 	ldw	r17,168(sp)
   41818:	d9002c17 	ldw	r4,176(sp)
   4181c:	1d87883a 	add	r3,r3,r22
   41820:	10800044 	addi	r2,r2,1
   41824:	41000015 	stw	r4,0(r8)
   41828:	45800115 	stw	r22,4(r8)
   4182c:	d8c02015 	stw	r3,128(sp)
   41830:	d8801f15 	stw	r2,124(sp)
   41834:	010001c4 	movi	r4,7
   41838:	20821016 	blt	r4,r2,4207c <___vfprintf_internal_r+0x121c>
   4183c:	42000204 	addi	r8,r8,8
   41840:	9080400c 	andi	r2,r18,256
   41844:	10013a1e 	bne	r2,zero,41d30 <___vfprintf_internal_r+0xed0>
   41848:	d9402b17 	ldw	r5,172(sp)
   4184c:	d8801f17 	ldw	r2,124(sp)
   41850:	44000015 	stw	r16,0(r8)
   41854:	1947883a 	add	r3,r3,r5
   41858:	10800044 	addi	r2,r2,1
   4185c:	41400115 	stw	r5,4(r8)
   41860:	d8c02015 	stw	r3,128(sp)
   41864:	d8801f15 	stw	r2,124(sp)
   41868:	010001c4 	movi	r4,7
   4186c:	2081f516 	blt	r4,r2,42044 <___vfprintf_internal_r+0x11e4>
   41870:	42000204 	addi	r8,r8,8
   41874:	9480010c 	andi	r18,r18,4
   41878:	90003226 	beq	r18,zero,41944 <___vfprintf_internal_r+0xae4>
   4187c:	d9403117 	ldw	r5,196(sp)
   41880:	d8802917 	ldw	r2,164(sp)
   41884:	28a1c83a 	sub	r16,r5,r2
   41888:	04002e0e 	bge	zero,r16,41944 <___vfprintf_internal_r+0xae4>
   4188c:	04400404 	movi	r17,16
   41890:	d8801f17 	ldw	r2,124(sp)
   41894:	8c04c40e 	bge	r17,r16,42ba8 <___vfprintf_internal_r+0x1d48>
   41898:	014001b4 	movhi	r5,6
   4189c:	2964e384 	addi	r5,r5,-27762
   418a0:	d9403515 	stw	r5,212(sp)
   418a4:	048001c4 	movi	r18,7
   418a8:	dcc02d17 	ldw	r19,180(sp)
   418ac:	00000306 	br	418bc <___vfprintf_internal_r+0xa5c>
   418b0:	843ffc04 	addi	r16,r16,-16
   418b4:	42000204 	addi	r8,r8,8
   418b8:	8c00130e 	bge	r17,r16,41908 <___vfprintf_internal_r+0xaa8>
   418bc:	010001b4 	movhi	r4,6
   418c0:	18c00404 	addi	r3,r3,16
   418c4:	10800044 	addi	r2,r2,1
   418c8:	2124e384 	addi	r4,r4,-27762
   418cc:	41000015 	stw	r4,0(r8)
   418d0:	44400115 	stw	r17,4(r8)
   418d4:	d8c02015 	stw	r3,128(sp)
   418d8:	d8801f15 	stw	r2,124(sp)
   418dc:	90bff40e 	bge	r18,r2,418b0 <__alt_data_end+0xfffdc0b0>
   418e0:	d9801e04 	addi	r6,sp,120
   418e4:	b80b883a 	mov	r5,r23
   418e8:	9809883a 	mov	r4,r19
   418ec:	0047b500 	call	47b50 <__sprint_r>
   418f0:	103e5f1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   418f4:	843ffc04 	addi	r16,r16,-16
   418f8:	d8c02017 	ldw	r3,128(sp)
   418fc:	d8801f17 	ldw	r2,124(sp)
   41900:	da000404 	addi	r8,sp,16
   41904:	8c3fed16 	blt	r17,r16,418bc <__alt_data_end+0xfffdc0bc>
   41908:	d9403517 	ldw	r5,212(sp)
   4190c:	1c07883a 	add	r3,r3,r16
   41910:	10800044 	addi	r2,r2,1
   41914:	41400015 	stw	r5,0(r8)
   41918:	44000115 	stw	r16,4(r8)
   4191c:	d8c02015 	stw	r3,128(sp)
   41920:	d8801f15 	stw	r2,124(sp)
   41924:	010001c4 	movi	r4,7
   41928:	2080060e 	bge	r4,r2,41944 <___vfprintf_internal_r+0xae4>
   4192c:	d9002d17 	ldw	r4,180(sp)
   41930:	d9801e04 	addi	r6,sp,120
   41934:	b80b883a 	mov	r5,r23
   41938:	0047b500 	call	47b50 <__sprint_r>
   4193c:	103e4c1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   41940:	d8c02017 	ldw	r3,128(sp)
   41944:	d8803117 	ldw	r2,196(sp)
   41948:	d9002917 	ldw	r4,164(sp)
   4194c:	1100010e 	bge	r2,r4,41954 <___vfprintf_internal_r+0xaf4>
   41950:	2005883a 	mov	r2,r4
   41954:	d9402f17 	ldw	r5,188(sp)
   41958:	288b883a 	add	r5,r5,r2
   4195c:	d9402f15 	stw	r5,188(sp)
   41960:	1801c01e 	bne	r3,zero,42064 <___vfprintf_internal_r+0x1204>
   41964:	a8800007 	ldb	r2,0(r21)
   41968:	d8001f15 	stw	zero,124(sp)
   4196c:	da000404 	addi	r8,sp,16
   41970:	103d751e 	bne	r2,zero,40f48 <__alt_data_end+0xfffdb748>
   41974:	a823883a 	mov	r17,r21
   41978:	003d8b06 	br	40fa8 <__alt_data_end+0xfffdb7a8>
   4197c:	8025883a 	mov	r18,r16
   41980:	dc002903 	ldbu	r16,164(sp)
   41984:	e011883a 	mov	r8,fp
   41988:	84003fcc 	andi	r16,r16,255
   4198c:	8005e51e 	bne	r16,zero,43124 <___vfprintf_internal_r+0x22c4>
   41990:	94800414 	ori	r18,r18,16
   41994:	9080080c 	andi	r2,r18,32
   41998:	10022b26 	beq	r2,zero,42248 <___vfprintf_internal_r+0x13e8>
   4199c:	d9002e17 	ldw	r4,184(sp)
   419a0:	d9402a17 	ldw	r5,168(sp)
   419a4:	d8002785 	stb	zero,158(sp)
   419a8:	20c00204 	addi	r3,r4,8
   419ac:	24c00017 	ldw	r19,0(r4)
   419b0:	25800117 	ldw	r22,4(r4)
   419b4:	28042e16 	blt	r5,zero,42a70 <___vfprintf_internal_r+0x1c10>
   419b8:	013fdfc4 	movi	r4,-129
   419bc:	9d84b03a 	or	r2,r19,r22
   419c0:	d8c02e15 	stw	r3,184(sp)
   419c4:	9124703a 	and	r18,r18,r4
   419c8:	0039883a 	mov	fp,zero
   419cc:	103e801e 	bne	r2,zero,413d0 <__alt_data_end+0xfffdbbd0>
   419d0:	d9002a17 	ldw	r4,168(sp)
   419d4:	2002e01e 	bne	r4,zero,42558 <___vfprintf_internal_r+0x16f8>
   419d8:	d8002a15 	stw	zero,168(sp)
   419dc:	d8002b15 	stw	zero,172(sp)
   419e0:	dc001e04 	addi	r16,sp,120
   419e4:	003ef506 	br	415bc <__alt_data_end+0xfffdbdbc>
   419e8:	8025883a 	mov	r18,r16
   419ec:	dc002903 	ldbu	r16,164(sp)
   419f0:	e011883a 	mov	r8,fp
   419f4:	84003fcc 	andi	r16,r16,255
   419f8:	8005ba1e 	bne	r16,zero,430e4 <___vfprintf_internal_r+0x2284>
   419fc:	010001b4 	movhi	r4,6
   41a00:	2124d304 	addi	r4,r4,-27828
   41a04:	d9003915 	stw	r4,228(sp)
   41a08:	9080080c 	andi	r2,r18,32
   41a0c:	10006126 	beq	r2,zero,41b94 <___vfprintf_internal_r+0xd34>
   41a10:	d9402e17 	ldw	r5,184(sp)
   41a14:	2cc00017 	ldw	r19,0(r5)
   41a18:	2d800117 	ldw	r22,4(r5)
   41a1c:	29400204 	addi	r5,r5,8
   41a20:	d9402e15 	stw	r5,184(sp)
   41a24:	9080004c 	andi	r2,r18,1
   41a28:	1001ac26 	beq	r2,zero,420dc <___vfprintf_internal_r+0x127c>
   41a2c:	9d84b03a 	or	r2,r19,r22
   41a30:	10038526 	beq	r2,zero,42848 <___vfprintf_internal_r+0x19e8>
   41a34:	d8c02a17 	ldw	r3,168(sp)
   41a38:	00800c04 	movi	r2,48
   41a3c:	d8802705 	stb	r2,156(sp)
   41a40:	dc402745 	stb	r17,157(sp)
   41a44:	d8002785 	stb	zero,158(sp)
   41a48:	90800094 	ori	r2,r18,2
   41a4c:	18047916 	blt	r3,zero,42c34 <___vfprintf_internal_r+0x1dd4>
   41a50:	00bfdfc4 	movi	r2,-129
   41a54:	90a4703a 	and	r18,r18,r2
   41a58:	94800094 	ori	r18,r18,2
   41a5c:	0039883a 	mov	fp,zero
   41a60:	d9003917 	ldw	r4,228(sp)
   41a64:	dc001e04 	addi	r16,sp,120
   41a68:	988003cc 	andi	r2,r19,15
   41a6c:	b006973a 	slli	r3,r22,28
   41a70:	2085883a 	add	r2,r4,r2
   41a74:	9826d13a 	srli	r19,r19,4
   41a78:	10800003 	ldbu	r2,0(r2)
   41a7c:	b02cd13a 	srli	r22,r22,4
   41a80:	843fffc4 	addi	r16,r16,-1
   41a84:	1ce6b03a 	or	r19,r3,r19
   41a88:	80800005 	stb	r2,0(r16)
   41a8c:	9d84b03a 	or	r2,r19,r22
   41a90:	103ff51e 	bne	r2,zero,41a68 <__alt_data_end+0xfffdc268>
   41a94:	d8c02817 	ldw	r3,160(sp)
   41a98:	1c07c83a 	sub	r3,r3,r16
   41a9c:	d8c02b15 	stw	r3,172(sp)
   41aa0:	003ec606 	br	415bc <__alt_data_end+0xfffdbdbc>
   41aa4:	8025883a 	mov	r18,r16
   41aa8:	dc002903 	ldbu	r16,164(sp)
   41aac:	e011883a 	mov	r8,fp
   41ab0:	84003fcc 	andi	r16,r16,255
   41ab4:	803e9626 	beq	r16,zero,41510 <__alt_data_end+0xfffdbd10>
   41ab8:	d8c02b03 	ldbu	r3,172(sp)
   41abc:	d8c02785 	stb	r3,158(sp)
   41ac0:	003e9306 	br	41510 <__alt_data_end+0xfffdbd10>
   41ac4:	00c00044 	movi	r3,1
   41ac8:	d8c02905 	stb	r3,164(sp)
   41acc:	00c00ac4 	movi	r3,43
   41ad0:	d8c02b05 	stb	r3,172(sp)
   41ad4:	ac400007 	ldb	r17,0(r21)
   41ad8:	003d4306 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   41adc:	84000814 	ori	r16,r16,32
   41ae0:	ac400007 	ldb	r17,0(r21)
   41ae4:	003d4006 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   41ae8:	d8802e17 	ldw	r2,184(sp)
   41aec:	8025883a 	mov	r18,r16
   41af0:	d8002785 	stb	zero,158(sp)
   41af4:	14000017 	ldw	r16,0(r2)
   41af8:	e011883a 	mov	r8,fp
   41afc:	14c00104 	addi	r19,r2,4
   41b00:	80042d26 	beq	r16,zero,42bb8 <___vfprintf_internal_r+0x1d58>
   41b04:	d8c02a17 	ldw	r3,168(sp)
   41b08:	1803e416 	blt	r3,zero,42a9c <___vfprintf_internal_r+0x1c3c>
   41b0c:	180d883a 	mov	r6,r3
   41b10:	000b883a 	mov	r5,zero
   41b14:	8009883a 	mov	r4,r16
   41b18:	df003d15 	stw	fp,244(sp)
   41b1c:	00462d00 	call	462d0 <memchr>
   41b20:	da003d17 	ldw	r8,244(sp)
   41b24:	10046826 	beq	r2,zero,42cc8 <___vfprintf_internal_r+0x1e68>
   41b28:	1405c83a 	sub	r2,r2,r16
   41b2c:	d8802b15 	stw	r2,172(sp)
   41b30:	1003e016 	blt	r2,zero,42ab4 <___vfprintf_internal_r+0x1c54>
   41b34:	df002783 	ldbu	fp,158(sp)
   41b38:	d8802915 	stw	r2,164(sp)
   41b3c:	dcc02e15 	stw	r19,184(sp)
   41b40:	d8002a15 	stw	zero,168(sp)
   41b44:	d8003215 	stw	zero,200(sp)
   41b48:	003ea206 	br	415d4 <__alt_data_end+0xfffdbdd4>
   41b4c:	8025883a 	mov	r18,r16
   41b50:	dc002903 	ldbu	r16,164(sp)
   41b54:	e011883a 	mov	r8,fp
   41b58:	84003fcc 	andi	r16,r16,255
   41b5c:	803f8d26 	beq	r16,zero,41994 <__alt_data_end+0xfffdc194>
   41b60:	d8c02b03 	ldbu	r3,172(sp)
   41b64:	d8c02785 	stb	r3,158(sp)
   41b68:	003f8a06 	br	41994 <__alt_data_end+0xfffdc194>
   41b6c:	8025883a 	mov	r18,r16
   41b70:	dc002903 	ldbu	r16,164(sp)
   41b74:	e011883a 	mov	r8,fp
   41b78:	84003fcc 	andi	r16,r16,255
   41b7c:	8005661e 	bne	r16,zero,43118 <___vfprintf_internal_r+0x22b8>
   41b80:	010001b4 	movhi	r4,6
   41b84:	2124d804 	addi	r4,r4,-27808
   41b88:	d9003915 	stw	r4,228(sp)
   41b8c:	9080080c 	andi	r2,r18,32
   41b90:	103f9f1e 	bne	r2,zero,41a10 <__alt_data_end+0xfffdc210>
   41b94:	9080040c 	andi	r2,r18,16
   41b98:	1002eb26 	beq	r2,zero,42748 <___vfprintf_internal_r+0x18e8>
   41b9c:	d8802e17 	ldw	r2,184(sp)
   41ba0:	002d883a 	mov	r22,zero
   41ba4:	14c00017 	ldw	r19,0(r2)
   41ba8:	10800104 	addi	r2,r2,4
   41bac:	d8802e15 	stw	r2,184(sp)
   41bb0:	003f9c06 	br	41a24 <__alt_data_end+0xfffdc224>
   41bb4:	d8802b07 	ldb	r2,172(sp)
   41bb8:	1002e11e 	bne	r2,zero,42740 <___vfprintf_internal_r+0x18e0>
   41bbc:	00c00044 	movi	r3,1
   41bc0:	d8c02905 	stb	r3,164(sp)
   41bc4:	00c00804 	movi	r3,32
   41bc8:	d8c02b05 	stb	r3,172(sp)
   41bcc:	ac400007 	ldb	r17,0(r21)
   41bd0:	003d0506 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   41bd4:	84000054 	ori	r16,r16,1
   41bd8:	ac400007 	ldb	r17,0(r21)
   41bdc:	003d0206 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   41be0:	8025883a 	mov	r18,r16
   41be4:	dc002903 	ldbu	r16,164(sp)
   41be8:	e011883a 	mov	r8,fp
   41bec:	84003fcc 	andi	r16,r16,255
   41bf0:	803de726 	beq	r16,zero,41390 <__alt_data_end+0xfffdbb90>
   41bf4:	d8c02b03 	ldbu	r3,172(sp)
   41bf8:	d8c02785 	stb	r3,158(sp)
   41bfc:	003de406 	br	41390 <__alt_data_end+0xfffdbb90>
   41c00:	84001014 	ori	r16,r16,64
   41c04:	ac400007 	ldb	r17,0(r21)
   41c08:	003cf706 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   41c0c:	ac400007 	ldb	r17,0(r21)
   41c10:	00801b04 	movi	r2,108
   41c14:	88838f26 	beq	r17,r2,42a54 <___vfprintf_internal_r+0x1bf4>
   41c18:	84000414 	ori	r16,r16,16
   41c1c:	003cf206 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   41c20:	8025883a 	mov	r18,r16
   41c24:	dc002903 	ldbu	r16,164(sp)
   41c28:	e011883a 	mov	r8,fp
   41c2c:	84003fcc 	andi	r16,r16,255
   41c30:	80053f1e 	bne	r16,zero,43130 <___vfprintf_internal_r+0x22d0>
   41c34:	9080080c 	andi	r2,r18,32
   41c38:	1002d226 	beq	r2,zero,42784 <___vfprintf_internal_r+0x1924>
   41c3c:	d9002e17 	ldw	r4,184(sp)
   41c40:	d9402f17 	ldw	r5,188(sp)
   41c44:	20800017 	ldw	r2,0(r4)
   41c48:	2807d7fa 	srai	r3,r5,31
   41c4c:	21000104 	addi	r4,r4,4
   41c50:	d9002e15 	stw	r4,184(sp)
   41c54:	11400015 	stw	r5,0(r2)
   41c58:	10c00115 	stw	r3,4(r2)
   41c5c:	003cb806 	br	40f40 <__alt_data_end+0xfffdb740>
   41c60:	d8c02e17 	ldw	r3,184(sp)
   41c64:	d9002e17 	ldw	r4,184(sp)
   41c68:	8025883a 	mov	r18,r16
   41c6c:	18800017 	ldw	r2,0(r3)
   41c70:	21000104 	addi	r4,r4,4
   41c74:	00c00044 	movi	r3,1
   41c78:	e011883a 	mov	r8,fp
   41c7c:	d8c02915 	stw	r3,164(sp)
   41c80:	d8002785 	stb	zero,158(sp)
   41c84:	d8801405 	stb	r2,80(sp)
   41c88:	d9002e15 	stw	r4,184(sp)
   41c8c:	d8c02b15 	stw	r3,172(sp)
   41c90:	d8002a15 	stw	zero,168(sp)
   41c94:	d8003215 	stw	zero,200(sp)
   41c98:	dc001404 	addi	r16,sp,80
   41c9c:	0039883a 	mov	fp,zero
   41ca0:	003e5306 	br	415f0 <__alt_data_end+0xfffdbdf0>
   41ca4:	010001b4 	movhi	r4,6
   41ca8:	2124d804 	addi	r4,r4,-27808
   41cac:	0039883a 	mov	fp,zero
   41cb0:	d9003915 	stw	r4,228(sp)
   41cb4:	04401e04 	movi	r17,120
   41cb8:	003f6906 	br	41a60 <__alt_data_end+0xfffdc260>
   41cbc:	8025883a 	mov	r18,r16
   41cc0:	dc002903 	ldbu	r16,164(sp)
   41cc4:	e011883a 	mov	r8,fp
   41cc8:	84003fcc 	andi	r16,r16,255
   41ccc:	8005081e 	bne	r16,zero,430f0 <___vfprintf_internal_r+0x2290>
   41cd0:	883d6126 	beq	r17,zero,41258 <__alt_data_end+0xfffdba58>
   41cd4:	00c00044 	movi	r3,1
   41cd8:	d8c02915 	stw	r3,164(sp)
   41cdc:	dc401405 	stb	r17,80(sp)
   41ce0:	d8002785 	stb	zero,158(sp)
   41ce4:	003fe906 	br	41c8c <__alt_data_end+0xfffdc48c>
   41ce8:	014001b4 	movhi	r5,6
   41cec:	2964d804 	addi	r5,r5,-27808
   41cf0:	d9403915 	stw	r5,228(sp)
   41cf4:	d8c02e15 	stw	r3,184(sp)
   41cf8:	1025883a 	mov	r18,r2
   41cfc:	04401e04 	movi	r17,120
   41d00:	9d84b03a 	or	r2,r19,r22
   41d04:	1000fc1e 	bne	r2,zero,420f8 <___vfprintf_internal_r+0x1298>
   41d08:	0039883a 	mov	fp,zero
   41d0c:	00800084 	movi	r2,2
   41d10:	10803fcc 	andi	r2,r2,255
   41d14:	00c00044 	movi	r3,1
   41d18:	10c20f26 	beq	r2,r3,42558 <___vfprintf_internal_r+0x16f8>
   41d1c:	00c00084 	movi	r3,2
   41d20:	10fd3326 	beq	r2,r3,411f0 <__alt_data_end+0xfffdb9f0>
   41d24:	003e0b06 	br	41554 <__alt_data_end+0xfffdbd54>
   41d28:	d8c02017 	ldw	r3,128(sp)
   41d2c:	003e7106 	br	416f4 <__alt_data_end+0xfffdbef4>
   41d30:	00801944 	movi	r2,101
   41d34:	14407e0e 	bge	r2,r17,41f30 <___vfprintf_internal_r+0x10d0>
   41d38:	d9003617 	ldw	r4,216(sp)
   41d3c:	d9403817 	ldw	r5,224(sp)
   41d40:	000d883a 	mov	r6,zero
   41d44:	000f883a 	mov	r7,zero
   41d48:	d8c03c15 	stw	r3,240(sp)
   41d4c:	da003d15 	stw	r8,244(sp)
   41d50:	004c6100 	call	4c610 <__eqdf2>
   41d54:	d8c03c17 	ldw	r3,240(sp)
   41d58:	da003d17 	ldw	r8,244(sp)
   41d5c:	1000f71e 	bne	r2,zero,4213c <___vfprintf_internal_r+0x12dc>
   41d60:	d8801f17 	ldw	r2,124(sp)
   41d64:	010001b4 	movhi	r4,6
   41d68:	2124df04 	addi	r4,r4,-27780
   41d6c:	18c00044 	addi	r3,r3,1
   41d70:	10800044 	addi	r2,r2,1
   41d74:	41000015 	stw	r4,0(r8)
   41d78:	01000044 	movi	r4,1
   41d7c:	41000115 	stw	r4,4(r8)
   41d80:	d8c02015 	stw	r3,128(sp)
   41d84:	d8801f15 	stw	r2,124(sp)
   41d88:	010001c4 	movi	r4,7
   41d8c:	2082b816 	blt	r4,r2,42870 <___vfprintf_internal_r+0x1a10>
   41d90:	42000204 	addi	r8,r8,8
   41d94:	d8802617 	ldw	r2,152(sp)
   41d98:	d9403317 	ldw	r5,204(sp)
   41d9c:	11400216 	blt	r2,r5,41da8 <___vfprintf_internal_r+0xf48>
   41da0:	9080004c 	andi	r2,r18,1
   41da4:	103eb326 	beq	r2,zero,41874 <__alt_data_end+0xfffdc074>
   41da8:	d8803717 	ldw	r2,220(sp)
   41dac:	d9003417 	ldw	r4,208(sp)
   41db0:	d9403717 	ldw	r5,220(sp)
   41db4:	1887883a 	add	r3,r3,r2
   41db8:	d8801f17 	ldw	r2,124(sp)
   41dbc:	41000015 	stw	r4,0(r8)
   41dc0:	41400115 	stw	r5,4(r8)
   41dc4:	10800044 	addi	r2,r2,1
   41dc8:	d8c02015 	stw	r3,128(sp)
   41dcc:	d8801f15 	stw	r2,124(sp)
   41dd0:	010001c4 	movi	r4,7
   41dd4:	20832916 	blt	r4,r2,42a7c <___vfprintf_internal_r+0x1c1c>
   41dd8:	42000204 	addi	r8,r8,8
   41ddc:	d8803317 	ldw	r2,204(sp)
   41de0:	143fffc4 	addi	r16,r2,-1
   41de4:	043ea30e 	bge	zero,r16,41874 <__alt_data_end+0xfffdc074>
   41de8:	04400404 	movi	r17,16
   41dec:	d8801f17 	ldw	r2,124(sp)
   41df0:	8c00880e 	bge	r17,r16,42014 <___vfprintf_internal_r+0x11b4>
   41df4:	014001b4 	movhi	r5,6
   41df8:	2964df84 	addi	r5,r5,-27778
   41dfc:	d9402c15 	stw	r5,176(sp)
   41e00:	058001c4 	movi	r22,7
   41e04:	dcc02d17 	ldw	r19,180(sp)
   41e08:	00000306 	br	41e18 <___vfprintf_internal_r+0xfb8>
   41e0c:	42000204 	addi	r8,r8,8
   41e10:	843ffc04 	addi	r16,r16,-16
   41e14:	8c00820e 	bge	r17,r16,42020 <___vfprintf_internal_r+0x11c0>
   41e18:	18c00404 	addi	r3,r3,16
   41e1c:	10800044 	addi	r2,r2,1
   41e20:	45000015 	stw	r20,0(r8)
   41e24:	44400115 	stw	r17,4(r8)
   41e28:	d8c02015 	stw	r3,128(sp)
   41e2c:	d8801f15 	stw	r2,124(sp)
   41e30:	b0bff60e 	bge	r22,r2,41e0c <__alt_data_end+0xfffdc60c>
   41e34:	d9801e04 	addi	r6,sp,120
   41e38:	b80b883a 	mov	r5,r23
   41e3c:	9809883a 	mov	r4,r19
   41e40:	0047b500 	call	47b50 <__sprint_r>
   41e44:	103d0a1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   41e48:	d8c02017 	ldw	r3,128(sp)
   41e4c:	d8801f17 	ldw	r2,124(sp)
   41e50:	da000404 	addi	r8,sp,16
   41e54:	003fee06 	br	41e10 <__alt_data_end+0xfffdc610>
   41e58:	d9403117 	ldw	r5,196(sp)
   41e5c:	d8802917 	ldw	r2,164(sp)
   41e60:	28adc83a 	sub	r22,r5,r2
   41e64:	05be410e 	bge	zero,r22,4176c <__alt_data_end+0xfffdbf6c>
   41e68:	07000404 	movi	fp,16
   41e6c:	d8801f17 	ldw	r2,124(sp)
   41e70:	e5838f0e 	bge	fp,r22,42cb0 <___vfprintf_internal_r+0x1e50>
   41e74:	014001b4 	movhi	r5,6
   41e78:	2964df84 	addi	r5,r5,-27778
   41e7c:	dc403015 	stw	r17,192(sp)
   41e80:	d9402c15 	stw	r5,176(sp)
   41e84:	b023883a 	mov	r17,r22
   41e88:	04c001c4 	movi	r19,7
   41e8c:	a82d883a 	mov	r22,r21
   41e90:	902b883a 	mov	r21,r18
   41e94:	8025883a 	mov	r18,r16
   41e98:	dc002d17 	ldw	r16,180(sp)
   41e9c:	00000306 	br	41eac <___vfprintf_internal_r+0x104c>
   41ea0:	8c7ffc04 	addi	r17,r17,-16
   41ea4:	42000204 	addi	r8,r8,8
   41ea8:	e440110e 	bge	fp,r17,41ef0 <___vfprintf_internal_r+0x1090>
   41eac:	18c00404 	addi	r3,r3,16
   41eb0:	10800044 	addi	r2,r2,1
   41eb4:	45000015 	stw	r20,0(r8)
   41eb8:	47000115 	stw	fp,4(r8)
   41ebc:	d8c02015 	stw	r3,128(sp)
   41ec0:	d8801f15 	stw	r2,124(sp)
   41ec4:	98bff60e 	bge	r19,r2,41ea0 <__alt_data_end+0xfffdc6a0>
   41ec8:	d9801e04 	addi	r6,sp,120
   41ecc:	b80b883a 	mov	r5,r23
   41ed0:	8009883a 	mov	r4,r16
   41ed4:	0047b500 	call	47b50 <__sprint_r>
   41ed8:	103ce51e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   41edc:	8c7ffc04 	addi	r17,r17,-16
   41ee0:	d8c02017 	ldw	r3,128(sp)
   41ee4:	d8801f17 	ldw	r2,124(sp)
   41ee8:	da000404 	addi	r8,sp,16
   41eec:	e47fef16 	blt	fp,r17,41eac <__alt_data_end+0xfffdc6ac>
   41ef0:	9021883a 	mov	r16,r18
   41ef4:	a825883a 	mov	r18,r21
   41ef8:	b02b883a 	mov	r21,r22
   41efc:	882d883a 	mov	r22,r17
   41f00:	dc403017 	ldw	r17,192(sp)
   41f04:	d9002c17 	ldw	r4,176(sp)
   41f08:	1d87883a 	add	r3,r3,r22
   41f0c:	10800044 	addi	r2,r2,1
   41f10:	41000015 	stw	r4,0(r8)
   41f14:	45800115 	stw	r22,4(r8)
   41f18:	d8c02015 	stw	r3,128(sp)
   41f1c:	d8801f15 	stw	r2,124(sp)
   41f20:	010001c4 	movi	r4,7
   41f24:	20818e16 	blt	r4,r2,42560 <___vfprintf_internal_r+0x1700>
   41f28:	42000204 	addi	r8,r8,8
   41f2c:	003e0f06 	br	4176c <__alt_data_end+0xfffdbf6c>
   41f30:	d9403317 	ldw	r5,204(sp)
   41f34:	00800044 	movi	r2,1
   41f38:	18c00044 	addi	r3,r3,1
   41f3c:	1141530e 	bge	r2,r5,4248c <___vfprintf_internal_r+0x162c>
   41f40:	dc401f17 	ldw	r17,124(sp)
   41f44:	00800044 	movi	r2,1
   41f48:	40800115 	stw	r2,4(r8)
   41f4c:	8c400044 	addi	r17,r17,1
   41f50:	44000015 	stw	r16,0(r8)
   41f54:	d8c02015 	stw	r3,128(sp)
   41f58:	dc401f15 	stw	r17,124(sp)
   41f5c:	008001c4 	movi	r2,7
   41f60:	14416b16 	blt	r2,r17,42510 <___vfprintf_internal_r+0x16b0>
   41f64:	42000204 	addi	r8,r8,8
   41f68:	d8803717 	ldw	r2,220(sp)
   41f6c:	d9003417 	ldw	r4,208(sp)
   41f70:	8c400044 	addi	r17,r17,1
   41f74:	10c7883a 	add	r3,r2,r3
   41f78:	40800115 	stw	r2,4(r8)
   41f7c:	41000015 	stw	r4,0(r8)
   41f80:	d8c02015 	stw	r3,128(sp)
   41f84:	dc401f15 	stw	r17,124(sp)
   41f88:	008001c4 	movi	r2,7
   41f8c:	14416916 	blt	r2,r17,42534 <___vfprintf_internal_r+0x16d4>
   41f90:	45800204 	addi	r22,r8,8
   41f94:	d9003617 	ldw	r4,216(sp)
   41f98:	d9403817 	ldw	r5,224(sp)
   41f9c:	000d883a 	mov	r6,zero
   41fa0:	000f883a 	mov	r7,zero
   41fa4:	d8c03c15 	stw	r3,240(sp)
   41fa8:	004c6100 	call	4c610 <__eqdf2>
   41fac:	d8c03c17 	ldw	r3,240(sp)
   41fb0:	1000bc26 	beq	r2,zero,422a4 <___vfprintf_internal_r+0x1444>
   41fb4:	d9403317 	ldw	r5,204(sp)
   41fb8:	84000044 	addi	r16,r16,1
   41fbc:	8c400044 	addi	r17,r17,1
   41fc0:	28bfffc4 	addi	r2,r5,-1
   41fc4:	1887883a 	add	r3,r3,r2
   41fc8:	b0800115 	stw	r2,4(r22)
   41fcc:	b4000015 	stw	r16,0(r22)
   41fd0:	d8c02015 	stw	r3,128(sp)
   41fd4:	dc401f15 	stw	r17,124(sp)
   41fd8:	008001c4 	movi	r2,7
   41fdc:	14414316 	blt	r2,r17,424ec <___vfprintf_internal_r+0x168c>
   41fe0:	b5800204 	addi	r22,r22,8
   41fe4:	d9003a17 	ldw	r4,232(sp)
   41fe8:	df0022c4 	addi	fp,sp,139
   41fec:	8c400044 	addi	r17,r17,1
   41ff0:	20c7883a 	add	r3,r4,r3
   41ff4:	b7000015 	stw	fp,0(r22)
   41ff8:	b1000115 	stw	r4,4(r22)
   41ffc:	d8c02015 	stw	r3,128(sp)
   42000:	dc401f15 	stw	r17,124(sp)
   42004:	008001c4 	movi	r2,7
   42008:	14400e16 	blt	r2,r17,42044 <___vfprintf_internal_r+0x11e4>
   4200c:	b2000204 	addi	r8,r22,8
   42010:	003e1806 	br	41874 <__alt_data_end+0xfffdc074>
   42014:	010001b4 	movhi	r4,6
   42018:	2124df84 	addi	r4,r4,-27778
   4201c:	d9002c15 	stw	r4,176(sp)
   42020:	d9002c17 	ldw	r4,176(sp)
   42024:	1c07883a 	add	r3,r3,r16
   42028:	44000115 	stw	r16,4(r8)
   4202c:	41000015 	stw	r4,0(r8)
   42030:	10800044 	addi	r2,r2,1
   42034:	d8c02015 	stw	r3,128(sp)
   42038:	d8801f15 	stw	r2,124(sp)
   4203c:	010001c4 	movi	r4,7
   42040:	20be0b0e 	bge	r4,r2,41870 <__alt_data_end+0xfffdc070>
   42044:	d9002d17 	ldw	r4,180(sp)
   42048:	d9801e04 	addi	r6,sp,120
   4204c:	b80b883a 	mov	r5,r23
   42050:	0047b500 	call	47b50 <__sprint_r>
   42054:	103c861e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42058:	d8c02017 	ldw	r3,128(sp)
   4205c:	da000404 	addi	r8,sp,16
   42060:	003e0406 	br	41874 <__alt_data_end+0xfffdc074>
   42064:	d9002d17 	ldw	r4,180(sp)
   42068:	d9801e04 	addi	r6,sp,120
   4206c:	b80b883a 	mov	r5,r23
   42070:	0047b500 	call	47b50 <__sprint_r>
   42074:	103e3b26 	beq	r2,zero,41964 <__alt_data_end+0xfffdc164>
   42078:	003c7d06 	br	41270 <__alt_data_end+0xfffdba70>
   4207c:	d9002d17 	ldw	r4,180(sp)
   42080:	d9801e04 	addi	r6,sp,120
   42084:	b80b883a 	mov	r5,r23
   42088:	0047b500 	call	47b50 <__sprint_r>
   4208c:	103c781e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42090:	d8c02017 	ldw	r3,128(sp)
   42094:	da000404 	addi	r8,sp,16
   42098:	003de906 	br	41840 <__alt_data_end+0xfffdc040>
   4209c:	d9002d17 	ldw	r4,180(sp)
   420a0:	d9801e04 	addi	r6,sp,120
   420a4:	b80b883a 	mov	r5,r23
   420a8:	0047b500 	call	47b50 <__sprint_r>
   420ac:	103c701e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   420b0:	d8c02017 	ldw	r3,128(sp)
   420b4:	da000404 	addi	r8,sp,16
   420b8:	003d9b06 	br	41728 <__alt_data_end+0xfffdbf28>
   420bc:	d9002d17 	ldw	r4,180(sp)
   420c0:	d9801e04 	addi	r6,sp,120
   420c4:	b80b883a 	mov	r5,r23
   420c8:	0047b500 	call	47b50 <__sprint_r>
   420cc:	103c681e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   420d0:	d8c02017 	ldw	r3,128(sp)
   420d4:	da000404 	addi	r8,sp,16
   420d8:	003da106 	br	41760 <__alt_data_end+0xfffdbf60>
   420dc:	d9402a17 	ldw	r5,168(sp)
   420e0:	d8002785 	stb	zero,158(sp)
   420e4:	283f0616 	blt	r5,zero,41d00 <__alt_data_end+0xfffdc500>
   420e8:	00ffdfc4 	movi	r3,-129
   420ec:	9d84b03a 	or	r2,r19,r22
   420f0:	90e4703a 	and	r18,r18,r3
   420f4:	103c3b26 	beq	r2,zero,411e4 <__alt_data_end+0xfffdb9e4>
   420f8:	0039883a 	mov	fp,zero
   420fc:	003e5806 	br	41a60 <__alt_data_end+0xfffdc260>
   42100:	9080040c 	andi	r2,r18,16
   42104:	1001b326 	beq	r2,zero,427d4 <___vfprintf_internal_r+0x1974>
   42108:	d8c02e17 	ldw	r3,184(sp)
   4210c:	d9002a17 	ldw	r4,168(sp)
   42110:	d8002785 	stb	zero,158(sp)
   42114:	18800104 	addi	r2,r3,4
   42118:	1cc00017 	ldw	r19,0(r3)
   4211c:	002d883a 	mov	r22,zero
   42120:	2001b516 	blt	r4,zero,427f8 <___vfprintf_internal_r+0x1998>
   42124:	00ffdfc4 	movi	r3,-129
   42128:	d8802e15 	stw	r2,184(sp)
   4212c:	90e4703a 	and	r18,r18,r3
   42130:	983d0526 	beq	r19,zero,41548 <__alt_data_end+0xfffdbd48>
   42134:	0039883a 	mov	fp,zero
   42138:	003d0806 	br	4155c <__alt_data_end+0xfffdbd5c>
   4213c:	dc402617 	ldw	r17,152(sp)
   42140:	0441d30e 	bge	zero,r17,42890 <___vfprintf_internal_r+0x1a30>
   42144:	dc403217 	ldw	r17,200(sp)
   42148:	d8803317 	ldw	r2,204(sp)
   4214c:	1440010e 	bge	r2,r17,42154 <___vfprintf_internal_r+0x12f4>
   42150:	1023883a 	mov	r17,r2
   42154:	04400a0e 	bge	zero,r17,42180 <___vfprintf_internal_r+0x1320>
   42158:	d8801f17 	ldw	r2,124(sp)
   4215c:	1c47883a 	add	r3,r3,r17
   42160:	44000015 	stw	r16,0(r8)
   42164:	10800044 	addi	r2,r2,1
   42168:	44400115 	stw	r17,4(r8)
   4216c:	d8c02015 	stw	r3,128(sp)
   42170:	d8801f15 	stw	r2,124(sp)
   42174:	010001c4 	movi	r4,7
   42178:	20826516 	blt	r4,r2,42b10 <___vfprintf_internal_r+0x1cb0>
   4217c:	42000204 	addi	r8,r8,8
   42180:	88026116 	blt	r17,zero,42b08 <___vfprintf_internal_r+0x1ca8>
   42184:	d9003217 	ldw	r4,200(sp)
   42188:	2463c83a 	sub	r17,r4,r17
   4218c:	04407b0e 	bge	zero,r17,4237c <___vfprintf_internal_r+0x151c>
   42190:	05800404 	movi	r22,16
   42194:	d8801f17 	ldw	r2,124(sp)
   42198:	b4419d0e 	bge	r22,r17,42810 <___vfprintf_internal_r+0x19b0>
   4219c:	010001b4 	movhi	r4,6
   421a0:	2124df84 	addi	r4,r4,-27778
   421a4:	d9002c15 	stw	r4,176(sp)
   421a8:	070001c4 	movi	fp,7
   421ac:	dcc02d17 	ldw	r19,180(sp)
   421b0:	00000306 	br	421c0 <___vfprintf_internal_r+0x1360>
   421b4:	42000204 	addi	r8,r8,8
   421b8:	8c7ffc04 	addi	r17,r17,-16
   421bc:	b441970e 	bge	r22,r17,4281c <___vfprintf_internal_r+0x19bc>
   421c0:	18c00404 	addi	r3,r3,16
   421c4:	10800044 	addi	r2,r2,1
   421c8:	45000015 	stw	r20,0(r8)
   421cc:	45800115 	stw	r22,4(r8)
   421d0:	d8c02015 	stw	r3,128(sp)
   421d4:	d8801f15 	stw	r2,124(sp)
   421d8:	e0bff60e 	bge	fp,r2,421b4 <__alt_data_end+0xfffdc9b4>
   421dc:	d9801e04 	addi	r6,sp,120
   421e0:	b80b883a 	mov	r5,r23
   421e4:	9809883a 	mov	r4,r19
   421e8:	0047b500 	call	47b50 <__sprint_r>
   421ec:	103c201e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   421f0:	d8c02017 	ldw	r3,128(sp)
   421f4:	d8801f17 	ldw	r2,124(sp)
   421f8:	da000404 	addi	r8,sp,16
   421fc:	003fee06 	br	421b8 <__alt_data_end+0xfffdc9b8>
   42200:	d9002d17 	ldw	r4,180(sp)
   42204:	d9801e04 	addi	r6,sp,120
   42208:	b80b883a 	mov	r5,r23
   4220c:	0047b500 	call	47b50 <__sprint_r>
   42210:	103c171e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42214:	d8c02017 	ldw	r3,128(sp)
   42218:	df002787 	ldb	fp,158(sp)
   4221c:	da000404 	addi	r8,sp,16
   42220:	003d3406 	br	416f4 <__alt_data_end+0xfffdbef4>
   42224:	9080040c 	andi	r2,r18,16
   42228:	10016126 	beq	r2,zero,427b0 <___vfprintf_internal_r+0x1950>
   4222c:	d9402e17 	ldw	r5,184(sp)
   42230:	2cc00017 	ldw	r19,0(r5)
   42234:	29400104 	addi	r5,r5,4
   42238:	d9402e15 	stw	r5,184(sp)
   4223c:	982dd7fa 	srai	r22,r19,31
   42240:	b005883a 	mov	r2,r22
   42244:	003c5a06 	br	413b0 <__alt_data_end+0xfffdbbb0>
   42248:	9080040c 	andi	r2,r18,16
   4224c:	10003526 	beq	r2,zero,42324 <___vfprintf_internal_r+0x14c4>
   42250:	d8c02e17 	ldw	r3,184(sp)
   42254:	d9002a17 	ldw	r4,168(sp)
   42258:	d8002785 	stb	zero,158(sp)
   4225c:	18800104 	addi	r2,r3,4
   42260:	1cc00017 	ldw	r19,0(r3)
   42264:	002d883a 	mov	r22,zero
   42268:	20003716 	blt	r4,zero,42348 <___vfprintf_internal_r+0x14e8>
   4226c:	00ffdfc4 	movi	r3,-129
   42270:	d8802e15 	stw	r2,184(sp)
   42274:	90e4703a 	and	r18,r18,r3
   42278:	0039883a 	mov	fp,zero
   4227c:	983dd426 	beq	r19,zero,419d0 <__alt_data_end+0xfffdc1d0>
   42280:	00800244 	movi	r2,9
   42284:	14fc5336 	bltu	r2,r19,413d4 <__alt_data_end+0xfffdbbd4>
   42288:	d8c02817 	ldw	r3,160(sp)
   4228c:	dc001dc4 	addi	r16,sp,119
   42290:	9cc00c04 	addi	r19,r19,48
   42294:	1c07c83a 	sub	r3,r3,r16
   42298:	dcc01dc5 	stb	r19,119(sp)
   4229c:	d8c02b15 	stw	r3,172(sp)
   422a0:	003cc606 	br	415bc <__alt_data_end+0xfffdbdbc>
   422a4:	d8803317 	ldw	r2,204(sp)
   422a8:	143fffc4 	addi	r16,r2,-1
   422ac:	043f4d0e 	bge	zero,r16,41fe4 <__alt_data_end+0xfffdc7e4>
   422b0:	07000404 	movi	fp,16
   422b4:	e400810e 	bge	fp,r16,424bc <___vfprintf_internal_r+0x165c>
   422b8:	014001b4 	movhi	r5,6
   422bc:	2964df84 	addi	r5,r5,-27778
   422c0:	d9402c15 	stw	r5,176(sp)
   422c4:	01c001c4 	movi	r7,7
   422c8:	dcc02d17 	ldw	r19,180(sp)
   422cc:	00000306 	br	422dc <___vfprintf_internal_r+0x147c>
   422d0:	b5800204 	addi	r22,r22,8
   422d4:	843ffc04 	addi	r16,r16,-16
   422d8:	e4007b0e 	bge	fp,r16,424c8 <___vfprintf_internal_r+0x1668>
   422dc:	18c00404 	addi	r3,r3,16
   422e0:	8c400044 	addi	r17,r17,1
   422e4:	b5000015 	stw	r20,0(r22)
   422e8:	b7000115 	stw	fp,4(r22)
   422ec:	d8c02015 	stw	r3,128(sp)
   422f0:	dc401f15 	stw	r17,124(sp)
   422f4:	3c7ff60e 	bge	r7,r17,422d0 <__alt_data_end+0xfffdcad0>
   422f8:	d9801e04 	addi	r6,sp,120
   422fc:	b80b883a 	mov	r5,r23
   42300:	9809883a 	mov	r4,r19
   42304:	d9c03c15 	stw	r7,240(sp)
   42308:	0047b500 	call	47b50 <__sprint_r>
   4230c:	d9c03c17 	ldw	r7,240(sp)
   42310:	103bd71e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42314:	d8c02017 	ldw	r3,128(sp)
   42318:	dc401f17 	ldw	r17,124(sp)
   4231c:	dd800404 	addi	r22,sp,16
   42320:	003fec06 	br	422d4 <__alt_data_end+0xfffdcad4>
   42324:	9080100c 	andi	r2,r18,64
   42328:	d8002785 	stb	zero,158(sp)
   4232c:	10010e26 	beq	r2,zero,42768 <___vfprintf_internal_r+0x1908>
   42330:	d9402e17 	ldw	r5,184(sp)
   42334:	d8c02a17 	ldw	r3,168(sp)
   42338:	002d883a 	mov	r22,zero
   4233c:	28800104 	addi	r2,r5,4
   42340:	2cc0000b 	ldhu	r19,0(r5)
   42344:	183fc90e 	bge	r3,zero,4226c <__alt_data_end+0xfffdca6c>
   42348:	d8802e15 	stw	r2,184(sp)
   4234c:	0039883a 	mov	fp,zero
   42350:	9d84b03a 	or	r2,r19,r22
   42354:	103c1e1e 	bne	r2,zero,413d0 <__alt_data_end+0xfffdbbd0>
   42358:	00800044 	movi	r2,1
   4235c:	003e6c06 	br	41d10 <__alt_data_end+0xfffdc510>
   42360:	d9002d17 	ldw	r4,180(sp)
   42364:	d9801e04 	addi	r6,sp,120
   42368:	b80b883a 	mov	r5,r23
   4236c:	0047b500 	call	47b50 <__sprint_r>
   42370:	103bbf1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42374:	d8c02017 	ldw	r3,128(sp)
   42378:	da000404 	addi	r8,sp,16
   4237c:	d9003217 	ldw	r4,200(sp)
   42380:	d8802617 	ldw	r2,152(sp)
   42384:	d9403317 	ldw	r5,204(sp)
   42388:	8123883a 	add	r17,r16,r4
   4238c:	11400216 	blt	r2,r5,42398 <___vfprintf_internal_r+0x1538>
   42390:	9100004c 	andi	r4,r18,1
   42394:	20000d26 	beq	r4,zero,423cc <___vfprintf_internal_r+0x156c>
   42398:	d9003717 	ldw	r4,220(sp)
   4239c:	d9403417 	ldw	r5,208(sp)
   423a0:	1907883a 	add	r3,r3,r4
   423a4:	d9001f17 	ldw	r4,124(sp)
   423a8:	41400015 	stw	r5,0(r8)
   423ac:	d9403717 	ldw	r5,220(sp)
   423b0:	21000044 	addi	r4,r4,1
   423b4:	d8c02015 	stw	r3,128(sp)
   423b8:	41400115 	stw	r5,4(r8)
   423bc:	d9001f15 	stw	r4,124(sp)
   423c0:	014001c4 	movi	r5,7
   423c4:	2901e816 	blt	r5,r4,42b68 <___vfprintf_internal_r+0x1d08>
   423c8:	42000204 	addi	r8,r8,8
   423cc:	d9003317 	ldw	r4,204(sp)
   423d0:	8121883a 	add	r16,r16,r4
   423d4:	2085c83a 	sub	r2,r4,r2
   423d8:	8461c83a 	sub	r16,r16,r17
   423dc:	1400010e 	bge	r2,r16,423e4 <___vfprintf_internal_r+0x1584>
   423e0:	1021883a 	mov	r16,r2
   423e4:	04000a0e 	bge	zero,r16,42410 <___vfprintf_internal_r+0x15b0>
   423e8:	d9001f17 	ldw	r4,124(sp)
   423ec:	1c07883a 	add	r3,r3,r16
   423f0:	44400015 	stw	r17,0(r8)
   423f4:	21000044 	addi	r4,r4,1
   423f8:	44000115 	stw	r16,4(r8)
   423fc:	d8c02015 	stw	r3,128(sp)
   42400:	d9001f15 	stw	r4,124(sp)
   42404:	014001c4 	movi	r5,7
   42408:	2901fb16 	blt	r5,r4,42bf8 <___vfprintf_internal_r+0x1d98>
   4240c:	42000204 	addi	r8,r8,8
   42410:	8001f716 	blt	r16,zero,42bf0 <___vfprintf_internal_r+0x1d90>
   42414:	1421c83a 	sub	r16,r2,r16
   42418:	043d160e 	bge	zero,r16,41874 <__alt_data_end+0xfffdc074>
   4241c:	04400404 	movi	r17,16
   42420:	d8801f17 	ldw	r2,124(sp)
   42424:	8c3efb0e 	bge	r17,r16,42014 <__alt_data_end+0xfffdc814>
   42428:	014001b4 	movhi	r5,6
   4242c:	2964df84 	addi	r5,r5,-27778
   42430:	d9402c15 	stw	r5,176(sp)
   42434:	058001c4 	movi	r22,7
   42438:	dcc02d17 	ldw	r19,180(sp)
   4243c:	00000306 	br	4244c <___vfprintf_internal_r+0x15ec>
   42440:	42000204 	addi	r8,r8,8
   42444:	843ffc04 	addi	r16,r16,-16
   42448:	8c3ef50e 	bge	r17,r16,42020 <__alt_data_end+0xfffdc820>
   4244c:	18c00404 	addi	r3,r3,16
   42450:	10800044 	addi	r2,r2,1
   42454:	45000015 	stw	r20,0(r8)
   42458:	44400115 	stw	r17,4(r8)
   4245c:	d8c02015 	stw	r3,128(sp)
   42460:	d8801f15 	stw	r2,124(sp)
   42464:	b0bff60e 	bge	r22,r2,42440 <__alt_data_end+0xfffdcc40>
   42468:	d9801e04 	addi	r6,sp,120
   4246c:	b80b883a 	mov	r5,r23
   42470:	9809883a 	mov	r4,r19
   42474:	0047b500 	call	47b50 <__sprint_r>
   42478:	103b7d1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   4247c:	d8c02017 	ldw	r3,128(sp)
   42480:	d8801f17 	ldw	r2,124(sp)
   42484:	da000404 	addi	r8,sp,16
   42488:	003fee06 	br	42444 <__alt_data_end+0xfffdcc44>
   4248c:	9088703a 	and	r4,r18,r2
   42490:	203eab1e 	bne	r4,zero,41f40 <__alt_data_end+0xfffdc740>
   42494:	dc401f17 	ldw	r17,124(sp)
   42498:	40800115 	stw	r2,4(r8)
   4249c:	44000015 	stw	r16,0(r8)
   424a0:	8c400044 	addi	r17,r17,1
   424a4:	d8c02015 	stw	r3,128(sp)
   424a8:	dc401f15 	stw	r17,124(sp)
   424ac:	008001c4 	movi	r2,7
   424b0:	14400e16 	blt	r2,r17,424ec <___vfprintf_internal_r+0x168c>
   424b4:	45800204 	addi	r22,r8,8
   424b8:	003eca06 	br	41fe4 <__alt_data_end+0xfffdc7e4>
   424bc:	010001b4 	movhi	r4,6
   424c0:	2124df84 	addi	r4,r4,-27778
   424c4:	d9002c15 	stw	r4,176(sp)
   424c8:	d8802c17 	ldw	r2,176(sp)
   424cc:	1c07883a 	add	r3,r3,r16
   424d0:	8c400044 	addi	r17,r17,1
   424d4:	b0800015 	stw	r2,0(r22)
   424d8:	b4000115 	stw	r16,4(r22)
   424dc:	d8c02015 	stw	r3,128(sp)
   424e0:	dc401f15 	stw	r17,124(sp)
   424e4:	008001c4 	movi	r2,7
   424e8:	147ebd0e 	bge	r2,r17,41fe0 <__alt_data_end+0xfffdc7e0>
   424ec:	d9002d17 	ldw	r4,180(sp)
   424f0:	d9801e04 	addi	r6,sp,120
   424f4:	b80b883a 	mov	r5,r23
   424f8:	0047b500 	call	47b50 <__sprint_r>
   424fc:	103b5c1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42500:	d8c02017 	ldw	r3,128(sp)
   42504:	dc401f17 	ldw	r17,124(sp)
   42508:	dd800404 	addi	r22,sp,16
   4250c:	003eb506 	br	41fe4 <__alt_data_end+0xfffdc7e4>
   42510:	d9002d17 	ldw	r4,180(sp)
   42514:	d9801e04 	addi	r6,sp,120
   42518:	b80b883a 	mov	r5,r23
   4251c:	0047b500 	call	47b50 <__sprint_r>
   42520:	103b531e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42524:	d8c02017 	ldw	r3,128(sp)
   42528:	dc401f17 	ldw	r17,124(sp)
   4252c:	da000404 	addi	r8,sp,16
   42530:	003e8d06 	br	41f68 <__alt_data_end+0xfffdc768>
   42534:	d9002d17 	ldw	r4,180(sp)
   42538:	d9801e04 	addi	r6,sp,120
   4253c:	b80b883a 	mov	r5,r23
   42540:	0047b500 	call	47b50 <__sprint_r>
   42544:	103b4a1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42548:	d8c02017 	ldw	r3,128(sp)
   4254c:	dc401f17 	ldw	r17,124(sp)
   42550:	dd800404 	addi	r22,sp,16
   42554:	003e8f06 	br	41f94 <__alt_data_end+0xfffdc794>
   42558:	0027883a 	mov	r19,zero
   4255c:	003f4a06 	br	42288 <__alt_data_end+0xfffdca88>
   42560:	d9002d17 	ldw	r4,180(sp)
   42564:	d9801e04 	addi	r6,sp,120
   42568:	b80b883a 	mov	r5,r23
   4256c:	0047b500 	call	47b50 <__sprint_r>
   42570:	103b3f1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42574:	d8c02017 	ldw	r3,128(sp)
   42578:	da000404 	addi	r8,sp,16
   4257c:	003c7b06 	br	4176c <__alt_data_end+0xfffdbf6c>
   42580:	d9402a17 	ldw	r5,168(sp)
   42584:	04e7c83a 	sub	r19,zero,r19
   42588:	07000b44 	movi	fp,45
   4258c:	9804c03a 	cmpne	r2,r19,zero
   42590:	05adc83a 	sub	r22,zero,r22
   42594:	df002785 	stb	fp,158(sp)
   42598:	b0adc83a 	sub	r22,r22,r2
   4259c:	28017b16 	blt	r5,zero,42b8c <___vfprintf_internal_r+0x1d2c>
   425a0:	00bfdfc4 	movi	r2,-129
   425a4:	90a4703a 	and	r18,r18,r2
   425a8:	003b8906 	br	413d0 <__alt_data_end+0xfffdbbd0>
   425ac:	d9003617 	ldw	r4,216(sp)
   425b0:	d9403817 	ldw	r5,224(sp)
   425b4:	da003d15 	stw	r8,244(sp)
   425b8:	00476dc0 	call	476dc <__fpclassifyd>
   425bc:	da003d17 	ldw	r8,244(sp)
   425c0:	1000f026 	beq	r2,zero,42984 <___vfprintf_internal_r+0x1b24>
   425c4:	d9002a17 	ldw	r4,168(sp)
   425c8:	05bff7c4 	movi	r22,-33
   425cc:	00bfffc4 	movi	r2,-1
   425d0:	8dac703a 	and	r22,r17,r22
   425d4:	20820026 	beq	r4,r2,42dd8 <___vfprintf_internal_r+0x1f78>
   425d8:	008011c4 	movi	r2,71
   425dc:	b081f726 	beq	r22,r2,42dbc <___vfprintf_internal_r+0x1f5c>
   425e0:	d9003817 	ldw	r4,224(sp)
   425e4:	90c04014 	ori	r3,r18,256
   425e8:	d8c02c15 	stw	r3,176(sp)
   425ec:	20021516 	blt	r4,zero,42e44 <___vfprintf_internal_r+0x1fe4>
   425f0:	dcc03817 	ldw	r19,224(sp)
   425f4:	d8002905 	stb	zero,164(sp)
   425f8:	00801984 	movi	r2,102
   425fc:	8881f926 	beq	r17,r2,42de4 <___vfprintf_internal_r+0x1f84>
   42600:	00801184 	movi	r2,70
   42604:	88821c26 	beq	r17,r2,42e78 <___vfprintf_internal_r+0x2018>
   42608:	00801144 	movi	r2,69
   4260c:	b081ef26 	beq	r22,r2,42dcc <___vfprintf_internal_r+0x1f6c>
   42610:	d8c02a17 	ldw	r3,168(sp)
   42614:	d8802104 	addi	r2,sp,132
   42618:	d8800315 	stw	r2,12(sp)
   4261c:	d9403617 	ldw	r5,216(sp)
   42620:	d8802504 	addi	r2,sp,148
   42624:	d9002d17 	ldw	r4,180(sp)
   42628:	d8800215 	stw	r2,8(sp)
   4262c:	d8802604 	addi	r2,sp,152
   42630:	d8c00015 	stw	r3,0(sp)
   42634:	d8800115 	stw	r2,4(sp)
   42638:	01c00084 	movi	r7,2
   4263c:	980d883a 	mov	r6,r19
   42640:	d8c03c15 	stw	r3,240(sp)
   42644:	da003d15 	stw	r8,244(sp)
   42648:	00435900 	call	43590 <_dtoa_r>
   4264c:	1021883a 	mov	r16,r2
   42650:	008019c4 	movi	r2,103
   42654:	d8c03c17 	ldw	r3,240(sp)
   42658:	da003d17 	ldw	r8,244(sp)
   4265c:	88817126 	beq	r17,r2,42c24 <___vfprintf_internal_r+0x1dc4>
   42660:	008011c4 	movi	r2,71
   42664:	88829126 	beq	r17,r2,430ac <___vfprintf_internal_r+0x224c>
   42668:	80f9883a 	add	fp,r16,r3
   4266c:	d9003617 	ldw	r4,216(sp)
   42670:	000d883a 	mov	r6,zero
   42674:	000f883a 	mov	r7,zero
   42678:	980b883a 	mov	r5,r19
   4267c:	da003d15 	stw	r8,244(sp)
   42680:	004c6100 	call	4c610 <__eqdf2>
   42684:	da003d17 	ldw	r8,244(sp)
   42688:	10018d26 	beq	r2,zero,42cc0 <___vfprintf_internal_r+0x1e60>
   4268c:	d8802117 	ldw	r2,132(sp)
   42690:	1700062e 	bgeu	r2,fp,426ac <___vfprintf_internal_r+0x184c>
   42694:	01000c04 	movi	r4,48
   42698:	10c00044 	addi	r3,r2,1
   4269c:	d8c02115 	stw	r3,132(sp)
   426a0:	11000005 	stb	r4,0(r2)
   426a4:	d8802117 	ldw	r2,132(sp)
   426a8:	173ffb36 	bltu	r2,fp,42698 <__alt_data_end+0xfffdce98>
   426ac:	1405c83a 	sub	r2,r2,r16
   426b0:	d8803315 	stw	r2,204(sp)
   426b4:	008011c4 	movi	r2,71
   426b8:	b0817626 	beq	r22,r2,42c94 <___vfprintf_internal_r+0x1e34>
   426bc:	00801944 	movi	r2,101
   426c0:	1442800e 	bge	r2,r17,430c4 <___vfprintf_internal_r+0x2264>
   426c4:	d8c02617 	ldw	r3,152(sp)
   426c8:	00801984 	movi	r2,102
   426cc:	d8c03215 	stw	r3,200(sp)
   426d0:	8881fe26 	beq	r17,r2,42ecc <___vfprintf_internal_r+0x206c>
   426d4:	d8c03217 	ldw	r3,200(sp)
   426d8:	d9003317 	ldw	r4,204(sp)
   426dc:	1901dd16 	blt	r3,r4,42e54 <___vfprintf_internal_r+0x1ff4>
   426e0:	9480004c 	andi	r18,r18,1
   426e4:	90022b1e 	bne	r18,zero,42f94 <___vfprintf_internal_r+0x2134>
   426e8:	1805883a 	mov	r2,r3
   426ec:	18028316 	blt	r3,zero,430fc <___vfprintf_internal_r+0x229c>
   426f0:	d8c03217 	ldw	r3,200(sp)
   426f4:	044019c4 	movi	r17,103
   426f8:	d8c02b15 	stw	r3,172(sp)
   426fc:	df002907 	ldb	fp,164(sp)
   42700:	e001531e 	bne	fp,zero,42c50 <___vfprintf_internal_r+0x1df0>
   42704:	df002783 	ldbu	fp,158(sp)
   42708:	d8802915 	stw	r2,164(sp)
   4270c:	dc802c17 	ldw	r18,176(sp)
   42710:	d8002a15 	stw	zero,168(sp)
   42714:	003baf06 	br	415d4 <__alt_data_end+0xfffdbdd4>
   42718:	d8c02e17 	ldw	r3,184(sp)
   4271c:	d9002e17 	ldw	r4,184(sp)
   42720:	d9402e17 	ldw	r5,184(sp)
   42724:	18c00017 	ldw	r3,0(r3)
   42728:	21000117 	ldw	r4,4(r4)
   4272c:	29400204 	addi	r5,r5,8
   42730:	d8c03615 	stw	r3,216(sp)
   42734:	d9003815 	stw	r4,224(sp)
   42738:	d9402e15 	stw	r5,184(sp)
   4273c:	003b5006 	br	41480 <__alt_data_end+0xfffdbc80>
   42740:	ac400007 	ldb	r17,0(r21)
   42744:	003a2806 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   42748:	9080100c 	andi	r2,r18,64
   4274c:	1000a826 	beq	r2,zero,429f0 <___vfprintf_internal_r+0x1b90>
   42750:	d8c02e17 	ldw	r3,184(sp)
   42754:	002d883a 	mov	r22,zero
   42758:	1cc0000b 	ldhu	r19,0(r3)
   4275c:	18c00104 	addi	r3,r3,4
   42760:	d8c02e15 	stw	r3,184(sp)
   42764:	003caf06 	br	41a24 <__alt_data_end+0xfffdc224>
   42768:	d9002e17 	ldw	r4,184(sp)
   4276c:	d9402a17 	ldw	r5,168(sp)
   42770:	002d883a 	mov	r22,zero
   42774:	20800104 	addi	r2,r4,4
   42778:	24c00017 	ldw	r19,0(r4)
   4277c:	283ebb0e 	bge	r5,zero,4226c <__alt_data_end+0xfffdca6c>
   42780:	003ef106 	br	42348 <__alt_data_end+0xfffdcb48>
   42784:	9080040c 	andi	r2,r18,16
   42788:	1000921e 	bne	r2,zero,429d4 <___vfprintf_internal_r+0x1b74>
   4278c:	9480100c 	andi	r18,r18,64
   42790:	90013926 	beq	r18,zero,42c78 <___vfprintf_internal_r+0x1e18>
   42794:	d9402e17 	ldw	r5,184(sp)
   42798:	d8c02f17 	ldw	r3,188(sp)
   4279c:	28800017 	ldw	r2,0(r5)
   427a0:	29400104 	addi	r5,r5,4
   427a4:	d9402e15 	stw	r5,184(sp)
   427a8:	10c0000d 	sth	r3,0(r2)
   427ac:	0039e406 	br	40f40 <__alt_data_end+0xfffdb740>
   427b0:	9080100c 	andi	r2,r18,64
   427b4:	10008026 	beq	r2,zero,429b8 <___vfprintf_internal_r+0x1b58>
   427b8:	d8802e17 	ldw	r2,184(sp)
   427bc:	14c0000f 	ldh	r19,0(r2)
   427c0:	10800104 	addi	r2,r2,4
   427c4:	d8802e15 	stw	r2,184(sp)
   427c8:	982dd7fa 	srai	r22,r19,31
   427cc:	b005883a 	mov	r2,r22
   427d0:	003af706 	br	413b0 <__alt_data_end+0xfffdbbb0>
   427d4:	9080100c 	andi	r2,r18,64
   427d8:	d8002785 	stb	zero,158(sp)
   427dc:	10008a1e 	bne	r2,zero,42a08 <___vfprintf_internal_r+0x1ba8>
   427e0:	d9002e17 	ldw	r4,184(sp)
   427e4:	d9402a17 	ldw	r5,168(sp)
   427e8:	002d883a 	mov	r22,zero
   427ec:	20800104 	addi	r2,r4,4
   427f0:	24c00017 	ldw	r19,0(r4)
   427f4:	283e4b0e 	bge	r5,zero,42124 <__alt_data_end+0xfffdc924>
   427f8:	9d86b03a 	or	r3,r19,r22
   427fc:	d8802e15 	stw	r2,184(sp)
   42800:	183e4c1e 	bne	r3,zero,42134 <__alt_data_end+0xfffdc934>
   42804:	0039883a 	mov	fp,zero
   42808:	0005883a 	mov	r2,zero
   4280c:	003d4006 	br	41d10 <__alt_data_end+0xfffdc510>
   42810:	014001b4 	movhi	r5,6
   42814:	2964df84 	addi	r5,r5,-27778
   42818:	d9402c15 	stw	r5,176(sp)
   4281c:	d9402c17 	ldw	r5,176(sp)
   42820:	1c47883a 	add	r3,r3,r17
   42824:	10800044 	addi	r2,r2,1
   42828:	41400015 	stw	r5,0(r8)
   4282c:	44400115 	stw	r17,4(r8)
   42830:	d8c02015 	stw	r3,128(sp)
   42834:	d8801f15 	stw	r2,124(sp)
   42838:	010001c4 	movi	r4,7
   4283c:	20bec816 	blt	r4,r2,42360 <__alt_data_end+0xfffdcb60>
   42840:	42000204 	addi	r8,r8,8
   42844:	003ecd06 	br	4237c <__alt_data_end+0xfffdcb7c>
   42848:	d9002a17 	ldw	r4,168(sp)
   4284c:	d8002785 	stb	zero,158(sp)
   42850:	203d2d16 	blt	r4,zero,41d08 <__alt_data_end+0xfffdc508>
   42854:	00bfdfc4 	movi	r2,-129
   42858:	90a4703a 	and	r18,r18,r2
   4285c:	003a6106 	br	411e4 <__alt_data_end+0xfffdb9e4>
   42860:	010001b4 	movhi	r4,6
   42864:	2124df84 	addi	r4,r4,-27778
   42868:	d9002c15 	stw	r4,176(sp)
   4286c:	003bea06 	br	41818 <__alt_data_end+0xfffdc018>
   42870:	d9002d17 	ldw	r4,180(sp)
   42874:	d9801e04 	addi	r6,sp,120
   42878:	b80b883a 	mov	r5,r23
   4287c:	0047b500 	call	47b50 <__sprint_r>
   42880:	103a7b1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42884:	d8c02017 	ldw	r3,128(sp)
   42888:	da000404 	addi	r8,sp,16
   4288c:	003d4106 	br	41d94 <__alt_data_end+0xfffdc594>
   42890:	d8801f17 	ldw	r2,124(sp)
   42894:	014001b4 	movhi	r5,6
   42898:	01000044 	movi	r4,1
   4289c:	18c00044 	addi	r3,r3,1
   428a0:	10800044 	addi	r2,r2,1
   428a4:	2964df04 	addi	r5,r5,-27780
   428a8:	41000115 	stw	r4,4(r8)
   428ac:	41400015 	stw	r5,0(r8)
   428b0:	d8c02015 	stw	r3,128(sp)
   428b4:	d8801f15 	stw	r2,124(sp)
   428b8:	010001c4 	movi	r4,7
   428bc:	20805c16 	blt	r4,r2,42a30 <___vfprintf_internal_r+0x1bd0>
   428c0:	42000204 	addi	r8,r8,8
   428c4:	8800041e 	bne	r17,zero,428d8 <___vfprintf_internal_r+0x1a78>
   428c8:	d8803317 	ldw	r2,204(sp)
   428cc:	1000021e 	bne	r2,zero,428d8 <___vfprintf_internal_r+0x1a78>
   428d0:	9080004c 	andi	r2,r18,1
   428d4:	103be726 	beq	r2,zero,41874 <__alt_data_end+0xfffdc074>
   428d8:	d9003717 	ldw	r4,220(sp)
   428dc:	d8801f17 	ldw	r2,124(sp)
   428e0:	d9403417 	ldw	r5,208(sp)
   428e4:	20c7883a 	add	r3,r4,r3
   428e8:	10800044 	addi	r2,r2,1
   428ec:	41000115 	stw	r4,4(r8)
   428f0:	41400015 	stw	r5,0(r8)
   428f4:	d8c02015 	stw	r3,128(sp)
   428f8:	d8801f15 	stw	r2,124(sp)
   428fc:	010001c4 	movi	r4,7
   42900:	20812116 	blt	r4,r2,42d88 <___vfprintf_internal_r+0x1f28>
   42904:	42000204 	addi	r8,r8,8
   42908:	0463c83a 	sub	r17,zero,r17
   4290c:	0440730e 	bge	zero,r17,42adc <___vfprintf_internal_r+0x1c7c>
   42910:	05800404 	movi	r22,16
   42914:	b440860e 	bge	r22,r17,42b30 <___vfprintf_internal_r+0x1cd0>
   42918:	014001b4 	movhi	r5,6
   4291c:	2964df84 	addi	r5,r5,-27778
   42920:	d9402c15 	stw	r5,176(sp)
   42924:	070001c4 	movi	fp,7
   42928:	dcc02d17 	ldw	r19,180(sp)
   4292c:	00000306 	br	4293c <___vfprintf_internal_r+0x1adc>
   42930:	42000204 	addi	r8,r8,8
   42934:	8c7ffc04 	addi	r17,r17,-16
   42938:	b440800e 	bge	r22,r17,42b3c <___vfprintf_internal_r+0x1cdc>
   4293c:	18c00404 	addi	r3,r3,16
   42940:	10800044 	addi	r2,r2,1
   42944:	45000015 	stw	r20,0(r8)
   42948:	45800115 	stw	r22,4(r8)
   4294c:	d8c02015 	stw	r3,128(sp)
   42950:	d8801f15 	stw	r2,124(sp)
   42954:	e0bff60e 	bge	fp,r2,42930 <__alt_data_end+0xfffdd130>
   42958:	d9801e04 	addi	r6,sp,120
   4295c:	b80b883a 	mov	r5,r23
   42960:	9809883a 	mov	r4,r19
   42964:	0047b500 	call	47b50 <__sprint_r>
   42968:	103a411e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   4296c:	d8c02017 	ldw	r3,128(sp)
   42970:	d8801f17 	ldw	r2,124(sp)
   42974:	da000404 	addi	r8,sp,16
   42978:	003fee06 	br	42934 <__alt_data_end+0xfffdd134>
   4297c:	00bfffc4 	movi	r2,-1
   42980:	003a3f06 	br	41280 <__alt_data_end+0xfffdba80>
   42984:	008011c4 	movi	r2,71
   42988:	1440b816 	blt	r2,r17,42c6c <___vfprintf_internal_r+0x1e0c>
   4298c:	040001b4 	movhi	r16,6
   42990:	8424d104 	addi	r16,r16,-27836
   42994:	00c000c4 	movi	r3,3
   42998:	00bfdfc4 	movi	r2,-129
   4299c:	d8c02915 	stw	r3,164(sp)
   429a0:	90a4703a 	and	r18,r18,r2
   429a4:	df002783 	ldbu	fp,158(sp)
   429a8:	d8c02b15 	stw	r3,172(sp)
   429ac:	d8002a15 	stw	zero,168(sp)
   429b0:	d8003215 	stw	zero,200(sp)
   429b4:	003b0706 	br	415d4 <__alt_data_end+0xfffdbdd4>
   429b8:	d8c02e17 	ldw	r3,184(sp)
   429bc:	1cc00017 	ldw	r19,0(r3)
   429c0:	18c00104 	addi	r3,r3,4
   429c4:	d8c02e15 	stw	r3,184(sp)
   429c8:	982dd7fa 	srai	r22,r19,31
   429cc:	b005883a 	mov	r2,r22
   429d0:	003a7706 	br	413b0 <__alt_data_end+0xfffdbbb0>
   429d4:	d8c02e17 	ldw	r3,184(sp)
   429d8:	d9002f17 	ldw	r4,188(sp)
   429dc:	18800017 	ldw	r2,0(r3)
   429e0:	18c00104 	addi	r3,r3,4
   429e4:	d8c02e15 	stw	r3,184(sp)
   429e8:	11000015 	stw	r4,0(r2)
   429ec:	00395406 	br	40f40 <__alt_data_end+0xfffdb740>
   429f0:	d9002e17 	ldw	r4,184(sp)
   429f4:	002d883a 	mov	r22,zero
   429f8:	24c00017 	ldw	r19,0(r4)
   429fc:	21000104 	addi	r4,r4,4
   42a00:	d9002e15 	stw	r4,184(sp)
   42a04:	003c0706 	br	41a24 <__alt_data_end+0xfffdc224>
   42a08:	d9402e17 	ldw	r5,184(sp)
   42a0c:	d8c02a17 	ldw	r3,168(sp)
   42a10:	002d883a 	mov	r22,zero
   42a14:	28800104 	addi	r2,r5,4
   42a18:	2cc0000b 	ldhu	r19,0(r5)
   42a1c:	183dc10e 	bge	r3,zero,42124 <__alt_data_end+0xfffdc924>
   42a20:	003f7506 	br	427f8 <__alt_data_end+0xfffdcff8>
   42a24:	040001b4 	movhi	r16,6
   42a28:	8424cf04 	addi	r16,r16,-27844
   42a2c:	003aa706 	br	414cc <__alt_data_end+0xfffdbccc>
   42a30:	d9002d17 	ldw	r4,180(sp)
   42a34:	d9801e04 	addi	r6,sp,120
   42a38:	b80b883a 	mov	r5,r23
   42a3c:	0047b500 	call	47b50 <__sprint_r>
   42a40:	103a0b1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42a44:	dc402617 	ldw	r17,152(sp)
   42a48:	d8c02017 	ldw	r3,128(sp)
   42a4c:	da000404 	addi	r8,sp,16
   42a50:	003f9c06 	br	428c4 <__alt_data_end+0xfffdd0c4>
   42a54:	ac400043 	ldbu	r17,1(r21)
   42a58:	84000814 	ori	r16,r16,32
   42a5c:	ad400044 	addi	r21,r21,1
   42a60:	8c403fcc 	andi	r17,r17,255
   42a64:	8c40201c 	xori	r17,r17,128
   42a68:	8c7fe004 	addi	r17,r17,-128
   42a6c:	00395e06 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   42a70:	d8c02e15 	stw	r3,184(sp)
   42a74:	0039883a 	mov	fp,zero
   42a78:	003e3506 	br	42350 <__alt_data_end+0xfffdcb50>
   42a7c:	d9002d17 	ldw	r4,180(sp)
   42a80:	d9801e04 	addi	r6,sp,120
   42a84:	b80b883a 	mov	r5,r23
   42a88:	0047b500 	call	47b50 <__sprint_r>
   42a8c:	1039f81e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42a90:	d8c02017 	ldw	r3,128(sp)
   42a94:	da000404 	addi	r8,sp,16
   42a98:	003cd006 	br	41ddc <__alt_data_end+0xfffdc5dc>
   42a9c:	8009883a 	mov	r4,r16
   42aa0:	df003d15 	stw	fp,244(sp)
   42aa4:	00479bc0 	call	479bc <strlen>
   42aa8:	d8802b15 	stw	r2,172(sp)
   42aac:	da003d17 	ldw	r8,244(sp)
   42ab0:	103c200e 	bge	r2,zero,41b34 <__alt_data_end+0xfffdc334>
   42ab4:	0005883a 	mov	r2,zero
   42ab8:	003c1e06 	br	41b34 <__alt_data_end+0xfffdc334>
   42abc:	d9002d17 	ldw	r4,180(sp)
   42ac0:	d9801e04 	addi	r6,sp,120
   42ac4:	b80b883a 	mov	r5,r23
   42ac8:	0047b500 	call	47b50 <__sprint_r>
   42acc:	1039e81e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42ad0:	d8c02017 	ldw	r3,128(sp)
   42ad4:	d8801f17 	ldw	r2,124(sp)
   42ad8:	da000404 	addi	r8,sp,16
   42adc:	d9403317 	ldw	r5,204(sp)
   42ae0:	10800044 	addi	r2,r2,1
   42ae4:	44000015 	stw	r16,0(r8)
   42ae8:	28c7883a 	add	r3,r5,r3
   42aec:	003b5b06 	br	4185c <__alt_data_end+0xfffdc05c>
   42af0:	010001b4 	movhi	r4,6
   42af4:	2124e384 	addi	r4,r4,-27762
   42af8:	d9003515 	stw	r4,212(sp)
   42afc:	003af206 	br	416c8 <__alt_data_end+0xfffdbec8>
   42b00:	013fffc4 	movi	r4,-1
   42b04:	003a0806 	br	41328 <__alt_data_end+0xfffdbb28>
   42b08:	0023883a 	mov	r17,zero
   42b0c:	003d9d06 	br	42184 <__alt_data_end+0xfffdc984>
   42b10:	d9002d17 	ldw	r4,180(sp)
   42b14:	d9801e04 	addi	r6,sp,120
   42b18:	b80b883a 	mov	r5,r23
   42b1c:	0047b500 	call	47b50 <__sprint_r>
   42b20:	1039d31e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42b24:	d8c02017 	ldw	r3,128(sp)
   42b28:	da000404 	addi	r8,sp,16
   42b2c:	003d9406 	br	42180 <__alt_data_end+0xfffdc980>
   42b30:	010001b4 	movhi	r4,6
   42b34:	2124df84 	addi	r4,r4,-27778
   42b38:	d9002c15 	stw	r4,176(sp)
   42b3c:	d9002c17 	ldw	r4,176(sp)
   42b40:	1c47883a 	add	r3,r3,r17
   42b44:	10800044 	addi	r2,r2,1
   42b48:	41000015 	stw	r4,0(r8)
   42b4c:	44400115 	stw	r17,4(r8)
   42b50:	d8c02015 	stw	r3,128(sp)
   42b54:	d8801f15 	stw	r2,124(sp)
   42b58:	010001c4 	movi	r4,7
   42b5c:	20bfd716 	blt	r4,r2,42abc <__alt_data_end+0xfffdd2bc>
   42b60:	42000204 	addi	r8,r8,8
   42b64:	003fdd06 	br	42adc <__alt_data_end+0xfffdd2dc>
   42b68:	d9002d17 	ldw	r4,180(sp)
   42b6c:	d9801e04 	addi	r6,sp,120
   42b70:	b80b883a 	mov	r5,r23
   42b74:	0047b500 	call	47b50 <__sprint_r>
   42b78:	1039bd1e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42b7c:	d8802617 	ldw	r2,152(sp)
   42b80:	d8c02017 	ldw	r3,128(sp)
   42b84:	da000404 	addi	r8,sp,16
   42b88:	003e1006 	br	423cc <__alt_data_end+0xfffdcbcc>
   42b8c:	00800044 	movi	r2,1
   42b90:	10803fcc 	andi	r2,r2,255
   42b94:	00c00044 	movi	r3,1
   42b98:	10fa0d26 	beq	r2,r3,413d0 <__alt_data_end+0xfffdbbd0>
   42b9c:	00c00084 	movi	r3,2
   42ba0:	10fbaf26 	beq	r2,r3,41a60 <__alt_data_end+0xfffdc260>
   42ba4:	003a6d06 	br	4155c <__alt_data_end+0xfffdbd5c>
   42ba8:	010001b4 	movhi	r4,6
   42bac:	2124e384 	addi	r4,r4,-27762
   42bb0:	d9003515 	stw	r4,212(sp)
   42bb4:	003b5406 	br	41908 <__alt_data_end+0xfffdc108>
   42bb8:	d8802a17 	ldw	r2,168(sp)
   42bbc:	00c00184 	movi	r3,6
   42bc0:	1880012e 	bgeu	r3,r2,42bc8 <___vfprintf_internal_r+0x1d68>
   42bc4:	1805883a 	mov	r2,r3
   42bc8:	d8802b15 	stw	r2,172(sp)
   42bcc:	1000ef16 	blt	r2,zero,42f8c <___vfprintf_internal_r+0x212c>
   42bd0:	040001b4 	movhi	r16,6
   42bd4:	d8802915 	stw	r2,164(sp)
   42bd8:	dcc02e15 	stw	r19,184(sp)
   42bdc:	d8002a15 	stw	zero,168(sp)
   42be0:	d8003215 	stw	zero,200(sp)
   42be4:	8424dd04 	addi	r16,r16,-27788
   42be8:	0039883a 	mov	fp,zero
   42bec:	003a8006 	br	415f0 <__alt_data_end+0xfffdbdf0>
   42bf0:	0021883a 	mov	r16,zero
   42bf4:	003e0706 	br	42414 <__alt_data_end+0xfffdcc14>
   42bf8:	d9002d17 	ldw	r4,180(sp)
   42bfc:	d9801e04 	addi	r6,sp,120
   42c00:	b80b883a 	mov	r5,r23
   42c04:	0047b500 	call	47b50 <__sprint_r>
   42c08:	1039991e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42c0c:	d8802617 	ldw	r2,152(sp)
   42c10:	d9403317 	ldw	r5,204(sp)
   42c14:	d8c02017 	ldw	r3,128(sp)
   42c18:	da000404 	addi	r8,sp,16
   42c1c:	2885c83a 	sub	r2,r5,r2
   42c20:	003dfb06 	br	42410 <__alt_data_end+0xfffdcc10>
   42c24:	9080004c 	andi	r2,r18,1
   42c28:	103e8f1e 	bne	r2,zero,42668 <__alt_data_end+0xfffdce68>
   42c2c:	d8802117 	ldw	r2,132(sp)
   42c30:	003e9e06 	br	426ac <__alt_data_end+0xfffdceac>
   42c34:	1025883a 	mov	r18,r2
   42c38:	0039883a 	mov	fp,zero
   42c3c:	00800084 	movi	r2,2
   42c40:	003fd306 	br	42b90 <__alt_data_end+0xfffdd390>
   42c44:	07000b44 	movi	fp,45
   42c48:	df002785 	stb	fp,158(sp)
   42c4c:	003a1b06 	br	414bc <__alt_data_end+0xfffdbcbc>
   42c50:	00c00b44 	movi	r3,45
   42c54:	d8c02785 	stb	r3,158(sp)
   42c58:	d8802915 	stw	r2,164(sp)
   42c5c:	dc802c17 	ldw	r18,176(sp)
   42c60:	d8002a15 	stw	zero,168(sp)
   42c64:	07000b44 	movi	fp,45
   42c68:	003a5e06 	br	415e4 <__alt_data_end+0xfffdbde4>
   42c6c:	040001b4 	movhi	r16,6
   42c70:	8424d204 	addi	r16,r16,-27832
   42c74:	003f4706 	br	42994 <__alt_data_end+0xfffdd194>
   42c78:	d9002e17 	ldw	r4,184(sp)
   42c7c:	d9402f17 	ldw	r5,188(sp)
   42c80:	20800017 	ldw	r2,0(r4)
   42c84:	21000104 	addi	r4,r4,4
   42c88:	d9002e15 	stw	r4,184(sp)
   42c8c:	11400015 	stw	r5,0(r2)
   42c90:	0038ab06 	br	40f40 <__alt_data_end+0xfffdb740>
   42c94:	dd802617 	ldw	r22,152(sp)
   42c98:	00bfff44 	movi	r2,-3
   42c9c:	b0801c16 	blt	r22,r2,42d10 <___vfprintf_internal_r+0x1eb0>
   42ca0:	d9402a17 	ldw	r5,168(sp)
   42ca4:	2d801a16 	blt	r5,r22,42d10 <___vfprintf_internal_r+0x1eb0>
   42ca8:	dd803215 	stw	r22,200(sp)
   42cac:	003e8906 	br	426d4 <__alt_data_end+0xfffdced4>
   42cb0:	010001b4 	movhi	r4,6
   42cb4:	2124df84 	addi	r4,r4,-27778
   42cb8:	d9002c15 	stw	r4,176(sp)
   42cbc:	003c9106 	br	41f04 <__alt_data_end+0xfffdc704>
   42cc0:	e005883a 	mov	r2,fp
   42cc4:	003e7906 	br	426ac <__alt_data_end+0xfffdceac>
   42cc8:	d9002a17 	ldw	r4,168(sp)
   42ccc:	df002783 	ldbu	fp,158(sp)
   42cd0:	dcc02e15 	stw	r19,184(sp)
   42cd4:	d9002915 	stw	r4,164(sp)
   42cd8:	d9002b15 	stw	r4,172(sp)
   42cdc:	d8002a15 	stw	zero,168(sp)
   42ce0:	d8003215 	stw	zero,200(sp)
   42ce4:	003a3b06 	br	415d4 <__alt_data_end+0xfffdbdd4>
   42ce8:	9080004c 	andi	r2,r18,1
   42cec:	0039883a 	mov	fp,zero
   42cf0:	10000426 	beq	r2,zero,42d04 <___vfprintf_internal_r+0x1ea4>
   42cf4:	00800c04 	movi	r2,48
   42cf8:	dc001dc4 	addi	r16,sp,119
   42cfc:	d8801dc5 	stb	r2,119(sp)
   42d00:	003b6406 	br	41a94 <__alt_data_end+0xfffdc294>
   42d04:	d8002b15 	stw	zero,172(sp)
   42d08:	dc001e04 	addi	r16,sp,120
   42d0c:	003a2b06 	br	415bc <__alt_data_end+0xfffdbdbc>
   42d10:	8c7fff84 	addi	r17,r17,-2
   42d14:	b5bfffc4 	addi	r22,r22,-1
   42d18:	dd802615 	stw	r22,152(sp)
   42d1c:	dc4022c5 	stb	r17,139(sp)
   42d20:	b000bf16 	blt	r22,zero,43020 <___vfprintf_internal_r+0x21c0>
   42d24:	00800ac4 	movi	r2,43
   42d28:	d8802305 	stb	r2,140(sp)
   42d2c:	00800244 	movi	r2,9
   42d30:	15807016 	blt	r2,r22,42ef4 <___vfprintf_internal_r+0x2094>
   42d34:	00800c04 	movi	r2,48
   42d38:	b5800c04 	addi	r22,r22,48
   42d3c:	d8802345 	stb	r2,141(sp)
   42d40:	dd802385 	stb	r22,142(sp)
   42d44:	d88023c4 	addi	r2,sp,143
   42d48:	df0022c4 	addi	fp,sp,139
   42d4c:	d8c03317 	ldw	r3,204(sp)
   42d50:	1739c83a 	sub	fp,r2,fp
   42d54:	d9003317 	ldw	r4,204(sp)
   42d58:	e0c7883a 	add	r3,fp,r3
   42d5c:	df003a15 	stw	fp,232(sp)
   42d60:	d8c02b15 	stw	r3,172(sp)
   42d64:	00800044 	movi	r2,1
   42d68:	1100b30e 	bge	r2,r4,43038 <___vfprintf_internal_r+0x21d8>
   42d6c:	d8c02b17 	ldw	r3,172(sp)
   42d70:	18c00044 	addi	r3,r3,1
   42d74:	d8c02b15 	stw	r3,172(sp)
   42d78:	1805883a 	mov	r2,r3
   42d7c:	1800ac16 	blt	r3,zero,43030 <___vfprintf_internal_r+0x21d0>
   42d80:	d8003215 	stw	zero,200(sp)
   42d84:	003e5d06 	br	426fc <__alt_data_end+0xfffdcefc>
   42d88:	d9002d17 	ldw	r4,180(sp)
   42d8c:	d9801e04 	addi	r6,sp,120
   42d90:	b80b883a 	mov	r5,r23
   42d94:	0047b500 	call	47b50 <__sprint_r>
   42d98:	1039351e 	bne	r2,zero,41270 <__alt_data_end+0xfffdba70>
   42d9c:	dc402617 	ldw	r17,152(sp)
   42da0:	d8c02017 	ldw	r3,128(sp)
   42da4:	d8801f17 	ldw	r2,124(sp)
   42da8:	da000404 	addi	r8,sp,16
   42dac:	003ed606 	br	42908 <__alt_data_end+0xfffdd108>
   42db0:	182b883a 	mov	r21,r3
   42db4:	d8002a15 	stw	zero,168(sp)
   42db8:	00388c06 	br	40fec <__alt_data_end+0xfffdb7ec>
   42dbc:	d8802a17 	ldw	r2,168(sp)
   42dc0:	103e071e 	bne	r2,zero,425e0 <__alt_data_end+0xfffdcde0>
   42dc4:	dc002a15 	stw	r16,168(sp)
   42dc8:	003e0506 	br	425e0 <__alt_data_end+0xfffdcde0>
   42dcc:	d9002a17 	ldw	r4,168(sp)
   42dd0:	20c00044 	addi	r3,r4,1
   42dd4:	003e0f06 	br	42614 <__alt_data_end+0xfffdce14>
   42dd8:	01400184 	movi	r5,6
   42ddc:	d9402a15 	stw	r5,168(sp)
   42de0:	003dff06 	br	425e0 <__alt_data_end+0xfffdcde0>
   42de4:	d8802104 	addi	r2,sp,132
   42de8:	d8800315 	stw	r2,12(sp)
   42dec:	d8802504 	addi	r2,sp,148
   42df0:	d8800215 	stw	r2,8(sp)
   42df4:	d8802604 	addi	r2,sp,152
   42df8:	d8800115 	stw	r2,4(sp)
   42dfc:	d8802a17 	ldw	r2,168(sp)
   42e00:	d9403617 	ldw	r5,216(sp)
   42e04:	d9002d17 	ldw	r4,180(sp)
   42e08:	d8800015 	stw	r2,0(sp)
   42e0c:	01c000c4 	movi	r7,3
   42e10:	980d883a 	mov	r6,r19
   42e14:	da003d15 	stw	r8,244(sp)
   42e18:	00435900 	call	43590 <_dtoa_r>
   42e1c:	d8c02a17 	ldw	r3,168(sp)
   42e20:	da003d17 	ldw	r8,244(sp)
   42e24:	1021883a 	mov	r16,r2
   42e28:	10f9883a 	add	fp,r2,r3
   42e2c:	81000007 	ldb	r4,0(r16)
   42e30:	00800c04 	movi	r2,48
   42e34:	20805e26 	beq	r4,r2,42fb0 <___vfprintf_internal_r+0x2150>
   42e38:	d8c02617 	ldw	r3,152(sp)
   42e3c:	e0f9883a 	add	fp,fp,r3
   42e40:	003e0a06 	br	4266c <__alt_data_end+0xfffdce6c>
   42e44:	00c00b44 	movi	r3,45
   42e48:	24e0003c 	xorhi	r19,r4,32768
   42e4c:	d8c02905 	stb	r3,164(sp)
   42e50:	003de906 	br	425f8 <__alt_data_end+0xfffdcdf8>
   42e54:	d8c03217 	ldw	r3,200(sp)
   42e58:	00c07a0e 	bge	zero,r3,43044 <___vfprintf_internal_r+0x21e4>
   42e5c:	00800044 	movi	r2,1
   42e60:	d9003317 	ldw	r4,204(sp)
   42e64:	1105883a 	add	r2,r2,r4
   42e68:	d8802b15 	stw	r2,172(sp)
   42e6c:	10004e16 	blt	r2,zero,42fa8 <___vfprintf_internal_r+0x2148>
   42e70:	044019c4 	movi	r17,103
   42e74:	003e2106 	br	426fc <__alt_data_end+0xfffdcefc>
   42e78:	d9002a17 	ldw	r4,168(sp)
   42e7c:	d8802104 	addi	r2,sp,132
   42e80:	d8800315 	stw	r2,12(sp)
   42e84:	d9000015 	stw	r4,0(sp)
   42e88:	d8802504 	addi	r2,sp,148
   42e8c:	d9403617 	ldw	r5,216(sp)
   42e90:	d9002d17 	ldw	r4,180(sp)
   42e94:	d8800215 	stw	r2,8(sp)
   42e98:	d8802604 	addi	r2,sp,152
   42e9c:	d8800115 	stw	r2,4(sp)
   42ea0:	01c000c4 	movi	r7,3
   42ea4:	980d883a 	mov	r6,r19
   42ea8:	da003d15 	stw	r8,244(sp)
   42eac:	00435900 	call	43590 <_dtoa_r>
   42eb0:	d8c02a17 	ldw	r3,168(sp)
   42eb4:	da003d17 	ldw	r8,244(sp)
   42eb8:	1021883a 	mov	r16,r2
   42ebc:	00801184 	movi	r2,70
   42ec0:	80f9883a 	add	fp,r16,r3
   42ec4:	88bfd926 	beq	r17,r2,42e2c <__alt_data_end+0xfffdd62c>
   42ec8:	003de806 	br	4266c <__alt_data_end+0xfffdce6c>
   42ecc:	d9002a17 	ldw	r4,168(sp)
   42ed0:	00c04d0e 	bge	zero,r3,43008 <___vfprintf_internal_r+0x21a8>
   42ed4:	2000441e 	bne	r4,zero,42fe8 <___vfprintf_internal_r+0x2188>
   42ed8:	9480004c 	andi	r18,r18,1
   42edc:	9000421e 	bne	r18,zero,42fe8 <___vfprintf_internal_r+0x2188>
   42ee0:	1805883a 	mov	r2,r3
   42ee4:	18006f16 	blt	r3,zero,430a4 <___vfprintf_internal_r+0x2244>
   42ee8:	d8c03217 	ldw	r3,200(sp)
   42eec:	d8c02b15 	stw	r3,172(sp)
   42ef0:	003e0206 	br	426fc <__alt_data_end+0xfffdcefc>
   42ef4:	df0022c4 	addi	fp,sp,139
   42ef8:	dc002a15 	stw	r16,168(sp)
   42efc:	4027883a 	mov	r19,r8
   42f00:	e021883a 	mov	r16,fp
   42f04:	b009883a 	mov	r4,r22
   42f08:	01400284 	movi	r5,10
   42f0c:	004b2640 	call	4b264 <__modsi3>
   42f10:	10800c04 	addi	r2,r2,48
   42f14:	843fffc4 	addi	r16,r16,-1
   42f18:	b009883a 	mov	r4,r22
   42f1c:	01400284 	movi	r5,10
   42f20:	80800005 	stb	r2,0(r16)
   42f24:	004b1e00 	call	4b1e0 <__divsi3>
   42f28:	102d883a 	mov	r22,r2
   42f2c:	00800244 	movi	r2,9
   42f30:	15bff416 	blt	r2,r22,42f04 <__alt_data_end+0xfffdd704>
   42f34:	9811883a 	mov	r8,r19
   42f38:	b0800c04 	addi	r2,r22,48
   42f3c:	8027883a 	mov	r19,r16
   42f40:	997fffc4 	addi	r5,r19,-1
   42f44:	98bfffc5 	stb	r2,-1(r19)
   42f48:	dc002a17 	ldw	r16,168(sp)
   42f4c:	2f006d2e 	bgeu	r5,fp,43104 <___vfprintf_internal_r+0x22a4>
   42f50:	d9c02384 	addi	r7,sp,142
   42f54:	3ccfc83a 	sub	r7,r7,r19
   42f58:	d9002344 	addi	r4,sp,141
   42f5c:	e1cf883a 	add	r7,fp,r7
   42f60:	00000106 	br	42f68 <___vfprintf_internal_r+0x2108>
   42f64:	28800003 	ldbu	r2,0(r5)
   42f68:	20800005 	stb	r2,0(r4)
   42f6c:	21000044 	addi	r4,r4,1
   42f70:	29400044 	addi	r5,r5,1
   42f74:	393ffb1e 	bne	r7,r4,42f64 <__alt_data_end+0xfffdd764>
   42f78:	d8802304 	addi	r2,sp,140
   42f7c:	14c5c83a 	sub	r2,r2,r19
   42f80:	d8c02344 	addi	r3,sp,141
   42f84:	1885883a 	add	r2,r3,r2
   42f88:	003f7006 	br	42d4c <__alt_data_end+0xfffdd54c>
   42f8c:	0005883a 	mov	r2,zero
   42f90:	003f0f06 	br	42bd0 <__alt_data_end+0xfffdd3d0>
   42f94:	d8c03217 	ldw	r3,200(sp)
   42f98:	18c00044 	addi	r3,r3,1
   42f9c:	d8c02b15 	stw	r3,172(sp)
   42fa0:	1805883a 	mov	r2,r3
   42fa4:	183fb20e 	bge	r3,zero,42e70 <__alt_data_end+0xfffdd670>
   42fa8:	0005883a 	mov	r2,zero
   42fac:	003fb006 	br	42e70 <__alt_data_end+0xfffdd670>
   42fb0:	d9003617 	ldw	r4,216(sp)
   42fb4:	000d883a 	mov	r6,zero
   42fb8:	000f883a 	mov	r7,zero
   42fbc:	980b883a 	mov	r5,r19
   42fc0:	d8c03c15 	stw	r3,240(sp)
   42fc4:	da003d15 	stw	r8,244(sp)
   42fc8:	004c6100 	call	4c610 <__eqdf2>
   42fcc:	d8c03c17 	ldw	r3,240(sp)
   42fd0:	da003d17 	ldw	r8,244(sp)
   42fd4:	103f9826 	beq	r2,zero,42e38 <__alt_data_end+0xfffdd638>
   42fd8:	00800044 	movi	r2,1
   42fdc:	10c7c83a 	sub	r3,r2,r3
   42fe0:	d8c02615 	stw	r3,152(sp)
   42fe4:	003f9506 	br	42e3c <__alt_data_end+0xfffdd63c>
   42fe8:	d9002a17 	ldw	r4,168(sp)
   42fec:	d8c03217 	ldw	r3,200(sp)
   42ff0:	20800044 	addi	r2,r4,1
   42ff4:	1885883a 	add	r2,r3,r2
   42ff8:	d8802b15 	stw	r2,172(sp)
   42ffc:	103dbf0e 	bge	r2,zero,426fc <__alt_data_end+0xfffdcefc>
   43000:	0005883a 	mov	r2,zero
   43004:	003dbd06 	br	426fc <__alt_data_end+0xfffdcefc>
   43008:	2000201e 	bne	r4,zero,4308c <___vfprintf_internal_r+0x222c>
   4300c:	9480004c 	andi	r18,r18,1
   43010:	90001e1e 	bne	r18,zero,4308c <___vfprintf_internal_r+0x222c>
   43014:	00800044 	movi	r2,1
   43018:	d8802b15 	stw	r2,172(sp)
   4301c:	003db706 	br	426fc <__alt_data_end+0xfffdcefc>
   43020:	00800b44 	movi	r2,45
   43024:	05adc83a 	sub	r22,zero,r22
   43028:	d8802305 	stb	r2,140(sp)
   4302c:	003f3f06 	br	42d2c <__alt_data_end+0xfffdd52c>
   43030:	0005883a 	mov	r2,zero
   43034:	003f5206 	br	42d80 <__alt_data_end+0xfffdd580>
   43038:	90a4703a 	and	r18,r18,r2
   4303c:	903f4e26 	beq	r18,zero,42d78 <__alt_data_end+0xfffdd578>
   43040:	003f4a06 	br	42d6c <__alt_data_end+0xfffdd56c>
   43044:	00800084 	movi	r2,2
   43048:	10c5c83a 	sub	r2,r2,r3
   4304c:	003f8406 	br	42e60 <__alt_data_end+0xfffdd660>
   43050:	d9402e17 	ldw	r5,184(sp)
   43054:	d9002e17 	ldw	r4,184(sp)
   43058:	ac400043 	ldbu	r17,1(r21)
   4305c:	29400017 	ldw	r5,0(r5)
   43060:	20800104 	addi	r2,r4,4
   43064:	d8802e15 	stw	r2,184(sp)
   43068:	d9402a15 	stw	r5,168(sp)
   4306c:	182b883a 	mov	r21,r3
   43070:	283e7b0e 	bge	r5,zero,42a60 <__alt_data_end+0xfffdd260>
   43074:	8c403fcc 	andi	r17,r17,255
   43078:	017fffc4 	movi	r5,-1
   4307c:	8c40201c 	xori	r17,r17,128
   43080:	d9402a15 	stw	r5,168(sp)
   43084:	8c7fe004 	addi	r17,r17,-128
   43088:	0037d706 	br	40fe8 <__alt_data_end+0xfffdb7e8>
   4308c:	d8c02a17 	ldw	r3,168(sp)
   43090:	18c00084 	addi	r3,r3,2
   43094:	d8c02b15 	stw	r3,172(sp)
   43098:	1805883a 	mov	r2,r3
   4309c:	183d970e 	bge	r3,zero,426fc <__alt_data_end+0xfffdcefc>
   430a0:	003fd706 	br	43000 <__alt_data_end+0xfffdd800>
   430a4:	0005883a 	mov	r2,zero
   430a8:	003f8f06 	br	42ee8 <__alt_data_end+0xfffdd6e8>
   430ac:	9080004c 	andi	r2,r18,1
   430b0:	103f821e 	bne	r2,zero,42ebc <__alt_data_end+0xfffdd6bc>
   430b4:	d8802117 	ldw	r2,132(sp)
   430b8:	1405c83a 	sub	r2,r2,r16
   430bc:	d8803315 	stw	r2,204(sp)
   430c0:	b47ef426 	beq	r22,r17,42c94 <__alt_data_end+0xfffdd494>
   430c4:	dd802617 	ldw	r22,152(sp)
   430c8:	003f1206 	br	42d14 <__alt_data_end+0xfffdd514>
   430cc:	d8c02b03 	ldbu	r3,172(sp)
   430d0:	d8c02785 	stb	r3,158(sp)
   430d4:	0038df06 	br	41454 <__alt_data_end+0xfffdbc54>
   430d8:	d8c02b03 	ldbu	r3,172(sp)
   430dc:	d8c02785 	stb	r3,158(sp)
   430e0:	0038aa06 	br	4138c <__alt_data_end+0xfffdbb8c>
   430e4:	d8c02b03 	ldbu	r3,172(sp)
   430e8:	d8c02785 	stb	r3,158(sp)
   430ec:	003a4306 	br	419fc <__alt_data_end+0xfffdc1fc>
   430f0:	d8c02b03 	ldbu	r3,172(sp)
   430f4:	d8c02785 	stb	r3,158(sp)
   430f8:	003af506 	br	41cd0 <__alt_data_end+0xfffdc4d0>
   430fc:	0005883a 	mov	r2,zero
   43100:	003d7b06 	br	426f0 <__alt_data_end+0xfffdcef0>
   43104:	d8802344 	addi	r2,sp,141
   43108:	003f1006 	br	42d4c <__alt_data_end+0xfffdd54c>
   4310c:	d8c02b03 	ldbu	r3,172(sp)
   43110:	d8c02785 	stb	r3,158(sp)
   43114:	0038fd06 	br	4150c <__alt_data_end+0xfffdbd0c>
   43118:	d8c02b03 	ldbu	r3,172(sp)
   4311c:	d8c02785 	stb	r3,158(sp)
   43120:	003a9706 	br	41b80 <__alt_data_end+0xfffdc380>
   43124:	d8c02b03 	ldbu	r3,172(sp)
   43128:	d8c02785 	stb	r3,158(sp)
   4312c:	003a1806 	br	41990 <__alt_data_end+0xfffdc190>
   43130:	d8c02b03 	ldbu	r3,172(sp)
   43134:	d8c02785 	stb	r3,158(sp)
   43138:	003abe06 	br	41c34 <__alt_data_end+0xfffdc434>

0004313c <__vfprintf_internal>:
   4313c:	008001b4 	movhi	r2,6
   43140:	10ac4504 	addi	r2,r2,-20204
   43144:	300f883a 	mov	r7,r6
   43148:	280d883a 	mov	r6,r5
   4314c:	200b883a 	mov	r5,r4
   43150:	11000017 	ldw	r4,0(r2)
   43154:	0040e601 	jmpi	40e60 <___vfprintf_internal_r>

00043158 <__sbprintf>:
   43158:	2880030b 	ldhu	r2,12(r5)
   4315c:	2ac01917 	ldw	r11,100(r5)
   43160:	2a80038b 	ldhu	r10,14(r5)
   43164:	2a400717 	ldw	r9,28(r5)
   43168:	2a000917 	ldw	r8,36(r5)
   4316c:	defee204 	addi	sp,sp,-1144
   43170:	00c10004 	movi	r3,1024
   43174:	dc011a15 	stw	r16,1128(sp)
   43178:	10bfff4c 	andi	r2,r2,65533
   4317c:	2821883a 	mov	r16,r5
   43180:	d8cb883a 	add	r5,sp,r3
   43184:	dc811c15 	stw	r18,1136(sp)
   43188:	dc411b15 	stw	r17,1132(sp)
   4318c:	dfc11d15 	stw	ra,1140(sp)
   43190:	2025883a 	mov	r18,r4
   43194:	d881030d 	sth	r2,1036(sp)
   43198:	dac11915 	stw	r11,1124(sp)
   4319c:	da81038d 	sth	r10,1038(sp)
   431a0:	da410715 	stw	r9,1052(sp)
   431a4:	da010915 	stw	r8,1060(sp)
   431a8:	dec10015 	stw	sp,1024(sp)
   431ac:	dec10415 	stw	sp,1040(sp)
   431b0:	d8c10215 	stw	r3,1032(sp)
   431b4:	d8c10515 	stw	r3,1044(sp)
   431b8:	d8010615 	stw	zero,1048(sp)
   431bc:	0040e600 	call	40e60 <___vfprintf_internal_r>
   431c0:	1023883a 	mov	r17,r2
   431c4:	10000416 	blt	r2,zero,431d8 <__sbprintf+0x80>
   431c8:	d9410004 	addi	r5,sp,1024
   431cc:	9009883a 	mov	r4,r18
   431d0:	0044e340 	call	44e34 <_fflush_r>
   431d4:	10000d1e 	bne	r2,zero,4320c <__sbprintf+0xb4>
   431d8:	d881030b 	ldhu	r2,1036(sp)
   431dc:	1080100c 	andi	r2,r2,64
   431e0:	10000326 	beq	r2,zero,431f0 <__sbprintf+0x98>
   431e4:	8080030b 	ldhu	r2,12(r16)
   431e8:	10801014 	ori	r2,r2,64
   431ec:	8080030d 	sth	r2,12(r16)
   431f0:	8805883a 	mov	r2,r17
   431f4:	dfc11d17 	ldw	ra,1140(sp)
   431f8:	dc811c17 	ldw	r18,1136(sp)
   431fc:	dc411b17 	ldw	r17,1132(sp)
   43200:	dc011a17 	ldw	r16,1128(sp)
   43204:	dec11e04 	addi	sp,sp,1144
   43208:	f800283a 	ret
   4320c:	047fffc4 	movi	r17,-1
   43210:	003ff106 	br	431d8 <__alt_data_end+0xfffdd9d8>

00043214 <__swsetup_r>:
   43214:	008001b4 	movhi	r2,6
   43218:	defffd04 	addi	sp,sp,-12
   4321c:	10ac4504 	addi	r2,r2,-20204
   43220:	dc400115 	stw	r17,4(sp)
   43224:	2023883a 	mov	r17,r4
   43228:	11000017 	ldw	r4,0(r2)
   4322c:	dc000015 	stw	r16,0(sp)
   43230:	dfc00215 	stw	ra,8(sp)
   43234:	2821883a 	mov	r16,r5
   43238:	20000226 	beq	r4,zero,43244 <__swsetup_r+0x30>
   4323c:	20800e17 	ldw	r2,56(r4)
   43240:	10003126 	beq	r2,zero,43308 <__swsetup_r+0xf4>
   43244:	8080030b 	ldhu	r2,12(r16)
   43248:	10c0020c 	andi	r3,r2,8
   4324c:	1009883a 	mov	r4,r2
   43250:	18000f26 	beq	r3,zero,43290 <__swsetup_r+0x7c>
   43254:	80c00417 	ldw	r3,16(r16)
   43258:	18001526 	beq	r3,zero,432b0 <__swsetup_r+0x9c>
   4325c:	1100004c 	andi	r4,r2,1
   43260:	20001c1e 	bne	r4,zero,432d4 <__swsetup_r+0xc0>
   43264:	1080008c 	andi	r2,r2,2
   43268:	1000291e 	bne	r2,zero,43310 <__swsetup_r+0xfc>
   4326c:	80800517 	ldw	r2,20(r16)
   43270:	80800215 	stw	r2,8(r16)
   43274:	18001c26 	beq	r3,zero,432e8 <__swsetup_r+0xd4>
   43278:	0005883a 	mov	r2,zero
   4327c:	dfc00217 	ldw	ra,8(sp)
   43280:	dc400117 	ldw	r17,4(sp)
   43284:	dc000017 	ldw	r16,0(sp)
   43288:	dec00304 	addi	sp,sp,12
   4328c:	f800283a 	ret
   43290:	2080040c 	andi	r2,r4,16
   43294:	10002e26 	beq	r2,zero,43350 <__swsetup_r+0x13c>
   43298:	2080010c 	andi	r2,r4,4
   4329c:	10001e1e 	bne	r2,zero,43318 <__swsetup_r+0x104>
   432a0:	80c00417 	ldw	r3,16(r16)
   432a4:	20800214 	ori	r2,r4,8
   432a8:	8080030d 	sth	r2,12(r16)
   432ac:	183feb1e 	bne	r3,zero,4325c <__alt_data_end+0xfffdda5c>
   432b0:	1100a00c 	andi	r4,r2,640
   432b4:	01408004 	movi	r5,512
   432b8:	217fe826 	beq	r4,r5,4325c <__alt_data_end+0xfffdda5c>
   432bc:	800b883a 	mov	r5,r16
   432c0:	8809883a 	mov	r4,r17
   432c4:	00459080 	call	45908 <__smakebuf_r>
   432c8:	8080030b 	ldhu	r2,12(r16)
   432cc:	80c00417 	ldw	r3,16(r16)
   432d0:	003fe206 	br	4325c <__alt_data_end+0xfffdda5c>
   432d4:	80800517 	ldw	r2,20(r16)
   432d8:	80000215 	stw	zero,8(r16)
   432dc:	0085c83a 	sub	r2,zero,r2
   432e0:	80800615 	stw	r2,24(r16)
   432e4:	183fe41e 	bne	r3,zero,43278 <__alt_data_end+0xfffdda78>
   432e8:	80c0030b 	ldhu	r3,12(r16)
   432ec:	0005883a 	mov	r2,zero
   432f0:	1900200c 	andi	r4,r3,128
   432f4:	203fe126 	beq	r4,zero,4327c <__alt_data_end+0xfffdda7c>
   432f8:	18c01014 	ori	r3,r3,64
   432fc:	80c0030d 	sth	r3,12(r16)
   43300:	00bfffc4 	movi	r2,-1
   43304:	003fdd06 	br	4327c <__alt_data_end+0xfffdda7c>
   43308:	00452200 	call	45220 <__sinit>
   4330c:	003fcd06 	br	43244 <__alt_data_end+0xfffdda44>
   43310:	0005883a 	mov	r2,zero
   43314:	003fd606 	br	43270 <__alt_data_end+0xfffdda70>
   43318:	81400c17 	ldw	r5,48(r16)
   4331c:	28000626 	beq	r5,zero,43338 <__swsetup_r+0x124>
   43320:	80801004 	addi	r2,r16,64
   43324:	28800326 	beq	r5,r2,43334 <__swsetup_r+0x120>
   43328:	8809883a 	mov	r4,r17
   4332c:	00453940 	call	45394 <_free_r>
   43330:	8100030b 	ldhu	r4,12(r16)
   43334:	80000c15 	stw	zero,48(r16)
   43338:	80c00417 	ldw	r3,16(r16)
   4333c:	00bff6c4 	movi	r2,-37
   43340:	1108703a 	and	r4,r2,r4
   43344:	80000115 	stw	zero,4(r16)
   43348:	80c00015 	stw	r3,0(r16)
   4334c:	003fd506 	br	432a4 <__alt_data_end+0xfffddaa4>
   43350:	00800244 	movi	r2,9
   43354:	88800015 	stw	r2,0(r17)
   43358:	20801014 	ori	r2,r4,64
   4335c:	8080030d 	sth	r2,12(r16)
   43360:	00bfffc4 	movi	r2,-1
   43364:	003fc506 	br	4327c <__alt_data_end+0xfffdda7c>

00043368 <quorem>:
   43368:	defff204 	addi	sp,sp,-56
   4336c:	ddc00b15 	stw	r23,44(sp)
   43370:	20800417 	ldw	r2,16(r4)
   43374:	2dc00417 	ldw	r23,16(r5)
   43378:	dfc00d15 	stw	ra,52(sp)
   4337c:	df000c15 	stw	fp,48(sp)
   43380:	dd800a15 	stw	r22,40(sp)
   43384:	dd400915 	stw	r21,36(sp)
   43388:	dd000815 	stw	r20,32(sp)
   4338c:	dcc00715 	stw	r19,28(sp)
   43390:	dc800615 	stw	r18,24(sp)
   43394:	dc400515 	stw	r17,20(sp)
   43398:	dc000415 	stw	r16,16(sp)
   4339c:	15c07a16 	blt	r2,r23,43588 <quorem+0x220>
   433a0:	bdffffc4 	addi	r23,r23,-1
   433a4:	bde9883a 	add	r20,r23,r23
   433a8:	28c00504 	addi	r3,r5,20
   433ac:	a529883a 	add	r20,r20,r20
   433b0:	1d39883a 	add	fp,r3,r20
   433b4:	24c00504 	addi	r19,r4,20
   433b8:	d9400215 	stw	r5,8(sp)
   433bc:	9d29883a 	add	r20,r19,r20
   433c0:	e1400017 	ldw	r5,0(fp)
   433c4:	d9000015 	stw	r4,0(sp)
   433c8:	a1000017 	ldw	r4,0(r20)
   433cc:	29400044 	addi	r5,r5,1
   433d0:	d8c00115 	stw	r3,4(sp)
   433d4:	dd000315 	stw	r20,12(sp)
   433d8:	004b2d80 	call	4b2d8 <__udivsi3>
   433dc:	1025883a 	mov	r18,r2
   433e0:	10003026 	beq	r2,zero,434a4 <quorem+0x13c>
   433e4:	dc400117 	ldw	r17,4(sp)
   433e8:	9829883a 	mov	r20,r19
   433ec:	002d883a 	mov	r22,zero
   433f0:	0021883a 	mov	r16,zero
   433f4:	8d400017 	ldw	r21,0(r17)
   433f8:	900b883a 	mov	r5,r18
   433fc:	8c400104 	addi	r17,r17,4
   43400:	a93fffcc 	andi	r4,r21,65535
   43404:	00407040 	call	40704 <__mulsi3>
   43408:	a808d43a 	srli	r4,r21,16
   4340c:	900b883a 	mov	r5,r18
   43410:	15ad883a 	add	r22,r2,r22
   43414:	00407040 	call	40704 <__mulsi3>
   43418:	a1000017 	ldw	r4,0(r20)
   4341c:	b00cd43a 	srli	r6,r22,16
   43420:	b0ffffcc 	andi	r3,r22,65535
   43424:	217fffcc 	andi	r5,r4,65535
   43428:	2c21883a 	add	r16,r5,r16
   4342c:	80c7c83a 	sub	r3,r16,r3
   43430:	2008d43a 	srli	r4,r4,16
   43434:	1185883a 	add	r2,r2,r6
   43438:	1821d43a 	srai	r16,r3,16
   4343c:	117fffcc 	andi	r5,r2,65535
   43440:	2149c83a 	sub	r4,r4,r5
   43444:	2421883a 	add	r16,r4,r16
   43448:	8008943a 	slli	r4,r16,16
   4344c:	18ffffcc 	andi	r3,r3,65535
   43450:	102cd43a 	srli	r22,r2,16
   43454:	20c8b03a 	or	r4,r4,r3
   43458:	a1000015 	stw	r4,0(r20)
   4345c:	8021d43a 	srai	r16,r16,16
   43460:	a5000104 	addi	r20,r20,4
   43464:	e47fe32e 	bgeu	fp,r17,433f4 <__alt_data_end+0xfffddbf4>
   43468:	d8c00317 	ldw	r3,12(sp)
   4346c:	18800017 	ldw	r2,0(r3)
   43470:	10000c1e 	bne	r2,zero,434a4 <quorem+0x13c>
   43474:	18bfff04 	addi	r2,r3,-4
   43478:	9880082e 	bgeu	r19,r2,4349c <quorem+0x134>
   4347c:	18ffff17 	ldw	r3,-4(r3)
   43480:	18000326 	beq	r3,zero,43490 <quorem+0x128>
   43484:	00000506 	br	4349c <quorem+0x134>
   43488:	10c00017 	ldw	r3,0(r2)
   4348c:	1800031e 	bne	r3,zero,4349c <quorem+0x134>
   43490:	10bfff04 	addi	r2,r2,-4
   43494:	bdffffc4 	addi	r23,r23,-1
   43498:	98bffb36 	bltu	r19,r2,43488 <__alt_data_end+0xfffddc88>
   4349c:	d8c00017 	ldw	r3,0(sp)
   434a0:	1dc00415 	stw	r23,16(r3)
   434a4:	d9400217 	ldw	r5,8(sp)
   434a8:	d9000017 	ldw	r4,0(sp)
   434ac:	0046fa80 	call	46fa8 <__mcmp>
   434b0:	10002816 	blt	r2,zero,43554 <quorem+0x1ec>
   434b4:	dc400117 	ldw	r17,4(sp)
   434b8:	94800044 	addi	r18,r18,1
   434bc:	980d883a 	mov	r6,r19
   434c0:	0007883a 	mov	r3,zero
   434c4:	31000017 	ldw	r4,0(r6)
   434c8:	89400017 	ldw	r5,0(r17)
   434cc:	31800104 	addi	r6,r6,4
   434d0:	20bfffcc 	andi	r2,r4,65535
   434d4:	10c7883a 	add	r3,r2,r3
   434d8:	28bfffcc 	andi	r2,r5,65535
   434dc:	1885c83a 	sub	r2,r3,r2
   434e0:	280ad43a 	srli	r5,r5,16
   434e4:	2008d43a 	srli	r4,r4,16
   434e8:	1007d43a 	srai	r3,r2,16
   434ec:	10bfffcc 	andi	r2,r2,65535
   434f0:	2149c83a 	sub	r4,r4,r5
   434f4:	20c9883a 	add	r4,r4,r3
   434f8:	200a943a 	slli	r5,r4,16
   434fc:	8c400104 	addi	r17,r17,4
   43500:	2007d43a 	srai	r3,r4,16
   43504:	2884b03a 	or	r2,r5,r2
   43508:	30bfff15 	stw	r2,-4(r6)
   4350c:	e47fed2e 	bgeu	fp,r17,434c4 <__alt_data_end+0xfffddcc4>
   43510:	bdc5883a 	add	r2,r23,r23
   43514:	1085883a 	add	r2,r2,r2
   43518:	9887883a 	add	r3,r19,r2
   4351c:	18800017 	ldw	r2,0(r3)
   43520:	10000c1e 	bne	r2,zero,43554 <quorem+0x1ec>
   43524:	18bfff04 	addi	r2,r3,-4
   43528:	9880082e 	bgeu	r19,r2,4354c <quorem+0x1e4>
   4352c:	18ffff17 	ldw	r3,-4(r3)
   43530:	18000326 	beq	r3,zero,43540 <quorem+0x1d8>
   43534:	00000506 	br	4354c <quorem+0x1e4>
   43538:	10c00017 	ldw	r3,0(r2)
   4353c:	1800031e 	bne	r3,zero,4354c <quorem+0x1e4>
   43540:	10bfff04 	addi	r2,r2,-4
   43544:	bdffffc4 	addi	r23,r23,-1
   43548:	98bffb36 	bltu	r19,r2,43538 <__alt_data_end+0xfffddd38>
   4354c:	d8c00017 	ldw	r3,0(sp)
   43550:	1dc00415 	stw	r23,16(r3)
   43554:	9005883a 	mov	r2,r18
   43558:	dfc00d17 	ldw	ra,52(sp)
   4355c:	df000c17 	ldw	fp,48(sp)
   43560:	ddc00b17 	ldw	r23,44(sp)
   43564:	dd800a17 	ldw	r22,40(sp)
   43568:	dd400917 	ldw	r21,36(sp)
   4356c:	dd000817 	ldw	r20,32(sp)
   43570:	dcc00717 	ldw	r19,28(sp)
   43574:	dc800617 	ldw	r18,24(sp)
   43578:	dc400517 	ldw	r17,20(sp)
   4357c:	dc000417 	ldw	r16,16(sp)
   43580:	dec00e04 	addi	sp,sp,56
   43584:	f800283a 	ret
   43588:	0005883a 	mov	r2,zero
   4358c:	003ff206 	br	43558 <__alt_data_end+0xfffddd58>

00043590 <_dtoa_r>:
   43590:	20801017 	ldw	r2,64(r4)
   43594:	deffde04 	addi	sp,sp,-136
   43598:	df002015 	stw	fp,128(sp)
   4359c:	dcc01b15 	stw	r19,108(sp)
   435a0:	dc801a15 	stw	r18,104(sp)
   435a4:	dc401915 	stw	r17,100(sp)
   435a8:	dc001815 	stw	r16,96(sp)
   435ac:	dfc02115 	stw	ra,132(sp)
   435b0:	ddc01f15 	stw	r23,124(sp)
   435b4:	dd801e15 	stw	r22,120(sp)
   435b8:	dd401d15 	stw	r21,116(sp)
   435bc:	dd001c15 	stw	r20,112(sp)
   435c0:	d9c00315 	stw	r7,12(sp)
   435c4:	2039883a 	mov	fp,r4
   435c8:	3023883a 	mov	r17,r6
   435cc:	2825883a 	mov	r18,r5
   435d0:	dc002417 	ldw	r16,144(sp)
   435d4:	3027883a 	mov	r19,r6
   435d8:	10000826 	beq	r2,zero,435fc <_dtoa_r+0x6c>
   435dc:	21801117 	ldw	r6,68(r4)
   435e0:	00c00044 	movi	r3,1
   435e4:	100b883a 	mov	r5,r2
   435e8:	1986983a 	sll	r3,r3,r6
   435ec:	11800115 	stw	r6,4(r2)
   435f0:	10c00215 	stw	r3,8(r2)
   435f4:	00466cc0 	call	466cc <_Bfree>
   435f8:	e0001015 	stw	zero,64(fp)
   435fc:	88002e16 	blt	r17,zero,436b8 <_dtoa_r+0x128>
   43600:	80000015 	stw	zero,0(r16)
   43604:	889ffc2c 	andhi	r2,r17,32752
   43608:	00dffc34 	movhi	r3,32752
   4360c:	10c01c26 	beq	r2,r3,43680 <_dtoa_r+0xf0>
   43610:	000d883a 	mov	r6,zero
   43614:	000f883a 	mov	r7,zero
   43618:	9009883a 	mov	r4,r18
   4361c:	980b883a 	mov	r5,r19
   43620:	004c6100 	call	4c610 <__eqdf2>
   43624:	10002b1e 	bne	r2,zero,436d4 <_dtoa_r+0x144>
   43628:	d9c02317 	ldw	r7,140(sp)
   4362c:	00800044 	movi	r2,1
   43630:	38800015 	stw	r2,0(r7)
   43634:	d8802517 	ldw	r2,148(sp)
   43638:	10019e26 	beq	r2,zero,43cb4 <_dtoa_r+0x724>
   4363c:	d8c02517 	ldw	r3,148(sp)
   43640:	008001b4 	movhi	r2,6
   43644:	10a4df44 	addi	r2,r2,-27779
   43648:	18800015 	stw	r2,0(r3)
   4364c:	10bfffc4 	addi	r2,r2,-1
   43650:	dfc02117 	ldw	ra,132(sp)
   43654:	df002017 	ldw	fp,128(sp)
   43658:	ddc01f17 	ldw	r23,124(sp)
   4365c:	dd801e17 	ldw	r22,120(sp)
   43660:	dd401d17 	ldw	r21,116(sp)
   43664:	dd001c17 	ldw	r20,112(sp)
   43668:	dcc01b17 	ldw	r19,108(sp)
   4366c:	dc801a17 	ldw	r18,104(sp)
   43670:	dc401917 	ldw	r17,100(sp)
   43674:	dc001817 	ldw	r16,96(sp)
   43678:	dec02204 	addi	sp,sp,136
   4367c:	f800283a 	ret
   43680:	d8c02317 	ldw	r3,140(sp)
   43684:	0089c3c4 	movi	r2,9999
   43688:	18800015 	stw	r2,0(r3)
   4368c:	90017726 	beq	r18,zero,43c6c <_dtoa_r+0x6dc>
   43690:	008001b4 	movhi	r2,6
   43694:	10a4eb04 	addi	r2,r2,-27732
   43698:	d9002517 	ldw	r4,148(sp)
   4369c:	203fec26 	beq	r4,zero,43650 <__alt_data_end+0xfffdde50>
   436a0:	10c000c7 	ldb	r3,3(r2)
   436a4:	1801781e 	bne	r3,zero,43c88 <_dtoa_r+0x6f8>
   436a8:	10c000c4 	addi	r3,r2,3
   436ac:	d9802517 	ldw	r6,148(sp)
   436b0:	30c00015 	stw	r3,0(r6)
   436b4:	003fe606 	br	43650 <__alt_data_end+0xfffdde50>
   436b8:	04e00034 	movhi	r19,32768
   436bc:	9cffffc4 	addi	r19,r19,-1
   436c0:	00800044 	movi	r2,1
   436c4:	8ce6703a 	and	r19,r17,r19
   436c8:	80800015 	stw	r2,0(r16)
   436cc:	9823883a 	mov	r17,r19
   436d0:	003fcc06 	br	43604 <__alt_data_end+0xfffdde04>
   436d4:	d8800204 	addi	r2,sp,8
   436d8:	d8800015 	stw	r2,0(sp)
   436dc:	d9c00104 	addi	r7,sp,4
   436e0:	900b883a 	mov	r5,r18
   436e4:	980d883a 	mov	r6,r19
   436e8:	e009883a 	mov	r4,fp
   436ec:	8820d53a 	srli	r16,r17,20
   436f0:	00473740 	call	47374 <__d2b>
   436f4:	d8800915 	stw	r2,36(sp)
   436f8:	8001651e 	bne	r16,zero,43c90 <_dtoa_r+0x700>
   436fc:	dd800217 	ldw	r22,8(sp)
   43700:	dc000117 	ldw	r16,4(sp)
   43704:	00800804 	movi	r2,32
   43708:	b421883a 	add	r16,r22,r16
   4370c:	80c10c84 	addi	r3,r16,1074
   43710:	10c2d10e 	bge	r2,r3,44258 <_dtoa_r+0xcc8>
   43714:	00801004 	movi	r2,64
   43718:	81010484 	addi	r4,r16,1042
   4371c:	10c7c83a 	sub	r3,r2,r3
   43720:	9108d83a 	srl	r4,r18,r4
   43724:	88e2983a 	sll	r17,r17,r3
   43728:	2448b03a 	or	r4,r4,r17
   4372c:	004db2c0 	call	4db2c <__floatunsidf>
   43730:	017f8434 	movhi	r5,65040
   43734:	01800044 	movi	r6,1
   43738:	1009883a 	mov	r4,r2
   4373c:	194b883a 	add	r5,r3,r5
   43740:	843fffc4 	addi	r16,r16,-1
   43744:	d9801115 	stw	r6,68(sp)
   43748:	000d883a 	mov	r6,zero
   4374c:	01cffe34 	movhi	r7,16376
   43750:	004d0d40 	call	4d0d4 <__subdf3>
   43754:	0198dbf4 	movhi	r6,25455
   43758:	01cff4f4 	movhi	r7,16339
   4375c:	3190d844 	addi	r6,r6,17249
   43760:	39e1e9c4 	addi	r7,r7,-30809
   43764:	1009883a 	mov	r4,r2
   43768:	180b883a 	mov	r5,r3
   4376c:	004c8680 	call	4c868 <__muldf3>
   43770:	01a2d874 	movhi	r6,35681
   43774:	01cff1f4 	movhi	r7,16327
   43778:	31b22cc4 	addi	r6,r6,-14157
   4377c:	39e28a04 	addi	r7,r7,-30168
   43780:	180b883a 	mov	r5,r3
   43784:	1009883a 	mov	r4,r2
   43788:	004b3940 	call	4b394 <__adddf3>
   4378c:	8009883a 	mov	r4,r16
   43790:	1029883a 	mov	r20,r2
   43794:	1823883a 	mov	r17,r3
   43798:	004da500 	call	4da50 <__floatsidf>
   4379c:	019427f4 	movhi	r6,20639
   437a0:	01cff4f4 	movhi	r7,16339
   437a4:	319e7ec4 	addi	r6,r6,31227
   437a8:	39d104c4 	addi	r7,r7,17427
   437ac:	1009883a 	mov	r4,r2
   437b0:	180b883a 	mov	r5,r3
   437b4:	004c8680 	call	4c868 <__muldf3>
   437b8:	100d883a 	mov	r6,r2
   437bc:	180f883a 	mov	r7,r3
   437c0:	a009883a 	mov	r4,r20
   437c4:	880b883a 	mov	r5,r17
   437c8:	004b3940 	call	4b394 <__adddf3>
   437cc:	1009883a 	mov	r4,r2
   437d0:	180b883a 	mov	r5,r3
   437d4:	1029883a 	mov	r20,r2
   437d8:	1823883a 	mov	r17,r3
   437dc:	004d9d00 	call	4d9d0 <__fixdfsi>
   437e0:	000d883a 	mov	r6,zero
   437e4:	000f883a 	mov	r7,zero
   437e8:	a009883a 	mov	r4,r20
   437ec:	880b883a 	mov	r5,r17
   437f0:	d8800515 	stw	r2,20(sp)
   437f4:	004c7740 	call	4c774 <__ledf2>
   437f8:	10028716 	blt	r2,zero,44218 <_dtoa_r+0xc88>
   437fc:	d8c00517 	ldw	r3,20(sp)
   43800:	00800584 	movi	r2,22
   43804:	10c27536 	bltu	r2,r3,441dc <_dtoa_r+0xc4c>
   43808:	180490fa 	slli	r2,r3,3
   4380c:	00c001b4 	movhi	r3,6
   43810:	18e50704 	addi	r3,r3,-27620
   43814:	1885883a 	add	r2,r3,r2
   43818:	11000017 	ldw	r4,0(r2)
   4381c:	11400117 	ldw	r5,4(r2)
   43820:	900d883a 	mov	r6,r18
   43824:	980f883a 	mov	r7,r19
   43828:	004c6980 	call	4c698 <__gedf2>
   4382c:	00828d0e 	bge	zero,r2,44264 <_dtoa_r+0xcd4>
   43830:	d9000517 	ldw	r4,20(sp)
   43834:	d8000e15 	stw	zero,56(sp)
   43838:	213fffc4 	addi	r4,r4,-1
   4383c:	d9000515 	stw	r4,20(sp)
   43840:	b42dc83a 	sub	r22,r22,r16
   43844:	b5bfffc4 	addi	r22,r22,-1
   43848:	b0026f16 	blt	r22,zero,44208 <_dtoa_r+0xc78>
   4384c:	d8000815 	stw	zero,32(sp)
   43850:	d9c00517 	ldw	r7,20(sp)
   43854:	38026416 	blt	r7,zero,441e8 <_dtoa_r+0xc58>
   43858:	b1ed883a 	add	r22,r22,r7
   4385c:	d9c00d15 	stw	r7,52(sp)
   43860:	d8000a15 	stw	zero,40(sp)
   43864:	d9800317 	ldw	r6,12(sp)
   43868:	00800244 	movi	r2,9
   4386c:	11811436 	bltu	r2,r6,43cc0 <_dtoa_r+0x730>
   43870:	00800144 	movi	r2,5
   43874:	1184e10e 	bge	r2,r6,44bfc <_dtoa_r+0x166c>
   43878:	31bfff04 	addi	r6,r6,-4
   4387c:	d9800315 	stw	r6,12(sp)
   43880:	0023883a 	mov	r17,zero
   43884:	d9800317 	ldw	r6,12(sp)
   43888:	008000c4 	movi	r2,3
   4388c:	30836726 	beq	r6,r2,4462c <_dtoa_r+0x109c>
   43890:	1183410e 	bge	r2,r6,44598 <_dtoa_r+0x1008>
   43894:	d9c00317 	ldw	r7,12(sp)
   43898:	00800104 	movi	r2,4
   4389c:	38827c26 	beq	r7,r2,44290 <_dtoa_r+0xd00>
   438a0:	00800144 	movi	r2,5
   438a4:	3884c41e 	bne	r7,r2,44bb8 <_dtoa_r+0x1628>
   438a8:	00800044 	movi	r2,1
   438ac:	d8800b15 	stw	r2,44(sp)
   438b0:	d8c00517 	ldw	r3,20(sp)
   438b4:	d9002217 	ldw	r4,136(sp)
   438b8:	1907883a 	add	r3,r3,r4
   438bc:	19800044 	addi	r6,r3,1
   438c0:	d8c00c15 	stw	r3,48(sp)
   438c4:	d9800615 	stw	r6,24(sp)
   438c8:	0183a40e 	bge	zero,r6,4475c <_dtoa_r+0x11cc>
   438cc:	d9800617 	ldw	r6,24(sp)
   438d0:	3021883a 	mov	r16,r6
   438d4:	e0001115 	stw	zero,68(fp)
   438d8:	008005c4 	movi	r2,23
   438dc:	1184c92e 	bgeu	r2,r6,44c04 <_dtoa_r+0x1674>
   438e0:	00c00044 	movi	r3,1
   438e4:	00800104 	movi	r2,4
   438e8:	1085883a 	add	r2,r2,r2
   438ec:	11000504 	addi	r4,r2,20
   438f0:	180b883a 	mov	r5,r3
   438f4:	18c00044 	addi	r3,r3,1
   438f8:	313ffb2e 	bgeu	r6,r4,438e8 <__alt_data_end+0xfffde0e8>
   438fc:	e1401115 	stw	r5,68(fp)
   43900:	e009883a 	mov	r4,fp
   43904:	00466240 	call	46624 <_Balloc>
   43908:	d8800715 	stw	r2,28(sp)
   4390c:	e0801015 	stw	r2,64(fp)
   43910:	00800384 	movi	r2,14
   43914:	1400f736 	bltu	r2,r16,43cf4 <_dtoa_r+0x764>
   43918:	8800f626 	beq	r17,zero,43cf4 <_dtoa_r+0x764>
   4391c:	d9c00517 	ldw	r7,20(sp)
   43920:	01c39a0e 	bge	zero,r7,4478c <_dtoa_r+0x11fc>
   43924:	388003cc 	andi	r2,r7,15
   43928:	100490fa 	slli	r2,r2,3
   4392c:	382bd13a 	srai	r21,r7,4
   43930:	00c001b4 	movhi	r3,6
   43934:	18e50704 	addi	r3,r3,-27620
   43938:	1885883a 	add	r2,r3,r2
   4393c:	a8c0040c 	andi	r3,r21,16
   43940:	12400017 	ldw	r9,0(r2)
   43944:	12000117 	ldw	r8,4(r2)
   43948:	18037926 	beq	r3,zero,44730 <_dtoa_r+0x11a0>
   4394c:	008001b4 	movhi	r2,6
   43950:	10a4fd04 	addi	r2,r2,-27660
   43954:	11800817 	ldw	r6,32(r2)
   43958:	11c00917 	ldw	r7,36(r2)
   4395c:	9009883a 	mov	r4,r18
   43960:	980b883a 	mov	r5,r19
   43964:	da001715 	stw	r8,92(sp)
   43968:	da401615 	stw	r9,88(sp)
   4396c:	004bc400 	call	4bc40 <__divdf3>
   43970:	da001717 	ldw	r8,92(sp)
   43974:	da401617 	ldw	r9,88(sp)
   43978:	ad4003cc 	andi	r21,r21,15
   4397c:	040000c4 	movi	r16,3
   43980:	1023883a 	mov	r17,r2
   43984:	1829883a 	mov	r20,r3
   43988:	a8001126 	beq	r21,zero,439d0 <_dtoa_r+0x440>
   4398c:	05c001b4 	movhi	r23,6
   43990:	bde4fd04 	addi	r23,r23,-27660
   43994:	4805883a 	mov	r2,r9
   43998:	4007883a 	mov	r3,r8
   4399c:	a980004c 	andi	r6,r21,1
   439a0:	1009883a 	mov	r4,r2
   439a4:	a82bd07a 	srai	r21,r21,1
   439a8:	180b883a 	mov	r5,r3
   439ac:	30000426 	beq	r6,zero,439c0 <_dtoa_r+0x430>
   439b0:	b9800017 	ldw	r6,0(r23)
   439b4:	b9c00117 	ldw	r7,4(r23)
   439b8:	84000044 	addi	r16,r16,1
   439bc:	004c8680 	call	4c868 <__muldf3>
   439c0:	bdc00204 	addi	r23,r23,8
   439c4:	a83ff51e 	bne	r21,zero,4399c <__alt_data_end+0xfffde19c>
   439c8:	1013883a 	mov	r9,r2
   439cc:	1811883a 	mov	r8,r3
   439d0:	480d883a 	mov	r6,r9
   439d4:	400f883a 	mov	r7,r8
   439d8:	8809883a 	mov	r4,r17
   439dc:	a00b883a 	mov	r5,r20
   439e0:	004bc400 	call	4bc40 <__divdf3>
   439e4:	d8800f15 	stw	r2,60(sp)
   439e8:	d8c01015 	stw	r3,64(sp)
   439ec:	d8c00e17 	ldw	r3,56(sp)
   439f0:	18000626 	beq	r3,zero,43a0c <_dtoa_r+0x47c>
   439f4:	d9000f17 	ldw	r4,60(sp)
   439f8:	d9401017 	ldw	r5,64(sp)
   439fc:	000d883a 	mov	r6,zero
   43a00:	01cffc34 	movhi	r7,16368
   43a04:	004c7740 	call	4c774 <__ledf2>
   43a08:	10040b16 	blt	r2,zero,44a38 <_dtoa_r+0x14a8>
   43a0c:	8009883a 	mov	r4,r16
   43a10:	004da500 	call	4da50 <__floatsidf>
   43a14:	d9800f17 	ldw	r6,60(sp)
   43a18:	d9c01017 	ldw	r7,64(sp)
   43a1c:	1009883a 	mov	r4,r2
   43a20:	180b883a 	mov	r5,r3
   43a24:	004c8680 	call	4c868 <__muldf3>
   43a28:	000d883a 	mov	r6,zero
   43a2c:	01d00734 	movhi	r7,16412
   43a30:	1009883a 	mov	r4,r2
   43a34:	180b883a 	mov	r5,r3
   43a38:	004b3940 	call	4b394 <__adddf3>
   43a3c:	1021883a 	mov	r16,r2
   43a40:	d8800617 	ldw	r2,24(sp)
   43a44:	047f3034 	movhi	r17,64704
   43a48:	1c63883a 	add	r17,r3,r17
   43a4c:	10031826 	beq	r2,zero,446b0 <_dtoa_r+0x1120>
   43a50:	d8c00517 	ldw	r3,20(sp)
   43a54:	db000617 	ldw	r12,24(sp)
   43a58:	d8c01315 	stw	r3,76(sp)
   43a5c:	d9000b17 	ldw	r4,44(sp)
   43a60:	20038f26 	beq	r4,zero,448a0 <_dtoa_r+0x1310>
   43a64:	60bfffc4 	addi	r2,r12,-1
   43a68:	100490fa 	slli	r2,r2,3
   43a6c:	00c001b4 	movhi	r3,6
   43a70:	18e50704 	addi	r3,r3,-27620
   43a74:	1885883a 	add	r2,r3,r2
   43a78:	11800017 	ldw	r6,0(r2)
   43a7c:	11c00117 	ldw	r7,4(r2)
   43a80:	d8800717 	ldw	r2,28(sp)
   43a84:	0009883a 	mov	r4,zero
   43a88:	014ff834 	movhi	r5,16352
   43a8c:	db001615 	stw	r12,88(sp)
   43a90:	15c00044 	addi	r23,r2,1
   43a94:	004bc400 	call	4bc40 <__divdf3>
   43a98:	800d883a 	mov	r6,r16
   43a9c:	880f883a 	mov	r7,r17
   43aa0:	1009883a 	mov	r4,r2
   43aa4:	180b883a 	mov	r5,r3
   43aa8:	004d0d40 	call	4d0d4 <__subdf3>
   43aac:	d9401017 	ldw	r5,64(sp)
   43ab0:	d9000f17 	ldw	r4,60(sp)
   43ab4:	102b883a 	mov	r21,r2
   43ab8:	d8c01215 	stw	r3,72(sp)
   43abc:	004d9d00 	call	4d9d0 <__fixdfsi>
   43ac0:	1009883a 	mov	r4,r2
   43ac4:	1029883a 	mov	r20,r2
   43ac8:	004da500 	call	4da50 <__floatsidf>
   43acc:	d9000f17 	ldw	r4,60(sp)
   43ad0:	d9401017 	ldw	r5,64(sp)
   43ad4:	100d883a 	mov	r6,r2
   43ad8:	180f883a 	mov	r7,r3
   43adc:	004d0d40 	call	4d0d4 <__subdf3>
   43ae0:	1823883a 	mov	r17,r3
   43ae4:	d8c00717 	ldw	r3,28(sp)
   43ae8:	d9401217 	ldw	r5,72(sp)
   43aec:	a2000c04 	addi	r8,r20,48
   43af0:	1021883a 	mov	r16,r2
   43af4:	1a000005 	stb	r8,0(r3)
   43af8:	800d883a 	mov	r6,r16
   43afc:	880f883a 	mov	r7,r17
   43b00:	a809883a 	mov	r4,r21
   43b04:	4029883a 	mov	r20,r8
   43b08:	004c6980 	call	4c698 <__gedf2>
   43b0c:	00841d16 	blt	zero,r2,44b84 <_dtoa_r+0x15f4>
   43b10:	800d883a 	mov	r6,r16
   43b14:	880f883a 	mov	r7,r17
   43b18:	0009883a 	mov	r4,zero
   43b1c:	014ffc34 	movhi	r5,16368
   43b20:	004d0d40 	call	4d0d4 <__subdf3>
   43b24:	d9401217 	ldw	r5,72(sp)
   43b28:	100d883a 	mov	r6,r2
   43b2c:	180f883a 	mov	r7,r3
   43b30:	a809883a 	mov	r4,r21
   43b34:	004c6980 	call	4c698 <__gedf2>
   43b38:	db001617 	ldw	r12,88(sp)
   43b3c:	00840e16 	blt	zero,r2,44b78 <_dtoa_r+0x15e8>
   43b40:	00800044 	movi	r2,1
   43b44:	13006b0e 	bge	r2,r12,43cf4 <_dtoa_r+0x764>
   43b48:	d9000717 	ldw	r4,28(sp)
   43b4c:	dd800f15 	stw	r22,60(sp)
   43b50:	dcc01015 	stw	r19,64(sp)
   43b54:	2319883a 	add	r12,r4,r12
   43b58:	dcc01217 	ldw	r19,72(sp)
   43b5c:	602d883a 	mov	r22,r12
   43b60:	dc801215 	stw	r18,72(sp)
   43b64:	b825883a 	mov	r18,r23
   43b68:	00000906 	br	43b90 <_dtoa_r+0x600>
   43b6c:	004d0d40 	call	4d0d4 <__subdf3>
   43b70:	a80d883a 	mov	r6,r21
   43b74:	980f883a 	mov	r7,r19
   43b78:	1009883a 	mov	r4,r2
   43b7c:	180b883a 	mov	r5,r3
   43b80:	004c7740 	call	4c774 <__ledf2>
   43b84:	1003e816 	blt	r2,zero,44b28 <_dtoa_r+0x1598>
   43b88:	b825883a 	mov	r18,r23
   43b8c:	bd83e926 	beq	r23,r22,44b34 <_dtoa_r+0x15a4>
   43b90:	a809883a 	mov	r4,r21
   43b94:	980b883a 	mov	r5,r19
   43b98:	000d883a 	mov	r6,zero
   43b9c:	01d00934 	movhi	r7,16420
   43ba0:	004c8680 	call	4c868 <__muldf3>
   43ba4:	000d883a 	mov	r6,zero
   43ba8:	01d00934 	movhi	r7,16420
   43bac:	8009883a 	mov	r4,r16
   43bb0:	880b883a 	mov	r5,r17
   43bb4:	102b883a 	mov	r21,r2
   43bb8:	1827883a 	mov	r19,r3
   43bbc:	004c8680 	call	4c868 <__muldf3>
   43bc0:	180b883a 	mov	r5,r3
   43bc4:	1009883a 	mov	r4,r2
   43bc8:	1821883a 	mov	r16,r3
   43bcc:	1023883a 	mov	r17,r2
   43bd0:	004d9d00 	call	4d9d0 <__fixdfsi>
   43bd4:	1009883a 	mov	r4,r2
   43bd8:	1029883a 	mov	r20,r2
   43bdc:	004da500 	call	4da50 <__floatsidf>
   43be0:	8809883a 	mov	r4,r17
   43be4:	800b883a 	mov	r5,r16
   43be8:	100d883a 	mov	r6,r2
   43bec:	180f883a 	mov	r7,r3
   43bf0:	004d0d40 	call	4d0d4 <__subdf3>
   43bf4:	a5000c04 	addi	r20,r20,48
   43bf8:	a80d883a 	mov	r6,r21
   43bfc:	980f883a 	mov	r7,r19
   43c00:	1009883a 	mov	r4,r2
   43c04:	180b883a 	mov	r5,r3
   43c08:	95000005 	stb	r20,0(r18)
   43c0c:	1021883a 	mov	r16,r2
   43c10:	1823883a 	mov	r17,r3
   43c14:	004c7740 	call	4c774 <__ledf2>
   43c18:	bdc00044 	addi	r23,r23,1
   43c1c:	800d883a 	mov	r6,r16
   43c20:	880f883a 	mov	r7,r17
   43c24:	0009883a 	mov	r4,zero
   43c28:	014ffc34 	movhi	r5,16368
   43c2c:	103fcf0e 	bge	r2,zero,43b6c <__alt_data_end+0xfffde36c>
   43c30:	d8c01317 	ldw	r3,76(sp)
   43c34:	d8c00515 	stw	r3,20(sp)
   43c38:	d9400917 	ldw	r5,36(sp)
   43c3c:	e009883a 	mov	r4,fp
   43c40:	00466cc0 	call	466cc <_Bfree>
   43c44:	d9000517 	ldw	r4,20(sp)
   43c48:	d9802317 	ldw	r6,140(sp)
   43c4c:	d9c02517 	ldw	r7,148(sp)
   43c50:	b8000005 	stb	zero,0(r23)
   43c54:	20800044 	addi	r2,r4,1
   43c58:	30800015 	stw	r2,0(r6)
   43c5c:	3802aa26 	beq	r7,zero,44708 <_dtoa_r+0x1178>
   43c60:	3dc00015 	stw	r23,0(r7)
   43c64:	d8800717 	ldw	r2,28(sp)
   43c68:	003e7906 	br	43650 <__alt_data_end+0xfffdde50>
   43c6c:	00800434 	movhi	r2,16
   43c70:	10bfffc4 	addi	r2,r2,-1
   43c74:	88a2703a 	and	r17,r17,r2
   43c78:	883e851e 	bne	r17,zero,43690 <__alt_data_end+0xfffdde90>
   43c7c:	008001b4 	movhi	r2,6
   43c80:	10a4e804 	addi	r2,r2,-27744
   43c84:	003e8406 	br	43698 <__alt_data_end+0xfffdde98>
   43c88:	10c00204 	addi	r3,r2,8
   43c8c:	003e8706 	br	436ac <__alt_data_end+0xfffddeac>
   43c90:	01400434 	movhi	r5,16
   43c94:	297fffc4 	addi	r5,r5,-1
   43c98:	994a703a 	and	r5,r19,r5
   43c9c:	9009883a 	mov	r4,r18
   43ca0:	843f0044 	addi	r16,r16,-1023
   43ca4:	294ffc34 	orhi	r5,r5,16368
   43ca8:	dd800217 	ldw	r22,8(sp)
   43cac:	d8001115 	stw	zero,68(sp)
   43cb0:	003ea506 	br	43748 <__alt_data_end+0xfffddf48>
   43cb4:	008001b4 	movhi	r2,6
   43cb8:	10a4df04 	addi	r2,r2,-27780
   43cbc:	003e6406 	br	43650 <__alt_data_end+0xfffdde50>
   43cc0:	e0001115 	stw	zero,68(fp)
   43cc4:	000b883a 	mov	r5,zero
   43cc8:	e009883a 	mov	r4,fp
   43ccc:	00466240 	call	46624 <_Balloc>
   43cd0:	01bfffc4 	movi	r6,-1
   43cd4:	01c00044 	movi	r7,1
   43cd8:	d8800715 	stw	r2,28(sp)
   43cdc:	d9800c15 	stw	r6,48(sp)
   43ce0:	e0801015 	stw	r2,64(fp)
   43ce4:	d8000315 	stw	zero,12(sp)
   43ce8:	d9c00b15 	stw	r7,44(sp)
   43cec:	d9800615 	stw	r6,24(sp)
   43cf0:	d8002215 	stw	zero,136(sp)
   43cf4:	d8800117 	ldw	r2,4(sp)
   43cf8:	10008916 	blt	r2,zero,43f20 <_dtoa_r+0x990>
   43cfc:	d9000517 	ldw	r4,20(sp)
   43d00:	00c00384 	movi	r3,14
   43d04:	19008616 	blt	r3,r4,43f20 <_dtoa_r+0x990>
   43d08:	200490fa 	slli	r2,r4,3
   43d0c:	00c001b4 	movhi	r3,6
   43d10:	d9802217 	ldw	r6,136(sp)
   43d14:	18e50704 	addi	r3,r3,-27620
   43d18:	1885883a 	add	r2,r3,r2
   43d1c:	14000017 	ldw	r16,0(r2)
   43d20:	14400117 	ldw	r17,4(r2)
   43d24:	30016316 	blt	r6,zero,442b4 <_dtoa_r+0xd24>
   43d28:	800d883a 	mov	r6,r16
   43d2c:	880f883a 	mov	r7,r17
   43d30:	9009883a 	mov	r4,r18
   43d34:	980b883a 	mov	r5,r19
   43d38:	004bc400 	call	4bc40 <__divdf3>
   43d3c:	180b883a 	mov	r5,r3
   43d40:	1009883a 	mov	r4,r2
   43d44:	004d9d00 	call	4d9d0 <__fixdfsi>
   43d48:	1009883a 	mov	r4,r2
   43d4c:	102b883a 	mov	r21,r2
   43d50:	004da500 	call	4da50 <__floatsidf>
   43d54:	800d883a 	mov	r6,r16
   43d58:	880f883a 	mov	r7,r17
   43d5c:	1009883a 	mov	r4,r2
   43d60:	180b883a 	mov	r5,r3
   43d64:	004c8680 	call	4c868 <__muldf3>
   43d68:	100d883a 	mov	r6,r2
   43d6c:	180f883a 	mov	r7,r3
   43d70:	9009883a 	mov	r4,r18
   43d74:	980b883a 	mov	r5,r19
   43d78:	004d0d40 	call	4d0d4 <__subdf3>
   43d7c:	d9c00717 	ldw	r7,28(sp)
   43d80:	1009883a 	mov	r4,r2
   43d84:	a8800c04 	addi	r2,r21,48
   43d88:	38800005 	stb	r2,0(r7)
   43d8c:	3dc00044 	addi	r23,r7,1
   43d90:	d9c00617 	ldw	r7,24(sp)
   43d94:	01800044 	movi	r6,1
   43d98:	180b883a 	mov	r5,r3
   43d9c:	2005883a 	mov	r2,r4
   43da0:	39803826 	beq	r7,r6,43e84 <_dtoa_r+0x8f4>
   43da4:	000d883a 	mov	r6,zero
   43da8:	01d00934 	movhi	r7,16420
   43dac:	004c8680 	call	4c868 <__muldf3>
   43db0:	000d883a 	mov	r6,zero
   43db4:	000f883a 	mov	r7,zero
   43db8:	1009883a 	mov	r4,r2
   43dbc:	180b883a 	mov	r5,r3
   43dc0:	1025883a 	mov	r18,r2
   43dc4:	1827883a 	mov	r19,r3
   43dc8:	004c6100 	call	4c610 <__eqdf2>
   43dcc:	103f9a26 	beq	r2,zero,43c38 <__alt_data_end+0xfffde438>
   43dd0:	d9c00617 	ldw	r7,24(sp)
   43dd4:	d8c00717 	ldw	r3,28(sp)
   43dd8:	b829883a 	mov	r20,r23
   43ddc:	38bfffc4 	addi	r2,r7,-1
   43de0:	18ad883a 	add	r22,r3,r2
   43de4:	00000a06 	br	43e10 <_dtoa_r+0x880>
   43de8:	004c8680 	call	4c868 <__muldf3>
   43dec:	000d883a 	mov	r6,zero
   43df0:	000f883a 	mov	r7,zero
   43df4:	1009883a 	mov	r4,r2
   43df8:	180b883a 	mov	r5,r3
   43dfc:	1025883a 	mov	r18,r2
   43e00:	1827883a 	mov	r19,r3
   43e04:	b829883a 	mov	r20,r23
   43e08:	004c6100 	call	4c610 <__eqdf2>
   43e0c:	103f8a26 	beq	r2,zero,43c38 <__alt_data_end+0xfffde438>
   43e10:	800d883a 	mov	r6,r16
   43e14:	880f883a 	mov	r7,r17
   43e18:	9009883a 	mov	r4,r18
   43e1c:	980b883a 	mov	r5,r19
   43e20:	004bc400 	call	4bc40 <__divdf3>
   43e24:	180b883a 	mov	r5,r3
   43e28:	1009883a 	mov	r4,r2
   43e2c:	004d9d00 	call	4d9d0 <__fixdfsi>
   43e30:	1009883a 	mov	r4,r2
   43e34:	102b883a 	mov	r21,r2
   43e38:	004da500 	call	4da50 <__floatsidf>
   43e3c:	800d883a 	mov	r6,r16
   43e40:	880f883a 	mov	r7,r17
   43e44:	1009883a 	mov	r4,r2
   43e48:	180b883a 	mov	r5,r3
   43e4c:	004c8680 	call	4c868 <__muldf3>
   43e50:	100d883a 	mov	r6,r2
   43e54:	180f883a 	mov	r7,r3
   43e58:	9009883a 	mov	r4,r18
   43e5c:	980b883a 	mov	r5,r19
   43e60:	004d0d40 	call	4d0d4 <__subdf3>
   43e64:	aa000c04 	addi	r8,r21,48
   43e68:	a2000005 	stb	r8,0(r20)
   43e6c:	000d883a 	mov	r6,zero
   43e70:	01d00934 	movhi	r7,16420
   43e74:	1009883a 	mov	r4,r2
   43e78:	180b883a 	mov	r5,r3
   43e7c:	a5c00044 	addi	r23,r20,1
   43e80:	b53fd91e 	bne	r22,r20,43de8 <__alt_data_end+0xfffde5e8>
   43e84:	100d883a 	mov	r6,r2
   43e88:	180f883a 	mov	r7,r3
   43e8c:	1009883a 	mov	r4,r2
   43e90:	180b883a 	mov	r5,r3
   43e94:	004b3940 	call	4b394 <__adddf3>
   43e98:	100d883a 	mov	r6,r2
   43e9c:	180f883a 	mov	r7,r3
   43ea0:	8009883a 	mov	r4,r16
   43ea4:	880b883a 	mov	r5,r17
   43ea8:	1027883a 	mov	r19,r2
   43eac:	1825883a 	mov	r18,r3
   43eb0:	004c7740 	call	4c774 <__ledf2>
   43eb4:	10000816 	blt	r2,zero,43ed8 <_dtoa_r+0x948>
   43eb8:	980d883a 	mov	r6,r19
   43ebc:	900f883a 	mov	r7,r18
   43ec0:	8009883a 	mov	r4,r16
   43ec4:	880b883a 	mov	r5,r17
   43ec8:	004c6100 	call	4c610 <__eqdf2>
   43ecc:	103f5a1e 	bne	r2,zero,43c38 <__alt_data_end+0xfffde438>
   43ed0:	ad40004c 	andi	r21,r21,1
   43ed4:	a83f5826 	beq	r21,zero,43c38 <__alt_data_end+0xfffde438>
   43ed8:	bd3fffc3 	ldbu	r20,-1(r23)
   43edc:	b8bfffc4 	addi	r2,r23,-1
   43ee0:	1007883a 	mov	r3,r2
   43ee4:	01400e44 	movi	r5,57
   43ee8:	d9800717 	ldw	r6,28(sp)
   43eec:	00000506 	br	43f04 <_dtoa_r+0x974>
   43ef0:	18ffffc4 	addi	r3,r3,-1
   43ef4:	11824726 	beq	r2,r6,44814 <_dtoa_r+0x1284>
   43ef8:	1d000003 	ldbu	r20,0(r3)
   43efc:	102f883a 	mov	r23,r2
   43f00:	10bfffc4 	addi	r2,r2,-1
   43f04:	a1003fcc 	andi	r4,r20,255
   43f08:	2100201c 	xori	r4,r4,128
   43f0c:	213fe004 	addi	r4,r4,-128
   43f10:	217ff726 	beq	r4,r5,43ef0 <__alt_data_end+0xfffde6f0>
   43f14:	a2000044 	addi	r8,r20,1
   43f18:	12000005 	stb	r8,0(r2)
   43f1c:	003f4606 	br	43c38 <__alt_data_end+0xfffde438>
   43f20:	d9000b17 	ldw	r4,44(sp)
   43f24:	2000c826 	beq	r4,zero,44248 <_dtoa_r+0xcb8>
   43f28:	d9800317 	ldw	r6,12(sp)
   43f2c:	00c00044 	movi	r3,1
   43f30:	1980f90e 	bge	r3,r6,44318 <_dtoa_r+0xd88>
   43f34:	d8800617 	ldw	r2,24(sp)
   43f38:	d8c00a17 	ldw	r3,40(sp)
   43f3c:	157fffc4 	addi	r21,r2,-1
   43f40:	1d41f316 	blt	r3,r21,44710 <_dtoa_r+0x1180>
   43f44:	1d6bc83a 	sub	r21,r3,r21
   43f48:	d9c00617 	ldw	r7,24(sp)
   43f4c:	3802aa16 	blt	r7,zero,449f8 <_dtoa_r+0x1468>
   43f50:	dd000817 	ldw	r20,32(sp)
   43f54:	d8800617 	ldw	r2,24(sp)
   43f58:	d8c00817 	ldw	r3,32(sp)
   43f5c:	01400044 	movi	r5,1
   43f60:	e009883a 	mov	r4,fp
   43f64:	1887883a 	add	r3,r3,r2
   43f68:	d8c00815 	stw	r3,32(sp)
   43f6c:	b0ad883a 	add	r22,r22,r2
   43f70:	0046a580 	call	46a58 <__i2b>
   43f74:	1023883a 	mov	r17,r2
   43f78:	a0000826 	beq	r20,zero,43f9c <_dtoa_r+0xa0c>
   43f7c:	0580070e 	bge	zero,r22,43f9c <_dtoa_r+0xa0c>
   43f80:	a005883a 	mov	r2,r20
   43f84:	b500b916 	blt	r22,r20,4426c <_dtoa_r+0xcdc>
   43f88:	d9000817 	ldw	r4,32(sp)
   43f8c:	a0a9c83a 	sub	r20,r20,r2
   43f90:	b0adc83a 	sub	r22,r22,r2
   43f94:	2089c83a 	sub	r4,r4,r2
   43f98:	d9000815 	stw	r4,32(sp)
   43f9c:	d9800a17 	ldw	r6,40(sp)
   43fa0:	0181810e 	bge	zero,r6,445a8 <_dtoa_r+0x1018>
   43fa4:	d9c00b17 	ldw	r7,44(sp)
   43fa8:	3800b326 	beq	r7,zero,44278 <_dtoa_r+0xce8>
   43fac:	a800b226 	beq	r21,zero,44278 <_dtoa_r+0xce8>
   43fb0:	880b883a 	mov	r5,r17
   43fb4:	a80d883a 	mov	r6,r21
   43fb8:	e009883a 	mov	r4,fp
   43fbc:	0046d200 	call	46d20 <__pow5mult>
   43fc0:	d9800917 	ldw	r6,36(sp)
   43fc4:	100b883a 	mov	r5,r2
   43fc8:	e009883a 	mov	r4,fp
   43fcc:	1023883a 	mov	r17,r2
   43fd0:	0046a940 	call	46a94 <__multiply>
   43fd4:	1021883a 	mov	r16,r2
   43fd8:	d8800a17 	ldw	r2,40(sp)
   43fdc:	d9400917 	ldw	r5,36(sp)
   43fe0:	e009883a 	mov	r4,fp
   43fe4:	1545c83a 	sub	r2,r2,r21
   43fe8:	d8800a15 	stw	r2,40(sp)
   43fec:	00466cc0 	call	466cc <_Bfree>
   43ff0:	d8c00a17 	ldw	r3,40(sp)
   43ff4:	18009f1e 	bne	r3,zero,44274 <_dtoa_r+0xce4>
   43ff8:	05c00044 	movi	r23,1
   43ffc:	e009883a 	mov	r4,fp
   44000:	b80b883a 	mov	r5,r23
   44004:	0046a580 	call	46a58 <__i2b>
   44008:	d9000d17 	ldw	r4,52(sp)
   4400c:	102b883a 	mov	r21,r2
   44010:	2000ce26 	beq	r4,zero,4434c <_dtoa_r+0xdbc>
   44014:	200d883a 	mov	r6,r4
   44018:	100b883a 	mov	r5,r2
   4401c:	e009883a 	mov	r4,fp
   44020:	0046d200 	call	46d20 <__pow5mult>
   44024:	d9800317 	ldw	r6,12(sp)
   44028:	102b883a 	mov	r21,r2
   4402c:	b981810e 	bge	r23,r6,44634 <_dtoa_r+0x10a4>
   44030:	0027883a 	mov	r19,zero
   44034:	a8800417 	ldw	r2,16(r21)
   44038:	05c00804 	movi	r23,32
   4403c:	10800104 	addi	r2,r2,4
   44040:	1085883a 	add	r2,r2,r2
   44044:	1085883a 	add	r2,r2,r2
   44048:	a885883a 	add	r2,r21,r2
   4404c:	11000017 	ldw	r4,0(r2)
   44050:	00469400 	call	46940 <__hi0bits>
   44054:	b885c83a 	sub	r2,r23,r2
   44058:	1585883a 	add	r2,r2,r22
   4405c:	108007cc 	andi	r2,r2,31
   44060:	1000b326 	beq	r2,zero,44330 <_dtoa_r+0xda0>
   44064:	00c00804 	movi	r3,32
   44068:	1887c83a 	sub	r3,r3,r2
   4406c:	01000104 	movi	r4,4
   44070:	20c2cd0e 	bge	r4,r3,44ba8 <_dtoa_r+0x1618>
   44074:	00c00704 	movi	r3,28
   44078:	1885c83a 	sub	r2,r3,r2
   4407c:	d8c00817 	ldw	r3,32(sp)
   44080:	a0a9883a 	add	r20,r20,r2
   44084:	b0ad883a 	add	r22,r22,r2
   44088:	1887883a 	add	r3,r3,r2
   4408c:	d8c00815 	stw	r3,32(sp)
   44090:	d9800817 	ldw	r6,32(sp)
   44094:	0180040e 	bge	zero,r6,440a8 <_dtoa_r+0xb18>
   44098:	800b883a 	mov	r5,r16
   4409c:	e009883a 	mov	r4,fp
   440a0:	0046e600 	call	46e60 <__lshift>
   440a4:	1021883a 	mov	r16,r2
   440a8:	0580050e 	bge	zero,r22,440c0 <_dtoa_r+0xb30>
   440ac:	a80b883a 	mov	r5,r21
   440b0:	b00d883a 	mov	r6,r22
   440b4:	e009883a 	mov	r4,fp
   440b8:	0046e600 	call	46e60 <__lshift>
   440bc:	102b883a 	mov	r21,r2
   440c0:	d9c00e17 	ldw	r7,56(sp)
   440c4:	3801211e 	bne	r7,zero,4454c <_dtoa_r+0xfbc>
   440c8:	d9800617 	ldw	r6,24(sp)
   440cc:	0181380e 	bge	zero,r6,445b0 <_dtoa_r+0x1020>
   440d0:	d8c00b17 	ldw	r3,44(sp)
   440d4:	1800ab1e 	bne	r3,zero,44384 <_dtoa_r+0xdf4>
   440d8:	dc800717 	ldw	r18,28(sp)
   440dc:	dcc00617 	ldw	r19,24(sp)
   440e0:	9029883a 	mov	r20,r18
   440e4:	00000206 	br	440f0 <_dtoa_r+0xb60>
   440e8:	00466f40 	call	466f4 <__multadd>
   440ec:	1021883a 	mov	r16,r2
   440f0:	a80b883a 	mov	r5,r21
   440f4:	8009883a 	mov	r4,r16
   440f8:	00433680 	call	43368 <quorem>
   440fc:	10800c04 	addi	r2,r2,48
   44100:	90800005 	stb	r2,0(r18)
   44104:	94800044 	addi	r18,r18,1
   44108:	9507c83a 	sub	r3,r18,r20
   4410c:	000f883a 	mov	r7,zero
   44110:	01800284 	movi	r6,10
   44114:	800b883a 	mov	r5,r16
   44118:	e009883a 	mov	r4,fp
   4411c:	1cfff216 	blt	r3,r19,440e8 <__alt_data_end+0xfffde8e8>
   44120:	1011883a 	mov	r8,r2
   44124:	d8800617 	ldw	r2,24(sp)
   44128:	0082370e 	bge	zero,r2,44a08 <_dtoa_r+0x1478>
   4412c:	d9000717 	ldw	r4,28(sp)
   44130:	0025883a 	mov	r18,zero
   44134:	20af883a 	add	r23,r4,r2
   44138:	01800044 	movi	r6,1
   4413c:	800b883a 	mov	r5,r16
   44140:	e009883a 	mov	r4,fp
   44144:	da001715 	stw	r8,92(sp)
   44148:	0046e600 	call	46e60 <__lshift>
   4414c:	a80b883a 	mov	r5,r21
   44150:	1009883a 	mov	r4,r2
   44154:	d8800915 	stw	r2,36(sp)
   44158:	0046fa80 	call	46fa8 <__mcmp>
   4415c:	da001717 	ldw	r8,92(sp)
   44160:	0081800e 	bge	zero,r2,44764 <_dtoa_r+0x11d4>
   44164:	b93fffc3 	ldbu	r4,-1(r23)
   44168:	b8bfffc4 	addi	r2,r23,-1
   4416c:	1007883a 	mov	r3,r2
   44170:	01800e44 	movi	r6,57
   44174:	d9c00717 	ldw	r7,28(sp)
   44178:	00000506 	br	44190 <_dtoa_r+0xc00>
   4417c:	18ffffc4 	addi	r3,r3,-1
   44180:	11c12326 	beq	r2,r7,44610 <_dtoa_r+0x1080>
   44184:	19000003 	ldbu	r4,0(r3)
   44188:	102f883a 	mov	r23,r2
   4418c:	10bfffc4 	addi	r2,r2,-1
   44190:	21403fcc 	andi	r5,r4,255
   44194:	2940201c 	xori	r5,r5,128
   44198:	297fe004 	addi	r5,r5,-128
   4419c:	29bff726 	beq	r5,r6,4417c <__alt_data_end+0xfffde97c>
   441a0:	21000044 	addi	r4,r4,1
   441a4:	11000005 	stb	r4,0(r2)
   441a8:	a80b883a 	mov	r5,r21
   441ac:	e009883a 	mov	r4,fp
   441b0:	00466cc0 	call	466cc <_Bfree>
   441b4:	883ea026 	beq	r17,zero,43c38 <__alt_data_end+0xfffde438>
   441b8:	90000426 	beq	r18,zero,441cc <_dtoa_r+0xc3c>
   441bc:	94400326 	beq	r18,r17,441cc <_dtoa_r+0xc3c>
   441c0:	900b883a 	mov	r5,r18
   441c4:	e009883a 	mov	r4,fp
   441c8:	00466cc0 	call	466cc <_Bfree>
   441cc:	880b883a 	mov	r5,r17
   441d0:	e009883a 	mov	r4,fp
   441d4:	00466cc0 	call	466cc <_Bfree>
   441d8:	003e9706 	br	43c38 <__alt_data_end+0xfffde438>
   441dc:	01800044 	movi	r6,1
   441e0:	d9800e15 	stw	r6,56(sp)
   441e4:	003d9606 	br	43840 <__alt_data_end+0xfffde040>
   441e8:	d8800817 	ldw	r2,32(sp)
   441ec:	d8c00517 	ldw	r3,20(sp)
   441f0:	d8000d15 	stw	zero,52(sp)
   441f4:	10c5c83a 	sub	r2,r2,r3
   441f8:	00c9c83a 	sub	r4,zero,r3
   441fc:	d8800815 	stw	r2,32(sp)
   44200:	d9000a15 	stw	r4,40(sp)
   44204:	003d9706 	br	43864 <__alt_data_end+0xfffde064>
   44208:	05adc83a 	sub	r22,zero,r22
   4420c:	dd800815 	stw	r22,32(sp)
   44210:	002d883a 	mov	r22,zero
   44214:	003d8e06 	br	43850 <__alt_data_end+0xfffde050>
   44218:	d9000517 	ldw	r4,20(sp)
   4421c:	004da500 	call	4da50 <__floatsidf>
   44220:	100d883a 	mov	r6,r2
   44224:	180f883a 	mov	r7,r3
   44228:	a009883a 	mov	r4,r20
   4422c:	880b883a 	mov	r5,r17
   44230:	004c6100 	call	4c610 <__eqdf2>
   44234:	103d7126 	beq	r2,zero,437fc <__alt_data_end+0xfffddffc>
   44238:	d9c00517 	ldw	r7,20(sp)
   4423c:	39ffffc4 	addi	r7,r7,-1
   44240:	d9c00515 	stw	r7,20(sp)
   44244:	003d6d06 	br	437fc <__alt_data_end+0xfffddffc>
   44248:	dd400a17 	ldw	r21,40(sp)
   4424c:	dd000817 	ldw	r20,32(sp)
   44250:	0023883a 	mov	r17,zero
   44254:	003f4806 	br	43f78 <__alt_data_end+0xfffde778>
   44258:	10e3c83a 	sub	r17,r2,r3
   4425c:	9448983a 	sll	r4,r18,r17
   44260:	003d3206 	br	4372c <__alt_data_end+0xfffddf2c>
   44264:	d8000e15 	stw	zero,56(sp)
   44268:	003d7506 	br	43840 <__alt_data_end+0xfffde040>
   4426c:	b005883a 	mov	r2,r22
   44270:	003f4506 	br	43f88 <__alt_data_end+0xfffde788>
   44274:	dc000915 	stw	r16,36(sp)
   44278:	d9800a17 	ldw	r6,40(sp)
   4427c:	d9400917 	ldw	r5,36(sp)
   44280:	e009883a 	mov	r4,fp
   44284:	0046d200 	call	46d20 <__pow5mult>
   44288:	1021883a 	mov	r16,r2
   4428c:	003f5a06 	br	43ff8 <__alt_data_end+0xfffde7f8>
   44290:	01c00044 	movi	r7,1
   44294:	d9c00b15 	stw	r7,44(sp)
   44298:	d8802217 	ldw	r2,136(sp)
   4429c:	0081280e 	bge	zero,r2,44740 <_dtoa_r+0x11b0>
   442a0:	100d883a 	mov	r6,r2
   442a4:	1021883a 	mov	r16,r2
   442a8:	d8800c15 	stw	r2,48(sp)
   442ac:	d8800615 	stw	r2,24(sp)
   442b0:	003d8806 	br	438d4 <__alt_data_end+0xfffde0d4>
   442b4:	d8800617 	ldw	r2,24(sp)
   442b8:	00be9b16 	blt	zero,r2,43d28 <__alt_data_end+0xfffde528>
   442bc:	10010f1e 	bne	r2,zero,446fc <_dtoa_r+0x116c>
   442c0:	880b883a 	mov	r5,r17
   442c4:	000d883a 	mov	r6,zero
   442c8:	01d00534 	movhi	r7,16404
   442cc:	8009883a 	mov	r4,r16
   442d0:	004c8680 	call	4c868 <__muldf3>
   442d4:	900d883a 	mov	r6,r18
   442d8:	980f883a 	mov	r7,r19
   442dc:	1009883a 	mov	r4,r2
   442e0:	180b883a 	mov	r5,r3
   442e4:	004c6980 	call	4c698 <__gedf2>
   442e8:	002b883a 	mov	r21,zero
   442ec:	0023883a 	mov	r17,zero
   442f0:	1000bf16 	blt	r2,zero,445f0 <_dtoa_r+0x1060>
   442f4:	d9802217 	ldw	r6,136(sp)
   442f8:	ddc00717 	ldw	r23,28(sp)
   442fc:	018c303a 	nor	r6,zero,r6
   44300:	d9800515 	stw	r6,20(sp)
   44304:	a80b883a 	mov	r5,r21
   44308:	e009883a 	mov	r4,fp
   4430c:	00466cc0 	call	466cc <_Bfree>
   44310:	883e4926 	beq	r17,zero,43c38 <__alt_data_end+0xfffde438>
   44314:	003fad06 	br	441cc <__alt_data_end+0xfffde9cc>
   44318:	d9c01117 	ldw	r7,68(sp)
   4431c:	3801bc26 	beq	r7,zero,44a10 <_dtoa_r+0x1480>
   44320:	10810cc4 	addi	r2,r2,1075
   44324:	dd400a17 	ldw	r21,40(sp)
   44328:	dd000817 	ldw	r20,32(sp)
   4432c:	003f0a06 	br	43f58 <__alt_data_end+0xfffde758>
   44330:	00800704 	movi	r2,28
   44334:	d9000817 	ldw	r4,32(sp)
   44338:	a0a9883a 	add	r20,r20,r2
   4433c:	b0ad883a 	add	r22,r22,r2
   44340:	2089883a 	add	r4,r4,r2
   44344:	d9000815 	stw	r4,32(sp)
   44348:	003f5106 	br	44090 <__alt_data_end+0xfffde890>
   4434c:	d8c00317 	ldw	r3,12(sp)
   44350:	b8c1fc0e 	bge	r23,r3,44b44 <_dtoa_r+0x15b4>
   44354:	0027883a 	mov	r19,zero
   44358:	b805883a 	mov	r2,r23
   4435c:	003f3e06 	br	44058 <__alt_data_end+0xfffde858>
   44360:	880b883a 	mov	r5,r17
   44364:	e009883a 	mov	r4,fp
   44368:	000f883a 	mov	r7,zero
   4436c:	01800284 	movi	r6,10
   44370:	00466f40 	call	466f4 <__multadd>
   44374:	d9000c17 	ldw	r4,48(sp)
   44378:	1023883a 	mov	r17,r2
   4437c:	0102040e 	bge	zero,r4,44b90 <_dtoa_r+0x1600>
   44380:	d9000615 	stw	r4,24(sp)
   44384:	0500050e 	bge	zero,r20,4439c <_dtoa_r+0xe0c>
   44388:	880b883a 	mov	r5,r17
   4438c:	a00d883a 	mov	r6,r20
   44390:	e009883a 	mov	r4,fp
   44394:	0046e600 	call	46e60 <__lshift>
   44398:	1023883a 	mov	r17,r2
   4439c:	9801241e 	bne	r19,zero,44830 <_dtoa_r+0x12a0>
   443a0:	8829883a 	mov	r20,r17
   443a4:	d9000617 	ldw	r4,24(sp)
   443a8:	dcc00717 	ldw	r19,28(sp)
   443ac:	9480004c 	andi	r18,r18,1
   443b0:	20bfffc4 	addi	r2,r4,-1
   443b4:	9885883a 	add	r2,r19,r2
   443b8:	d8800415 	stw	r2,16(sp)
   443bc:	dc800615 	stw	r18,24(sp)
   443c0:	a80b883a 	mov	r5,r21
   443c4:	8009883a 	mov	r4,r16
   443c8:	00433680 	call	43368 <quorem>
   443cc:	880b883a 	mov	r5,r17
   443d0:	8009883a 	mov	r4,r16
   443d4:	102f883a 	mov	r23,r2
   443d8:	0046fa80 	call	46fa8 <__mcmp>
   443dc:	a80b883a 	mov	r5,r21
   443e0:	a00d883a 	mov	r6,r20
   443e4:	e009883a 	mov	r4,fp
   443e8:	102d883a 	mov	r22,r2
   443ec:	00470080 	call	47008 <__mdiff>
   443f0:	1007883a 	mov	r3,r2
   443f4:	10800317 	ldw	r2,12(r2)
   443f8:	bc800c04 	addi	r18,r23,48
   443fc:	180b883a 	mov	r5,r3
   44400:	10004e1e 	bne	r2,zero,4453c <_dtoa_r+0xfac>
   44404:	8009883a 	mov	r4,r16
   44408:	d8c01615 	stw	r3,88(sp)
   4440c:	0046fa80 	call	46fa8 <__mcmp>
   44410:	d8c01617 	ldw	r3,88(sp)
   44414:	e009883a 	mov	r4,fp
   44418:	d8801615 	stw	r2,88(sp)
   4441c:	180b883a 	mov	r5,r3
   44420:	00466cc0 	call	466cc <_Bfree>
   44424:	d8801617 	ldw	r2,88(sp)
   44428:	1000041e 	bne	r2,zero,4443c <_dtoa_r+0xeac>
   4442c:	d9800317 	ldw	r6,12(sp)
   44430:	3000021e 	bne	r6,zero,4443c <_dtoa_r+0xeac>
   44434:	d8c00617 	ldw	r3,24(sp)
   44438:	18003726 	beq	r3,zero,44518 <_dtoa_r+0xf88>
   4443c:	b0002016 	blt	r22,zero,444c0 <_dtoa_r+0xf30>
   44440:	b000041e 	bne	r22,zero,44454 <_dtoa_r+0xec4>
   44444:	d9000317 	ldw	r4,12(sp)
   44448:	2000021e 	bne	r4,zero,44454 <_dtoa_r+0xec4>
   4444c:	d8c00617 	ldw	r3,24(sp)
   44450:	18001b26 	beq	r3,zero,444c0 <_dtoa_r+0xf30>
   44454:	00810716 	blt	zero,r2,44874 <_dtoa_r+0x12e4>
   44458:	d8c00417 	ldw	r3,16(sp)
   4445c:	9d800044 	addi	r22,r19,1
   44460:	9c800005 	stb	r18,0(r19)
   44464:	b02f883a 	mov	r23,r22
   44468:	98c10626 	beq	r19,r3,44884 <_dtoa_r+0x12f4>
   4446c:	800b883a 	mov	r5,r16
   44470:	000f883a 	mov	r7,zero
   44474:	01800284 	movi	r6,10
   44478:	e009883a 	mov	r4,fp
   4447c:	00466f40 	call	466f4 <__multadd>
   44480:	1021883a 	mov	r16,r2
   44484:	000f883a 	mov	r7,zero
   44488:	01800284 	movi	r6,10
   4448c:	880b883a 	mov	r5,r17
   44490:	e009883a 	mov	r4,fp
   44494:	8d002526 	beq	r17,r20,4452c <_dtoa_r+0xf9c>
   44498:	00466f40 	call	466f4 <__multadd>
   4449c:	a00b883a 	mov	r5,r20
   444a0:	000f883a 	mov	r7,zero
   444a4:	01800284 	movi	r6,10
   444a8:	e009883a 	mov	r4,fp
   444ac:	1023883a 	mov	r17,r2
   444b0:	00466f40 	call	466f4 <__multadd>
   444b4:	1029883a 	mov	r20,r2
   444b8:	b027883a 	mov	r19,r22
   444bc:	003fc006 	br	443c0 <__alt_data_end+0xfffdebc0>
   444c0:	9011883a 	mov	r8,r18
   444c4:	00800e0e 	bge	zero,r2,44500 <_dtoa_r+0xf70>
   444c8:	800b883a 	mov	r5,r16
   444cc:	01800044 	movi	r6,1
   444d0:	e009883a 	mov	r4,fp
   444d4:	da001715 	stw	r8,92(sp)
   444d8:	0046e600 	call	46e60 <__lshift>
   444dc:	a80b883a 	mov	r5,r21
   444e0:	1009883a 	mov	r4,r2
   444e4:	1021883a 	mov	r16,r2
   444e8:	0046fa80 	call	46fa8 <__mcmp>
   444ec:	da001717 	ldw	r8,92(sp)
   444f0:	0081960e 	bge	zero,r2,44b4c <_dtoa_r+0x15bc>
   444f4:	00800e44 	movi	r2,57
   444f8:	40817026 	beq	r8,r2,44abc <_dtoa_r+0x152c>
   444fc:	ba000c44 	addi	r8,r23,49
   44500:	8825883a 	mov	r18,r17
   44504:	9dc00044 	addi	r23,r19,1
   44508:	9a000005 	stb	r8,0(r19)
   4450c:	a023883a 	mov	r17,r20
   44510:	dc000915 	stw	r16,36(sp)
   44514:	003f2406 	br	441a8 <__alt_data_end+0xfffde9a8>
   44518:	00800e44 	movi	r2,57
   4451c:	9011883a 	mov	r8,r18
   44520:	90816626 	beq	r18,r2,44abc <_dtoa_r+0x152c>
   44524:	05bff516 	blt	zero,r22,444fc <__alt_data_end+0xfffdecfc>
   44528:	003ff506 	br	44500 <__alt_data_end+0xfffded00>
   4452c:	00466f40 	call	466f4 <__multadd>
   44530:	1023883a 	mov	r17,r2
   44534:	1029883a 	mov	r20,r2
   44538:	003fdf06 	br	444b8 <__alt_data_end+0xfffdecb8>
   4453c:	e009883a 	mov	r4,fp
   44540:	00466cc0 	call	466cc <_Bfree>
   44544:	00800044 	movi	r2,1
   44548:	003fbc06 	br	4443c <__alt_data_end+0xfffdec3c>
   4454c:	a80b883a 	mov	r5,r21
   44550:	8009883a 	mov	r4,r16
   44554:	0046fa80 	call	46fa8 <__mcmp>
   44558:	103edb0e 	bge	r2,zero,440c8 <__alt_data_end+0xfffde8c8>
   4455c:	800b883a 	mov	r5,r16
   44560:	000f883a 	mov	r7,zero
   44564:	01800284 	movi	r6,10
   44568:	e009883a 	mov	r4,fp
   4456c:	00466f40 	call	466f4 <__multadd>
   44570:	1021883a 	mov	r16,r2
   44574:	d8800517 	ldw	r2,20(sp)
   44578:	d8c00b17 	ldw	r3,44(sp)
   4457c:	10bfffc4 	addi	r2,r2,-1
   44580:	d8800515 	stw	r2,20(sp)
   44584:	183f761e 	bne	r3,zero,44360 <__alt_data_end+0xfffdeb60>
   44588:	d9000c17 	ldw	r4,48(sp)
   4458c:	0101730e 	bge	zero,r4,44b5c <_dtoa_r+0x15cc>
   44590:	d9000615 	stw	r4,24(sp)
   44594:	003ed006 	br	440d8 <__alt_data_end+0xfffde8d8>
   44598:	00800084 	movi	r2,2
   4459c:	3081861e 	bne	r6,r2,44bb8 <_dtoa_r+0x1628>
   445a0:	d8000b15 	stw	zero,44(sp)
   445a4:	003f3c06 	br	44298 <__alt_data_end+0xfffdea98>
   445a8:	dc000917 	ldw	r16,36(sp)
   445ac:	003e9206 	br	43ff8 <__alt_data_end+0xfffde7f8>
   445b0:	d9c00317 	ldw	r7,12(sp)
   445b4:	00800084 	movi	r2,2
   445b8:	11fec50e 	bge	r2,r7,440d0 <__alt_data_end+0xfffde8d0>
   445bc:	d9000617 	ldw	r4,24(sp)
   445c0:	20013c1e 	bne	r4,zero,44ab4 <_dtoa_r+0x1524>
   445c4:	a80b883a 	mov	r5,r21
   445c8:	000f883a 	mov	r7,zero
   445cc:	01800144 	movi	r6,5
   445d0:	e009883a 	mov	r4,fp
   445d4:	00466f40 	call	466f4 <__multadd>
   445d8:	100b883a 	mov	r5,r2
   445dc:	8009883a 	mov	r4,r16
   445e0:	102b883a 	mov	r21,r2
   445e4:	0046fa80 	call	46fa8 <__mcmp>
   445e8:	dc000915 	stw	r16,36(sp)
   445ec:	00bf410e 	bge	zero,r2,442f4 <__alt_data_end+0xfffdeaf4>
   445f0:	d9c00717 	ldw	r7,28(sp)
   445f4:	00800c44 	movi	r2,49
   445f8:	38800005 	stb	r2,0(r7)
   445fc:	d8800517 	ldw	r2,20(sp)
   44600:	3dc00044 	addi	r23,r7,1
   44604:	10800044 	addi	r2,r2,1
   44608:	d8800515 	stw	r2,20(sp)
   4460c:	003f3d06 	br	44304 <__alt_data_end+0xfffdeb04>
   44610:	d9800517 	ldw	r6,20(sp)
   44614:	d9c00717 	ldw	r7,28(sp)
   44618:	00800c44 	movi	r2,49
   4461c:	31800044 	addi	r6,r6,1
   44620:	d9800515 	stw	r6,20(sp)
   44624:	38800005 	stb	r2,0(r7)
   44628:	003edf06 	br	441a8 <__alt_data_end+0xfffde9a8>
   4462c:	d8000b15 	stw	zero,44(sp)
   44630:	003c9f06 	br	438b0 <__alt_data_end+0xfffde0b0>
   44634:	903e7e1e 	bne	r18,zero,44030 <__alt_data_end+0xfffde830>
   44638:	00800434 	movhi	r2,16
   4463c:	10bfffc4 	addi	r2,r2,-1
   44640:	9884703a 	and	r2,r19,r2
   44644:	1000ea1e 	bne	r2,zero,449f0 <_dtoa_r+0x1460>
   44648:	9cdffc2c 	andhi	r19,r19,32752
   4464c:	9800e826 	beq	r19,zero,449f0 <_dtoa_r+0x1460>
   44650:	d9c00817 	ldw	r7,32(sp)
   44654:	b5800044 	addi	r22,r22,1
   44658:	04c00044 	movi	r19,1
   4465c:	39c00044 	addi	r7,r7,1
   44660:	d9c00815 	stw	r7,32(sp)
   44664:	d8800d17 	ldw	r2,52(sp)
   44668:	103e721e 	bne	r2,zero,44034 <__alt_data_end+0xfffde834>
   4466c:	00800044 	movi	r2,1
   44670:	003e7906 	br	44058 <__alt_data_end+0xfffde858>
   44674:	8009883a 	mov	r4,r16
   44678:	004da500 	call	4da50 <__floatsidf>
   4467c:	d9800f17 	ldw	r6,60(sp)
   44680:	d9c01017 	ldw	r7,64(sp)
   44684:	1009883a 	mov	r4,r2
   44688:	180b883a 	mov	r5,r3
   4468c:	004c8680 	call	4c868 <__muldf3>
   44690:	000d883a 	mov	r6,zero
   44694:	01d00734 	movhi	r7,16412
   44698:	1009883a 	mov	r4,r2
   4469c:	180b883a 	mov	r5,r3
   446a0:	004b3940 	call	4b394 <__adddf3>
   446a4:	047f3034 	movhi	r17,64704
   446a8:	1021883a 	mov	r16,r2
   446ac:	1c63883a 	add	r17,r3,r17
   446b0:	d9000f17 	ldw	r4,60(sp)
   446b4:	d9401017 	ldw	r5,64(sp)
   446b8:	000d883a 	mov	r6,zero
   446bc:	01d00534 	movhi	r7,16404
   446c0:	004d0d40 	call	4d0d4 <__subdf3>
   446c4:	800d883a 	mov	r6,r16
   446c8:	880f883a 	mov	r7,r17
   446cc:	1009883a 	mov	r4,r2
   446d0:	180b883a 	mov	r5,r3
   446d4:	102b883a 	mov	r21,r2
   446d8:	1829883a 	mov	r20,r3
   446dc:	004c6980 	call	4c698 <__gedf2>
   446e0:	00806c16 	blt	zero,r2,44894 <_dtoa_r+0x1304>
   446e4:	89e0003c 	xorhi	r7,r17,32768
   446e8:	800d883a 	mov	r6,r16
   446ec:	a809883a 	mov	r4,r21
   446f0:	a00b883a 	mov	r5,r20
   446f4:	004c7740 	call	4c774 <__ledf2>
   446f8:	103d7e0e 	bge	r2,zero,43cf4 <__alt_data_end+0xfffde4f4>
   446fc:	002b883a 	mov	r21,zero
   44700:	0023883a 	mov	r17,zero
   44704:	003efb06 	br	442f4 <__alt_data_end+0xfffdeaf4>
   44708:	d8800717 	ldw	r2,28(sp)
   4470c:	003bd006 	br	43650 <__alt_data_end+0xfffdde50>
   44710:	d9000a17 	ldw	r4,40(sp)
   44714:	d9800d17 	ldw	r6,52(sp)
   44718:	dd400a15 	stw	r21,40(sp)
   4471c:	a905c83a 	sub	r2,r21,r4
   44720:	308d883a 	add	r6,r6,r2
   44724:	d9800d15 	stw	r6,52(sp)
   44728:	002b883a 	mov	r21,zero
   4472c:	003e0606 	br	43f48 <__alt_data_end+0xfffde748>
   44730:	9023883a 	mov	r17,r18
   44734:	9829883a 	mov	r20,r19
   44738:	04000084 	movi	r16,2
   4473c:	003c9206 	br	43988 <__alt_data_end+0xfffde188>
   44740:	04000044 	movi	r16,1
   44744:	dc000c15 	stw	r16,48(sp)
   44748:	dc000615 	stw	r16,24(sp)
   4474c:	dc002215 	stw	r16,136(sp)
   44750:	e0001115 	stw	zero,68(fp)
   44754:	000b883a 	mov	r5,zero
   44758:	003c6906 	br	43900 <__alt_data_end+0xfffde100>
   4475c:	3021883a 	mov	r16,r6
   44760:	003ffb06 	br	44750 <__alt_data_end+0xfffdef50>
   44764:	1000021e 	bne	r2,zero,44770 <_dtoa_r+0x11e0>
   44768:	4200004c 	andi	r8,r8,1
   4476c:	403e7d1e 	bne	r8,zero,44164 <__alt_data_end+0xfffde964>
   44770:	01000c04 	movi	r4,48
   44774:	00000106 	br	4477c <_dtoa_r+0x11ec>
   44778:	102f883a 	mov	r23,r2
   4477c:	b8bfffc4 	addi	r2,r23,-1
   44780:	10c00007 	ldb	r3,0(r2)
   44784:	193ffc26 	beq	r3,r4,44778 <__alt_data_end+0xfffdef78>
   44788:	003e8706 	br	441a8 <__alt_data_end+0xfffde9a8>
   4478c:	d8800517 	ldw	r2,20(sp)
   44790:	00a3c83a 	sub	r17,zero,r2
   44794:	8800a426 	beq	r17,zero,44a28 <_dtoa_r+0x1498>
   44798:	888003cc 	andi	r2,r17,15
   4479c:	100490fa 	slli	r2,r2,3
   447a0:	00c001b4 	movhi	r3,6
   447a4:	18e50704 	addi	r3,r3,-27620
   447a8:	1885883a 	add	r2,r3,r2
   447ac:	11800017 	ldw	r6,0(r2)
   447b0:	11c00117 	ldw	r7,4(r2)
   447b4:	9009883a 	mov	r4,r18
   447b8:	980b883a 	mov	r5,r19
   447bc:	8823d13a 	srai	r17,r17,4
   447c0:	004c8680 	call	4c868 <__muldf3>
   447c4:	d8800f15 	stw	r2,60(sp)
   447c8:	d8c01015 	stw	r3,64(sp)
   447cc:	8800e826 	beq	r17,zero,44b70 <_dtoa_r+0x15e0>
   447d0:	050001b4 	movhi	r20,6
   447d4:	a524fd04 	addi	r20,r20,-27660
   447d8:	04000084 	movi	r16,2
   447dc:	8980004c 	andi	r6,r17,1
   447e0:	1009883a 	mov	r4,r2
   447e4:	8823d07a 	srai	r17,r17,1
   447e8:	180b883a 	mov	r5,r3
   447ec:	30000426 	beq	r6,zero,44800 <_dtoa_r+0x1270>
   447f0:	a1800017 	ldw	r6,0(r20)
   447f4:	a1c00117 	ldw	r7,4(r20)
   447f8:	84000044 	addi	r16,r16,1
   447fc:	004c8680 	call	4c868 <__muldf3>
   44800:	a5000204 	addi	r20,r20,8
   44804:	883ff51e 	bne	r17,zero,447dc <__alt_data_end+0xfffdefdc>
   44808:	d8800f15 	stw	r2,60(sp)
   4480c:	d8c01015 	stw	r3,64(sp)
   44810:	003c7606 	br	439ec <__alt_data_end+0xfffde1ec>
   44814:	00c00c04 	movi	r3,48
   44818:	10c00005 	stb	r3,0(r2)
   4481c:	d8c00517 	ldw	r3,20(sp)
   44820:	bd3fffc3 	ldbu	r20,-1(r23)
   44824:	18c00044 	addi	r3,r3,1
   44828:	d8c00515 	stw	r3,20(sp)
   4482c:	003db906 	br	43f14 <__alt_data_end+0xfffde714>
   44830:	89400117 	ldw	r5,4(r17)
   44834:	e009883a 	mov	r4,fp
   44838:	00466240 	call	46624 <_Balloc>
   4483c:	89800417 	ldw	r6,16(r17)
   44840:	89400304 	addi	r5,r17,12
   44844:	11000304 	addi	r4,r2,12
   44848:	31800084 	addi	r6,r6,2
   4484c:	318d883a 	add	r6,r6,r6
   44850:	318d883a 	add	r6,r6,r6
   44854:	1027883a 	mov	r19,r2
   44858:	00463b40 	call	463b4 <memcpy>
   4485c:	01800044 	movi	r6,1
   44860:	980b883a 	mov	r5,r19
   44864:	e009883a 	mov	r4,fp
   44868:	0046e600 	call	46e60 <__lshift>
   4486c:	1029883a 	mov	r20,r2
   44870:	003ecc06 	br	443a4 <__alt_data_end+0xfffdeba4>
   44874:	00800e44 	movi	r2,57
   44878:	90809026 	beq	r18,r2,44abc <_dtoa_r+0x152c>
   4487c:	92000044 	addi	r8,r18,1
   44880:	003f1f06 	br	44500 <__alt_data_end+0xfffded00>
   44884:	9011883a 	mov	r8,r18
   44888:	8825883a 	mov	r18,r17
   4488c:	a023883a 	mov	r17,r20
   44890:	003e2906 	br	44138 <__alt_data_end+0xfffde938>
   44894:	002b883a 	mov	r21,zero
   44898:	0023883a 	mov	r17,zero
   4489c:	003f5406 	br	445f0 <__alt_data_end+0xfffdedf0>
   448a0:	61bfffc4 	addi	r6,r12,-1
   448a4:	300490fa 	slli	r2,r6,3
   448a8:	00c001b4 	movhi	r3,6
   448ac:	18e50704 	addi	r3,r3,-27620
   448b0:	1885883a 	add	r2,r3,r2
   448b4:	11000017 	ldw	r4,0(r2)
   448b8:	11400117 	ldw	r5,4(r2)
   448bc:	d8800717 	ldw	r2,28(sp)
   448c0:	880f883a 	mov	r7,r17
   448c4:	d9801215 	stw	r6,72(sp)
   448c8:	800d883a 	mov	r6,r16
   448cc:	db001615 	stw	r12,88(sp)
   448d0:	15c00044 	addi	r23,r2,1
   448d4:	004c8680 	call	4c868 <__muldf3>
   448d8:	d9401017 	ldw	r5,64(sp)
   448dc:	d9000f17 	ldw	r4,60(sp)
   448e0:	d8c01515 	stw	r3,84(sp)
   448e4:	d8801415 	stw	r2,80(sp)
   448e8:	004d9d00 	call	4d9d0 <__fixdfsi>
   448ec:	1009883a 	mov	r4,r2
   448f0:	1021883a 	mov	r16,r2
   448f4:	004da500 	call	4da50 <__floatsidf>
   448f8:	d9000f17 	ldw	r4,60(sp)
   448fc:	d9401017 	ldw	r5,64(sp)
   44900:	100d883a 	mov	r6,r2
   44904:	180f883a 	mov	r7,r3
   44908:	004d0d40 	call	4d0d4 <__subdf3>
   4490c:	1829883a 	mov	r20,r3
   44910:	d8c00717 	ldw	r3,28(sp)
   44914:	84000c04 	addi	r16,r16,48
   44918:	1023883a 	mov	r17,r2
   4491c:	1c000005 	stb	r16,0(r3)
   44920:	db001617 	ldw	r12,88(sp)
   44924:	00800044 	movi	r2,1
   44928:	60802226 	beq	r12,r2,449b4 <_dtoa_r+0x1424>
   4492c:	d9c00717 	ldw	r7,28(sp)
   44930:	8805883a 	mov	r2,r17
   44934:	b82b883a 	mov	r21,r23
   44938:	3b19883a 	add	r12,r7,r12
   4493c:	6023883a 	mov	r17,r12
   44940:	a007883a 	mov	r3,r20
   44944:	dc800f15 	stw	r18,60(sp)
   44948:	000d883a 	mov	r6,zero
   4494c:	01d00934 	movhi	r7,16420
   44950:	1009883a 	mov	r4,r2
   44954:	180b883a 	mov	r5,r3
   44958:	004c8680 	call	4c868 <__muldf3>
   4495c:	180b883a 	mov	r5,r3
   44960:	1009883a 	mov	r4,r2
   44964:	1829883a 	mov	r20,r3
   44968:	1025883a 	mov	r18,r2
   4496c:	004d9d00 	call	4d9d0 <__fixdfsi>
   44970:	1009883a 	mov	r4,r2
   44974:	1021883a 	mov	r16,r2
   44978:	004da500 	call	4da50 <__floatsidf>
   4497c:	100d883a 	mov	r6,r2
   44980:	180f883a 	mov	r7,r3
   44984:	9009883a 	mov	r4,r18
   44988:	a00b883a 	mov	r5,r20
   4498c:	84000c04 	addi	r16,r16,48
   44990:	004d0d40 	call	4d0d4 <__subdf3>
   44994:	ad400044 	addi	r21,r21,1
   44998:	ac3fffc5 	stb	r16,-1(r21)
   4499c:	ac7fea1e 	bne	r21,r17,44948 <__alt_data_end+0xfffdf148>
   449a0:	1023883a 	mov	r17,r2
   449a4:	d8801217 	ldw	r2,72(sp)
   449a8:	dc800f17 	ldw	r18,60(sp)
   449ac:	1829883a 	mov	r20,r3
   449b0:	b8af883a 	add	r23,r23,r2
   449b4:	d9001417 	ldw	r4,80(sp)
   449b8:	d9401517 	ldw	r5,84(sp)
   449bc:	000d883a 	mov	r6,zero
   449c0:	01cff834 	movhi	r7,16352
   449c4:	004b3940 	call	4b394 <__adddf3>
   449c8:	880d883a 	mov	r6,r17
   449cc:	a00f883a 	mov	r7,r20
   449d0:	1009883a 	mov	r4,r2
   449d4:	180b883a 	mov	r5,r3
   449d8:	004c7740 	call	4c774 <__ledf2>
   449dc:	10003e0e 	bge	r2,zero,44ad8 <_dtoa_r+0x1548>
   449e0:	d9001317 	ldw	r4,76(sp)
   449e4:	bd3fffc3 	ldbu	r20,-1(r23)
   449e8:	d9000515 	stw	r4,20(sp)
   449ec:	003d3b06 	br	43edc <__alt_data_end+0xfffde6dc>
   449f0:	0027883a 	mov	r19,zero
   449f4:	003f1b06 	br	44664 <__alt_data_end+0xfffdee64>
   449f8:	d8800817 	ldw	r2,32(sp)
   449fc:	11e9c83a 	sub	r20,r2,r7
   44a00:	0005883a 	mov	r2,zero
   44a04:	003d5406 	br	43f58 <__alt_data_end+0xfffde758>
   44a08:	00800044 	movi	r2,1
   44a0c:	003dc706 	br	4412c <__alt_data_end+0xfffde92c>
   44a10:	d8c00217 	ldw	r3,8(sp)
   44a14:	00800d84 	movi	r2,54
   44a18:	dd400a17 	ldw	r21,40(sp)
   44a1c:	10c5c83a 	sub	r2,r2,r3
   44a20:	dd000817 	ldw	r20,32(sp)
   44a24:	003d4c06 	br	43f58 <__alt_data_end+0xfffde758>
   44a28:	dc800f15 	stw	r18,60(sp)
   44a2c:	dcc01015 	stw	r19,64(sp)
   44a30:	04000084 	movi	r16,2
   44a34:	003bed06 	br	439ec <__alt_data_end+0xfffde1ec>
   44a38:	d9000617 	ldw	r4,24(sp)
   44a3c:	203f0d26 	beq	r4,zero,44674 <__alt_data_end+0xfffdee74>
   44a40:	d9800c17 	ldw	r6,48(sp)
   44a44:	01bcab0e 	bge	zero,r6,43cf4 <__alt_data_end+0xfffde4f4>
   44a48:	d9401017 	ldw	r5,64(sp)
   44a4c:	d9000f17 	ldw	r4,60(sp)
   44a50:	000d883a 	mov	r6,zero
   44a54:	01d00934 	movhi	r7,16420
   44a58:	004c8680 	call	4c868 <__muldf3>
   44a5c:	81000044 	addi	r4,r16,1
   44a60:	d8800f15 	stw	r2,60(sp)
   44a64:	d8c01015 	stw	r3,64(sp)
   44a68:	004da500 	call	4da50 <__floatsidf>
   44a6c:	d9800f17 	ldw	r6,60(sp)
   44a70:	d9c01017 	ldw	r7,64(sp)
   44a74:	1009883a 	mov	r4,r2
   44a78:	180b883a 	mov	r5,r3
   44a7c:	004c8680 	call	4c868 <__muldf3>
   44a80:	01d00734 	movhi	r7,16412
   44a84:	000d883a 	mov	r6,zero
   44a88:	1009883a 	mov	r4,r2
   44a8c:	180b883a 	mov	r5,r3
   44a90:	004b3940 	call	4b394 <__adddf3>
   44a94:	d9c00517 	ldw	r7,20(sp)
   44a98:	047f3034 	movhi	r17,64704
   44a9c:	1021883a 	mov	r16,r2
   44aa0:	39ffffc4 	addi	r7,r7,-1
   44aa4:	d9c01315 	stw	r7,76(sp)
   44aa8:	1c63883a 	add	r17,r3,r17
   44aac:	db000c17 	ldw	r12,48(sp)
   44ab0:	003bea06 	br	43a5c <__alt_data_end+0xfffde25c>
   44ab4:	dc000915 	stw	r16,36(sp)
   44ab8:	003e0e06 	br	442f4 <__alt_data_end+0xfffdeaf4>
   44abc:	01000e44 	movi	r4,57
   44ac0:	8825883a 	mov	r18,r17
   44ac4:	9dc00044 	addi	r23,r19,1
   44ac8:	99000005 	stb	r4,0(r19)
   44acc:	a023883a 	mov	r17,r20
   44ad0:	dc000915 	stw	r16,36(sp)
   44ad4:	003da406 	br	44168 <__alt_data_end+0xfffde968>
   44ad8:	d9801417 	ldw	r6,80(sp)
   44adc:	d9c01517 	ldw	r7,84(sp)
   44ae0:	0009883a 	mov	r4,zero
   44ae4:	014ff834 	movhi	r5,16352
   44ae8:	004d0d40 	call	4d0d4 <__subdf3>
   44aec:	880d883a 	mov	r6,r17
   44af0:	a00f883a 	mov	r7,r20
   44af4:	1009883a 	mov	r4,r2
   44af8:	180b883a 	mov	r5,r3
   44afc:	004c6980 	call	4c698 <__gedf2>
   44b00:	00bc7c0e 	bge	zero,r2,43cf4 <__alt_data_end+0xfffde4f4>
   44b04:	01000c04 	movi	r4,48
   44b08:	00000106 	br	44b10 <_dtoa_r+0x1580>
   44b0c:	102f883a 	mov	r23,r2
   44b10:	b8bfffc4 	addi	r2,r23,-1
   44b14:	10c00007 	ldb	r3,0(r2)
   44b18:	193ffc26 	beq	r3,r4,44b0c <__alt_data_end+0xfffdf30c>
   44b1c:	d9801317 	ldw	r6,76(sp)
   44b20:	d9800515 	stw	r6,20(sp)
   44b24:	003c4406 	br	43c38 <__alt_data_end+0xfffde438>
   44b28:	d9801317 	ldw	r6,76(sp)
   44b2c:	d9800515 	stw	r6,20(sp)
   44b30:	003cea06 	br	43edc <__alt_data_end+0xfffde6dc>
   44b34:	dd800f17 	ldw	r22,60(sp)
   44b38:	dcc01017 	ldw	r19,64(sp)
   44b3c:	dc801217 	ldw	r18,72(sp)
   44b40:	003c6c06 	br	43cf4 <__alt_data_end+0xfffde4f4>
   44b44:	903e031e 	bne	r18,zero,44354 <__alt_data_end+0xfffdeb54>
   44b48:	003ebb06 	br	44638 <__alt_data_end+0xfffdee38>
   44b4c:	103e6c1e 	bne	r2,zero,44500 <__alt_data_end+0xfffded00>
   44b50:	4080004c 	andi	r2,r8,1
   44b54:	103e6a26 	beq	r2,zero,44500 <__alt_data_end+0xfffded00>
   44b58:	003e6606 	br	444f4 <__alt_data_end+0xfffdecf4>
   44b5c:	d8c00317 	ldw	r3,12(sp)
   44b60:	00800084 	movi	r2,2
   44b64:	10c02916 	blt	r2,r3,44c0c <_dtoa_r+0x167c>
   44b68:	d9000c17 	ldw	r4,48(sp)
   44b6c:	003e8806 	br	44590 <__alt_data_end+0xfffded90>
   44b70:	04000084 	movi	r16,2
   44b74:	003b9d06 	br	439ec <__alt_data_end+0xfffde1ec>
   44b78:	d9001317 	ldw	r4,76(sp)
   44b7c:	d9000515 	stw	r4,20(sp)
   44b80:	003cd606 	br	43edc <__alt_data_end+0xfffde6dc>
   44b84:	d8801317 	ldw	r2,76(sp)
   44b88:	d8800515 	stw	r2,20(sp)
   44b8c:	003c2a06 	br	43c38 <__alt_data_end+0xfffde438>
   44b90:	d9800317 	ldw	r6,12(sp)
   44b94:	00800084 	movi	r2,2
   44b98:	11801516 	blt	r2,r6,44bf0 <_dtoa_r+0x1660>
   44b9c:	d9c00c17 	ldw	r7,48(sp)
   44ba0:	d9c00615 	stw	r7,24(sp)
   44ba4:	003df706 	br	44384 <__alt_data_end+0xfffdeb84>
   44ba8:	193d3926 	beq	r3,r4,44090 <__alt_data_end+0xfffde890>
   44bac:	00c00f04 	movi	r3,60
   44bb0:	1885c83a 	sub	r2,r3,r2
   44bb4:	003ddf06 	br	44334 <__alt_data_end+0xfffdeb34>
   44bb8:	e009883a 	mov	r4,fp
   44bbc:	e0001115 	stw	zero,68(fp)
   44bc0:	000b883a 	mov	r5,zero
   44bc4:	00466240 	call	46624 <_Balloc>
   44bc8:	d8800715 	stw	r2,28(sp)
   44bcc:	d8c00717 	ldw	r3,28(sp)
   44bd0:	00bfffc4 	movi	r2,-1
   44bd4:	01000044 	movi	r4,1
   44bd8:	d8800c15 	stw	r2,48(sp)
   44bdc:	e0c01015 	stw	r3,64(fp)
   44be0:	d9000b15 	stw	r4,44(sp)
   44be4:	d8800615 	stw	r2,24(sp)
   44be8:	d8002215 	stw	zero,136(sp)
   44bec:	003c4106 	br	43cf4 <__alt_data_end+0xfffde4f4>
   44bf0:	d8c00c17 	ldw	r3,48(sp)
   44bf4:	d8c00615 	stw	r3,24(sp)
   44bf8:	003e7006 	br	445bc <__alt_data_end+0xfffdedbc>
   44bfc:	04400044 	movi	r17,1
   44c00:	003b2006 	br	43884 <__alt_data_end+0xfffde084>
   44c04:	000b883a 	mov	r5,zero
   44c08:	003b3d06 	br	43900 <__alt_data_end+0xfffde100>
   44c0c:	d8800c17 	ldw	r2,48(sp)
   44c10:	d8800615 	stw	r2,24(sp)
   44c14:	003e6906 	br	445bc <__alt_data_end+0xfffdedbc>

00044c18 <__sflush_r>:
   44c18:	2880030b 	ldhu	r2,12(r5)
   44c1c:	defffb04 	addi	sp,sp,-20
   44c20:	dcc00315 	stw	r19,12(sp)
   44c24:	dc400115 	stw	r17,4(sp)
   44c28:	dfc00415 	stw	ra,16(sp)
   44c2c:	dc800215 	stw	r18,8(sp)
   44c30:	dc000015 	stw	r16,0(sp)
   44c34:	10c0020c 	andi	r3,r2,8
   44c38:	2823883a 	mov	r17,r5
   44c3c:	2027883a 	mov	r19,r4
   44c40:	1800311e 	bne	r3,zero,44d08 <__sflush_r+0xf0>
   44c44:	28c00117 	ldw	r3,4(r5)
   44c48:	10820014 	ori	r2,r2,2048
   44c4c:	2880030d 	sth	r2,12(r5)
   44c50:	00c04b0e 	bge	zero,r3,44d80 <__sflush_r+0x168>
   44c54:	8a000a17 	ldw	r8,40(r17)
   44c58:	40002326 	beq	r8,zero,44ce8 <__sflush_r+0xd0>
   44c5c:	9c000017 	ldw	r16,0(r19)
   44c60:	10c4000c 	andi	r3,r2,4096
   44c64:	98000015 	stw	zero,0(r19)
   44c68:	18004826 	beq	r3,zero,44d8c <__sflush_r+0x174>
   44c6c:	89801417 	ldw	r6,80(r17)
   44c70:	10c0010c 	andi	r3,r2,4
   44c74:	18000626 	beq	r3,zero,44c90 <__sflush_r+0x78>
   44c78:	88c00117 	ldw	r3,4(r17)
   44c7c:	88800c17 	ldw	r2,48(r17)
   44c80:	30cdc83a 	sub	r6,r6,r3
   44c84:	10000226 	beq	r2,zero,44c90 <__sflush_r+0x78>
   44c88:	88800f17 	ldw	r2,60(r17)
   44c8c:	308dc83a 	sub	r6,r6,r2
   44c90:	89400717 	ldw	r5,28(r17)
   44c94:	000f883a 	mov	r7,zero
   44c98:	9809883a 	mov	r4,r19
   44c9c:	403ee83a 	callr	r8
   44ca0:	00ffffc4 	movi	r3,-1
   44ca4:	10c04426 	beq	r2,r3,44db8 <__sflush_r+0x1a0>
   44ca8:	88c0030b 	ldhu	r3,12(r17)
   44cac:	89000417 	ldw	r4,16(r17)
   44cb0:	88000115 	stw	zero,4(r17)
   44cb4:	197dffcc 	andi	r5,r3,63487
   44cb8:	8940030d 	sth	r5,12(r17)
   44cbc:	89000015 	stw	r4,0(r17)
   44cc0:	18c4000c 	andi	r3,r3,4096
   44cc4:	18002c1e 	bne	r3,zero,44d78 <__sflush_r+0x160>
   44cc8:	89400c17 	ldw	r5,48(r17)
   44ccc:	9c000015 	stw	r16,0(r19)
   44cd0:	28000526 	beq	r5,zero,44ce8 <__sflush_r+0xd0>
   44cd4:	88801004 	addi	r2,r17,64
   44cd8:	28800226 	beq	r5,r2,44ce4 <__sflush_r+0xcc>
   44cdc:	9809883a 	mov	r4,r19
   44ce0:	00453940 	call	45394 <_free_r>
   44ce4:	88000c15 	stw	zero,48(r17)
   44ce8:	0005883a 	mov	r2,zero
   44cec:	dfc00417 	ldw	ra,16(sp)
   44cf0:	dcc00317 	ldw	r19,12(sp)
   44cf4:	dc800217 	ldw	r18,8(sp)
   44cf8:	dc400117 	ldw	r17,4(sp)
   44cfc:	dc000017 	ldw	r16,0(sp)
   44d00:	dec00504 	addi	sp,sp,20
   44d04:	f800283a 	ret
   44d08:	2c800417 	ldw	r18,16(r5)
   44d0c:	903ff626 	beq	r18,zero,44ce8 <__alt_data_end+0xfffdf4e8>
   44d10:	2c000017 	ldw	r16,0(r5)
   44d14:	108000cc 	andi	r2,r2,3
   44d18:	2c800015 	stw	r18,0(r5)
   44d1c:	84a1c83a 	sub	r16,r16,r18
   44d20:	1000131e 	bne	r2,zero,44d70 <__sflush_r+0x158>
   44d24:	28800517 	ldw	r2,20(r5)
   44d28:	88800215 	stw	r2,8(r17)
   44d2c:	04000316 	blt	zero,r16,44d3c <__sflush_r+0x124>
   44d30:	003fed06 	br	44ce8 <__alt_data_end+0xfffdf4e8>
   44d34:	90a5883a 	add	r18,r18,r2
   44d38:	043feb0e 	bge	zero,r16,44ce8 <__alt_data_end+0xfffdf4e8>
   44d3c:	88800917 	ldw	r2,36(r17)
   44d40:	89400717 	ldw	r5,28(r17)
   44d44:	800f883a 	mov	r7,r16
   44d48:	900d883a 	mov	r6,r18
   44d4c:	9809883a 	mov	r4,r19
   44d50:	103ee83a 	callr	r2
   44d54:	80a1c83a 	sub	r16,r16,r2
   44d58:	00bff616 	blt	zero,r2,44d34 <__alt_data_end+0xfffdf534>
   44d5c:	88c0030b 	ldhu	r3,12(r17)
   44d60:	00bfffc4 	movi	r2,-1
   44d64:	18c01014 	ori	r3,r3,64
   44d68:	88c0030d 	sth	r3,12(r17)
   44d6c:	003fdf06 	br	44cec <__alt_data_end+0xfffdf4ec>
   44d70:	0005883a 	mov	r2,zero
   44d74:	003fec06 	br	44d28 <__alt_data_end+0xfffdf528>
   44d78:	88801415 	stw	r2,80(r17)
   44d7c:	003fd206 	br	44cc8 <__alt_data_end+0xfffdf4c8>
   44d80:	28c00f17 	ldw	r3,60(r5)
   44d84:	00ffb316 	blt	zero,r3,44c54 <__alt_data_end+0xfffdf454>
   44d88:	003fd706 	br	44ce8 <__alt_data_end+0xfffdf4e8>
   44d8c:	89400717 	ldw	r5,28(r17)
   44d90:	000d883a 	mov	r6,zero
   44d94:	01c00044 	movi	r7,1
   44d98:	9809883a 	mov	r4,r19
   44d9c:	403ee83a 	callr	r8
   44da0:	100d883a 	mov	r6,r2
   44da4:	00bfffc4 	movi	r2,-1
   44da8:	30801426 	beq	r6,r2,44dfc <__sflush_r+0x1e4>
   44dac:	8880030b 	ldhu	r2,12(r17)
   44db0:	8a000a17 	ldw	r8,40(r17)
   44db4:	003fae06 	br	44c70 <__alt_data_end+0xfffdf470>
   44db8:	98c00017 	ldw	r3,0(r19)
   44dbc:	183fba26 	beq	r3,zero,44ca8 <__alt_data_end+0xfffdf4a8>
   44dc0:	01000744 	movi	r4,29
   44dc4:	19000626 	beq	r3,r4,44de0 <__sflush_r+0x1c8>
   44dc8:	01000584 	movi	r4,22
   44dcc:	19000426 	beq	r3,r4,44de0 <__sflush_r+0x1c8>
   44dd0:	88c0030b 	ldhu	r3,12(r17)
   44dd4:	18c01014 	ori	r3,r3,64
   44dd8:	88c0030d 	sth	r3,12(r17)
   44ddc:	003fc306 	br	44cec <__alt_data_end+0xfffdf4ec>
   44de0:	8880030b 	ldhu	r2,12(r17)
   44de4:	88c00417 	ldw	r3,16(r17)
   44de8:	88000115 	stw	zero,4(r17)
   44dec:	10bdffcc 	andi	r2,r2,63487
   44df0:	8880030d 	sth	r2,12(r17)
   44df4:	88c00015 	stw	r3,0(r17)
   44df8:	003fb306 	br	44cc8 <__alt_data_end+0xfffdf4c8>
   44dfc:	98800017 	ldw	r2,0(r19)
   44e00:	103fea26 	beq	r2,zero,44dac <__alt_data_end+0xfffdf5ac>
   44e04:	00c00744 	movi	r3,29
   44e08:	10c00226 	beq	r2,r3,44e14 <__sflush_r+0x1fc>
   44e0c:	00c00584 	movi	r3,22
   44e10:	10c0031e 	bne	r2,r3,44e20 <__sflush_r+0x208>
   44e14:	9c000015 	stw	r16,0(r19)
   44e18:	0005883a 	mov	r2,zero
   44e1c:	003fb306 	br	44cec <__alt_data_end+0xfffdf4ec>
   44e20:	88c0030b 	ldhu	r3,12(r17)
   44e24:	3005883a 	mov	r2,r6
   44e28:	18c01014 	ori	r3,r3,64
   44e2c:	88c0030d 	sth	r3,12(r17)
   44e30:	003fae06 	br	44cec <__alt_data_end+0xfffdf4ec>

00044e34 <_fflush_r>:
   44e34:	defffd04 	addi	sp,sp,-12
   44e38:	dc000115 	stw	r16,4(sp)
   44e3c:	dfc00215 	stw	ra,8(sp)
   44e40:	2021883a 	mov	r16,r4
   44e44:	20000226 	beq	r4,zero,44e50 <_fflush_r+0x1c>
   44e48:	20800e17 	ldw	r2,56(r4)
   44e4c:	10000c26 	beq	r2,zero,44e80 <_fflush_r+0x4c>
   44e50:	2880030f 	ldh	r2,12(r5)
   44e54:	1000051e 	bne	r2,zero,44e6c <_fflush_r+0x38>
   44e58:	0005883a 	mov	r2,zero
   44e5c:	dfc00217 	ldw	ra,8(sp)
   44e60:	dc000117 	ldw	r16,4(sp)
   44e64:	dec00304 	addi	sp,sp,12
   44e68:	f800283a 	ret
   44e6c:	8009883a 	mov	r4,r16
   44e70:	dfc00217 	ldw	ra,8(sp)
   44e74:	dc000117 	ldw	r16,4(sp)
   44e78:	dec00304 	addi	sp,sp,12
   44e7c:	0044c181 	jmpi	44c18 <__sflush_r>
   44e80:	d9400015 	stw	r5,0(sp)
   44e84:	00452200 	call	45220 <__sinit>
   44e88:	d9400017 	ldw	r5,0(sp)
   44e8c:	003ff006 	br	44e50 <__alt_data_end+0xfffdf650>

00044e90 <fflush>:
   44e90:	20000526 	beq	r4,zero,44ea8 <fflush+0x18>
   44e94:	008001b4 	movhi	r2,6
   44e98:	10ac4504 	addi	r2,r2,-20204
   44e9c:	200b883a 	mov	r5,r4
   44ea0:	11000017 	ldw	r4,0(r2)
   44ea4:	0044e341 	jmpi	44e34 <_fflush_r>
   44ea8:	008001b4 	movhi	r2,6
   44eac:	10ac4404 	addi	r2,r2,-20208
   44eb0:	11000017 	ldw	r4,0(r2)
   44eb4:	01400134 	movhi	r5,4
   44eb8:	29538d04 	addi	r5,r5,20020
   44ebc:	00457681 	jmpi	45768 <_fwalk_reent>

00044ec0 <__fp_unlock>:
   44ec0:	0005883a 	mov	r2,zero
   44ec4:	f800283a 	ret

00044ec8 <_cleanup_r>:
   44ec8:	01400174 	movhi	r5,5
   44ecc:	2964b704 	addi	r5,r5,-27940
   44ed0:	00457681 	jmpi	45768 <_fwalk_reent>

00044ed4 <__sinit.part.1>:
   44ed4:	defff704 	addi	sp,sp,-36
   44ed8:	00c00134 	movhi	r3,4
   44edc:	dfc00815 	stw	ra,32(sp)
   44ee0:	ddc00715 	stw	r23,28(sp)
   44ee4:	dd800615 	stw	r22,24(sp)
   44ee8:	dd400515 	stw	r21,20(sp)
   44eec:	dd000415 	stw	r20,16(sp)
   44ef0:	dcc00315 	stw	r19,12(sp)
   44ef4:	dc800215 	stw	r18,8(sp)
   44ef8:	dc400115 	stw	r17,4(sp)
   44efc:	dc000015 	stw	r16,0(sp)
   44f00:	18d3b204 	addi	r3,r3,20168
   44f04:	24000117 	ldw	r16,4(r4)
   44f08:	20c00f15 	stw	r3,60(r4)
   44f0c:	2080bb04 	addi	r2,r4,748
   44f10:	00c000c4 	movi	r3,3
   44f14:	20c0b915 	stw	r3,740(r4)
   44f18:	2080ba15 	stw	r2,744(r4)
   44f1c:	2000b815 	stw	zero,736(r4)
   44f20:	05c00204 	movi	r23,8
   44f24:	00800104 	movi	r2,4
   44f28:	2025883a 	mov	r18,r4
   44f2c:	b80d883a 	mov	r6,r23
   44f30:	81001704 	addi	r4,r16,92
   44f34:	000b883a 	mov	r5,zero
   44f38:	80000015 	stw	zero,0(r16)
   44f3c:	80000115 	stw	zero,4(r16)
   44f40:	80000215 	stw	zero,8(r16)
   44f44:	8080030d 	sth	r2,12(r16)
   44f48:	80001915 	stw	zero,100(r16)
   44f4c:	8000038d 	sth	zero,14(r16)
   44f50:	80000415 	stw	zero,16(r16)
   44f54:	80000515 	stw	zero,20(r16)
   44f58:	80000615 	stw	zero,24(r16)
   44f5c:	00464fc0 	call	464fc <memset>
   44f60:	05800134 	movhi	r22,4
   44f64:	94400217 	ldw	r17,8(r18)
   44f68:	05400134 	movhi	r21,4
   44f6c:	05000134 	movhi	r20,4
   44f70:	04c00134 	movhi	r19,4
   44f74:	b59de904 	addi	r22,r22,30628
   44f78:	ad5e0004 	addi	r21,r21,30720
   44f7c:	a51e1f04 	addi	r20,r20,30844
   44f80:	9cde3604 	addi	r19,r19,30936
   44f84:	85800815 	stw	r22,32(r16)
   44f88:	85400915 	stw	r21,36(r16)
   44f8c:	85000a15 	stw	r20,40(r16)
   44f90:	84c00b15 	stw	r19,44(r16)
   44f94:	84000715 	stw	r16,28(r16)
   44f98:	00800284 	movi	r2,10
   44f9c:	8880030d 	sth	r2,12(r17)
   44fa0:	00800044 	movi	r2,1
   44fa4:	b80d883a 	mov	r6,r23
   44fa8:	89001704 	addi	r4,r17,92
   44fac:	000b883a 	mov	r5,zero
   44fb0:	88000015 	stw	zero,0(r17)
   44fb4:	88000115 	stw	zero,4(r17)
   44fb8:	88000215 	stw	zero,8(r17)
   44fbc:	88001915 	stw	zero,100(r17)
   44fc0:	8880038d 	sth	r2,14(r17)
   44fc4:	88000415 	stw	zero,16(r17)
   44fc8:	88000515 	stw	zero,20(r17)
   44fcc:	88000615 	stw	zero,24(r17)
   44fd0:	00464fc0 	call	464fc <memset>
   44fd4:	94000317 	ldw	r16,12(r18)
   44fd8:	00800484 	movi	r2,18
   44fdc:	8c400715 	stw	r17,28(r17)
   44fe0:	8d800815 	stw	r22,32(r17)
   44fe4:	8d400915 	stw	r21,36(r17)
   44fe8:	8d000a15 	stw	r20,40(r17)
   44fec:	8cc00b15 	stw	r19,44(r17)
   44ff0:	8080030d 	sth	r2,12(r16)
   44ff4:	00800084 	movi	r2,2
   44ff8:	80000015 	stw	zero,0(r16)
   44ffc:	80000115 	stw	zero,4(r16)
   45000:	80000215 	stw	zero,8(r16)
   45004:	80001915 	stw	zero,100(r16)
   45008:	8080038d 	sth	r2,14(r16)
   4500c:	80000415 	stw	zero,16(r16)
   45010:	80000515 	stw	zero,20(r16)
   45014:	80000615 	stw	zero,24(r16)
   45018:	b80d883a 	mov	r6,r23
   4501c:	000b883a 	mov	r5,zero
   45020:	81001704 	addi	r4,r16,92
   45024:	00464fc0 	call	464fc <memset>
   45028:	00800044 	movi	r2,1
   4502c:	84000715 	stw	r16,28(r16)
   45030:	85800815 	stw	r22,32(r16)
   45034:	85400915 	stw	r21,36(r16)
   45038:	85000a15 	stw	r20,40(r16)
   4503c:	84c00b15 	stw	r19,44(r16)
   45040:	90800e15 	stw	r2,56(r18)
   45044:	dfc00817 	ldw	ra,32(sp)
   45048:	ddc00717 	ldw	r23,28(sp)
   4504c:	dd800617 	ldw	r22,24(sp)
   45050:	dd400517 	ldw	r21,20(sp)
   45054:	dd000417 	ldw	r20,16(sp)
   45058:	dcc00317 	ldw	r19,12(sp)
   4505c:	dc800217 	ldw	r18,8(sp)
   45060:	dc400117 	ldw	r17,4(sp)
   45064:	dc000017 	ldw	r16,0(sp)
   45068:	dec00904 	addi	sp,sp,36
   4506c:	f800283a 	ret

00045070 <__fp_lock>:
   45070:	0005883a 	mov	r2,zero
   45074:	f800283a 	ret

00045078 <__sfmoreglue>:
   45078:	defffc04 	addi	sp,sp,-16
   4507c:	dc800215 	stw	r18,8(sp)
   45080:	2825883a 	mov	r18,r5
   45084:	dc000015 	stw	r16,0(sp)
   45088:	01401a04 	movi	r5,104
   4508c:	2021883a 	mov	r16,r4
   45090:	913fffc4 	addi	r4,r18,-1
   45094:	dfc00315 	stw	ra,12(sp)
   45098:	dc400115 	stw	r17,4(sp)
   4509c:	00407040 	call	40704 <__mulsi3>
   450a0:	8009883a 	mov	r4,r16
   450a4:	11401d04 	addi	r5,r2,116
   450a8:	1023883a 	mov	r17,r2
   450ac:	0045ac40 	call	45ac4 <_malloc_r>
   450b0:	1021883a 	mov	r16,r2
   450b4:	10000726 	beq	r2,zero,450d4 <__sfmoreglue+0x5c>
   450b8:	11000304 	addi	r4,r2,12
   450bc:	10000015 	stw	zero,0(r2)
   450c0:	14800115 	stw	r18,4(r2)
   450c4:	11000215 	stw	r4,8(r2)
   450c8:	89801a04 	addi	r6,r17,104
   450cc:	000b883a 	mov	r5,zero
   450d0:	00464fc0 	call	464fc <memset>
   450d4:	8005883a 	mov	r2,r16
   450d8:	dfc00317 	ldw	ra,12(sp)
   450dc:	dc800217 	ldw	r18,8(sp)
   450e0:	dc400117 	ldw	r17,4(sp)
   450e4:	dc000017 	ldw	r16,0(sp)
   450e8:	dec00404 	addi	sp,sp,16
   450ec:	f800283a 	ret

000450f0 <__sfp>:
   450f0:	defffb04 	addi	sp,sp,-20
   450f4:	dc000015 	stw	r16,0(sp)
   450f8:	040001b4 	movhi	r16,6
   450fc:	842c4404 	addi	r16,r16,-20208
   45100:	dcc00315 	stw	r19,12(sp)
   45104:	2027883a 	mov	r19,r4
   45108:	81000017 	ldw	r4,0(r16)
   4510c:	dfc00415 	stw	ra,16(sp)
   45110:	dc800215 	stw	r18,8(sp)
   45114:	20800e17 	ldw	r2,56(r4)
   45118:	dc400115 	stw	r17,4(sp)
   4511c:	1000021e 	bne	r2,zero,45128 <__sfp+0x38>
   45120:	0044ed40 	call	44ed4 <__sinit.part.1>
   45124:	81000017 	ldw	r4,0(r16)
   45128:	2480b804 	addi	r18,r4,736
   4512c:	047fffc4 	movi	r17,-1
   45130:	91000117 	ldw	r4,4(r18)
   45134:	94000217 	ldw	r16,8(r18)
   45138:	213fffc4 	addi	r4,r4,-1
   4513c:	20000a16 	blt	r4,zero,45168 <__sfp+0x78>
   45140:	8080030f 	ldh	r2,12(r16)
   45144:	10000c26 	beq	r2,zero,45178 <__sfp+0x88>
   45148:	80c01d04 	addi	r3,r16,116
   4514c:	00000206 	br	45158 <__sfp+0x68>
   45150:	18bfe60f 	ldh	r2,-104(r3)
   45154:	10000826 	beq	r2,zero,45178 <__sfp+0x88>
   45158:	213fffc4 	addi	r4,r4,-1
   4515c:	1c3ffd04 	addi	r16,r3,-12
   45160:	18c01a04 	addi	r3,r3,104
   45164:	247ffa1e 	bne	r4,r17,45150 <__alt_data_end+0xfffdf950>
   45168:	90800017 	ldw	r2,0(r18)
   4516c:	10001d26 	beq	r2,zero,451e4 <__sfp+0xf4>
   45170:	1025883a 	mov	r18,r2
   45174:	003fee06 	br	45130 <__alt_data_end+0xfffdf930>
   45178:	00bfffc4 	movi	r2,-1
   4517c:	8080038d 	sth	r2,14(r16)
   45180:	00800044 	movi	r2,1
   45184:	8080030d 	sth	r2,12(r16)
   45188:	80001915 	stw	zero,100(r16)
   4518c:	80000015 	stw	zero,0(r16)
   45190:	80000215 	stw	zero,8(r16)
   45194:	80000115 	stw	zero,4(r16)
   45198:	80000415 	stw	zero,16(r16)
   4519c:	80000515 	stw	zero,20(r16)
   451a0:	80000615 	stw	zero,24(r16)
   451a4:	01800204 	movi	r6,8
   451a8:	000b883a 	mov	r5,zero
   451ac:	81001704 	addi	r4,r16,92
   451b0:	00464fc0 	call	464fc <memset>
   451b4:	8005883a 	mov	r2,r16
   451b8:	80000c15 	stw	zero,48(r16)
   451bc:	80000d15 	stw	zero,52(r16)
   451c0:	80001115 	stw	zero,68(r16)
   451c4:	80001215 	stw	zero,72(r16)
   451c8:	dfc00417 	ldw	ra,16(sp)
   451cc:	dcc00317 	ldw	r19,12(sp)
   451d0:	dc800217 	ldw	r18,8(sp)
   451d4:	dc400117 	ldw	r17,4(sp)
   451d8:	dc000017 	ldw	r16,0(sp)
   451dc:	dec00504 	addi	sp,sp,20
   451e0:	f800283a 	ret
   451e4:	01400104 	movi	r5,4
   451e8:	9809883a 	mov	r4,r19
   451ec:	00450780 	call	45078 <__sfmoreglue>
   451f0:	90800015 	stw	r2,0(r18)
   451f4:	103fde1e 	bne	r2,zero,45170 <__alt_data_end+0xfffdf970>
   451f8:	00800304 	movi	r2,12
   451fc:	98800015 	stw	r2,0(r19)
   45200:	0005883a 	mov	r2,zero
   45204:	003ff006 	br	451c8 <__alt_data_end+0xfffdf9c8>

00045208 <_cleanup>:
   45208:	008001b4 	movhi	r2,6
   4520c:	10ac4404 	addi	r2,r2,-20208
   45210:	11000017 	ldw	r4,0(r2)
   45214:	01400174 	movhi	r5,5
   45218:	2964b704 	addi	r5,r5,-27940
   4521c:	00457681 	jmpi	45768 <_fwalk_reent>

00045220 <__sinit>:
   45220:	20800e17 	ldw	r2,56(r4)
   45224:	10000126 	beq	r2,zero,4522c <__sinit+0xc>
   45228:	f800283a 	ret
   4522c:	0044ed41 	jmpi	44ed4 <__sinit.part.1>

00045230 <__sfp_lock_acquire>:
   45230:	f800283a 	ret

00045234 <__sfp_lock_release>:
   45234:	f800283a 	ret

00045238 <__sinit_lock_acquire>:
   45238:	f800283a 	ret

0004523c <__sinit_lock_release>:
   4523c:	f800283a 	ret

00045240 <__fp_lock_all>:
   45240:	008001b4 	movhi	r2,6
   45244:	10ac4504 	addi	r2,r2,-20204
   45248:	11000017 	ldw	r4,0(r2)
   4524c:	01400134 	movhi	r5,4
   45250:	29541c04 	addi	r5,r5,20592
   45254:	00456a41 	jmpi	456a4 <_fwalk>

00045258 <__fp_unlock_all>:
   45258:	008001b4 	movhi	r2,6
   4525c:	10ac4504 	addi	r2,r2,-20204
   45260:	11000017 	ldw	r4,0(r2)
   45264:	01400134 	movhi	r5,4
   45268:	2953b004 	addi	r5,r5,20160
   4526c:	00456a41 	jmpi	456a4 <_fwalk>

00045270 <_malloc_trim_r>:
   45270:	defffb04 	addi	sp,sp,-20
   45274:	dcc00315 	stw	r19,12(sp)
   45278:	04c001b4 	movhi	r19,6
   4527c:	dc800215 	stw	r18,8(sp)
   45280:	dc400115 	stw	r17,4(sp)
   45284:	dc000015 	stw	r16,0(sp)
   45288:	dfc00415 	stw	ra,16(sp)
   4528c:	2821883a 	mov	r16,r5
   45290:	9ce6bc04 	addi	r19,r19,-25872
   45294:	2025883a 	mov	r18,r4
   45298:	004e9240 	call	4e924 <__malloc_lock>
   4529c:	98800217 	ldw	r2,8(r19)
   452a0:	14400117 	ldw	r17,4(r2)
   452a4:	00bfff04 	movi	r2,-4
   452a8:	88a2703a 	and	r17,r17,r2
   452ac:	8c21c83a 	sub	r16,r17,r16
   452b0:	8403fbc4 	addi	r16,r16,4079
   452b4:	8020d33a 	srli	r16,r16,12
   452b8:	0083ffc4 	movi	r2,4095
   452bc:	843fffc4 	addi	r16,r16,-1
   452c0:	8020933a 	slli	r16,r16,12
   452c4:	1400060e 	bge	r2,r16,452e0 <_malloc_trim_r+0x70>
   452c8:	000b883a 	mov	r5,zero
   452cc:	9009883a 	mov	r4,r18
   452d0:	00477500 	call	47750 <_sbrk_r>
   452d4:	98c00217 	ldw	r3,8(r19)
   452d8:	1c47883a 	add	r3,r3,r17
   452dc:	10c00a26 	beq	r2,r3,45308 <_malloc_trim_r+0x98>
   452e0:	9009883a 	mov	r4,r18
   452e4:	004ea440 	call	4ea44 <__malloc_unlock>
   452e8:	0005883a 	mov	r2,zero
   452ec:	dfc00417 	ldw	ra,16(sp)
   452f0:	dcc00317 	ldw	r19,12(sp)
   452f4:	dc800217 	ldw	r18,8(sp)
   452f8:	dc400117 	ldw	r17,4(sp)
   452fc:	dc000017 	ldw	r16,0(sp)
   45300:	dec00504 	addi	sp,sp,20
   45304:	f800283a 	ret
   45308:	040bc83a 	sub	r5,zero,r16
   4530c:	9009883a 	mov	r4,r18
   45310:	00477500 	call	47750 <_sbrk_r>
   45314:	00ffffc4 	movi	r3,-1
   45318:	10c00d26 	beq	r2,r3,45350 <_malloc_trim_r+0xe0>
   4531c:	00c001b4 	movhi	r3,6
   45320:	18f37c04 	addi	r3,r3,-12816
   45324:	18800017 	ldw	r2,0(r3)
   45328:	99000217 	ldw	r4,8(r19)
   4532c:	8c23c83a 	sub	r17,r17,r16
   45330:	8c400054 	ori	r17,r17,1
   45334:	1421c83a 	sub	r16,r2,r16
   45338:	24400115 	stw	r17,4(r4)
   4533c:	9009883a 	mov	r4,r18
   45340:	1c000015 	stw	r16,0(r3)
   45344:	004ea440 	call	4ea44 <__malloc_unlock>
   45348:	00800044 	movi	r2,1
   4534c:	003fe706 	br	452ec <__alt_data_end+0xfffdfaec>
   45350:	000b883a 	mov	r5,zero
   45354:	9009883a 	mov	r4,r18
   45358:	00477500 	call	47750 <_sbrk_r>
   4535c:	99000217 	ldw	r4,8(r19)
   45360:	014003c4 	movi	r5,15
   45364:	1107c83a 	sub	r3,r2,r4
   45368:	28ffdd0e 	bge	r5,r3,452e0 <__alt_data_end+0xfffdfae0>
   4536c:	014001b4 	movhi	r5,6
   45370:	296c4704 	addi	r5,r5,-20196
   45374:	29400017 	ldw	r5,0(r5)
   45378:	18c00054 	ori	r3,r3,1
   4537c:	20c00115 	stw	r3,4(r4)
   45380:	00c001b4 	movhi	r3,6
   45384:	1145c83a 	sub	r2,r2,r5
   45388:	18f37c04 	addi	r3,r3,-12816
   4538c:	18800015 	stw	r2,0(r3)
   45390:	003fd306 	br	452e0 <__alt_data_end+0xfffdfae0>

00045394 <_free_r>:
   45394:	28004126 	beq	r5,zero,4549c <_free_r+0x108>
   45398:	defffd04 	addi	sp,sp,-12
   4539c:	dc400115 	stw	r17,4(sp)
   453a0:	dc000015 	stw	r16,0(sp)
   453a4:	2023883a 	mov	r17,r4
   453a8:	2821883a 	mov	r16,r5
   453ac:	dfc00215 	stw	ra,8(sp)
   453b0:	004e9240 	call	4e924 <__malloc_lock>
   453b4:	81ffff17 	ldw	r7,-4(r16)
   453b8:	00bfff84 	movi	r2,-2
   453bc:	010001b4 	movhi	r4,6
   453c0:	81bffe04 	addi	r6,r16,-8
   453c4:	3884703a 	and	r2,r7,r2
   453c8:	2126bc04 	addi	r4,r4,-25872
   453cc:	308b883a 	add	r5,r6,r2
   453d0:	2a400117 	ldw	r9,4(r5)
   453d4:	22000217 	ldw	r8,8(r4)
   453d8:	00ffff04 	movi	r3,-4
   453dc:	48c6703a 	and	r3,r9,r3
   453e0:	2a005726 	beq	r5,r8,45540 <_free_r+0x1ac>
   453e4:	28c00115 	stw	r3,4(r5)
   453e8:	39c0004c 	andi	r7,r7,1
   453ec:	3800091e 	bne	r7,zero,45414 <_free_r+0x80>
   453f0:	823ffe17 	ldw	r8,-8(r16)
   453f4:	22400204 	addi	r9,r4,8
   453f8:	320dc83a 	sub	r6,r6,r8
   453fc:	31c00217 	ldw	r7,8(r6)
   45400:	1205883a 	add	r2,r2,r8
   45404:	3a406526 	beq	r7,r9,4559c <_free_r+0x208>
   45408:	32000317 	ldw	r8,12(r6)
   4540c:	3a000315 	stw	r8,12(r7)
   45410:	41c00215 	stw	r7,8(r8)
   45414:	28cf883a 	add	r7,r5,r3
   45418:	39c00117 	ldw	r7,4(r7)
   4541c:	39c0004c 	andi	r7,r7,1
   45420:	38003a26 	beq	r7,zero,4550c <_free_r+0x178>
   45424:	10c00054 	ori	r3,r2,1
   45428:	30c00115 	stw	r3,4(r6)
   4542c:	3087883a 	add	r3,r6,r2
   45430:	18800015 	stw	r2,0(r3)
   45434:	00c07fc4 	movi	r3,511
   45438:	18801936 	bltu	r3,r2,454a0 <_free_r+0x10c>
   4543c:	1004d0fa 	srli	r2,r2,3
   45440:	01c00044 	movi	r7,1
   45444:	21400117 	ldw	r5,4(r4)
   45448:	10c00044 	addi	r3,r2,1
   4544c:	18c7883a 	add	r3,r3,r3
   45450:	1005d0ba 	srai	r2,r2,2
   45454:	18c7883a 	add	r3,r3,r3
   45458:	18c7883a 	add	r3,r3,r3
   4545c:	1907883a 	add	r3,r3,r4
   45460:	3884983a 	sll	r2,r7,r2
   45464:	19c00017 	ldw	r7,0(r3)
   45468:	1a3ffe04 	addi	r8,r3,-8
   4546c:	1144b03a 	or	r2,r2,r5
   45470:	32000315 	stw	r8,12(r6)
   45474:	31c00215 	stw	r7,8(r6)
   45478:	20800115 	stw	r2,4(r4)
   4547c:	19800015 	stw	r6,0(r3)
   45480:	39800315 	stw	r6,12(r7)
   45484:	8809883a 	mov	r4,r17
   45488:	dfc00217 	ldw	ra,8(sp)
   4548c:	dc400117 	ldw	r17,4(sp)
   45490:	dc000017 	ldw	r16,0(sp)
   45494:	dec00304 	addi	sp,sp,12
   45498:	004ea441 	jmpi	4ea44 <__malloc_unlock>
   4549c:	f800283a 	ret
   454a0:	100ad27a 	srli	r5,r2,9
   454a4:	00c00104 	movi	r3,4
   454a8:	19404a36 	bltu	r3,r5,455d4 <_free_r+0x240>
   454ac:	100ad1ba 	srli	r5,r2,6
   454b0:	28c00e44 	addi	r3,r5,57
   454b4:	18c7883a 	add	r3,r3,r3
   454b8:	29400e04 	addi	r5,r5,56
   454bc:	18c7883a 	add	r3,r3,r3
   454c0:	18c7883a 	add	r3,r3,r3
   454c4:	1909883a 	add	r4,r3,r4
   454c8:	20c00017 	ldw	r3,0(r4)
   454cc:	01c001b4 	movhi	r7,6
   454d0:	213ffe04 	addi	r4,r4,-8
   454d4:	39e6bc04 	addi	r7,r7,-25872
   454d8:	20c04426 	beq	r4,r3,455ec <_free_r+0x258>
   454dc:	01ffff04 	movi	r7,-4
   454e0:	19400117 	ldw	r5,4(r3)
   454e4:	29ca703a 	and	r5,r5,r7
   454e8:	1140022e 	bgeu	r2,r5,454f4 <_free_r+0x160>
   454ec:	18c00217 	ldw	r3,8(r3)
   454f0:	20fffb1e 	bne	r4,r3,454e0 <__alt_data_end+0xfffdfce0>
   454f4:	19000317 	ldw	r4,12(r3)
   454f8:	31000315 	stw	r4,12(r6)
   454fc:	30c00215 	stw	r3,8(r6)
   45500:	21800215 	stw	r6,8(r4)
   45504:	19800315 	stw	r6,12(r3)
   45508:	003fde06 	br	45484 <__alt_data_end+0xfffdfc84>
   4550c:	29c00217 	ldw	r7,8(r5)
   45510:	10c5883a 	add	r2,r2,r3
   45514:	00c001b4 	movhi	r3,6
   45518:	18e6be04 	addi	r3,r3,-25864
   4551c:	38c03b26 	beq	r7,r3,4560c <_free_r+0x278>
   45520:	2a000317 	ldw	r8,12(r5)
   45524:	11400054 	ori	r5,r2,1
   45528:	3087883a 	add	r3,r6,r2
   4552c:	3a000315 	stw	r8,12(r7)
   45530:	41c00215 	stw	r7,8(r8)
   45534:	31400115 	stw	r5,4(r6)
   45538:	18800015 	stw	r2,0(r3)
   4553c:	003fbd06 	br	45434 <__alt_data_end+0xfffdfc34>
   45540:	39c0004c 	andi	r7,r7,1
   45544:	10c5883a 	add	r2,r2,r3
   45548:	3800071e 	bne	r7,zero,45568 <_free_r+0x1d4>
   4554c:	81fffe17 	ldw	r7,-8(r16)
   45550:	31cdc83a 	sub	r6,r6,r7
   45554:	30c00317 	ldw	r3,12(r6)
   45558:	31400217 	ldw	r5,8(r6)
   4555c:	11c5883a 	add	r2,r2,r7
   45560:	28c00315 	stw	r3,12(r5)
   45564:	19400215 	stw	r5,8(r3)
   45568:	10c00054 	ori	r3,r2,1
   4556c:	30c00115 	stw	r3,4(r6)
   45570:	00c001b4 	movhi	r3,6
   45574:	18ec4804 	addi	r3,r3,-20192
   45578:	18c00017 	ldw	r3,0(r3)
   4557c:	21800215 	stw	r6,8(r4)
   45580:	10ffc036 	bltu	r2,r3,45484 <__alt_data_end+0xfffdfc84>
   45584:	008001b4 	movhi	r2,6
   45588:	10b35a04 	addi	r2,r2,-12952
   4558c:	11400017 	ldw	r5,0(r2)
   45590:	8809883a 	mov	r4,r17
   45594:	00452700 	call	45270 <_malloc_trim_r>
   45598:	003fba06 	br	45484 <__alt_data_end+0xfffdfc84>
   4559c:	28c9883a 	add	r4,r5,r3
   455a0:	21000117 	ldw	r4,4(r4)
   455a4:	2100004c 	andi	r4,r4,1
   455a8:	2000391e 	bne	r4,zero,45690 <_free_r+0x2fc>
   455ac:	29c00217 	ldw	r7,8(r5)
   455b0:	29000317 	ldw	r4,12(r5)
   455b4:	1885883a 	add	r2,r3,r2
   455b8:	10c00054 	ori	r3,r2,1
   455bc:	39000315 	stw	r4,12(r7)
   455c0:	21c00215 	stw	r7,8(r4)
   455c4:	30c00115 	stw	r3,4(r6)
   455c8:	308d883a 	add	r6,r6,r2
   455cc:	30800015 	stw	r2,0(r6)
   455d0:	003fac06 	br	45484 <__alt_data_end+0xfffdfc84>
   455d4:	00c00504 	movi	r3,20
   455d8:	19401536 	bltu	r3,r5,45630 <_free_r+0x29c>
   455dc:	28c01704 	addi	r3,r5,92
   455e0:	18c7883a 	add	r3,r3,r3
   455e4:	294016c4 	addi	r5,r5,91
   455e8:	003fb406 	br	454bc <__alt_data_end+0xfffdfcbc>
   455ec:	280bd0ba 	srai	r5,r5,2
   455f0:	00c00044 	movi	r3,1
   455f4:	38800117 	ldw	r2,4(r7)
   455f8:	194a983a 	sll	r5,r3,r5
   455fc:	2007883a 	mov	r3,r4
   45600:	2884b03a 	or	r2,r5,r2
   45604:	38800115 	stw	r2,4(r7)
   45608:	003fbb06 	br	454f8 <__alt_data_end+0xfffdfcf8>
   4560c:	21800515 	stw	r6,20(r4)
   45610:	21800415 	stw	r6,16(r4)
   45614:	10c00054 	ori	r3,r2,1
   45618:	31c00315 	stw	r7,12(r6)
   4561c:	31c00215 	stw	r7,8(r6)
   45620:	30c00115 	stw	r3,4(r6)
   45624:	308d883a 	add	r6,r6,r2
   45628:	30800015 	stw	r2,0(r6)
   4562c:	003f9506 	br	45484 <__alt_data_end+0xfffdfc84>
   45630:	00c01504 	movi	r3,84
   45634:	19400536 	bltu	r3,r5,4564c <_free_r+0x2b8>
   45638:	100ad33a 	srli	r5,r2,12
   4563c:	28c01bc4 	addi	r3,r5,111
   45640:	18c7883a 	add	r3,r3,r3
   45644:	29401b84 	addi	r5,r5,110
   45648:	003f9c06 	br	454bc <__alt_data_end+0xfffdfcbc>
   4564c:	00c05504 	movi	r3,340
   45650:	19400536 	bltu	r3,r5,45668 <_free_r+0x2d4>
   45654:	100ad3fa 	srli	r5,r2,15
   45658:	28c01e04 	addi	r3,r5,120
   4565c:	18c7883a 	add	r3,r3,r3
   45660:	29401dc4 	addi	r5,r5,119
   45664:	003f9506 	br	454bc <__alt_data_end+0xfffdfcbc>
   45668:	00c15504 	movi	r3,1364
   4566c:	19400536 	bltu	r3,r5,45684 <_free_r+0x2f0>
   45670:	100ad4ba 	srli	r5,r2,18
   45674:	28c01f44 	addi	r3,r5,125
   45678:	18c7883a 	add	r3,r3,r3
   4567c:	29401f04 	addi	r5,r5,124
   45680:	003f8e06 	br	454bc <__alt_data_end+0xfffdfcbc>
   45684:	00c03f84 	movi	r3,254
   45688:	01401f84 	movi	r5,126
   4568c:	003f8b06 	br	454bc <__alt_data_end+0xfffdfcbc>
   45690:	10c00054 	ori	r3,r2,1
   45694:	30c00115 	stw	r3,4(r6)
   45698:	308d883a 	add	r6,r6,r2
   4569c:	30800015 	stw	r2,0(r6)
   456a0:	003f7806 	br	45484 <__alt_data_end+0xfffdfc84>

000456a4 <_fwalk>:
   456a4:	defff704 	addi	sp,sp,-36
   456a8:	dd000415 	stw	r20,16(sp)
   456ac:	dfc00815 	stw	ra,32(sp)
   456b0:	ddc00715 	stw	r23,28(sp)
   456b4:	dd800615 	stw	r22,24(sp)
   456b8:	dd400515 	stw	r21,20(sp)
   456bc:	dcc00315 	stw	r19,12(sp)
   456c0:	dc800215 	stw	r18,8(sp)
   456c4:	dc400115 	stw	r17,4(sp)
   456c8:	dc000015 	stw	r16,0(sp)
   456cc:	2500b804 	addi	r20,r4,736
   456d0:	a0002326 	beq	r20,zero,45760 <_fwalk+0xbc>
   456d4:	282b883a 	mov	r21,r5
   456d8:	002f883a 	mov	r23,zero
   456dc:	05800044 	movi	r22,1
   456e0:	04ffffc4 	movi	r19,-1
   456e4:	a4400117 	ldw	r17,4(r20)
   456e8:	a4800217 	ldw	r18,8(r20)
   456ec:	8c7fffc4 	addi	r17,r17,-1
   456f0:	88000d16 	blt	r17,zero,45728 <_fwalk+0x84>
   456f4:	94000304 	addi	r16,r18,12
   456f8:	94800384 	addi	r18,r18,14
   456fc:	8080000b 	ldhu	r2,0(r16)
   45700:	8c7fffc4 	addi	r17,r17,-1
   45704:	813ffd04 	addi	r4,r16,-12
   45708:	b080042e 	bgeu	r22,r2,4571c <_fwalk+0x78>
   4570c:	9080000f 	ldh	r2,0(r18)
   45710:	14c00226 	beq	r2,r19,4571c <_fwalk+0x78>
   45714:	a83ee83a 	callr	r21
   45718:	b8aeb03a 	or	r23,r23,r2
   4571c:	84001a04 	addi	r16,r16,104
   45720:	94801a04 	addi	r18,r18,104
   45724:	8cfff51e 	bne	r17,r19,456fc <__alt_data_end+0xfffdfefc>
   45728:	a5000017 	ldw	r20,0(r20)
   4572c:	a03fed1e 	bne	r20,zero,456e4 <__alt_data_end+0xfffdfee4>
   45730:	b805883a 	mov	r2,r23
   45734:	dfc00817 	ldw	ra,32(sp)
   45738:	ddc00717 	ldw	r23,28(sp)
   4573c:	dd800617 	ldw	r22,24(sp)
   45740:	dd400517 	ldw	r21,20(sp)
   45744:	dd000417 	ldw	r20,16(sp)
   45748:	dcc00317 	ldw	r19,12(sp)
   4574c:	dc800217 	ldw	r18,8(sp)
   45750:	dc400117 	ldw	r17,4(sp)
   45754:	dc000017 	ldw	r16,0(sp)
   45758:	dec00904 	addi	sp,sp,36
   4575c:	f800283a 	ret
   45760:	002f883a 	mov	r23,zero
   45764:	003ff206 	br	45730 <__alt_data_end+0xfffdff30>

00045768 <_fwalk_reent>:
   45768:	defff704 	addi	sp,sp,-36
   4576c:	dd000415 	stw	r20,16(sp)
   45770:	dfc00815 	stw	ra,32(sp)
   45774:	ddc00715 	stw	r23,28(sp)
   45778:	dd800615 	stw	r22,24(sp)
   4577c:	dd400515 	stw	r21,20(sp)
   45780:	dcc00315 	stw	r19,12(sp)
   45784:	dc800215 	stw	r18,8(sp)
   45788:	dc400115 	stw	r17,4(sp)
   4578c:	dc000015 	stw	r16,0(sp)
   45790:	2500b804 	addi	r20,r4,736
   45794:	a0002326 	beq	r20,zero,45824 <_fwalk_reent+0xbc>
   45798:	282b883a 	mov	r21,r5
   4579c:	2027883a 	mov	r19,r4
   457a0:	002f883a 	mov	r23,zero
   457a4:	05800044 	movi	r22,1
   457a8:	04bfffc4 	movi	r18,-1
   457ac:	a4400117 	ldw	r17,4(r20)
   457b0:	a4000217 	ldw	r16,8(r20)
   457b4:	8c7fffc4 	addi	r17,r17,-1
   457b8:	88000c16 	blt	r17,zero,457ec <_fwalk_reent+0x84>
   457bc:	84000304 	addi	r16,r16,12
   457c0:	8080000b 	ldhu	r2,0(r16)
   457c4:	8c7fffc4 	addi	r17,r17,-1
   457c8:	817ffd04 	addi	r5,r16,-12
   457cc:	b080052e 	bgeu	r22,r2,457e4 <_fwalk_reent+0x7c>
   457d0:	8080008f 	ldh	r2,2(r16)
   457d4:	9809883a 	mov	r4,r19
   457d8:	14800226 	beq	r2,r18,457e4 <_fwalk_reent+0x7c>
   457dc:	a83ee83a 	callr	r21
   457e0:	b8aeb03a 	or	r23,r23,r2
   457e4:	84001a04 	addi	r16,r16,104
   457e8:	8cbff51e 	bne	r17,r18,457c0 <__alt_data_end+0xfffdffc0>
   457ec:	a5000017 	ldw	r20,0(r20)
   457f0:	a03fee1e 	bne	r20,zero,457ac <__alt_data_end+0xfffdffac>
   457f4:	b805883a 	mov	r2,r23
   457f8:	dfc00817 	ldw	ra,32(sp)
   457fc:	ddc00717 	ldw	r23,28(sp)
   45800:	dd800617 	ldw	r22,24(sp)
   45804:	dd400517 	ldw	r21,20(sp)
   45808:	dd000417 	ldw	r20,16(sp)
   4580c:	dcc00317 	ldw	r19,12(sp)
   45810:	dc800217 	ldw	r18,8(sp)
   45814:	dc400117 	ldw	r17,4(sp)
   45818:	dc000017 	ldw	r16,0(sp)
   4581c:	dec00904 	addi	sp,sp,36
   45820:	f800283a 	ret
   45824:	002f883a 	mov	r23,zero
   45828:	003ff206 	br	457f4 <__alt_data_end+0xfffdfff4>

0004582c <_setlocale_r>:
   4582c:	30001b26 	beq	r6,zero,4589c <_setlocale_r+0x70>
   45830:	014001b4 	movhi	r5,6
   45834:	defffe04 	addi	sp,sp,-8
   45838:	2964ed04 	addi	r5,r5,-27724
   4583c:	3009883a 	mov	r4,r6
   45840:	dc000015 	stw	r16,0(sp)
   45844:	dfc00115 	stw	ra,4(sp)
   45848:	3021883a 	mov	r16,r6
   4584c:	00478e00 	call	478e0 <strcmp>
   45850:	1000061e 	bne	r2,zero,4586c <_setlocale_r+0x40>
   45854:	008001b4 	movhi	r2,6
   45858:	10a4ec04 	addi	r2,r2,-27728
   4585c:	dfc00117 	ldw	ra,4(sp)
   45860:	dc000017 	ldw	r16,0(sp)
   45864:	dec00204 	addi	sp,sp,8
   45868:	f800283a 	ret
   4586c:	014001b4 	movhi	r5,6
   45870:	2964ec04 	addi	r5,r5,-27728
   45874:	8009883a 	mov	r4,r16
   45878:	00478e00 	call	478e0 <strcmp>
   4587c:	103ff526 	beq	r2,zero,45854 <__alt_data_end+0xfffe0054>
   45880:	014001b4 	movhi	r5,6
   45884:	2964d704 	addi	r5,r5,-27812
   45888:	8009883a 	mov	r4,r16
   4588c:	00478e00 	call	478e0 <strcmp>
   45890:	103ff026 	beq	r2,zero,45854 <__alt_data_end+0xfffe0054>
   45894:	0005883a 	mov	r2,zero
   45898:	003ff006 	br	4585c <__alt_data_end+0xfffe005c>
   4589c:	008001b4 	movhi	r2,6
   458a0:	10a4ec04 	addi	r2,r2,-27728
   458a4:	f800283a 	ret

000458a8 <__locale_charset>:
   458a8:	008001b4 	movhi	r2,6
   458ac:	10a6a604 	addi	r2,r2,-25960
   458b0:	f800283a 	ret

000458b4 <__locale_mb_cur_max>:
   458b4:	008001b4 	movhi	r2,6
   458b8:	10ac4604 	addi	r2,r2,-20200
   458bc:	10800017 	ldw	r2,0(r2)
   458c0:	f800283a 	ret

000458c4 <__locale_msgcharset>:
   458c4:	008001b4 	movhi	r2,6
   458c8:	10a69e04 	addi	r2,r2,-25992
   458cc:	f800283a 	ret

000458d0 <__locale_cjk_lang>:
   458d0:	0005883a 	mov	r2,zero
   458d4:	f800283a 	ret

000458d8 <_localeconv_r>:
   458d8:	008001b4 	movhi	r2,6
   458dc:	10a6ae04 	addi	r2,r2,-25928
   458e0:	f800283a 	ret

000458e4 <setlocale>:
   458e4:	008001b4 	movhi	r2,6
   458e8:	10ac4504 	addi	r2,r2,-20204
   458ec:	280d883a 	mov	r6,r5
   458f0:	200b883a 	mov	r5,r4
   458f4:	11000017 	ldw	r4,0(r2)
   458f8:	004582c1 	jmpi	4582c <_setlocale_r>

000458fc <localeconv>:
   458fc:	008001b4 	movhi	r2,6
   45900:	10a6ae04 	addi	r2,r2,-25928
   45904:	f800283a 	ret

00045908 <__smakebuf_r>:
   45908:	2880030b 	ldhu	r2,12(r5)
   4590c:	10c0008c 	andi	r3,r2,2
   45910:	1800411e 	bne	r3,zero,45a18 <__smakebuf_r+0x110>
   45914:	deffec04 	addi	sp,sp,-80
   45918:	dc000f15 	stw	r16,60(sp)
   4591c:	2821883a 	mov	r16,r5
   45920:	2940038f 	ldh	r5,14(r5)
   45924:	dc401015 	stw	r17,64(sp)
   45928:	dfc01315 	stw	ra,76(sp)
   4592c:	dcc01215 	stw	r19,72(sp)
   45930:	dc801115 	stw	r18,68(sp)
   45934:	2023883a 	mov	r17,r4
   45938:	28001c16 	blt	r5,zero,459ac <__smakebuf_r+0xa4>
   4593c:	d80d883a 	mov	r6,sp
   45940:	00495e80 	call	495e8 <_fstat_r>
   45944:	10001816 	blt	r2,zero,459a8 <__smakebuf_r+0xa0>
   45948:	d8800117 	ldw	r2,4(sp)
   4594c:	00e00014 	movui	r3,32768
   45950:	10bc000c 	andi	r2,r2,61440
   45954:	14c80020 	cmpeqi	r19,r2,8192
   45958:	10c03726 	beq	r2,r3,45a38 <__smakebuf_r+0x130>
   4595c:	80c0030b 	ldhu	r3,12(r16)
   45960:	18c20014 	ori	r3,r3,2048
   45964:	80c0030d 	sth	r3,12(r16)
   45968:	00c80004 	movi	r3,8192
   4596c:	10c0521e 	bne	r2,r3,45ab8 <__smakebuf_r+0x1b0>
   45970:	8140038f 	ldh	r5,14(r16)
   45974:	8809883a 	mov	r4,r17
   45978:	0049b0c0 	call	49b0c <_isatty_r>
   4597c:	10004c26 	beq	r2,zero,45ab0 <__smakebuf_r+0x1a8>
   45980:	8080030b 	ldhu	r2,12(r16)
   45984:	80c010c4 	addi	r3,r16,67
   45988:	80c00015 	stw	r3,0(r16)
   4598c:	10800054 	ori	r2,r2,1
   45990:	8080030d 	sth	r2,12(r16)
   45994:	00800044 	movi	r2,1
   45998:	80c00415 	stw	r3,16(r16)
   4599c:	80800515 	stw	r2,20(r16)
   459a0:	04810004 	movi	r18,1024
   459a4:	00000706 	br	459c4 <__smakebuf_r+0xbc>
   459a8:	8080030b 	ldhu	r2,12(r16)
   459ac:	10c0200c 	andi	r3,r2,128
   459b0:	18001f1e 	bne	r3,zero,45a30 <__smakebuf_r+0x128>
   459b4:	04810004 	movi	r18,1024
   459b8:	10820014 	ori	r2,r2,2048
   459bc:	8080030d 	sth	r2,12(r16)
   459c0:	0027883a 	mov	r19,zero
   459c4:	900b883a 	mov	r5,r18
   459c8:	8809883a 	mov	r4,r17
   459cc:	0045ac40 	call	45ac4 <_malloc_r>
   459d0:	10002c26 	beq	r2,zero,45a84 <__smakebuf_r+0x17c>
   459d4:	80c0030b 	ldhu	r3,12(r16)
   459d8:	01000134 	movhi	r4,4
   459dc:	2113b204 	addi	r4,r4,20168
   459e0:	89000f15 	stw	r4,60(r17)
   459e4:	18c02014 	ori	r3,r3,128
   459e8:	80c0030d 	sth	r3,12(r16)
   459ec:	80800015 	stw	r2,0(r16)
   459f0:	80800415 	stw	r2,16(r16)
   459f4:	84800515 	stw	r18,20(r16)
   459f8:	98001a1e 	bne	r19,zero,45a64 <__smakebuf_r+0x15c>
   459fc:	dfc01317 	ldw	ra,76(sp)
   45a00:	dcc01217 	ldw	r19,72(sp)
   45a04:	dc801117 	ldw	r18,68(sp)
   45a08:	dc401017 	ldw	r17,64(sp)
   45a0c:	dc000f17 	ldw	r16,60(sp)
   45a10:	dec01404 	addi	sp,sp,80
   45a14:	f800283a 	ret
   45a18:	288010c4 	addi	r2,r5,67
   45a1c:	28800015 	stw	r2,0(r5)
   45a20:	28800415 	stw	r2,16(r5)
   45a24:	00800044 	movi	r2,1
   45a28:	28800515 	stw	r2,20(r5)
   45a2c:	f800283a 	ret
   45a30:	04801004 	movi	r18,64
   45a34:	003fe006 	br	459b8 <__alt_data_end+0xfffe01b8>
   45a38:	81000a17 	ldw	r4,40(r16)
   45a3c:	00c00134 	movhi	r3,4
   45a40:	18de1f04 	addi	r3,r3,30844
   45a44:	20ffc51e 	bne	r4,r3,4595c <__alt_data_end+0xfffe015c>
   45a48:	8080030b 	ldhu	r2,12(r16)
   45a4c:	04810004 	movi	r18,1024
   45a50:	84801315 	stw	r18,76(r16)
   45a54:	1484b03a 	or	r2,r2,r18
   45a58:	8080030d 	sth	r2,12(r16)
   45a5c:	0027883a 	mov	r19,zero
   45a60:	003fd806 	br	459c4 <__alt_data_end+0xfffe01c4>
   45a64:	8140038f 	ldh	r5,14(r16)
   45a68:	8809883a 	mov	r4,r17
   45a6c:	0049b0c0 	call	49b0c <_isatty_r>
   45a70:	103fe226 	beq	r2,zero,459fc <__alt_data_end+0xfffe01fc>
   45a74:	8080030b 	ldhu	r2,12(r16)
   45a78:	10800054 	ori	r2,r2,1
   45a7c:	8080030d 	sth	r2,12(r16)
   45a80:	003fde06 	br	459fc <__alt_data_end+0xfffe01fc>
   45a84:	8080030b 	ldhu	r2,12(r16)
   45a88:	10c0800c 	andi	r3,r2,512
   45a8c:	183fdb1e 	bne	r3,zero,459fc <__alt_data_end+0xfffe01fc>
   45a90:	10800094 	ori	r2,r2,2
   45a94:	80c010c4 	addi	r3,r16,67
   45a98:	8080030d 	sth	r2,12(r16)
   45a9c:	00800044 	movi	r2,1
   45aa0:	80c00015 	stw	r3,0(r16)
   45aa4:	80c00415 	stw	r3,16(r16)
   45aa8:	80800515 	stw	r2,20(r16)
   45aac:	003fd306 	br	459fc <__alt_data_end+0xfffe01fc>
   45ab0:	04810004 	movi	r18,1024
   45ab4:	003fc306 	br	459c4 <__alt_data_end+0xfffe01c4>
   45ab8:	0027883a 	mov	r19,zero
   45abc:	04810004 	movi	r18,1024
   45ac0:	003fc006 	br	459c4 <__alt_data_end+0xfffe01c4>

00045ac4 <_malloc_r>:
   45ac4:	defff504 	addi	sp,sp,-44
   45ac8:	dc800315 	stw	r18,12(sp)
   45acc:	dfc00a15 	stw	ra,40(sp)
   45ad0:	df000915 	stw	fp,36(sp)
   45ad4:	ddc00815 	stw	r23,32(sp)
   45ad8:	dd800715 	stw	r22,28(sp)
   45adc:	dd400615 	stw	r21,24(sp)
   45ae0:	dd000515 	stw	r20,20(sp)
   45ae4:	dcc00415 	stw	r19,16(sp)
   45ae8:	dc400215 	stw	r17,8(sp)
   45aec:	dc000115 	stw	r16,4(sp)
   45af0:	288002c4 	addi	r2,r5,11
   45af4:	00c00584 	movi	r3,22
   45af8:	2025883a 	mov	r18,r4
   45afc:	18807f2e 	bgeu	r3,r2,45cfc <_malloc_r+0x238>
   45b00:	047ffe04 	movi	r17,-8
   45b04:	1462703a 	and	r17,r2,r17
   45b08:	8800a316 	blt	r17,zero,45d98 <_malloc_r+0x2d4>
   45b0c:	8940a236 	bltu	r17,r5,45d98 <_malloc_r+0x2d4>
   45b10:	004e9240 	call	4e924 <__malloc_lock>
   45b14:	00807dc4 	movi	r2,503
   45b18:	1441e92e 	bgeu	r2,r17,462c0 <_malloc_r+0x7fc>
   45b1c:	8804d27a 	srli	r2,r17,9
   45b20:	1000a126 	beq	r2,zero,45da8 <_malloc_r+0x2e4>
   45b24:	00c00104 	movi	r3,4
   45b28:	18811e36 	bltu	r3,r2,45fa4 <_malloc_r+0x4e0>
   45b2c:	8804d1ba 	srli	r2,r17,6
   45b30:	12000e44 	addi	r8,r2,57
   45b34:	11c00e04 	addi	r7,r2,56
   45b38:	4209883a 	add	r4,r8,r8
   45b3c:	04c001b4 	movhi	r19,6
   45b40:	2109883a 	add	r4,r4,r4
   45b44:	9ce6bc04 	addi	r19,r19,-25872
   45b48:	2109883a 	add	r4,r4,r4
   45b4c:	9909883a 	add	r4,r19,r4
   45b50:	24000117 	ldw	r16,4(r4)
   45b54:	213ffe04 	addi	r4,r4,-8
   45b58:	24009726 	beq	r4,r16,45db8 <_malloc_r+0x2f4>
   45b5c:	80800117 	ldw	r2,4(r16)
   45b60:	01bfff04 	movi	r6,-4
   45b64:	014003c4 	movi	r5,15
   45b68:	1184703a 	and	r2,r2,r6
   45b6c:	1447c83a 	sub	r3,r2,r17
   45b70:	28c00716 	blt	r5,r3,45b90 <_malloc_r+0xcc>
   45b74:	1800920e 	bge	r3,zero,45dc0 <_malloc_r+0x2fc>
   45b78:	84000317 	ldw	r16,12(r16)
   45b7c:	24008e26 	beq	r4,r16,45db8 <_malloc_r+0x2f4>
   45b80:	80800117 	ldw	r2,4(r16)
   45b84:	1184703a 	and	r2,r2,r6
   45b88:	1447c83a 	sub	r3,r2,r17
   45b8c:	28fff90e 	bge	r5,r3,45b74 <__alt_data_end+0xfffe0374>
   45b90:	3809883a 	mov	r4,r7
   45b94:	018001b4 	movhi	r6,6
   45b98:	9c000417 	ldw	r16,16(r19)
   45b9c:	31a6bc04 	addi	r6,r6,-25872
   45ba0:	32000204 	addi	r8,r6,8
   45ba4:	82013426 	beq	r16,r8,46078 <_malloc_r+0x5b4>
   45ba8:	80c00117 	ldw	r3,4(r16)
   45bac:	00bfff04 	movi	r2,-4
   45bb0:	188e703a 	and	r7,r3,r2
   45bb4:	3c45c83a 	sub	r2,r7,r17
   45bb8:	00c003c4 	movi	r3,15
   45bbc:	18811f16 	blt	r3,r2,4603c <_malloc_r+0x578>
   45bc0:	32000515 	stw	r8,20(r6)
   45bc4:	32000415 	stw	r8,16(r6)
   45bc8:	10007f0e 	bge	r2,zero,45dc8 <_malloc_r+0x304>
   45bcc:	00807fc4 	movi	r2,511
   45bd0:	11c0fd36 	bltu	r2,r7,45fc8 <_malloc_r+0x504>
   45bd4:	3806d0fa 	srli	r3,r7,3
   45bd8:	01c00044 	movi	r7,1
   45bdc:	30800117 	ldw	r2,4(r6)
   45be0:	19400044 	addi	r5,r3,1
   45be4:	294b883a 	add	r5,r5,r5
   45be8:	1807d0ba 	srai	r3,r3,2
   45bec:	294b883a 	add	r5,r5,r5
   45bf0:	294b883a 	add	r5,r5,r5
   45bf4:	298b883a 	add	r5,r5,r6
   45bf8:	38c6983a 	sll	r3,r7,r3
   45bfc:	29c00017 	ldw	r7,0(r5)
   45c00:	2a7ffe04 	addi	r9,r5,-8
   45c04:	1886b03a 	or	r3,r3,r2
   45c08:	82400315 	stw	r9,12(r16)
   45c0c:	81c00215 	stw	r7,8(r16)
   45c10:	30c00115 	stw	r3,4(r6)
   45c14:	2c000015 	stw	r16,0(r5)
   45c18:	3c000315 	stw	r16,12(r7)
   45c1c:	2005d0ba 	srai	r2,r4,2
   45c20:	01400044 	movi	r5,1
   45c24:	288a983a 	sll	r5,r5,r2
   45c28:	19406f36 	bltu	r3,r5,45de8 <_malloc_r+0x324>
   45c2c:	28c4703a 	and	r2,r5,r3
   45c30:	10000a1e 	bne	r2,zero,45c5c <_malloc_r+0x198>
   45c34:	00bfff04 	movi	r2,-4
   45c38:	294b883a 	add	r5,r5,r5
   45c3c:	2088703a 	and	r4,r4,r2
   45c40:	28c4703a 	and	r2,r5,r3
   45c44:	21000104 	addi	r4,r4,4
   45c48:	1000041e 	bne	r2,zero,45c5c <_malloc_r+0x198>
   45c4c:	294b883a 	add	r5,r5,r5
   45c50:	28c4703a 	and	r2,r5,r3
   45c54:	21000104 	addi	r4,r4,4
   45c58:	103ffc26 	beq	r2,zero,45c4c <__alt_data_end+0xfffe044c>
   45c5c:	02bfff04 	movi	r10,-4
   45c60:	024003c4 	movi	r9,15
   45c64:	21800044 	addi	r6,r4,1
   45c68:	318d883a 	add	r6,r6,r6
   45c6c:	318d883a 	add	r6,r6,r6
   45c70:	318d883a 	add	r6,r6,r6
   45c74:	998d883a 	add	r6,r19,r6
   45c78:	333ffe04 	addi	r12,r6,-8
   45c7c:	2017883a 	mov	r11,r4
   45c80:	31800104 	addi	r6,r6,4
   45c84:	34000017 	ldw	r16,0(r6)
   45c88:	31fffd04 	addi	r7,r6,-12
   45c8c:	81c0041e 	bne	r16,r7,45ca0 <_malloc_r+0x1dc>
   45c90:	0000fb06 	br	46080 <_malloc_r+0x5bc>
   45c94:	1801030e 	bge	r3,zero,460a4 <_malloc_r+0x5e0>
   45c98:	84000317 	ldw	r16,12(r16)
   45c9c:	81c0f826 	beq	r16,r7,46080 <_malloc_r+0x5bc>
   45ca0:	80800117 	ldw	r2,4(r16)
   45ca4:	1284703a 	and	r2,r2,r10
   45ca8:	1447c83a 	sub	r3,r2,r17
   45cac:	48fff90e 	bge	r9,r3,45c94 <__alt_data_end+0xfffe0494>
   45cb0:	80800317 	ldw	r2,12(r16)
   45cb4:	81000217 	ldw	r4,8(r16)
   45cb8:	89400054 	ori	r5,r17,1
   45cbc:	81400115 	stw	r5,4(r16)
   45cc0:	20800315 	stw	r2,12(r4)
   45cc4:	11000215 	stw	r4,8(r2)
   45cc8:	8463883a 	add	r17,r16,r17
   45ccc:	9c400515 	stw	r17,20(r19)
   45cd0:	9c400415 	stw	r17,16(r19)
   45cd4:	18800054 	ori	r2,r3,1
   45cd8:	88800115 	stw	r2,4(r17)
   45cdc:	8a000315 	stw	r8,12(r17)
   45ce0:	8a000215 	stw	r8,8(r17)
   45ce4:	88e3883a 	add	r17,r17,r3
   45ce8:	88c00015 	stw	r3,0(r17)
   45cec:	9009883a 	mov	r4,r18
   45cf0:	004ea440 	call	4ea44 <__malloc_unlock>
   45cf4:	80800204 	addi	r2,r16,8
   45cf8:	00001b06 	br	45d68 <_malloc_r+0x2a4>
   45cfc:	04400404 	movi	r17,16
   45d00:	89402536 	bltu	r17,r5,45d98 <_malloc_r+0x2d4>
   45d04:	004e9240 	call	4e924 <__malloc_lock>
   45d08:	00800184 	movi	r2,6
   45d0c:	01000084 	movi	r4,2
   45d10:	04c001b4 	movhi	r19,6
   45d14:	1085883a 	add	r2,r2,r2
   45d18:	9ce6bc04 	addi	r19,r19,-25872
   45d1c:	1085883a 	add	r2,r2,r2
   45d20:	9885883a 	add	r2,r19,r2
   45d24:	14000117 	ldw	r16,4(r2)
   45d28:	10fffe04 	addi	r3,r2,-8
   45d2c:	80c0d926 	beq	r16,r3,46094 <_malloc_r+0x5d0>
   45d30:	80c00117 	ldw	r3,4(r16)
   45d34:	81000317 	ldw	r4,12(r16)
   45d38:	00bfff04 	movi	r2,-4
   45d3c:	1884703a 	and	r2,r3,r2
   45d40:	81400217 	ldw	r5,8(r16)
   45d44:	8085883a 	add	r2,r16,r2
   45d48:	10c00117 	ldw	r3,4(r2)
   45d4c:	29000315 	stw	r4,12(r5)
   45d50:	21400215 	stw	r5,8(r4)
   45d54:	18c00054 	ori	r3,r3,1
   45d58:	10c00115 	stw	r3,4(r2)
   45d5c:	9009883a 	mov	r4,r18
   45d60:	004ea440 	call	4ea44 <__malloc_unlock>
   45d64:	80800204 	addi	r2,r16,8
   45d68:	dfc00a17 	ldw	ra,40(sp)
   45d6c:	df000917 	ldw	fp,36(sp)
   45d70:	ddc00817 	ldw	r23,32(sp)
   45d74:	dd800717 	ldw	r22,28(sp)
   45d78:	dd400617 	ldw	r21,24(sp)
   45d7c:	dd000517 	ldw	r20,20(sp)
   45d80:	dcc00417 	ldw	r19,16(sp)
   45d84:	dc800317 	ldw	r18,12(sp)
   45d88:	dc400217 	ldw	r17,8(sp)
   45d8c:	dc000117 	ldw	r16,4(sp)
   45d90:	dec00b04 	addi	sp,sp,44
   45d94:	f800283a 	ret
   45d98:	00800304 	movi	r2,12
   45d9c:	90800015 	stw	r2,0(r18)
   45da0:	0005883a 	mov	r2,zero
   45da4:	003ff006 	br	45d68 <__alt_data_end+0xfffe0568>
   45da8:	01002004 	movi	r4,128
   45dac:	02001004 	movi	r8,64
   45db0:	01c00fc4 	movi	r7,63
   45db4:	003f6106 	br	45b3c <__alt_data_end+0xfffe033c>
   45db8:	4009883a 	mov	r4,r8
   45dbc:	003f7506 	br	45b94 <__alt_data_end+0xfffe0394>
   45dc0:	81000317 	ldw	r4,12(r16)
   45dc4:	003fde06 	br	45d40 <__alt_data_end+0xfffe0540>
   45dc8:	81c5883a 	add	r2,r16,r7
   45dcc:	11400117 	ldw	r5,4(r2)
   45dd0:	9009883a 	mov	r4,r18
   45dd4:	29400054 	ori	r5,r5,1
   45dd8:	11400115 	stw	r5,4(r2)
   45ddc:	004ea440 	call	4ea44 <__malloc_unlock>
   45de0:	80800204 	addi	r2,r16,8
   45de4:	003fe006 	br	45d68 <__alt_data_end+0xfffe0568>
   45de8:	9c000217 	ldw	r16,8(r19)
   45dec:	00bfff04 	movi	r2,-4
   45df0:	85800117 	ldw	r22,4(r16)
   45df4:	b0ac703a 	and	r22,r22,r2
   45df8:	b4400336 	bltu	r22,r17,45e08 <_malloc_r+0x344>
   45dfc:	b445c83a 	sub	r2,r22,r17
   45e00:	00c003c4 	movi	r3,15
   45e04:	18805d16 	blt	r3,r2,45f7c <_malloc_r+0x4b8>
   45e08:	05c001b4 	movhi	r23,6
   45e0c:	008001b4 	movhi	r2,6
   45e10:	10b35a04 	addi	r2,r2,-12952
   45e14:	bdec4704 	addi	r23,r23,-20196
   45e18:	15400017 	ldw	r21,0(r2)
   45e1c:	b8c00017 	ldw	r3,0(r23)
   45e20:	00bfffc4 	movi	r2,-1
   45e24:	858d883a 	add	r6,r16,r22
   45e28:	8d6b883a 	add	r21,r17,r21
   45e2c:	1880ea26 	beq	r3,r2,461d8 <_malloc_r+0x714>
   45e30:	ad4403c4 	addi	r21,r21,4111
   45e34:	00bc0004 	movi	r2,-4096
   45e38:	a8aa703a 	and	r21,r21,r2
   45e3c:	a80b883a 	mov	r5,r21
   45e40:	9009883a 	mov	r4,r18
   45e44:	d9800015 	stw	r6,0(sp)
   45e48:	00477500 	call	47750 <_sbrk_r>
   45e4c:	1029883a 	mov	r20,r2
   45e50:	00bfffc4 	movi	r2,-1
   45e54:	d9800017 	ldw	r6,0(sp)
   45e58:	a080e826 	beq	r20,r2,461fc <_malloc_r+0x738>
   45e5c:	a180a636 	bltu	r20,r6,460f8 <_malloc_r+0x634>
   45e60:	070001b4 	movhi	fp,6
   45e64:	e7337c04 	addi	fp,fp,-12816
   45e68:	e0800017 	ldw	r2,0(fp)
   45e6c:	a887883a 	add	r3,r21,r2
   45e70:	e0c00015 	stw	r3,0(fp)
   45e74:	3500e626 	beq	r6,r20,46210 <_malloc_r+0x74c>
   45e78:	b9000017 	ldw	r4,0(r23)
   45e7c:	00bfffc4 	movi	r2,-1
   45e80:	2080ee26 	beq	r4,r2,4623c <_malloc_r+0x778>
   45e84:	a185c83a 	sub	r2,r20,r6
   45e88:	10c5883a 	add	r2,r2,r3
   45e8c:	e0800015 	stw	r2,0(fp)
   45e90:	a0c001cc 	andi	r3,r20,7
   45e94:	1800bc26 	beq	r3,zero,46188 <_malloc_r+0x6c4>
   45e98:	a0e9c83a 	sub	r20,r20,r3
   45e9c:	00840204 	movi	r2,4104
   45ea0:	a5000204 	addi	r20,r20,8
   45ea4:	10c7c83a 	sub	r3,r2,r3
   45ea8:	a545883a 	add	r2,r20,r21
   45eac:	1083ffcc 	andi	r2,r2,4095
   45eb0:	18abc83a 	sub	r21,r3,r2
   45eb4:	a80b883a 	mov	r5,r21
   45eb8:	9009883a 	mov	r4,r18
   45ebc:	00477500 	call	47750 <_sbrk_r>
   45ec0:	00ffffc4 	movi	r3,-1
   45ec4:	10c0e126 	beq	r2,r3,4624c <_malloc_r+0x788>
   45ec8:	1505c83a 	sub	r2,r2,r20
   45ecc:	1545883a 	add	r2,r2,r21
   45ed0:	10800054 	ori	r2,r2,1
   45ed4:	e0c00017 	ldw	r3,0(fp)
   45ed8:	9d000215 	stw	r20,8(r19)
   45edc:	a0800115 	stw	r2,4(r20)
   45ee0:	a8c7883a 	add	r3,r21,r3
   45ee4:	e0c00015 	stw	r3,0(fp)
   45ee8:	84c00e26 	beq	r16,r19,45f24 <_malloc_r+0x460>
   45eec:	018003c4 	movi	r6,15
   45ef0:	3580a72e 	bgeu	r6,r22,46190 <_malloc_r+0x6cc>
   45ef4:	81400117 	ldw	r5,4(r16)
   45ef8:	013ffe04 	movi	r4,-8
   45efc:	b0bffd04 	addi	r2,r22,-12
   45f00:	1104703a 	and	r2,r2,r4
   45f04:	2900004c 	andi	r4,r5,1
   45f08:	2088b03a 	or	r4,r4,r2
   45f0c:	81000115 	stw	r4,4(r16)
   45f10:	01400144 	movi	r5,5
   45f14:	8089883a 	add	r4,r16,r2
   45f18:	21400115 	stw	r5,4(r4)
   45f1c:	21400215 	stw	r5,8(r4)
   45f20:	3080cd36 	bltu	r6,r2,46258 <_malloc_r+0x794>
   45f24:	008001b4 	movhi	r2,6
   45f28:	10b35904 	addi	r2,r2,-12956
   45f2c:	11000017 	ldw	r4,0(r2)
   45f30:	20c0012e 	bgeu	r4,r3,45f38 <_malloc_r+0x474>
   45f34:	10c00015 	stw	r3,0(r2)
   45f38:	008001b4 	movhi	r2,6
   45f3c:	10b35804 	addi	r2,r2,-12960
   45f40:	11000017 	ldw	r4,0(r2)
   45f44:	9c000217 	ldw	r16,8(r19)
   45f48:	20c0012e 	bgeu	r4,r3,45f50 <_malloc_r+0x48c>
   45f4c:	10c00015 	stw	r3,0(r2)
   45f50:	80c00117 	ldw	r3,4(r16)
   45f54:	00bfff04 	movi	r2,-4
   45f58:	1886703a 	and	r3,r3,r2
   45f5c:	1c45c83a 	sub	r2,r3,r17
   45f60:	1c400236 	bltu	r3,r17,45f6c <_malloc_r+0x4a8>
   45f64:	00c003c4 	movi	r3,15
   45f68:	18800416 	blt	r3,r2,45f7c <_malloc_r+0x4b8>
   45f6c:	9009883a 	mov	r4,r18
   45f70:	004ea440 	call	4ea44 <__malloc_unlock>
   45f74:	0005883a 	mov	r2,zero
   45f78:	003f7b06 	br	45d68 <__alt_data_end+0xfffe0568>
   45f7c:	88c00054 	ori	r3,r17,1
   45f80:	80c00115 	stw	r3,4(r16)
   45f84:	8463883a 	add	r17,r16,r17
   45f88:	10800054 	ori	r2,r2,1
   45f8c:	9c400215 	stw	r17,8(r19)
   45f90:	88800115 	stw	r2,4(r17)
   45f94:	9009883a 	mov	r4,r18
   45f98:	004ea440 	call	4ea44 <__malloc_unlock>
   45f9c:	80800204 	addi	r2,r16,8
   45fa0:	003f7106 	br	45d68 <__alt_data_end+0xfffe0568>
   45fa4:	00c00504 	movi	r3,20
   45fa8:	18804a2e 	bgeu	r3,r2,460d4 <_malloc_r+0x610>
   45fac:	00c01504 	movi	r3,84
   45fb0:	18806e36 	bltu	r3,r2,4616c <_malloc_r+0x6a8>
   45fb4:	8804d33a 	srli	r2,r17,12
   45fb8:	12001bc4 	addi	r8,r2,111
   45fbc:	11c01b84 	addi	r7,r2,110
   45fc0:	4209883a 	add	r4,r8,r8
   45fc4:	003edd06 	br	45b3c <__alt_data_end+0xfffe033c>
   45fc8:	3804d27a 	srli	r2,r7,9
   45fcc:	00c00104 	movi	r3,4
   45fd0:	1880442e 	bgeu	r3,r2,460e4 <_malloc_r+0x620>
   45fd4:	00c00504 	movi	r3,20
   45fd8:	18808136 	bltu	r3,r2,461e0 <_malloc_r+0x71c>
   45fdc:	11401704 	addi	r5,r2,92
   45fe0:	10c016c4 	addi	r3,r2,91
   45fe4:	294b883a 	add	r5,r5,r5
   45fe8:	294b883a 	add	r5,r5,r5
   45fec:	294b883a 	add	r5,r5,r5
   45ff0:	994b883a 	add	r5,r19,r5
   45ff4:	28800017 	ldw	r2,0(r5)
   45ff8:	018001b4 	movhi	r6,6
   45ffc:	297ffe04 	addi	r5,r5,-8
   46000:	31a6bc04 	addi	r6,r6,-25872
   46004:	28806526 	beq	r5,r2,4619c <_malloc_r+0x6d8>
   46008:	01bfff04 	movi	r6,-4
   4600c:	10c00117 	ldw	r3,4(r2)
   46010:	1986703a 	and	r3,r3,r6
   46014:	38c0022e 	bgeu	r7,r3,46020 <_malloc_r+0x55c>
   46018:	10800217 	ldw	r2,8(r2)
   4601c:	28bffb1e 	bne	r5,r2,4600c <__alt_data_end+0xfffe080c>
   46020:	11400317 	ldw	r5,12(r2)
   46024:	98c00117 	ldw	r3,4(r19)
   46028:	81400315 	stw	r5,12(r16)
   4602c:	80800215 	stw	r2,8(r16)
   46030:	2c000215 	stw	r16,8(r5)
   46034:	14000315 	stw	r16,12(r2)
   46038:	003ef806 	br	45c1c <__alt_data_end+0xfffe041c>
   4603c:	88c00054 	ori	r3,r17,1
   46040:	80c00115 	stw	r3,4(r16)
   46044:	8463883a 	add	r17,r16,r17
   46048:	34400515 	stw	r17,20(r6)
   4604c:	34400415 	stw	r17,16(r6)
   46050:	10c00054 	ori	r3,r2,1
   46054:	8a000315 	stw	r8,12(r17)
   46058:	8a000215 	stw	r8,8(r17)
   4605c:	88c00115 	stw	r3,4(r17)
   46060:	88a3883a 	add	r17,r17,r2
   46064:	88800015 	stw	r2,0(r17)
   46068:	9009883a 	mov	r4,r18
   4606c:	004ea440 	call	4ea44 <__malloc_unlock>
   46070:	80800204 	addi	r2,r16,8
   46074:	003f3c06 	br	45d68 <__alt_data_end+0xfffe0568>
   46078:	30c00117 	ldw	r3,4(r6)
   4607c:	003ee706 	br	45c1c <__alt_data_end+0xfffe041c>
   46080:	5ac00044 	addi	r11,r11,1
   46084:	588000cc 	andi	r2,r11,3
   46088:	31800204 	addi	r6,r6,8
   4608c:	103efd1e 	bne	r2,zero,45c84 <__alt_data_end+0xfffe0484>
   46090:	00002406 	br	46124 <_malloc_r+0x660>
   46094:	14000317 	ldw	r16,12(r2)
   46098:	143f251e 	bne	r2,r16,45d30 <__alt_data_end+0xfffe0530>
   4609c:	21000084 	addi	r4,r4,2
   460a0:	003ebc06 	br	45b94 <__alt_data_end+0xfffe0394>
   460a4:	8085883a 	add	r2,r16,r2
   460a8:	10c00117 	ldw	r3,4(r2)
   460ac:	81000317 	ldw	r4,12(r16)
   460b0:	81400217 	ldw	r5,8(r16)
   460b4:	18c00054 	ori	r3,r3,1
   460b8:	10c00115 	stw	r3,4(r2)
   460bc:	29000315 	stw	r4,12(r5)
   460c0:	21400215 	stw	r5,8(r4)
   460c4:	9009883a 	mov	r4,r18
   460c8:	004ea440 	call	4ea44 <__malloc_unlock>
   460cc:	80800204 	addi	r2,r16,8
   460d0:	003f2506 	br	45d68 <__alt_data_end+0xfffe0568>
   460d4:	12001704 	addi	r8,r2,92
   460d8:	11c016c4 	addi	r7,r2,91
   460dc:	4209883a 	add	r4,r8,r8
   460e0:	003e9606 	br	45b3c <__alt_data_end+0xfffe033c>
   460e4:	3804d1ba 	srli	r2,r7,6
   460e8:	11400e44 	addi	r5,r2,57
   460ec:	10c00e04 	addi	r3,r2,56
   460f0:	294b883a 	add	r5,r5,r5
   460f4:	003fbc06 	br	45fe8 <__alt_data_end+0xfffe07e8>
   460f8:	84ff5926 	beq	r16,r19,45e60 <__alt_data_end+0xfffe0660>
   460fc:	008001b4 	movhi	r2,6
   46100:	10a6bc04 	addi	r2,r2,-25872
   46104:	14000217 	ldw	r16,8(r2)
   46108:	00bfff04 	movi	r2,-4
   4610c:	80c00117 	ldw	r3,4(r16)
   46110:	1886703a 	and	r3,r3,r2
   46114:	003f9106 	br	45f5c <__alt_data_end+0xfffe075c>
   46118:	60800217 	ldw	r2,8(r12)
   4611c:	213fffc4 	addi	r4,r4,-1
   46120:	1300651e 	bne	r2,r12,462b8 <_malloc_r+0x7f4>
   46124:	208000cc 	andi	r2,r4,3
   46128:	633ffe04 	addi	r12,r12,-8
   4612c:	103ffa1e 	bne	r2,zero,46118 <__alt_data_end+0xfffe0918>
   46130:	98800117 	ldw	r2,4(r19)
   46134:	0146303a 	nor	r3,zero,r5
   46138:	1884703a 	and	r2,r3,r2
   4613c:	98800115 	stw	r2,4(r19)
   46140:	294b883a 	add	r5,r5,r5
   46144:	117f2836 	bltu	r2,r5,45de8 <__alt_data_end+0xfffe05e8>
   46148:	283f2726 	beq	r5,zero,45de8 <__alt_data_end+0xfffe05e8>
   4614c:	2886703a 	and	r3,r5,r2
   46150:	5809883a 	mov	r4,r11
   46154:	183ec31e 	bne	r3,zero,45c64 <__alt_data_end+0xfffe0464>
   46158:	294b883a 	add	r5,r5,r5
   4615c:	2886703a 	and	r3,r5,r2
   46160:	21000104 	addi	r4,r4,4
   46164:	183ffc26 	beq	r3,zero,46158 <__alt_data_end+0xfffe0958>
   46168:	003ebe06 	br	45c64 <__alt_data_end+0xfffe0464>
   4616c:	00c05504 	movi	r3,340
   46170:	18801236 	bltu	r3,r2,461bc <_malloc_r+0x6f8>
   46174:	8804d3fa 	srli	r2,r17,15
   46178:	12001e04 	addi	r8,r2,120
   4617c:	11c01dc4 	addi	r7,r2,119
   46180:	4209883a 	add	r4,r8,r8
   46184:	003e6d06 	br	45b3c <__alt_data_end+0xfffe033c>
   46188:	00c40004 	movi	r3,4096
   4618c:	003f4606 	br	45ea8 <__alt_data_end+0xfffe06a8>
   46190:	00800044 	movi	r2,1
   46194:	a0800115 	stw	r2,4(r20)
   46198:	003f7406 	br	45f6c <__alt_data_end+0xfffe076c>
   4619c:	1805d0ba 	srai	r2,r3,2
   461a0:	01c00044 	movi	r7,1
   461a4:	30c00117 	ldw	r3,4(r6)
   461a8:	388e983a 	sll	r7,r7,r2
   461ac:	2805883a 	mov	r2,r5
   461b0:	38c6b03a 	or	r3,r7,r3
   461b4:	30c00115 	stw	r3,4(r6)
   461b8:	003f9b06 	br	46028 <__alt_data_end+0xfffe0828>
   461bc:	00c15504 	movi	r3,1364
   461c0:	18801a36 	bltu	r3,r2,4622c <_malloc_r+0x768>
   461c4:	8804d4ba 	srli	r2,r17,18
   461c8:	12001f44 	addi	r8,r2,125
   461cc:	11c01f04 	addi	r7,r2,124
   461d0:	4209883a 	add	r4,r8,r8
   461d4:	003e5906 	br	45b3c <__alt_data_end+0xfffe033c>
   461d8:	ad400404 	addi	r21,r21,16
   461dc:	003f1706 	br	45e3c <__alt_data_end+0xfffe063c>
   461e0:	00c01504 	movi	r3,84
   461e4:	18802336 	bltu	r3,r2,46274 <_malloc_r+0x7b0>
   461e8:	3804d33a 	srli	r2,r7,12
   461ec:	11401bc4 	addi	r5,r2,111
   461f0:	10c01b84 	addi	r3,r2,110
   461f4:	294b883a 	add	r5,r5,r5
   461f8:	003f7b06 	br	45fe8 <__alt_data_end+0xfffe07e8>
   461fc:	9c000217 	ldw	r16,8(r19)
   46200:	00bfff04 	movi	r2,-4
   46204:	80c00117 	ldw	r3,4(r16)
   46208:	1886703a 	and	r3,r3,r2
   4620c:	003f5306 	br	45f5c <__alt_data_end+0xfffe075c>
   46210:	3083ffcc 	andi	r2,r6,4095
   46214:	103f181e 	bne	r2,zero,45e78 <__alt_data_end+0xfffe0678>
   46218:	99000217 	ldw	r4,8(r19)
   4621c:	b545883a 	add	r2,r22,r21
   46220:	10800054 	ori	r2,r2,1
   46224:	20800115 	stw	r2,4(r4)
   46228:	003f3e06 	br	45f24 <__alt_data_end+0xfffe0724>
   4622c:	01003f84 	movi	r4,254
   46230:	02001fc4 	movi	r8,127
   46234:	01c01f84 	movi	r7,126
   46238:	003e4006 	br	45b3c <__alt_data_end+0xfffe033c>
   4623c:	008001b4 	movhi	r2,6
   46240:	10ac4704 	addi	r2,r2,-20196
   46244:	15000015 	stw	r20,0(r2)
   46248:	003f1106 	br	45e90 <__alt_data_end+0xfffe0690>
   4624c:	00800044 	movi	r2,1
   46250:	002b883a 	mov	r21,zero
   46254:	003f1f06 	br	45ed4 <__alt_data_end+0xfffe06d4>
   46258:	81400204 	addi	r5,r16,8
   4625c:	9009883a 	mov	r4,r18
   46260:	00453940 	call	45394 <_free_r>
   46264:	008001b4 	movhi	r2,6
   46268:	10b37c04 	addi	r2,r2,-12816
   4626c:	10c00017 	ldw	r3,0(r2)
   46270:	003f2c06 	br	45f24 <__alt_data_end+0xfffe0724>
   46274:	00c05504 	movi	r3,340
   46278:	18800536 	bltu	r3,r2,46290 <_malloc_r+0x7cc>
   4627c:	3804d3fa 	srli	r2,r7,15
   46280:	11401e04 	addi	r5,r2,120
   46284:	10c01dc4 	addi	r3,r2,119
   46288:	294b883a 	add	r5,r5,r5
   4628c:	003f5606 	br	45fe8 <__alt_data_end+0xfffe07e8>
   46290:	00c15504 	movi	r3,1364
   46294:	18800536 	bltu	r3,r2,462ac <_malloc_r+0x7e8>
   46298:	3804d4ba 	srli	r2,r7,18
   4629c:	11401f44 	addi	r5,r2,125
   462a0:	10c01f04 	addi	r3,r2,124
   462a4:	294b883a 	add	r5,r5,r5
   462a8:	003f4f06 	br	45fe8 <__alt_data_end+0xfffe07e8>
   462ac:	01403f84 	movi	r5,254
   462b0:	00c01f84 	movi	r3,126
   462b4:	003f4c06 	br	45fe8 <__alt_data_end+0xfffe07e8>
   462b8:	98800117 	ldw	r2,4(r19)
   462bc:	003fa006 	br	46140 <__alt_data_end+0xfffe0940>
   462c0:	8808d0fa 	srli	r4,r17,3
   462c4:	20800044 	addi	r2,r4,1
   462c8:	1085883a 	add	r2,r2,r2
   462cc:	003e9006 	br	45d10 <__alt_data_end+0xfffe0510>

000462d0 <memchr>:
   462d0:	208000cc 	andi	r2,r4,3
   462d4:	280f883a 	mov	r7,r5
   462d8:	10003426 	beq	r2,zero,463ac <memchr+0xdc>
   462dc:	30bfffc4 	addi	r2,r6,-1
   462e0:	30001a26 	beq	r6,zero,4634c <memchr+0x7c>
   462e4:	20c00003 	ldbu	r3,0(r4)
   462e8:	29803fcc 	andi	r6,r5,255
   462ec:	30c0051e 	bne	r6,r3,46304 <memchr+0x34>
   462f0:	00001806 	br	46354 <memchr+0x84>
   462f4:	10001526 	beq	r2,zero,4634c <memchr+0x7c>
   462f8:	20c00003 	ldbu	r3,0(r4)
   462fc:	10bfffc4 	addi	r2,r2,-1
   46300:	30c01426 	beq	r6,r3,46354 <memchr+0x84>
   46304:	21000044 	addi	r4,r4,1
   46308:	20c000cc 	andi	r3,r4,3
   4630c:	183ff91e 	bne	r3,zero,462f4 <__alt_data_end+0xfffe0af4>
   46310:	020000c4 	movi	r8,3
   46314:	40801136 	bltu	r8,r2,4635c <memchr+0x8c>
   46318:	10000c26 	beq	r2,zero,4634c <memchr+0x7c>
   4631c:	20c00003 	ldbu	r3,0(r4)
   46320:	29403fcc 	andi	r5,r5,255
   46324:	28c00b26 	beq	r5,r3,46354 <memchr+0x84>
   46328:	20c00044 	addi	r3,r4,1
   4632c:	39803fcc 	andi	r6,r7,255
   46330:	2089883a 	add	r4,r4,r2
   46334:	00000306 	br	46344 <memchr+0x74>
   46338:	18c00044 	addi	r3,r3,1
   4633c:	197fffc3 	ldbu	r5,-1(r3)
   46340:	31400526 	beq	r6,r5,46358 <memchr+0x88>
   46344:	1805883a 	mov	r2,r3
   46348:	20fffb1e 	bne	r4,r3,46338 <__alt_data_end+0xfffe0b38>
   4634c:	0005883a 	mov	r2,zero
   46350:	f800283a 	ret
   46354:	2005883a 	mov	r2,r4
   46358:	f800283a 	ret
   4635c:	28c03fcc 	andi	r3,r5,255
   46360:	1812923a 	slli	r9,r3,8
   46364:	02ffbff4 	movhi	r11,65279
   46368:	02a02074 	movhi	r10,32897
   4636c:	48d2b03a 	or	r9,r9,r3
   46370:	4806943a 	slli	r3,r9,16
   46374:	5affbfc4 	addi	r11,r11,-257
   46378:	52a02004 	addi	r10,r10,-32640
   4637c:	48d2b03a 	or	r9,r9,r3
   46380:	20c00017 	ldw	r3,0(r4)
   46384:	48c6f03a 	xor	r3,r9,r3
   46388:	1acd883a 	add	r6,r3,r11
   4638c:	00c6303a 	nor	r3,zero,r3
   46390:	30c6703a 	and	r3,r6,r3
   46394:	1a86703a 	and	r3,r3,r10
   46398:	183fe01e 	bne	r3,zero,4631c <__alt_data_end+0xfffe0b1c>
   4639c:	10bfff04 	addi	r2,r2,-4
   463a0:	21000104 	addi	r4,r4,4
   463a4:	40bff636 	bltu	r8,r2,46380 <__alt_data_end+0xfffe0b80>
   463a8:	003fdb06 	br	46318 <__alt_data_end+0xfffe0b18>
   463ac:	3005883a 	mov	r2,r6
   463b0:	003fd706 	br	46310 <__alt_data_end+0xfffe0b10>

000463b4 <memcpy>:
   463b4:	defffd04 	addi	sp,sp,-12
   463b8:	dfc00215 	stw	ra,8(sp)
   463bc:	dc400115 	stw	r17,4(sp)
   463c0:	dc000015 	stw	r16,0(sp)
   463c4:	00c003c4 	movi	r3,15
   463c8:	2005883a 	mov	r2,r4
   463cc:	1980452e 	bgeu	r3,r6,464e4 <memcpy+0x130>
   463d0:	2906b03a 	or	r3,r5,r4
   463d4:	18c000cc 	andi	r3,r3,3
   463d8:	1800441e 	bne	r3,zero,464ec <memcpy+0x138>
   463dc:	347ffc04 	addi	r17,r6,-16
   463e0:	8822d13a 	srli	r17,r17,4
   463e4:	28c00104 	addi	r3,r5,4
   463e8:	23400104 	addi	r13,r4,4
   463ec:	8820913a 	slli	r16,r17,4
   463f0:	2b000204 	addi	r12,r5,8
   463f4:	22c00204 	addi	r11,r4,8
   463f8:	84000504 	addi	r16,r16,20
   463fc:	2a800304 	addi	r10,r5,12
   46400:	22400304 	addi	r9,r4,12
   46404:	2c21883a 	add	r16,r5,r16
   46408:	2811883a 	mov	r8,r5
   4640c:	200f883a 	mov	r7,r4
   46410:	41000017 	ldw	r4,0(r8)
   46414:	1fc00017 	ldw	ra,0(r3)
   46418:	63c00017 	ldw	r15,0(r12)
   4641c:	39000015 	stw	r4,0(r7)
   46420:	53800017 	ldw	r14,0(r10)
   46424:	6fc00015 	stw	ra,0(r13)
   46428:	5bc00015 	stw	r15,0(r11)
   4642c:	4b800015 	stw	r14,0(r9)
   46430:	18c00404 	addi	r3,r3,16
   46434:	39c00404 	addi	r7,r7,16
   46438:	42000404 	addi	r8,r8,16
   4643c:	6b400404 	addi	r13,r13,16
   46440:	63000404 	addi	r12,r12,16
   46444:	5ac00404 	addi	r11,r11,16
   46448:	52800404 	addi	r10,r10,16
   4644c:	4a400404 	addi	r9,r9,16
   46450:	1c3fef1e 	bne	r3,r16,46410 <__alt_data_end+0xfffe0c10>
   46454:	89c00044 	addi	r7,r17,1
   46458:	380e913a 	slli	r7,r7,4
   4645c:	310003cc 	andi	r4,r6,15
   46460:	02c000c4 	movi	r11,3
   46464:	11c7883a 	add	r3,r2,r7
   46468:	29cb883a 	add	r5,r5,r7
   4646c:	5900212e 	bgeu	r11,r4,464f4 <memcpy+0x140>
   46470:	1813883a 	mov	r9,r3
   46474:	2811883a 	mov	r8,r5
   46478:	200f883a 	mov	r7,r4
   4647c:	42800017 	ldw	r10,0(r8)
   46480:	4a400104 	addi	r9,r9,4
   46484:	39ffff04 	addi	r7,r7,-4
   46488:	4abfff15 	stw	r10,-4(r9)
   4648c:	42000104 	addi	r8,r8,4
   46490:	59fffa36 	bltu	r11,r7,4647c <__alt_data_end+0xfffe0c7c>
   46494:	213fff04 	addi	r4,r4,-4
   46498:	2008d0ba 	srli	r4,r4,2
   4649c:	318000cc 	andi	r6,r6,3
   464a0:	21000044 	addi	r4,r4,1
   464a4:	2109883a 	add	r4,r4,r4
   464a8:	2109883a 	add	r4,r4,r4
   464ac:	1907883a 	add	r3,r3,r4
   464b0:	290b883a 	add	r5,r5,r4
   464b4:	30000626 	beq	r6,zero,464d0 <memcpy+0x11c>
   464b8:	198d883a 	add	r6,r3,r6
   464bc:	29c00003 	ldbu	r7,0(r5)
   464c0:	18c00044 	addi	r3,r3,1
   464c4:	29400044 	addi	r5,r5,1
   464c8:	19ffffc5 	stb	r7,-1(r3)
   464cc:	19bffb1e 	bne	r3,r6,464bc <__alt_data_end+0xfffe0cbc>
   464d0:	dfc00217 	ldw	ra,8(sp)
   464d4:	dc400117 	ldw	r17,4(sp)
   464d8:	dc000017 	ldw	r16,0(sp)
   464dc:	dec00304 	addi	sp,sp,12
   464e0:	f800283a 	ret
   464e4:	2007883a 	mov	r3,r4
   464e8:	003ff206 	br	464b4 <__alt_data_end+0xfffe0cb4>
   464ec:	2007883a 	mov	r3,r4
   464f0:	003ff106 	br	464b8 <__alt_data_end+0xfffe0cb8>
   464f4:	200d883a 	mov	r6,r4
   464f8:	003fee06 	br	464b4 <__alt_data_end+0xfffe0cb4>

000464fc <memset>:
   464fc:	20c000cc 	andi	r3,r4,3
   46500:	2005883a 	mov	r2,r4
   46504:	18004426 	beq	r3,zero,46618 <memset+0x11c>
   46508:	31ffffc4 	addi	r7,r6,-1
   4650c:	30004026 	beq	r6,zero,46610 <memset+0x114>
   46510:	2813883a 	mov	r9,r5
   46514:	200d883a 	mov	r6,r4
   46518:	2007883a 	mov	r3,r4
   4651c:	00000406 	br	46530 <memset+0x34>
   46520:	3a3fffc4 	addi	r8,r7,-1
   46524:	31800044 	addi	r6,r6,1
   46528:	38003926 	beq	r7,zero,46610 <memset+0x114>
   4652c:	400f883a 	mov	r7,r8
   46530:	18c00044 	addi	r3,r3,1
   46534:	32400005 	stb	r9,0(r6)
   46538:	1a0000cc 	andi	r8,r3,3
   4653c:	403ff81e 	bne	r8,zero,46520 <__alt_data_end+0xfffe0d20>
   46540:	010000c4 	movi	r4,3
   46544:	21c02d2e 	bgeu	r4,r7,465fc <memset+0x100>
   46548:	29003fcc 	andi	r4,r5,255
   4654c:	200c923a 	slli	r6,r4,8
   46550:	3108b03a 	or	r4,r6,r4
   46554:	200c943a 	slli	r6,r4,16
   46558:	218cb03a 	or	r6,r4,r6
   4655c:	010003c4 	movi	r4,15
   46560:	21c0182e 	bgeu	r4,r7,465c4 <memset+0xc8>
   46564:	3b3ffc04 	addi	r12,r7,-16
   46568:	6018d13a 	srli	r12,r12,4
   4656c:	1a000104 	addi	r8,r3,4
   46570:	1ac00204 	addi	r11,r3,8
   46574:	6008913a 	slli	r4,r12,4
   46578:	1a800304 	addi	r10,r3,12
   4657c:	1813883a 	mov	r9,r3
   46580:	21000504 	addi	r4,r4,20
   46584:	1909883a 	add	r4,r3,r4
   46588:	49800015 	stw	r6,0(r9)
   4658c:	41800015 	stw	r6,0(r8)
   46590:	59800015 	stw	r6,0(r11)
   46594:	51800015 	stw	r6,0(r10)
   46598:	42000404 	addi	r8,r8,16
   4659c:	4a400404 	addi	r9,r9,16
   465a0:	5ac00404 	addi	r11,r11,16
   465a4:	52800404 	addi	r10,r10,16
   465a8:	413ff71e 	bne	r8,r4,46588 <__alt_data_end+0xfffe0d88>
   465ac:	63000044 	addi	r12,r12,1
   465b0:	6018913a 	slli	r12,r12,4
   465b4:	39c003cc 	andi	r7,r7,15
   465b8:	010000c4 	movi	r4,3
   465bc:	1b07883a 	add	r3,r3,r12
   465c0:	21c00e2e 	bgeu	r4,r7,465fc <memset+0x100>
   465c4:	1813883a 	mov	r9,r3
   465c8:	3811883a 	mov	r8,r7
   465cc:	010000c4 	movi	r4,3
   465d0:	49800015 	stw	r6,0(r9)
   465d4:	423fff04 	addi	r8,r8,-4
   465d8:	4a400104 	addi	r9,r9,4
   465dc:	223ffc36 	bltu	r4,r8,465d0 <__alt_data_end+0xfffe0dd0>
   465e0:	393fff04 	addi	r4,r7,-4
   465e4:	2008d0ba 	srli	r4,r4,2
   465e8:	39c000cc 	andi	r7,r7,3
   465ec:	21000044 	addi	r4,r4,1
   465f0:	2109883a 	add	r4,r4,r4
   465f4:	2109883a 	add	r4,r4,r4
   465f8:	1907883a 	add	r3,r3,r4
   465fc:	38000526 	beq	r7,zero,46614 <memset+0x118>
   46600:	19cf883a 	add	r7,r3,r7
   46604:	19400005 	stb	r5,0(r3)
   46608:	18c00044 	addi	r3,r3,1
   4660c:	38fffd1e 	bne	r7,r3,46604 <__alt_data_end+0xfffe0e04>
   46610:	f800283a 	ret
   46614:	f800283a 	ret
   46618:	2007883a 	mov	r3,r4
   4661c:	300f883a 	mov	r7,r6
   46620:	003fc706 	br	46540 <__alt_data_end+0xfffe0d40>

00046624 <_Balloc>:
   46624:	20801317 	ldw	r2,76(r4)
   46628:	defffc04 	addi	sp,sp,-16
   4662c:	dc400115 	stw	r17,4(sp)
   46630:	dc000015 	stw	r16,0(sp)
   46634:	dfc00315 	stw	ra,12(sp)
   46638:	dc800215 	stw	r18,8(sp)
   4663c:	2023883a 	mov	r17,r4
   46640:	2821883a 	mov	r16,r5
   46644:	10000f26 	beq	r2,zero,46684 <_Balloc+0x60>
   46648:	8407883a 	add	r3,r16,r16
   4664c:	18c7883a 	add	r3,r3,r3
   46650:	10c7883a 	add	r3,r2,r3
   46654:	18800017 	ldw	r2,0(r3)
   46658:	10001126 	beq	r2,zero,466a0 <_Balloc+0x7c>
   4665c:	11000017 	ldw	r4,0(r2)
   46660:	19000015 	stw	r4,0(r3)
   46664:	10000415 	stw	zero,16(r2)
   46668:	10000315 	stw	zero,12(r2)
   4666c:	dfc00317 	ldw	ra,12(sp)
   46670:	dc800217 	ldw	r18,8(sp)
   46674:	dc400117 	ldw	r17,4(sp)
   46678:	dc000017 	ldw	r16,0(sp)
   4667c:	dec00404 	addi	sp,sp,16
   46680:	f800283a 	ret
   46684:	01800844 	movi	r6,33
   46688:	01400104 	movi	r5,4
   4668c:	00492000 	call	49200 <_calloc_r>
   46690:	88801315 	stw	r2,76(r17)
   46694:	103fec1e 	bne	r2,zero,46648 <__alt_data_end+0xfffe0e48>
   46698:	0005883a 	mov	r2,zero
   4669c:	003ff306 	br	4666c <__alt_data_end+0xfffe0e6c>
   466a0:	01400044 	movi	r5,1
   466a4:	2c24983a 	sll	r18,r5,r16
   466a8:	8809883a 	mov	r4,r17
   466ac:	91800144 	addi	r6,r18,5
   466b0:	318d883a 	add	r6,r6,r6
   466b4:	318d883a 	add	r6,r6,r6
   466b8:	00492000 	call	49200 <_calloc_r>
   466bc:	103ff626 	beq	r2,zero,46698 <__alt_data_end+0xfffe0e98>
   466c0:	14000115 	stw	r16,4(r2)
   466c4:	14800215 	stw	r18,8(r2)
   466c8:	003fe606 	br	46664 <__alt_data_end+0xfffe0e64>

000466cc <_Bfree>:
   466cc:	28000826 	beq	r5,zero,466f0 <_Bfree+0x24>
   466d0:	28c00117 	ldw	r3,4(r5)
   466d4:	20801317 	ldw	r2,76(r4)
   466d8:	18c7883a 	add	r3,r3,r3
   466dc:	18c7883a 	add	r3,r3,r3
   466e0:	10c5883a 	add	r2,r2,r3
   466e4:	10c00017 	ldw	r3,0(r2)
   466e8:	28c00015 	stw	r3,0(r5)
   466ec:	11400015 	stw	r5,0(r2)
   466f0:	f800283a 	ret

000466f4 <__multadd>:
   466f4:	defff704 	addi	sp,sp,-36
   466f8:	dc800215 	stw	r18,8(sp)
   466fc:	2c800417 	ldw	r18,16(r5)
   46700:	dd800615 	stw	r22,24(sp)
   46704:	dd400515 	stw	r21,20(sp)
   46708:	dd000415 	stw	r20,16(sp)
   4670c:	dcc00315 	stw	r19,12(sp)
   46710:	dc400115 	stw	r17,4(sp)
   46714:	dc000015 	stw	r16,0(sp)
   46718:	dfc00815 	stw	ra,32(sp)
   4671c:	ddc00715 	stw	r23,28(sp)
   46720:	2827883a 	mov	r19,r5
   46724:	2029883a 	mov	r20,r4
   46728:	3023883a 	mov	r17,r6
   4672c:	3821883a 	mov	r16,r7
   46730:	2d400504 	addi	r21,r5,20
   46734:	002d883a 	mov	r22,zero
   46738:	adc00017 	ldw	r23,0(r21)
   4673c:	880b883a 	mov	r5,r17
   46740:	ad400104 	addi	r21,r21,4
   46744:	b93fffcc 	andi	r4,r23,65535
   46748:	00407040 	call	40704 <__mulsi3>
   4674c:	b808d43a 	srli	r4,r23,16
   46750:	880b883a 	mov	r5,r17
   46754:	1421883a 	add	r16,r2,r16
   46758:	00407040 	call	40704 <__mulsi3>
   4675c:	800ed43a 	srli	r7,r16,16
   46760:	80ffffcc 	andi	r3,r16,65535
   46764:	b5800044 	addi	r22,r22,1
   46768:	11c5883a 	add	r2,r2,r7
   4676c:	100e943a 	slli	r7,r2,16
   46770:	1020d43a 	srli	r16,r2,16
   46774:	38c7883a 	add	r3,r7,r3
   46778:	a8ffff15 	stw	r3,-4(r21)
   4677c:	b4bfee16 	blt	r22,r18,46738 <__alt_data_end+0xfffe0f38>
   46780:	80000926 	beq	r16,zero,467a8 <__multadd+0xb4>
   46784:	98800217 	ldw	r2,8(r19)
   46788:	9080130e 	bge	r18,r2,467d8 <__multadd+0xe4>
   4678c:	90800144 	addi	r2,r18,5
   46790:	1085883a 	add	r2,r2,r2
   46794:	1085883a 	add	r2,r2,r2
   46798:	9885883a 	add	r2,r19,r2
   4679c:	14000015 	stw	r16,0(r2)
   467a0:	94800044 	addi	r18,r18,1
   467a4:	9c800415 	stw	r18,16(r19)
   467a8:	9805883a 	mov	r2,r19
   467ac:	dfc00817 	ldw	ra,32(sp)
   467b0:	ddc00717 	ldw	r23,28(sp)
   467b4:	dd800617 	ldw	r22,24(sp)
   467b8:	dd400517 	ldw	r21,20(sp)
   467bc:	dd000417 	ldw	r20,16(sp)
   467c0:	dcc00317 	ldw	r19,12(sp)
   467c4:	dc800217 	ldw	r18,8(sp)
   467c8:	dc400117 	ldw	r17,4(sp)
   467cc:	dc000017 	ldw	r16,0(sp)
   467d0:	dec00904 	addi	sp,sp,36
   467d4:	f800283a 	ret
   467d8:	99400117 	ldw	r5,4(r19)
   467dc:	a009883a 	mov	r4,r20
   467e0:	29400044 	addi	r5,r5,1
   467e4:	00466240 	call	46624 <_Balloc>
   467e8:	99800417 	ldw	r6,16(r19)
   467ec:	99400304 	addi	r5,r19,12
   467f0:	11000304 	addi	r4,r2,12
   467f4:	31800084 	addi	r6,r6,2
   467f8:	318d883a 	add	r6,r6,r6
   467fc:	318d883a 	add	r6,r6,r6
   46800:	1023883a 	mov	r17,r2
   46804:	00463b40 	call	463b4 <memcpy>
   46808:	98000a26 	beq	r19,zero,46834 <__multadd+0x140>
   4680c:	98c00117 	ldw	r3,4(r19)
   46810:	a0801317 	ldw	r2,76(r20)
   46814:	18c7883a 	add	r3,r3,r3
   46818:	18c7883a 	add	r3,r3,r3
   4681c:	10c5883a 	add	r2,r2,r3
   46820:	10c00017 	ldw	r3,0(r2)
   46824:	98c00015 	stw	r3,0(r19)
   46828:	14c00015 	stw	r19,0(r2)
   4682c:	8827883a 	mov	r19,r17
   46830:	003fd606 	br	4678c <__alt_data_end+0xfffe0f8c>
   46834:	8827883a 	mov	r19,r17
   46838:	003fd406 	br	4678c <__alt_data_end+0xfffe0f8c>

0004683c <__s2b>:
   4683c:	defff904 	addi	sp,sp,-28
   46840:	dc400115 	stw	r17,4(sp)
   46844:	dc000015 	stw	r16,0(sp)
   46848:	2023883a 	mov	r17,r4
   4684c:	2821883a 	mov	r16,r5
   46850:	39000204 	addi	r4,r7,8
   46854:	01400244 	movi	r5,9
   46858:	dcc00315 	stw	r19,12(sp)
   4685c:	dc800215 	stw	r18,8(sp)
   46860:	dfc00615 	stw	ra,24(sp)
   46864:	dd400515 	stw	r21,20(sp)
   46868:	dd000415 	stw	r20,16(sp)
   4686c:	3825883a 	mov	r18,r7
   46870:	3027883a 	mov	r19,r6
   46874:	004b1e00 	call	4b1e0 <__divsi3>
   46878:	00c00044 	movi	r3,1
   4687c:	000b883a 	mov	r5,zero
   46880:	1880030e 	bge	r3,r2,46890 <__s2b+0x54>
   46884:	18c7883a 	add	r3,r3,r3
   46888:	29400044 	addi	r5,r5,1
   4688c:	18bffd16 	blt	r3,r2,46884 <__alt_data_end+0xfffe1084>
   46890:	8809883a 	mov	r4,r17
   46894:	00466240 	call	46624 <_Balloc>
   46898:	d8c00717 	ldw	r3,28(sp)
   4689c:	10c00515 	stw	r3,20(r2)
   468a0:	00c00044 	movi	r3,1
   468a4:	10c00415 	stw	r3,16(r2)
   468a8:	00c00244 	movi	r3,9
   468ac:	1cc0210e 	bge	r3,r19,46934 <__s2b+0xf8>
   468b0:	80eb883a 	add	r21,r16,r3
   468b4:	a829883a 	mov	r20,r21
   468b8:	84e1883a 	add	r16,r16,r19
   468bc:	a1c00007 	ldb	r7,0(r20)
   468c0:	01800284 	movi	r6,10
   468c4:	a5000044 	addi	r20,r20,1
   468c8:	100b883a 	mov	r5,r2
   468cc:	39fff404 	addi	r7,r7,-48
   468d0:	8809883a 	mov	r4,r17
   468d4:	00466f40 	call	466f4 <__multadd>
   468d8:	a43ff81e 	bne	r20,r16,468bc <__alt_data_end+0xfffe10bc>
   468dc:	ace1883a 	add	r16,r21,r19
   468e0:	843ffe04 	addi	r16,r16,-8
   468e4:	9c800a0e 	bge	r19,r18,46910 <__s2b+0xd4>
   468e8:	94e5c83a 	sub	r18,r18,r19
   468ec:	84a5883a 	add	r18,r16,r18
   468f0:	81c00007 	ldb	r7,0(r16)
   468f4:	01800284 	movi	r6,10
   468f8:	84000044 	addi	r16,r16,1
   468fc:	100b883a 	mov	r5,r2
   46900:	39fff404 	addi	r7,r7,-48
   46904:	8809883a 	mov	r4,r17
   46908:	00466f40 	call	466f4 <__multadd>
   4690c:	84bff81e 	bne	r16,r18,468f0 <__alt_data_end+0xfffe10f0>
   46910:	dfc00617 	ldw	ra,24(sp)
   46914:	dd400517 	ldw	r21,20(sp)
   46918:	dd000417 	ldw	r20,16(sp)
   4691c:	dcc00317 	ldw	r19,12(sp)
   46920:	dc800217 	ldw	r18,8(sp)
   46924:	dc400117 	ldw	r17,4(sp)
   46928:	dc000017 	ldw	r16,0(sp)
   4692c:	dec00704 	addi	sp,sp,28
   46930:	f800283a 	ret
   46934:	84000284 	addi	r16,r16,10
   46938:	1827883a 	mov	r19,r3
   4693c:	003fe906 	br	468e4 <__alt_data_end+0xfffe10e4>

00046940 <__hi0bits>:
   46940:	20bfffec 	andhi	r2,r4,65535
   46944:	1000141e 	bne	r2,zero,46998 <__hi0bits+0x58>
   46948:	2008943a 	slli	r4,r4,16
   4694c:	00800404 	movi	r2,16
   46950:	20ffc02c 	andhi	r3,r4,65280
   46954:	1800021e 	bne	r3,zero,46960 <__hi0bits+0x20>
   46958:	2008923a 	slli	r4,r4,8
   4695c:	10800204 	addi	r2,r2,8
   46960:	20fc002c 	andhi	r3,r4,61440
   46964:	1800021e 	bne	r3,zero,46970 <__hi0bits+0x30>
   46968:	2008913a 	slli	r4,r4,4
   4696c:	10800104 	addi	r2,r2,4
   46970:	20f0002c 	andhi	r3,r4,49152
   46974:	1800031e 	bne	r3,zero,46984 <__hi0bits+0x44>
   46978:	2109883a 	add	r4,r4,r4
   4697c:	10800084 	addi	r2,r2,2
   46980:	2109883a 	add	r4,r4,r4
   46984:	20000316 	blt	r4,zero,46994 <__hi0bits+0x54>
   46988:	2110002c 	andhi	r4,r4,16384
   4698c:	2000041e 	bne	r4,zero,469a0 <__hi0bits+0x60>
   46990:	00800804 	movi	r2,32
   46994:	f800283a 	ret
   46998:	0005883a 	mov	r2,zero
   4699c:	003fec06 	br	46950 <__alt_data_end+0xfffe1150>
   469a0:	10800044 	addi	r2,r2,1
   469a4:	f800283a 	ret

000469a8 <__lo0bits>:
   469a8:	20c00017 	ldw	r3,0(r4)
   469ac:	188001cc 	andi	r2,r3,7
   469b0:	10000826 	beq	r2,zero,469d4 <__lo0bits+0x2c>
   469b4:	1880004c 	andi	r2,r3,1
   469b8:	1000211e 	bne	r2,zero,46a40 <__lo0bits+0x98>
   469bc:	1880008c 	andi	r2,r3,2
   469c0:	1000211e 	bne	r2,zero,46a48 <__lo0bits+0xa0>
   469c4:	1806d0ba 	srli	r3,r3,2
   469c8:	00800084 	movi	r2,2
   469cc:	20c00015 	stw	r3,0(r4)
   469d0:	f800283a 	ret
   469d4:	18bfffcc 	andi	r2,r3,65535
   469d8:	10001326 	beq	r2,zero,46a28 <__lo0bits+0x80>
   469dc:	0005883a 	mov	r2,zero
   469e0:	19403fcc 	andi	r5,r3,255
   469e4:	2800021e 	bne	r5,zero,469f0 <__lo0bits+0x48>
   469e8:	1806d23a 	srli	r3,r3,8
   469ec:	10800204 	addi	r2,r2,8
   469f0:	194003cc 	andi	r5,r3,15
   469f4:	2800021e 	bne	r5,zero,46a00 <__lo0bits+0x58>
   469f8:	1806d13a 	srli	r3,r3,4
   469fc:	10800104 	addi	r2,r2,4
   46a00:	194000cc 	andi	r5,r3,3
   46a04:	2800021e 	bne	r5,zero,46a10 <__lo0bits+0x68>
   46a08:	1806d0ba 	srli	r3,r3,2
   46a0c:	10800084 	addi	r2,r2,2
   46a10:	1940004c 	andi	r5,r3,1
   46a14:	2800081e 	bne	r5,zero,46a38 <__lo0bits+0x90>
   46a18:	1806d07a 	srli	r3,r3,1
   46a1c:	1800051e 	bne	r3,zero,46a34 <__lo0bits+0x8c>
   46a20:	00800804 	movi	r2,32
   46a24:	f800283a 	ret
   46a28:	1806d43a 	srli	r3,r3,16
   46a2c:	00800404 	movi	r2,16
   46a30:	003feb06 	br	469e0 <__alt_data_end+0xfffe11e0>
   46a34:	10800044 	addi	r2,r2,1
   46a38:	20c00015 	stw	r3,0(r4)
   46a3c:	f800283a 	ret
   46a40:	0005883a 	mov	r2,zero
   46a44:	f800283a 	ret
   46a48:	1806d07a 	srli	r3,r3,1
   46a4c:	00800044 	movi	r2,1
   46a50:	20c00015 	stw	r3,0(r4)
   46a54:	f800283a 	ret

00046a58 <__i2b>:
   46a58:	defffd04 	addi	sp,sp,-12
   46a5c:	dc000015 	stw	r16,0(sp)
   46a60:	04000044 	movi	r16,1
   46a64:	dc400115 	stw	r17,4(sp)
   46a68:	2823883a 	mov	r17,r5
   46a6c:	800b883a 	mov	r5,r16
   46a70:	dfc00215 	stw	ra,8(sp)
   46a74:	00466240 	call	46624 <_Balloc>
   46a78:	14400515 	stw	r17,20(r2)
   46a7c:	14000415 	stw	r16,16(r2)
   46a80:	dfc00217 	ldw	ra,8(sp)
   46a84:	dc400117 	ldw	r17,4(sp)
   46a88:	dc000017 	ldw	r16,0(sp)
   46a8c:	dec00304 	addi	sp,sp,12
   46a90:	f800283a 	ret

00046a94 <__multiply>:
   46a94:	deffef04 	addi	sp,sp,-68
   46a98:	dc400815 	stw	r17,32(sp)
   46a9c:	dc000715 	stw	r16,28(sp)
   46aa0:	34400417 	ldw	r17,16(r6)
   46aa4:	2c000417 	ldw	r16,16(r5)
   46aa8:	dd800d15 	stw	r22,52(sp)
   46aac:	dc800915 	stw	r18,36(sp)
   46ab0:	dfc01015 	stw	ra,64(sp)
   46ab4:	df000f15 	stw	fp,60(sp)
   46ab8:	ddc00e15 	stw	r23,56(sp)
   46abc:	dd400c15 	stw	r21,48(sp)
   46ac0:	dd000b15 	stw	r20,44(sp)
   46ac4:	dcc00a15 	stw	r19,40(sp)
   46ac8:	2825883a 	mov	r18,r5
   46acc:	302d883a 	mov	r22,r6
   46ad0:	8440050e 	bge	r16,r17,46ae8 <__multiply+0x54>
   46ad4:	8007883a 	mov	r3,r16
   46ad8:	3025883a 	mov	r18,r6
   46adc:	8821883a 	mov	r16,r17
   46ae0:	282d883a 	mov	r22,r5
   46ae4:	1823883a 	mov	r17,r3
   46ae8:	90800217 	ldw	r2,8(r18)
   46aec:	8447883a 	add	r3,r16,r17
   46af0:	d8c00215 	stw	r3,8(sp)
   46af4:	91400117 	ldw	r5,4(r18)
   46af8:	10c0010e 	bge	r2,r3,46b00 <__multiply+0x6c>
   46afc:	29400044 	addi	r5,r5,1
   46b00:	00466240 	call	46624 <_Balloc>
   46b04:	d8c00217 	ldw	r3,8(sp)
   46b08:	d8800615 	stw	r2,24(sp)
   46b0c:	18eb883a 	add	r21,r3,r3
   46b10:	ad6b883a 	add	r21,r21,r21
   46b14:	10c00504 	addi	r3,r2,20
   46b18:	1d6b883a 	add	r21,r3,r21
   46b1c:	d8c00115 	stw	r3,4(sp)
   46b20:	dd400315 	stw	r21,12(sp)
   46b24:	1805883a 	mov	r2,r3
   46b28:	1d40042e 	bgeu	r3,r21,46b3c <__multiply+0xa8>
   46b2c:	d8c00317 	ldw	r3,12(sp)
   46b30:	10000015 	stw	zero,0(r2)
   46b34:	10800104 	addi	r2,r2,4
   46b38:	10fffc36 	bltu	r2,r3,46b2c <__alt_data_end+0xfffe132c>
   46b3c:	8c63883a 	add	r17,r17,r17
   46b40:	b5800504 	addi	r22,r22,20
   46b44:	8c63883a 	add	r17,r17,r17
   46b48:	94800504 	addi	r18,r18,20
   46b4c:	8421883a 	add	r16,r16,r16
   46b50:	b463883a 	add	r17,r22,r17
   46b54:	8421883a 	add	r16,r16,r16
   46b58:	dd800015 	stw	r22,0(sp)
   46b5c:	dc800415 	stw	r18,16(sp)
   46b60:	dc400515 	stw	r17,20(sp)
   46b64:	9429883a 	add	r20,r18,r16
   46b68:	b4404f2e 	bgeu	r22,r17,46ca8 <__multiply+0x214>
   46b6c:	d8c00017 	ldw	r3,0(sp)
   46b70:	1c800017 	ldw	r18,0(r3)
   46b74:	947fffcc 	andi	r17,r18,65535
   46b78:	88001e26 	beq	r17,zero,46bf4 <__multiply+0x160>
   46b7c:	dd800117 	ldw	r22,4(sp)
   46b80:	dd400417 	ldw	r21,16(sp)
   46b84:	0027883a 	mov	r19,zero
   46b88:	ac800017 	ldw	r18,0(r21)
   46b8c:	b4000017 	ldw	r16,0(r22)
   46b90:	880b883a 	mov	r5,r17
   46b94:	913fffcc 	andi	r4,r18,65535
   46b98:	00407040 	call	40704 <__mulsi3>
   46b9c:	9008d43a 	srli	r4,r18,16
   46ba0:	84bfffcc 	andi	r18,r16,65535
   46ba4:	1485883a 	add	r2,r2,r18
   46ba8:	14e5883a 	add	r18,r2,r19
   46bac:	8020d43a 	srli	r16,r16,16
   46bb0:	9026d43a 	srli	r19,r18,16
   46bb4:	880b883a 	mov	r5,r17
   46bb8:	00407040 	call	40704 <__mulsi3>
   46bbc:	1405883a 	add	r2,r2,r16
   46bc0:	14e1883a 	add	r16,r2,r19
   46bc4:	90ffffcc 	andi	r3,r18,65535
   46bc8:	8024943a 	slli	r18,r16,16
   46bcc:	ad400104 	addi	r21,r21,4
   46bd0:	b005883a 	mov	r2,r22
   46bd4:	90c6b03a 	or	r3,r18,r3
   46bd8:	b0c00015 	stw	r3,0(r22)
   46bdc:	8026d43a 	srli	r19,r16,16
   46be0:	b5800104 	addi	r22,r22,4
   46be4:	ad3fe836 	bltu	r21,r20,46b88 <__alt_data_end+0xfffe1388>
   46be8:	d8c00017 	ldw	r3,0(sp)
   46bec:	14c00115 	stw	r19,4(r2)
   46bf0:	1c800017 	ldw	r18,0(r3)
   46bf4:	9024d43a 	srli	r18,r18,16
   46bf8:	90002226 	beq	r18,zero,46c84 <__multiply+0x1f0>
   46bfc:	d8c00117 	ldw	r3,4(sp)
   46c00:	dd800417 	ldw	r22,16(sp)
   46c04:	002f883a 	mov	r23,zero
   46c08:	1f000017 	ldw	fp,0(r3)
   46c0c:	1823883a 	mov	r17,r3
   46c10:	182b883a 	mov	r21,r3
   46c14:	e021883a 	mov	r16,fp
   46c18:	00000106 	br	46c20 <__multiply+0x18c>
   46c1c:	982b883a 	mov	r21,r19
   46c20:	b100000b 	ldhu	r4,0(r22)
   46c24:	8020d43a 	srli	r16,r16,16
   46c28:	900b883a 	mov	r5,r18
   46c2c:	00407040 	call	40704 <__mulsi3>
   46c30:	1405883a 	add	r2,r2,r16
   46c34:	15ef883a 	add	r23,r2,r23
   46c38:	b804943a 	slli	r2,r23,16
   46c3c:	e0ffffcc 	andi	r3,fp,65535
   46c40:	8c400104 	addi	r17,r17,4
   46c44:	10c6b03a 	or	r3,r2,r3
   46c48:	88ffff15 	stw	r3,-4(r17)
   46c4c:	b5800104 	addi	r22,r22,4
   46c50:	b13fff17 	ldw	r4,-4(r22)
   46c54:	acc00104 	addi	r19,r21,4
   46c58:	900b883a 	mov	r5,r18
   46c5c:	2008d43a 	srli	r4,r4,16
   46c60:	9c000017 	ldw	r16,0(r19)
   46c64:	00407040 	call	40704 <__mulsi3>
   46c68:	b806d43a 	srli	r3,r23,16
   46c6c:	813fffcc 	andi	r4,r16,65535
   46c70:	1105883a 	add	r2,r2,r4
   46c74:	10f9883a 	add	fp,r2,r3
   46c78:	e02ed43a 	srli	r23,fp,16
   46c7c:	b53fe736 	bltu	r22,r20,46c1c <__alt_data_end+0xfffe141c>
   46c80:	af000115 	stw	fp,4(r21)
   46c84:	d8c00017 	ldw	r3,0(sp)
   46c88:	d9000517 	ldw	r4,20(sp)
   46c8c:	18c00104 	addi	r3,r3,4
   46c90:	d8c00015 	stw	r3,0(sp)
   46c94:	d8c00117 	ldw	r3,4(sp)
   46c98:	18c00104 	addi	r3,r3,4
   46c9c:	d8c00115 	stw	r3,4(sp)
   46ca0:	d8c00017 	ldw	r3,0(sp)
   46ca4:	193fb136 	bltu	r3,r4,46b6c <__alt_data_end+0xfffe136c>
   46ca8:	d8c00217 	ldw	r3,8(sp)
   46cac:	00c00c0e 	bge	zero,r3,46ce0 <__multiply+0x24c>
   46cb0:	d8c00317 	ldw	r3,12(sp)
   46cb4:	18bfff17 	ldw	r2,-4(r3)
   46cb8:	1d7fff04 	addi	r21,r3,-4
   46cbc:	10000326 	beq	r2,zero,46ccc <__multiply+0x238>
   46cc0:	00000706 	br	46ce0 <__multiply+0x24c>
   46cc4:	a8800017 	ldw	r2,0(r21)
   46cc8:	1000051e 	bne	r2,zero,46ce0 <__multiply+0x24c>
   46ccc:	d8c00217 	ldw	r3,8(sp)
   46cd0:	ad7fff04 	addi	r21,r21,-4
   46cd4:	18ffffc4 	addi	r3,r3,-1
   46cd8:	d8c00215 	stw	r3,8(sp)
   46cdc:	183ff91e 	bne	r3,zero,46cc4 <__alt_data_end+0xfffe14c4>
   46ce0:	d8c00617 	ldw	r3,24(sp)
   46ce4:	d9000217 	ldw	r4,8(sp)
   46ce8:	1805883a 	mov	r2,r3
   46cec:	19000415 	stw	r4,16(r3)
   46cf0:	dfc01017 	ldw	ra,64(sp)
   46cf4:	df000f17 	ldw	fp,60(sp)
   46cf8:	ddc00e17 	ldw	r23,56(sp)
   46cfc:	dd800d17 	ldw	r22,52(sp)
   46d00:	dd400c17 	ldw	r21,48(sp)
   46d04:	dd000b17 	ldw	r20,44(sp)
   46d08:	dcc00a17 	ldw	r19,40(sp)
   46d0c:	dc800917 	ldw	r18,36(sp)
   46d10:	dc400817 	ldw	r17,32(sp)
   46d14:	dc000717 	ldw	r16,28(sp)
   46d18:	dec01104 	addi	sp,sp,68
   46d1c:	f800283a 	ret

00046d20 <__pow5mult>:
   46d20:	defffa04 	addi	sp,sp,-24
   46d24:	dcc00315 	stw	r19,12(sp)
   46d28:	dc000015 	stw	r16,0(sp)
   46d2c:	dfc00515 	stw	ra,20(sp)
   46d30:	dd000415 	stw	r20,16(sp)
   46d34:	dc800215 	stw	r18,8(sp)
   46d38:	dc400115 	stw	r17,4(sp)
   46d3c:	308000cc 	andi	r2,r6,3
   46d40:	3021883a 	mov	r16,r6
   46d44:	2027883a 	mov	r19,r4
   46d48:	10002f1e 	bne	r2,zero,46e08 <__pow5mult+0xe8>
   46d4c:	2825883a 	mov	r18,r5
   46d50:	8021d0ba 	srai	r16,r16,2
   46d54:	80001a26 	beq	r16,zero,46dc0 <__pow5mult+0xa0>
   46d58:	9c401217 	ldw	r17,72(r19)
   46d5c:	8800061e 	bne	r17,zero,46d78 <__pow5mult+0x58>
   46d60:	00003406 	br	46e34 <__pow5mult+0x114>
   46d64:	8021d07a 	srai	r16,r16,1
   46d68:	80001526 	beq	r16,zero,46dc0 <__pow5mult+0xa0>
   46d6c:	88800017 	ldw	r2,0(r17)
   46d70:	10001c26 	beq	r2,zero,46de4 <__pow5mult+0xc4>
   46d74:	1023883a 	mov	r17,r2
   46d78:	8080004c 	andi	r2,r16,1
   46d7c:	103ff926 	beq	r2,zero,46d64 <__alt_data_end+0xfffe1564>
   46d80:	880d883a 	mov	r6,r17
   46d84:	900b883a 	mov	r5,r18
   46d88:	9809883a 	mov	r4,r19
   46d8c:	0046a940 	call	46a94 <__multiply>
   46d90:	90001b26 	beq	r18,zero,46e00 <__pow5mult+0xe0>
   46d94:	91000117 	ldw	r4,4(r18)
   46d98:	98c01317 	ldw	r3,76(r19)
   46d9c:	8021d07a 	srai	r16,r16,1
   46da0:	2109883a 	add	r4,r4,r4
   46da4:	2109883a 	add	r4,r4,r4
   46da8:	1907883a 	add	r3,r3,r4
   46dac:	19000017 	ldw	r4,0(r3)
   46db0:	91000015 	stw	r4,0(r18)
   46db4:	1c800015 	stw	r18,0(r3)
   46db8:	1025883a 	mov	r18,r2
   46dbc:	803feb1e 	bne	r16,zero,46d6c <__alt_data_end+0xfffe156c>
   46dc0:	9005883a 	mov	r2,r18
   46dc4:	dfc00517 	ldw	ra,20(sp)
   46dc8:	dd000417 	ldw	r20,16(sp)
   46dcc:	dcc00317 	ldw	r19,12(sp)
   46dd0:	dc800217 	ldw	r18,8(sp)
   46dd4:	dc400117 	ldw	r17,4(sp)
   46dd8:	dc000017 	ldw	r16,0(sp)
   46ddc:	dec00604 	addi	sp,sp,24
   46de0:	f800283a 	ret
   46de4:	880d883a 	mov	r6,r17
   46de8:	880b883a 	mov	r5,r17
   46dec:	9809883a 	mov	r4,r19
   46df0:	0046a940 	call	46a94 <__multiply>
   46df4:	88800015 	stw	r2,0(r17)
   46df8:	10000015 	stw	zero,0(r2)
   46dfc:	003fdd06 	br	46d74 <__alt_data_end+0xfffe1574>
   46e00:	1025883a 	mov	r18,r2
   46e04:	003fd706 	br	46d64 <__alt_data_end+0xfffe1564>
   46e08:	10bfffc4 	addi	r2,r2,-1
   46e0c:	1085883a 	add	r2,r2,r2
   46e10:	00c001b4 	movhi	r3,6
   46e14:	18e4f004 	addi	r3,r3,-27712
   46e18:	1085883a 	add	r2,r2,r2
   46e1c:	1885883a 	add	r2,r3,r2
   46e20:	11800017 	ldw	r6,0(r2)
   46e24:	000f883a 	mov	r7,zero
   46e28:	00466f40 	call	466f4 <__multadd>
   46e2c:	1025883a 	mov	r18,r2
   46e30:	003fc706 	br	46d50 <__alt_data_end+0xfffe1550>
   46e34:	05000044 	movi	r20,1
   46e38:	a00b883a 	mov	r5,r20
   46e3c:	9809883a 	mov	r4,r19
   46e40:	00466240 	call	46624 <_Balloc>
   46e44:	1023883a 	mov	r17,r2
   46e48:	00809c44 	movi	r2,625
   46e4c:	88800515 	stw	r2,20(r17)
   46e50:	8d000415 	stw	r20,16(r17)
   46e54:	9c401215 	stw	r17,72(r19)
   46e58:	88000015 	stw	zero,0(r17)
   46e5c:	003fc606 	br	46d78 <__alt_data_end+0xfffe1578>

00046e60 <__lshift>:
   46e60:	defff904 	addi	sp,sp,-28
   46e64:	dd400515 	stw	r21,20(sp)
   46e68:	dcc00315 	stw	r19,12(sp)
   46e6c:	302bd17a 	srai	r21,r6,5
   46e70:	2cc00417 	ldw	r19,16(r5)
   46e74:	28800217 	ldw	r2,8(r5)
   46e78:	dd000415 	stw	r20,16(sp)
   46e7c:	ace7883a 	add	r19,r21,r19
   46e80:	dc800215 	stw	r18,8(sp)
   46e84:	dc400115 	stw	r17,4(sp)
   46e88:	dc000015 	stw	r16,0(sp)
   46e8c:	dfc00615 	stw	ra,24(sp)
   46e90:	9c000044 	addi	r16,r19,1
   46e94:	2823883a 	mov	r17,r5
   46e98:	3029883a 	mov	r20,r6
   46e9c:	2025883a 	mov	r18,r4
   46ea0:	29400117 	ldw	r5,4(r5)
   46ea4:	1400030e 	bge	r2,r16,46eb4 <__lshift+0x54>
   46ea8:	1085883a 	add	r2,r2,r2
   46eac:	29400044 	addi	r5,r5,1
   46eb0:	143ffd16 	blt	r2,r16,46ea8 <__alt_data_end+0xfffe16a8>
   46eb4:	9009883a 	mov	r4,r18
   46eb8:	00466240 	call	46624 <_Balloc>
   46ebc:	10c00504 	addi	r3,r2,20
   46ec0:	0540070e 	bge	zero,r21,46ee0 <__lshift+0x80>
   46ec4:	ad6b883a 	add	r21,r21,r21
   46ec8:	ad6b883a 	add	r21,r21,r21
   46ecc:	1809883a 	mov	r4,r3
   46ed0:	1d47883a 	add	r3,r3,r21
   46ed4:	20000015 	stw	zero,0(r4)
   46ed8:	21000104 	addi	r4,r4,4
   46edc:	193ffd1e 	bne	r3,r4,46ed4 <__alt_data_end+0xfffe16d4>
   46ee0:	8a000417 	ldw	r8,16(r17)
   46ee4:	89000504 	addi	r4,r17,20
   46ee8:	a18007cc 	andi	r6,r20,31
   46eec:	4211883a 	add	r8,r8,r8
   46ef0:	4211883a 	add	r8,r8,r8
   46ef4:	2211883a 	add	r8,r4,r8
   46ef8:	30002326 	beq	r6,zero,46f88 <__lshift+0x128>
   46efc:	02400804 	movi	r9,32
   46f00:	4993c83a 	sub	r9,r9,r6
   46f04:	000b883a 	mov	r5,zero
   46f08:	21c00017 	ldw	r7,0(r4)
   46f0c:	1815883a 	mov	r10,r3
   46f10:	18c00104 	addi	r3,r3,4
   46f14:	398e983a 	sll	r7,r7,r6
   46f18:	21000104 	addi	r4,r4,4
   46f1c:	394ab03a 	or	r5,r7,r5
   46f20:	197fff15 	stw	r5,-4(r3)
   46f24:	217fff17 	ldw	r5,-4(r4)
   46f28:	2a4ad83a 	srl	r5,r5,r9
   46f2c:	223ff636 	bltu	r4,r8,46f08 <__alt_data_end+0xfffe1708>
   46f30:	51400115 	stw	r5,4(r10)
   46f34:	28001a1e 	bne	r5,zero,46fa0 <__lshift+0x140>
   46f38:	843fffc4 	addi	r16,r16,-1
   46f3c:	14000415 	stw	r16,16(r2)
   46f40:	88000826 	beq	r17,zero,46f64 <__lshift+0x104>
   46f44:	89000117 	ldw	r4,4(r17)
   46f48:	90c01317 	ldw	r3,76(r18)
   46f4c:	2109883a 	add	r4,r4,r4
   46f50:	2109883a 	add	r4,r4,r4
   46f54:	1907883a 	add	r3,r3,r4
   46f58:	19000017 	ldw	r4,0(r3)
   46f5c:	89000015 	stw	r4,0(r17)
   46f60:	1c400015 	stw	r17,0(r3)
   46f64:	dfc00617 	ldw	ra,24(sp)
   46f68:	dd400517 	ldw	r21,20(sp)
   46f6c:	dd000417 	ldw	r20,16(sp)
   46f70:	dcc00317 	ldw	r19,12(sp)
   46f74:	dc800217 	ldw	r18,8(sp)
   46f78:	dc400117 	ldw	r17,4(sp)
   46f7c:	dc000017 	ldw	r16,0(sp)
   46f80:	dec00704 	addi	sp,sp,28
   46f84:	f800283a 	ret
   46f88:	21400017 	ldw	r5,0(r4)
   46f8c:	18c00104 	addi	r3,r3,4
   46f90:	21000104 	addi	r4,r4,4
   46f94:	197fff15 	stw	r5,-4(r3)
   46f98:	223ffb36 	bltu	r4,r8,46f88 <__alt_data_end+0xfffe1788>
   46f9c:	003fe606 	br	46f38 <__alt_data_end+0xfffe1738>
   46fa0:	9c000084 	addi	r16,r19,2
   46fa4:	003fe406 	br	46f38 <__alt_data_end+0xfffe1738>

00046fa8 <__mcmp>:
   46fa8:	20800417 	ldw	r2,16(r4)
   46fac:	28c00417 	ldw	r3,16(r5)
   46fb0:	10c5c83a 	sub	r2,r2,r3
   46fb4:	1000111e 	bne	r2,zero,46ffc <__mcmp+0x54>
   46fb8:	18c7883a 	add	r3,r3,r3
   46fbc:	18c7883a 	add	r3,r3,r3
   46fc0:	21000504 	addi	r4,r4,20
   46fc4:	29400504 	addi	r5,r5,20
   46fc8:	20c5883a 	add	r2,r4,r3
   46fcc:	28cb883a 	add	r5,r5,r3
   46fd0:	00000106 	br	46fd8 <__mcmp+0x30>
   46fd4:	20800a2e 	bgeu	r4,r2,47000 <__mcmp+0x58>
   46fd8:	10bfff04 	addi	r2,r2,-4
   46fdc:	297fff04 	addi	r5,r5,-4
   46fe0:	11800017 	ldw	r6,0(r2)
   46fe4:	28c00017 	ldw	r3,0(r5)
   46fe8:	30fffa26 	beq	r6,r3,46fd4 <__alt_data_end+0xfffe17d4>
   46fec:	30c00236 	bltu	r6,r3,46ff8 <__mcmp+0x50>
   46ff0:	00800044 	movi	r2,1
   46ff4:	f800283a 	ret
   46ff8:	00bfffc4 	movi	r2,-1
   46ffc:	f800283a 	ret
   47000:	0005883a 	mov	r2,zero
   47004:	f800283a 	ret

00047008 <__mdiff>:
   47008:	28c00417 	ldw	r3,16(r5)
   4700c:	30800417 	ldw	r2,16(r6)
   47010:	defffa04 	addi	sp,sp,-24
   47014:	dcc00315 	stw	r19,12(sp)
   47018:	dc800215 	stw	r18,8(sp)
   4701c:	dfc00515 	stw	ra,20(sp)
   47020:	dd000415 	stw	r20,16(sp)
   47024:	dc400115 	stw	r17,4(sp)
   47028:	dc000015 	stw	r16,0(sp)
   4702c:	1887c83a 	sub	r3,r3,r2
   47030:	2825883a 	mov	r18,r5
   47034:	3027883a 	mov	r19,r6
   47038:	1800141e 	bne	r3,zero,4708c <__mdiff+0x84>
   4703c:	1085883a 	add	r2,r2,r2
   47040:	1085883a 	add	r2,r2,r2
   47044:	2a000504 	addi	r8,r5,20
   47048:	34000504 	addi	r16,r6,20
   4704c:	4087883a 	add	r3,r8,r2
   47050:	8085883a 	add	r2,r16,r2
   47054:	00000106 	br	4705c <__mdiff+0x54>
   47058:	40c0592e 	bgeu	r8,r3,471c0 <__mdiff+0x1b8>
   4705c:	18ffff04 	addi	r3,r3,-4
   47060:	10bfff04 	addi	r2,r2,-4
   47064:	19c00017 	ldw	r7,0(r3)
   47068:	11400017 	ldw	r5,0(r2)
   4706c:	397ffa26 	beq	r7,r5,47058 <__alt_data_end+0xfffe1858>
   47070:	3940592e 	bgeu	r7,r5,471d8 <__mdiff+0x1d0>
   47074:	9005883a 	mov	r2,r18
   47078:	4023883a 	mov	r17,r8
   4707c:	9825883a 	mov	r18,r19
   47080:	05000044 	movi	r20,1
   47084:	1027883a 	mov	r19,r2
   47088:	00000406 	br	4709c <__mdiff+0x94>
   4708c:	18005616 	blt	r3,zero,471e8 <__mdiff+0x1e0>
   47090:	34400504 	addi	r17,r6,20
   47094:	2c000504 	addi	r16,r5,20
   47098:	0029883a 	mov	r20,zero
   4709c:	91400117 	ldw	r5,4(r18)
   470a0:	00466240 	call	46624 <_Balloc>
   470a4:	92400417 	ldw	r9,16(r18)
   470a8:	9b000417 	ldw	r12,16(r19)
   470ac:	12c00504 	addi	r11,r2,20
   470b0:	4a51883a 	add	r8,r9,r9
   470b4:	6319883a 	add	r12,r12,r12
   470b8:	4211883a 	add	r8,r8,r8
   470bc:	6319883a 	add	r12,r12,r12
   470c0:	15000315 	stw	r20,12(r2)
   470c4:	8211883a 	add	r8,r16,r8
   470c8:	8b19883a 	add	r12,r17,r12
   470cc:	0007883a 	mov	r3,zero
   470d0:	81400017 	ldw	r5,0(r16)
   470d4:	89c00017 	ldw	r7,0(r17)
   470d8:	59800104 	addi	r6,r11,4
   470dc:	293fffcc 	andi	r4,r5,65535
   470e0:	20c7883a 	add	r3,r4,r3
   470e4:	393fffcc 	andi	r4,r7,65535
   470e8:	1909c83a 	sub	r4,r3,r4
   470ec:	280ad43a 	srli	r5,r5,16
   470f0:	380ed43a 	srli	r7,r7,16
   470f4:	2007d43a 	srai	r3,r4,16
   470f8:	213fffcc 	andi	r4,r4,65535
   470fc:	29cbc83a 	sub	r5,r5,r7
   47100:	28c7883a 	add	r3,r5,r3
   47104:	180a943a 	slli	r5,r3,16
   47108:	8c400104 	addi	r17,r17,4
   4710c:	84000104 	addi	r16,r16,4
   47110:	2908b03a 	or	r4,r5,r4
   47114:	59000015 	stw	r4,0(r11)
   47118:	1807d43a 	srai	r3,r3,16
   4711c:	3015883a 	mov	r10,r6
   47120:	3017883a 	mov	r11,r6
   47124:	8b3fea36 	bltu	r17,r12,470d0 <__alt_data_end+0xfffe18d0>
   47128:	8200162e 	bgeu	r16,r8,47184 <__mdiff+0x17c>
   4712c:	8017883a 	mov	r11,r16
   47130:	59400017 	ldw	r5,0(r11)
   47134:	31800104 	addi	r6,r6,4
   47138:	5ac00104 	addi	r11,r11,4
   4713c:	293fffcc 	andi	r4,r5,65535
   47140:	20c7883a 	add	r3,r4,r3
   47144:	280ed43a 	srli	r7,r5,16
   47148:	180bd43a 	srai	r5,r3,16
   4714c:	193fffcc 	andi	r4,r3,65535
   47150:	3947883a 	add	r3,r7,r5
   47154:	180a943a 	slli	r5,r3,16
   47158:	1807d43a 	srai	r3,r3,16
   4715c:	2908b03a 	or	r4,r5,r4
   47160:	313fff15 	stw	r4,-4(r6)
   47164:	5a3ff236 	bltu	r11,r8,47130 <__alt_data_end+0xfffe1930>
   47168:	0406303a 	nor	r3,zero,r16
   4716c:	1a07883a 	add	r3,r3,r8
   47170:	1806d0ba 	srli	r3,r3,2
   47174:	18c00044 	addi	r3,r3,1
   47178:	18c7883a 	add	r3,r3,r3
   4717c:	18c7883a 	add	r3,r3,r3
   47180:	50d5883a 	add	r10,r10,r3
   47184:	50ffff04 	addi	r3,r10,-4
   47188:	2000041e 	bne	r4,zero,4719c <__mdiff+0x194>
   4718c:	18ffff04 	addi	r3,r3,-4
   47190:	19000017 	ldw	r4,0(r3)
   47194:	4a7fffc4 	addi	r9,r9,-1
   47198:	203ffc26 	beq	r4,zero,4718c <__alt_data_end+0xfffe198c>
   4719c:	12400415 	stw	r9,16(r2)
   471a0:	dfc00517 	ldw	ra,20(sp)
   471a4:	dd000417 	ldw	r20,16(sp)
   471a8:	dcc00317 	ldw	r19,12(sp)
   471ac:	dc800217 	ldw	r18,8(sp)
   471b0:	dc400117 	ldw	r17,4(sp)
   471b4:	dc000017 	ldw	r16,0(sp)
   471b8:	dec00604 	addi	sp,sp,24
   471bc:	f800283a 	ret
   471c0:	000b883a 	mov	r5,zero
   471c4:	00466240 	call	46624 <_Balloc>
   471c8:	00c00044 	movi	r3,1
   471cc:	10c00415 	stw	r3,16(r2)
   471d0:	10000515 	stw	zero,20(r2)
   471d4:	003ff206 	br	471a0 <__alt_data_end+0xfffe19a0>
   471d8:	8023883a 	mov	r17,r16
   471dc:	0029883a 	mov	r20,zero
   471e0:	4021883a 	mov	r16,r8
   471e4:	003fad06 	br	4709c <__alt_data_end+0xfffe189c>
   471e8:	9005883a 	mov	r2,r18
   471ec:	94400504 	addi	r17,r18,20
   471f0:	9c000504 	addi	r16,r19,20
   471f4:	9825883a 	mov	r18,r19
   471f8:	05000044 	movi	r20,1
   471fc:	1027883a 	mov	r19,r2
   47200:	003fa606 	br	4709c <__alt_data_end+0xfffe189c>

00047204 <__ulp>:
   47204:	295ffc2c 	andhi	r5,r5,32752
   47208:	00bf3034 	movhi	r2,64704
   4720c:	2887883a 	add	r3,r5,r2
   47210:	00c0020e 	bge	zero,r3,4721c <__ulp+0x18>
   47214:	0005883a 	mov	r2,zero
   47218:	f800283a 	ret
   4721c:	00c7c83a 	sub	r3,zero,r3
   47220:	1807d53a 	srai	r3,r3,20
   47224:	008004c4 	movi	r2,19
   47228:	10c00b0e 	bge	r2,r3,47258 <__ulp+0x54>
   4722c:	18bffb04 	addi	r2,r3,-20
   47230:	01000784 	movi	r4,30
   47234:	0007883a 	mov	r3,zero
   47238:	20800516 	blt	r4,r2,47250 <__ulp+0x4c>
   4723c:	010007c4 	movi	r4,31
   47240:	2089c83a 	sub	r4,r4,r2
   47244:	00800044 	movi	r2,1
   47248:	1104983a 	sll	r2,r2,r4
   4724c:	f800283a 	ret
   47250:	00800044 	movi	r2,1
   47254:	f800283a 	ret
   47258:	01400234 	movhi	r5,8
   4725c:	28c7d83a 	sra	r3,r5,r3
   47260:	0005883a 	mov	r2,zero
   47264:	f800283a 	ret

00047268 <__b2d>:
   47268:	defffa04 	addi	sp,sp,-24
   4726c:	dc000015 	stw	r16,0(sp)
   47270:	24000417 	ldw	r16,16(r4)
   47274:	dc400115 	stw	r17,4(sp)
   47278:	24400504 	addi	r17,r4,20
   4727c:	8421883a 	add	r16,r16,r16
   47280:	8421883a 	add	r16,r16,r16
   47284:	8c21883a 	add	r16,r17,r16
   47288:	dc800215 	stw	r18,8(sp)
   4728c:	84bfff17 	ldw	r18,-4(r16)
   47290:	dd000415 	stw	r20,16(sp)
   47294:	dcc00315 	stw	r19,12(sp)
   47298:	9009883a 	mov	r4,r18
   4729c:	2829883a 	mov	r20,r5
   472a0:	dfc00515 	stw	ra,20(sp)
   472a4:	00469400 	call	46940 <__hi0bits>
   472a8:	00c00804 	movi	r3,32
   472ac:	1889c83a 	sub	r4,r3,r2
   472b0:	a1000015 	stw	r4,0(r20)
   472b4:	01000284 	movi	r4,10
   472b8:	84ffff04 	addi	r19,r16,-4
   472bc:	20801216 	blt	r4,r2,47308 <__b2d+0xa0>
   472c0:	018002c4 	movi	r6,11
   472c4:	308dc83a 	sub	r6,r6,r2
   472c8:	9186d83a 	srl	r3,r18,r6
   472cc:	18cffc34 	orhi	r3,r3,16368
   472d0:	8cc0212e 	bgeu	r17,r19,47358 <__b2d+0xf0>
   472d4:	813ffe17 	ldw	r4,-8(r16)
   472d8:	218cd83a 	srl	r6,r4,r6
   472dc:	10800544 	addi	r2,r2,21
   472e0:	9084983a 	sll	r2,r18,r2
   472e4:	1184b03a 	or	r2,r2,r6
   472e8:	dfc00517 	ldw	ra,20(sp)
   472ec:	dd000417 	ldw	r20,16(sp)
   472f0:	dcc00317 	ldw	r19,12(sp)
   472f4:	dc800217 	ldw	r18,8(sp)
   472f8:	dc400117 	ldw	r17,4(sp)
   472fc:	dc000017 	ldw	r16,0(sp)
   47300:	dec00604 	addi	sp,sp,24
   47304:	f800283a 	ret
   47308:	8cc00f2e 	bgeu	r17,r19,47348 <__b2d+0xe0>
   4730c:	117ffd44 	addi	r5,r2,-11
   47310:	80bffe17 	ldw	r2,-8(r16)
   47314:	28000e26 	beq	r5,zero,47350 <__b2d+0xe8>
   47318:	1949c83a 	sub	r4,r3,r5
   4731c:	9164983a 	sll	r18,r18,r5
   47320:	1106d83a 	srl	r3,r2,r4
   47324:	81bffe04 	addi	r6,r16,-8
   47328:	948ffc34 	orhi	r18,r18,16368
   4732c:	90c6b03a 	or	r3,r18,r3
   47330:	89800e2e 	bgeu	r17,r6,4736c <__b2d+0x104>
   47334:	81bffd17 	ldw	r6,-12(r16)
   47338:	1144983a 	sll	r2,r2,r5
   4733c:	310ad83a 	srl	r5,r6,r4
   47340:	2884b03a 	or	r2,r5,r2
   47344:	003fe806 	br	472e8 <__alt_data_end+0xfffe1ae8>
   47348:	10bffd44 	addi	r2,r2,-11
   4734c:	1000041e 	bne	r2,zero,47360 <__b2d+0xf8>
   47350:	90cffc34 	orhi	r3,r18,16368
   47354:	003fe406 	br	472e8 <__alt_data_end+0xfffe1ae8>
   47358:	000d883a 	mov	r6,zero
   4735c:	003fdf06 	br	472dc <__alt_data_end+0xfffe1adc>
   47360:	90a4983a 	sll	r18,r18,r2
   47364:	0005883a 	mov	r2,zero
   47368:	003ff906 	br	47350 <__alt_data_end+0xfffe1b50>
   4736c:	1144983a 	sll	r2,r2,r5
   47370:	003fdd06 	br	472e8 <__alt_data_end+0xfffe1ae8>

00047374 <__d2b>:
   47374:	defff804 	addi	sp,sp,-32
   47378:	dc000215 	stw	r16,8(sp)
   4737c:	3021883a 	mov	r16,r6
   47380:	dc400315 	stw	r17,12(sp)
   47384:	8022907a 	slli	r17,r16,1
   47388:	dd000615 	stw	r20,24(sp)
   4738c:	2829883a 	mov	r20,r5
   47390:	01400044 	movi	r5,1
   47394:	dcc00515 	stw	r19,20(sp)
   47398:	dc800415 	stw	r18,16(sp)
   4739c:	dfc00715 	stw	ra,28(sp)
   473a0:	3825883a 	mov	r18,r7
   473a4:	8822d57a 	srli	r17,r17,21
   473a8:	00466240 	call	46624 <_Balloc>
   473ac:	1027883a 	mov	r19,r2
   473b0:	00800434 	movhi	r2,16
   473b4:	10bfffc4 	addi	r2,r2,-1
   473b8:	808c703a 	and	r6,r16,r2
   473bc:	88000126 	beq	r17,zero,473c4 <__d2b+0x50>
   473c0:	31800434 	orhi	r6,r6,16
   473c4:	d9800015 	stw	r6,0(sp)
   473c8:	a0002426 	beq	r20,zero,4745c <__d2b+0xe8>
   473cc:	d9000104 	addi	r4,sp,4
   473d0:	dd000115 	stw	r20,4(sp)
   473d4:	00469a80 	call	469a8 <__lo0bits>
   473d8:	d8c00017 	ldw	r3,0(sp)
   473dc:	10002f1e 	bne	r2,zero,4749c <__d2b+0x128>
   473e0:	d9000117 	ldw	r4,4(sp)
   473e4:	99000515 	stw	r4,20(r19)
   473e8:	1821003a 	cmpeq	r16,r3,zero
   473ec:	01000084 	movi	r4,2
   473f0:	2421c83a 	sub	r16,r4,r16
   473f4:	98c00615 	stw	r3,24(r19)
   473f8:	9c000415 	stw	r16,16(r19)
   473fc:	88001f1e 	bne	r17,zero,4747c <__d2b+0x108>
   47400:	10bef384 	addi	r2,r2,-1074
   47404:	90800015 	stw	r2,0(r18)
   47408:	00900034 	movhi	r2,16384
   4740c:	10bfffc4 	addi	r2,r2,-1
   47410:	8085883a 	add	r2,r16,r2
   47414:	1085883a 	add	r2,r2,r2
   47418:	1085883a 	add	r2,r2,r2
   4741c:	9885883a 	add	r2,r19,r2
   47420:	11000517 	ldw	r4,20(r2)
   47424:	8020917a 	slli	r16,r16,5
   47428:	00469400 	call	46940 <__hi0bits>
   4742c:	d8c00817 	ldw	r3,32(sp)
   47430:	8085c83a 	sub	r2,r16,r2
   47434:	18800015 	stw	r2,0(r3)
   47438:	9805883a 	mov	r2,r19
   4743c:	dfc00717 	ldw	ra,28(sp)
   47440:	dd000617 	ldw	r20,24(sp)
   47444:	dcc00517 	ldw	r19,20(sp)
   47448:	dc800417 	ldw	r18,16(sp)
   4744c:	dc400317 	ldw	r17,12(sp)
   47450:	dc000217 	ldw	r16,8(sp)
   47454:	dec00804 	addi	sp,sp,32
   47458:	f800283a 	ret
   4745c:	d809883a 	mov	r4,sp
   47460:	00469a80 	call	469a8 <__lo0bits>
   47464:	d8c00017 	ldw	r3,0(sp)
   47468:	04000044 	movi	r16,1
   4746c:	9c000415 	stw	r16,16(r19)
   47470:	98c00515 	stw	r3,20(r19)
   47474:	10800804 	addi	r2,r2,32
   47478:	883fe126 	beq	r17,zero,47400 <__alt_data_end+0xfffe1c00>
   4747c:	00c00d44 	movi	r3,53
   47480:	8c7ef344 	addi	r17,r17,-1075
   47484:	88a3883a 	add	r17,r17,r2
   47488:	1885c83a 	sub	r2,r3,r2
   4748c:	d8c00817 	ldw	r3,32(sp)
   47490:	94400015 	stw	r17,0(r18)
   47494:	18800015 	stw	r2,0(r3)
   47498:	003fe706 	br	47438 <__alt_data_end+0xfffe1c38>
   4749c:	01000804 	movi	r4,32
   474a0:	2089c83a 	sub	r4,r4,r2
   474a4:	1908983a 	sll	r4,r3,r4
   474a8:	d9400117 	ldw	r5,4(sp)
   474ac:	1886d83a 	srl	r3,r3,r2
   474b0:	2148b03a 	or	r4,r4,r5
   474b4:	99000515 	stw	r4,20(r19)
   474b8:	d8c00015 	stw	r3,0(sp)
   474bc:	003fca06 	br	473e8 <__alt_data_end+0xfffe1be8>

000474c0 <__ratio>:
   474c0:	defff904 	addi	sp,sp,-28
   474c4:	dc400315 	stw	r17,12(sp)
   474c8:	2823883a 	mov	r17,r5
   474cc:	d9400104 	addi	r5,sp,4
   474d0:	dfc00615 	stw	ra,24(sp)
   474d4:	dcc00515 	stw	r19,20(sp)
   474d8:	dc800415 	stw	r18,16(sp)
   474dc:	2027883a 	mov	r19,r4
   474e0:	dc000215 	stw	r16,8(sp)
   474e4:	00472680 	call	47268 <__b2d>
   474e8:	d80b883a 	mov	r5,sp
   474ec:	8809883a 	mov	r4,r17
   474f0:	1025883a 	mov	r18,r2
   474f4:	1821883a 	mov	r16,r3
   474f8:	00472680 	call	47268 <__b2d>
   474fc:	8a000417 	ldw	r8,16(r17)
   47500:	99000417 	ldw	r4,16(r19)
   47504:	d9400117 	ldw	r5,4(sp)
   47508:	2209c83a 	sub	r4,r4,r8
   4750c:	2010917a 	slli	r8,r4,5
   47510:	d9000017 	ldw	r4,0(sp)
   47514:	2909c83a 	sub	r4,r5,r4
   47518:	4109883a 	add	r4,r8,r4
   4751c:	01000e0e 	bge	zero,r4,47558 <__ratio+0x98>
   47520:	2008953a 	slli	r4,r4,20
   47524:	2421883a 	add	r16,r4,r16
   47528:	100d883a 	mov	r6,r2
   4752c:	180f883a 	mov	r7,r3
   47530:	9009883a 	mov	r4,r18
   47534:	800b883a 	mov	r5,r16
   47538:	004bc400 	call	4bc40 <__divdf3>
   4753c:	dfc00617 	ldw	ra,24(sp)
   47540:	dcc00517 	ldw	r19,20(sp)
   47544:	dc800417 	ldw	r18,16(sp)
   47548:	dc400317 	ldw	r17,12(sp)
   4754c:	dc000217 	ldw	r16,8(sp)
   47550:	dec00704 	addi	sp,sp,28
   47554:	f800283a 	ret
   47558:	2008953a 	slli	r4,r4,20
   4755c:	1907c83a 	sub	r3,r3,r4
   47560:	003ff106 	br	47528 <__alt_data_end+0xfffe1d28>

00047564 <_mprec_log10>:
   47564:	defffe04 	addi	sp,sp,-8
   47568:	dc000015 	stw	r16,0(sp)
   4756c:	dfc00115 	stw	ra,4(sp)
   47570:	008005c4 	movi	r2,23
   47574:	2021883a 	mov	r16,r4
   47578:	11000d0e 	bge	r2,r4,475b0 <_mprec_log10+0x4c>
   4757c:	0005883a 	mov	r2,zero
   47580:	00cffc34 	movhi	r3,16368
   47584:	843fffc4 	addi	r16,r16,-1
   47588:	000d883a 	mov	r6,zero
   4758c:	01d00934 	movhi	r7,16420
   47590:	1009883a 	mov	r4,r2
   47594:	180b883a 	mov	r5,r3
   47598:	004c8680 	call	4c868 <__muldf3>
   4759c:	803ff91e 	bne	r16,zero,47584 <__alt_data_end+0xfffe1d84>
   475a0:	dfc00117 	ldw	ra,4(sp)
   475a4:	dc000017 	ldw	r16,0(sp)
   475a8:	dec00204 	addi	sp,sp,8
   475ac:	f800283a 	ret
   475b0:	202090fa 	slli	r16,r4,3
   475b4:	008001b4 	movhi	r2,6
   475b8:	10a50704 	addi	r2,r2,-27620
   475bc:	1421883a 	add	r16,r2,r16
   475c0:	80800017 	ldw	r2,0(r16)
   475c4:	80c00117 	ldw	r3,4(r16)
   475c8:	dfc00117 	ldw	ra,4(sp)
   475cc:	dc000017 	ldw	r16,0(sp)
   475d0:	dec00204 	addi	sp,sp,8
   475d4:	f800283a 	ret

000475d8 <__copybits>:
   475d8:	297fffc4 	addi	r5,r5,-1
   475dc:	280fd17a 	srai	r7,r5,5
   475e0:	30c00417 	ldw	r3,16(r6)
   475e4:	30800504 	addi	r2,r6,20
   475e8:	39c00044 	addi	r7,r7,1
   475ec:	18c7883a 	add	r3,r3,r3
   475f0:	39cf883a 	add	r7,r7,r7
   475f4:	18c7883a 	add	r3,r3,r3
   475f8:	39cf883a 	add	r7,r7,r7
   475fc:	10c7883a 	add	r3,r2,r3
   47600:	21cf883a 	add	r7,r4,r7
   47604:	10c00d2e 	bgeu	r2,r3,4763c <__copybits+0x64>
   47608:	200b883a 	mov	r5,r4
   4760c:	12000017 	ldw	r8,0(r2)
   47610:	29400104 	addi	r5,r5,4
   47614:	10800104 	addi	r2,r2,4
   47618:	2a3fff15 	stw	r8,-4(r5)
   4761c:	10fffb36 	bltu	r2,r3,4760c <__alt_data_end+0xfffe1e0c>
   47620:	1985c83a 	sub	r2,r3,r6
   47624:	10bffac4 	addi	r2,r2,-21
   47628:	1004d0ba 	srli	r2,r2,2
   4762c:	10800044 	addi	r2,r2,1
   47630:	1085883a 	add	r2,r2,r2
   47634:	1085883a 	add	r2,r2,r2
   47638:	2089883a 	add	r4,r4,r2
   4763c:	21c0032e 	bgeu	r4,r7,4764c <__copybits+0x74>
   47640:	20000015 	stw	zero,0(r4)
   47644:	21000104 	addi	r4,r4,4
   47648:	21fffd36 	bltu	r4,r7,47640 <__alt_data_end+0xfffe1e40>
   4764c:	f800283a 	ret

00047650 <__any_on>:
   47650:	20c00417 	ldw	r3,16(r4)
   47654:	2805d17a 	srai	r2,r5,5
   47658:	21000504 	addi	r4,r4,20
   4765c:	18800d0e 	bge	r3,r2,47694 <__any_on+0x44>
   47660:	18c7883a 	add	r3,r3,r3
   47664:	18c7883a 	add	r3,r3,r3
   47668:	20c7883a 	add	r3,r4,r3
   4766c:	20c0192e 	bgeu	r4,r3,476d4 <__any_on+0x84>
   47670:	18bfff17 	ldw	r2,-4(r3)
   47674:	18ffff04 	addi	r3,r3,-4
   47678:	1000041e 	bne	r2,zero,4768c <__any_on+0x3c>
   4767c:	20c0142e 	bgeu	r4,r3,476d0 <__any_on+0x80>
   47680:	18ffff04 	addi	r3,r3,-4
   47684:	19400017 	ldw	r5,0(r3)
   47688:	283ffc26 	beq	r5,zero,4767c <__alt_data_end+0xfffe1e7c>
   4768c:	00800044 	movi	r2,1
   47690:	f800283a 	ret
   47694:	10c00a0e 	bge	r2,r3,476c0 <__any_on+0x70>
   47698:	1085883a 	add	r2,r2,r2
   4769c:	1085883a 	add	r2,r2,r2
   476a0:	294007cc 	andi	r5,r5,31
   476a4:	2087883a 	add	r3,r4,r2
   476a8:	283ff026 	beq	r5,zero,4766c <__alt_data_end+0xfffe1e6c>
   476ac:	19800017 	ldw	r6,0(r3)
   476b0:	3144d83a 	srl	r2,r6,r5
   476b4:	114a983a 	sll	r5,r2,r5
   476b8:	317ff41e 	bne	r6,r5,4768c <__alt_data_end+0xfffe1e8c>
   476bc:	003feb06 	br	4766c <__alt_data_end+0xfffe1e6c>
   476c0:	1085883a 	add	r2,r2,r2
   476c4:	1085883a 	add	r2,r2,r2
   476c8:	2087883a 	add	r3,r4,r2
   476cc:	003fe706 	br	4766c <__alt_data_end+0xfffe1e6c>
   476d0:	f800283a 	ret
   476d4:	0005883a 	mov	r2,zero
   476d8:	f800283a 	ret

000476dc <__fpclassifyd>:
   476dc:	00a00034 	movhi	r2,32768
   476e0:	10bfffc4 	addi	r2,r2,-1
   476e4:	2884703a 	and	r2,r5,r2
   476e8:	10000726 	beq	r2,zero,47708 <__fpclassifyd+0x2c>
   476ec:	00fffc34 	movhi	r3,65520
   476f0:	019ff834 	movhi	r6,32736
   476f4:	28c7883a 	add	r3,r5,r3
   476f8:	31bfffc4 	addi	r6,r6,-1
   476fc:	30c00536 	bltu	r6,r3,47714 <__fpclassifyd+0x38>
   47700:	00800104 	movi	r2,4
   47704:	f800283a 	ret
   47708:	2000021e 	bne	r4,zero,47714 <__fpclassifyd+0x38>
   4770c:	00800084 	movi	r2,2
   47710:	f800283a 	ret
   47714:	00dffc34 	movhi	r3,32752
   47718:	019ff834 	movhi	r6,32736
   4771c:	28cb883a 	add	r5,r5,r3
   47720:	31bfffc4 	addi	r6,r6,-1
   47724:	317ff62e 	bgeu	r6,r5,47700 <__alt_data_end+0xfffe1f00>
   47728:	01400434 	movhi	r5,16
   4772c:	297fffc4 	addi	r5,r5,-1
   47730:	28800236 	bltu	r5,r2,4773c <__fpclassifyd+0x60>
   47734:	008000c4 	movi	r2,3
   47738:	f800283a 	ret
   4773c:	10c00226 	beq	r2,r3,47748 <__fpclassifyd+0x6c>
   47740:	0005883a 	mov	r2,zero
   47744:	f800283a 	ret
   47748:	2005003a 	cmpeq	r2,r4,zero
   4774c:	f800283a 	ret

00047750 <_sbrk_r>:
   47750:	defffd04 	addi	sp,sp,-12
   47754:	dc000015 	stw	r16,0(sp)
   47758:	040001b4 	movhi	r16,6
   4775c:	dc400115 	stw	r17,4(sp)
   47760:	84335b04 	addi	r16,r16,-12948
   47764:	2023883a 	mov	r17,r4
   47768:	2809883a 	mov	r4,r5
   4776c:	dfc00215 	stw	ra,8(sp)
   47770:	80000015 	stw	zero,0(r16)
   47774:	004e6140 	call	4e614 <sbrk>
   47778:	00ffffc4 	movi	r3,-1
   4777c:	10c00526 	beq	r2,r3,47794 <_sbrk_r+0x44>
   47780:	dfc00217 	ldw	ra,8(sp)
   47784:	dc400117 	ldw	r17,4(sp)
   47788:	dc000017 	ldw	r16,0(sp)
   4778c:	dec00304 	addi	sp,sp,12
   47790:	f800283a 	ret
   47794:	80c00017 	ldw	r3,0(r16)
   47798:	183ff926 	beq	r3,zero,47780 <__alt_data_end+0xfffe1f80>
   4779c:	88c00015 	stw	r3,0(r17)
   477a0:	003ff706 	br	47780 <__alt_data_end+0xfffe1f80>

000477a4 <__sread>:
   477a4:	defffe04 	addi	sp,sp,-8
   477a8:	dc000015 	stw	r16,0(sp)
   477ac:	2821883a 	mov	r16,r5
   477b0:	2940038f 	ldh	r5,14(r5)
   477b4:	dfc00115 	stw	ra,4(sp)
   477b8:	0049d1c0 	call	49d1c <_read_r>
   477bc:	10000716 	blt	r2,zero,477dc <__sread+0x38>
   477c0:	80c01417 	ldw	r3,80(r16)
   477c4:	1887883a 	add	r3,r3,r2
   477c8:	80c01415 	stw	r3,80(r16)
   477cc:	dfc00117 	ldw	ra,4(sp)
   477d0:	dc000017 	ldw	r16,0(sp)
   477d4:	dec00204 	addi	sp,sp,8
   477d8:	f800283a 	ret
   477dc:	80c0030b 	ldhu	r3,12(r16)
   477e0:	18fbffcc 	andi	r3,r3,61439
   477e4:	80c0030d 	sth	r3,12(r16)
   477e8:	dfc00117 	ldw	ra,4(sp)
   477ec:	dc000017 	ldw	r16,0(sp)
   477f0:	dec00204 	addi	sp,sp,8
   477f4:	f800283a 	ret

000477f8 <__seofread>:
   477f8:	0005883a 	mov	r2,zero
   477fc:	f800283a 	ret

00047800 <__swrite>:
   47800:	2880030b 	ldhu	r2,12(r5)
   47804:	defffb04 	addi	sp,sp,-20
   47808:	dcc00315 	stw	r19,12(sp)
   4780c:	dc800215 	stw	r18,8(sp)
   47810:	dc400115 	stw	r17,4(sp)
   47814:	dc000015 	stw	r16,0(sp)
   47818:	dfc00415 	stw	ra,16(sp)
   4781c:	10c0400c 	andi	r3,r2,256
   47820:	2821883a 	mov	r16,r5
   47824:	2023883a 	mov	r17,r4
   47828:	3025883a 	mov	r18,r6
   4782c:	3827883a 	mov	r19,r7
   47830:	18000526 	beq	r3,zero,47848 <__swrite+0x48>
   47834:	2940038f 	ldh	r5,14(r5)
   47838:	01c00084 	movi	r7,2
   4783c:	000d883a 	mov	r6,zero
   47840:	0049b600 	call	49b60 <_lseek_r>
   47844:	8080030b 	ldhu	r2,12(r16)
   47848:	8140038f 	ldh	r5,14(r16)
   4784c:	10bbffcc 	andi	r2,r2,61439
   47850:	980f883a 	mov	r7,r19
   47854:	900d883a 	mov	r6,r18
   47858:	8809883a 	mov	r4,r17
   4785c:	8080030d 	sth	r2,12(r16)
   47860:	dfc00417 	ldw	ra,16(sp)
   47864:	dcc00317 	ldw	r19,12(sp)
   47868:	dc800217 	ldw	r18,8(sp)
   4786c:	dc400117 	ldw	r17,4(sp)
   47870:	dc000017 	ldw	r16,0(sp)
   47874:	dec00504 	addi	sp,sp,20
   47878:	004914c1 	jmpi	4914c <_write_r>

0004787c <__sseek>:
   4787c:	defffe04 	addi	sp,sp,-8
   47880:	dc000015 	stw	r16,0(sp)
   47884:	2821883a 	mov	r16,r5
   47888:	2940038f 	ldh	r5,14(r5)
   4788c:	dfc00115 	stw	ra,4(sp)
   47890:	0049b600 	call	49b60 <_lseek_r>
   47894:	00ffffc4 	movi	r3,-1
   47898:	10c00826 	beq	r2,r3,478bc <__sseek+0x40>
   4789c:	80c0030b 	ldhu	r3,12(r16)
   478a0:	80801415 	stw	r2,80(r16)
   478a4:	18c40014 	ori	r3,r3,4096
   478a8:	80c0030d 	sth	r3,12(r16)
   478ac:	dfc00117 	ldw	ra,4(sp)
   478b0:	dc000017 	ldw	r16,0(sp)
   478b4:	dec00204 	addi	sp,sp,8
   478b8:	f800283a 	ret
   478bc:	80c0030b 	ldhu	r3,12(r16)
   478c0:	18fbffcc 	andi	r3,r3,61439
   478c4:	80c0030d 	sth	r3,12(r16)
   478c8:	dfc00117 	ldw	ra,4(sp)
   478cc:	dc000017 	ldw	r16,0(sp)
   478d0:	dec00204 	addi	sp,sp,8
   478d4:	f800283a 	ret

000478d8 <__sclose>:
   478d8:	2940038f 	ldh	r5,14(r5)
   478dc:	00491ac1 	jmpi	491ac <_close_r>

000478e0 <strcmp>:
   478e0:	2144b03a 	or	r2,r4,r5
   478e4:	108000cc 	andi	r2,r2,3
   478e8:	1000171e 	bne	r2,zero,47948 <strcmp+0x68>
   478ec:	20800017 	ldw	r2,0(r4)
   478f0:	28c00017 	ldw	r3,0(r5)
   478f4:	10c0141e 	bne	r2,r3,47948 <strcmp+0x68>
   478f8:	027fbff4 	movhi	r9,65279
   478fc:	4a7fbfc4 	addi	r9,r9,-257
   47900:	0086303a 	nor	r3,zero,r2
   47904:	02202074 	movhi	r8,32897
   47908:	1245883a 	add	r2,r2,r9
   4790c:	42202004 	addi	r8,r8,-32640
   47910:	10c4703a 	and	r2,r2,r3
   47914:	1204703a 	and	r2,r2,r8
   47918:	10000226 	beq	r2,zero,47924 <strcmp+0x44>
   4791c:	00002306 	br	479ac <strcmp+0xcc>
   47920:	1000221e 	bne	r2,zero,479ac <strcmp+0xcc>
   47924:	21000104 	addi	r4,r4,4
   47928:	20c00017 	ldw	r3,0(r4)
   4792c:	29400104 	addi	r5,r5,4
   47930:	29800017 	ldw	r6,0(r5)
   47934:	1a4f883a 	add	r7,r3,r9
   47938:	00c4303a 	nor	r2,zero,r3
   4793c:	3884703a 	and	r2,r7,r2
   47940:	1204703a 	and	r2,r2,r8
   47944:	19bff626 	beq	r3,r6,47920 <__alt_data_end+0xfffe2120>
   47948:	20800003 	ldbu	r2,0(r4)
   4794c:	10c03fcc 	andi	r3,r2,255
   47950:	18c0201c 	xori	r3,r3,128
   47954:	18ffe004 	addi	r3,r3,-128
   47958:	18000c26 	beq	r3,zero,4798c <strcmp+0xac>
   4795c:	29800007 	ldb	r6,0(r5)
   47960:	19800326 	beq	r3,r6,47970 <strcmp+0x90>
   47964:	00001306 	br	479b4 <strcmp+0xd4>
   47968:	29800007 	ldb	r6,0(r5)
   4796c:	11800b1e 	bne	r2,r6,4799c <strcmp+0xbc>
   47970:	21000044 	addi	r4,r4,1
   47974:	20c00003 	ldbu	r3,0(r4)
   47978:	29400044 	addi	r5,r5,1
   4797c:	18803fcc 	andi	r2,r3,255
   47980:	1080201c 	xori	r2,r2,128
   47984:	10bfe004 	addi	r2,r2,-128
   47988:	103ff71e 	bne	r2,zero,47968 <__alt_data_end+0xfffe2168>
   4798c:	0007883a 	mov	r3,zero
   47990:	28800003 	ldbu	r2,0(r5)
   47994:	1885c83a 	sub	r2,r3,r2
   47998:	f800283a 	ret
   4799c:	28800003 	ldbu	r2,0(r5)
   479a0:	18c03fcc 	andi	r3,r3,255
   479a4:	1885c83a 	sub	r2,r3,r2
   479a8:	f800283a 	ret
   479ac:	0005883a 	mov	r2,zero
   479b0:	f800283a 	ret
   479b4:	10c03fcc 	andi	r3,r2,255
   479b8:	003ff506 	br	47990 <__alt_data_end+0xfffe2190>

000479bc <strlen>:
   479bc:	208000cc 	andi	r2,r4,3
   479c0:	10002026 	beq	r2,zero,47a44 <strlen+0x88>
   479c4:	20800007 	ldb	r2,0(r4)
   479c8:	10002026 	beq	r2,zero,47a4c <strlen+0x90>
   479cc:	2005883a 	mov	r2,r4
   479d0:	00000206 	br	479dc <strlen+0x20>
   479d4:	10c00007 	ldb	r3,0(r2)
   479d8:	18001826 	beq	r3,zero,47a3c <strlen+0x80>
   479dc:	10800044 	addi	r2,r2,1
   479e0:	10c000cc 	andi	r3,r2,3
   479e4:	183ffb1e 	bne	r3,zero,479d4 <__alt_data_end+0xfffe21d4>
   479e8:	10c00017 	ldw	r3,0(r2)
   479ec:	01ffbff4 	movhi	r7,65279
   479f0:	39ffbfc4 	addi	r7,r7,-257
   479f4:	00ca303a 	nor	r5,zero,r3
   479f8:	01a02074 	movhi	r6,32897
   479fc:	19c7883a 	add	r3,r3,r7
   47a00:	31a02004 	addi	r6,r6,-32640
   47a04:	1946703a 	and	r3,r3,r5
   47a08:	1986703a 	and	r3,r3,r6
   47a0c:	1800091e 	bne	r3,zero,47a34 <strlen+0x78>
   47a10:	10800104 	addi	r2,r2,4
   47a14:	10c00017 	ldw	r3,0(r2)
   47a18:	19cb883a 	add	r5,r3,r7
   47a1c:	00c6303a 	nor	r3,zero,r3
   47a20:	28c6703a 	and	r3,r5,r3
   47a24:	1986703a 	and	r3,r3,r6
   47a28:	183ff926 	beq	r3,zero,47a10 <__alt_data_end+0xfffe2210>
   47a2c:	00000106 	br	47a34 <strlen+0x78>
   47a30:	10800044 	addi	r2,r2,1
   47a34:	10c00007 	ldb	r3,0(r2)
   47a38:	183ffd1e 	bne	r3,zero,47a30 <__alt_data_end+0xfffe2230>
   47a3c:	1105c83a 	sub	r2,r2,r4
   47a40:	f800283a 	ret
   47a44:	2005883a 	mov	r2,r4
   47a48:	003fe706 	br	479e8 <__alt_data_end+0xfffe21e8>
   47a4c:	0005883a 	mov	r2,zero
   47a50:	f800283a 	ret

00047a54 <__sprint_r.part.0>:
   47a54:	28801917 	ldw	r2,100(r5)
   47a58:	defff604 	addi	sp,sp,-40
   47a5c:	dd400515 	stw	r21,20(sp)
   47a60:	dfc00915 	stw	ra,36(sp)
   47a64:	df000815 	stw	fp,32(sp)
   47a68:	ddc00715 	stw	r23,28(sp)
   47a6c:	dd800615 	stw	r22,24(sp)
   47a70:	dd000415 	stw	r20,16(sp)
   47a74:	dcc00315 	stw	r19,12(sp)
   47a78:	dc800215 	stw	r18,8(sp)
   47a7c:	dc400115 	stw	r17,4(sp)
   47a80:	dc000015 	stw	r16,0(sp)
   47a84:	1088000c 	andi	r2,r2,8192
   47a88:	302b883a 	mov	r21,r6
   47a8c:	10002e26 	beq	r2,zero,47b48 <__sprint_r.part.0+0xf4>
   47a90:	30800217 	ldw	r2,8(r6)
   47a94:	35800017 	ldw	r22,0(r6)
   47a98:	10002926 	beq	r2,zero,47b40 <__sprint_r.part.0+0xec>
   47a9c:	2827883a 	mov	r19,r5
   47aa0:	2029883a 	mov	r20,r4
   47aa4:	b5c00104 	addi	r23,r22,4
   47aa8:	04bfffc4 	movi	r18,-1
   47aac:	bc400017 	ldw	r17,0(r23)
   47ab0:	b4000017 	ldw	r16,0(r22)
   47ab4:	0039883a 	mov	fp,zero
   47ab8:	8822d0ba 	srli	r17,r17,2
   47abc:	8800031e 	bne	r17,zero,47acc <__sprint_r.part.0+0x78>
   47ac0:	00001806 	br	47b24 <__sprint_r.part.0+0xd0>
   47ac4:	84000104 	addi	r16,r16,4
   47ac8:	8f001526 	beq	r17,fp,47b20 <__sprint_r.part.0+0xcc>
   47acc:	81400017 	ldw	r5,0(r16)
   47ad0:	980d883a 	mov	r6,r19
   47ad4:	a009883a 	mov	r4,r20
   47ad8:	00495440 	call	49544 <_fputwc_r>
   47adc:	e7000044 	addi	fp,fp,1
   47ae0:	14bff81e 	bne	r2,r18,47ac4 <__alt_data_end+0xfffe22c4>
   47ae4:	9005883a 	mov	r2,r18
   47ae8:	a8000215 	stw	zero,8(r21)
   47aec:	a8000115 	stw	zero,4(r21)
   47af0:	dfc00917 	ldw	ra,36(sp)
   47af4:	df000817 	ldw	fp,32(sp)
   47af8:	ddc00717 	ldw	r23,28(sp)
   47afc:	dd800617 	ldw	r22,24(sp)
   47b00:	dd400517 	ldw	r21,20(sp)
   47b04:	dd000417 	ldw	r20,16(sp)
   47b08:	dcc00317 	ldw	r19,12(sp)
   47b0c:	dc800217 	ldw	r18,8(sp)
   47b10:	dc400117 	ldw	r17,4(sp)
   47b14:	dc000017 	ldw	r16,0(sp)
   47b18:	dec00a04 	addi	sp,sp,40
   47b1c:	f800283a 	ret
   47b20:	a8800217 	ldw	r2,8(r21)
   47b24:	8c63883a 	add	r17,r17,r17
   47b28:	8c63883a 	add	r17,r17,r17
   47b2c:	1445c83a 	sub	r2,r2,r17
   47b30:	a8800215 	stw	r2,8(r21)
   47b34:	b5800204 	addi	r22,r22,8
   47b38:	bdc00204 	addi	r23,r23,8
   47b3c:	103fdb1e 	bne	r2,zero,47aac <__alt_data_end+0xfffe22ac>
   47b40:	0005883a 	mov	r2,zero
   47b44:	003fe806 	br	47ae8 <__alt_data_end+0xfffe22e8>
   47b48:	00496440 	call	49644 <__sfvwrite_r>
   47b4c:	003fe606 	br	47ae8 <__alt_data_end+0xfffe22e8>

00047b50 <__sprint_r>:
   47b50:	30c00217 	ldw	r3,8(r6)
   47b54:	18000126 	beq	r3,zero,47b5c <__sprint_r+0xc>
   47b58:	0047a541 	jmpi	47a54 <__sprint_r.part.0>
   47b5c:	30000115 	stw	zero,4(r6)
   47b60:	0005883a 	mov	r2,zero
   47b64:	f800283a 	ret

00047b68 <___vfiprintf_internal_r>:
   47b68:	deffca04 	addi	sp,sp,-216
   47b6c:	dd403115 	stw	r21,196(sp)
   47b70:	dfc03515 	stw	ra,212(sp)
   47b74:	df003415 	stw	fp,208(sp)
   47b78:	ddc03315 	stw	r23,204(sp)
   47b7c:	dd803215 	stw	r22,200(sp)
   47b80:	dd003015 	stw	r20,192(sp)
   47b84:	dcc02f15 	stw	r19,188(sp)
   47b88:	dc802e15 	stw	r18,184(sp)
   47b8c:	dc402d15 	stw	r17,180(sp)
   47b90:	dc002c15 	stw	r16,176(sp)
   47b94:	d9002115 	stw	r4,132(sp)
   47b98:	d9402015 	stw	r5,128(sp)
   47b9c:	d9c02215 	stw	r7,136(sp)
   47ba0:	302b883a 	mov	r21,r6
   47ba4:	20000226 	beq	r4,zero,47bb0 <___vfiprintf_internal_r+0x48>
   47ba8:	20800e17 	ldw	r2,56(r4)
   47bac:	1000cf26 	beq	r2,zero,47eec <___vfiprintf_internal_r+0x384>
   47bb0:	d8c02017 	ldw	r3,128(sp)
   47bb4:	1880030b 	ldhu	r2,12(r3)
   47bb8:	10c8000c 	andi	r3,r2,8192
   47bbc:	1800071e 	bne	r3,zero,47bdc <___vfiprintf_internal_r+0x74>
   47bc0:	d9402017 	ldw	r5,128(sp)
   47bc4:	00f7ffc4 	movi	r3,-8193
   47bc8:	10880014 	ori	r2,r2,8192
   47bcc:	29001917 	ldw	r4,100(r5)
   47bd0:	2880030d 	sth	r2,12(r5)
   47bd4:	20c6703a 	and	r3,r4,r3
   47bd8:	28c01915 	stw	r3,100(r5)
   47bdc:	10c0020c 	andi	r3,r2,8
   47be0:	1800a526 	beq	r3,zero,47e78 <___vfiprintf_internal_r+0x310>
   47be4:	d9002017 	ldw	r4,128(sp)
   47be8:	20c00417 	ldw	r3,16(r4)
   47bec:	1800a226 	beq	r3,zero,47e78 <___vfiprintf_internal_r+0x310>
   47bf0:	1080068c 	andi	r2,r2,26
   47bf4:	00c00284 	movi	r3,10
   47bf8:	10c0a826 	beq	r2,r3,47e9c <___vfiprintf_internal_r+0x334>
   47bfc:	d9001a04 	addi	r4,sp,104
   47c00:	d94019c4 	addi	r5,sp,103
   47c04:	048001b4 	movhi	r18,6
   47c08:	2145c83a 	sub	r2,r4,r5
   47c0c:	94a53904 	addi	r18,r18,-27420
   47c10:	d9001e15 	stw	r4,120(sp)
   47c14:	d9401f15 	stw	r5,124(sp)
   47c18:	dec01a15 	stw	sp,104(sp)
   47c1c:	d8001c15 	stw	zero,112(sp)
   47c20:	d8001b15 	stw	zero,108(sp)
   47c24:	d811883a 	mov	r8,sp
   47c28:	d8002615 	stw	zero,152(sp)
   47c2c:	d8002415 	stw	zero,144(sp)
   47c30:	d8802815 	stw	r2,160(sp)
   47c34:	a82d883a 	mov	r22,r21
   47c38:	b0800007 	ldb	r2,0(r22)
   47c3c:	10040d26 	beq	r2,zero,48c74 <___vfiprintf_internal_r+0x110c>
   47c40:	00c00944 	movi	r3,37
   47c44:	b029883a 	mov	r20,r22
   47c48:	10c0021e 	bne	r2,r3,47c54 <___vfiprintf_internal_r+0xec>
   47c4c:	00001606 	br	47ca8 <___vfiprintf_internal_r+0x140>
   47c50:	10c00326 	beq	r2,r3,47c60 <___vfiprintf_internal_r+0xf8>
   47c54:	a5000044 	addi	r20,r20,1
   47c58:	a0800007 	ldb	r2,0(r20)
   47c5c:	103ffc1e 	bne	r2,zero,47c50 <__alt_data_end+0xfffe2450>
   47c60:	a5a1c83a 	sub	r16,r20,r22
   47c64:	80001026 	beq	r16,zero,47ca8 <___vfiprintf_internal_r+0x140>
   47c68:	d8c01c17 	ldw	r3,112(sp)
   47c6c:	d8801b17 	ldw	r2,108(sp)
   47c70:	45800015 	stw	r22,0(r8)
   47c74:	80c7883a 	add	r3,r16,r3
   47c78:	10800044 	addi	r2,r2,1
   47c7c:	44000115 	stw	r16,4(r8)
   47c80:	d8c01c15 	stw	r3,112(sp)
   47c84:	d8801b15 	stw	r2,108(sp)
   47c88:	010001c4 	movi	r4,7
   47c8c:	2080750e 	bge	r4,r2,47e64 <___vfiprintf_internal_r+0x2fc>
   47c90:	1803951e 	bne	r3,zero,48ae8 <___vfiprintf_internal_r+0xf80>
   47c94:	d8c02417 	ldw	r3,144(sp)
   47c98:	d8001b15 	stw	zero,108(sp)
   47c9c:	d811883a 	mov	r8,sp
   47ca0:	1c07883a 	add	r3,r3,r16
   47ca4:	d8c02415 	stw	r3,144(sp)
   47ca8:	a0800007 	ldb	r2,0(r20)
   47cac:	1002e026 	beq	r2,zero,48830 <___vfiprintf_internal_r+0xcc8>
   47cb0:	a5800044 	addi	r22,r20,1
   47cb4:	a0c00047 	ldb	r3,1(r20)
   47cb8:	d8001d85 	stb	zero,118(sp)
   47cbc:	0027883a 	mov	r19,zero
   47cc0:	d8002305 	stb	zero,140(sp)
   47cc4:	043fffc4 	movi	r16,-1
   47cc8:	d8002515 	stw	zero,148(sp)
   47ccc:	0023883a 	mov	r17,zero
   47cd0:	05001604 	movi	r20,88
   47cd4:	05400244 	movi	r21,9
   47cd8:	402f883a 	mov	r23,r8
   47cdc:	b5800044 	addi	r22,r22,1
   47ce0:	18bff804 	addi	r2,r3,-32
   47ce4:	a0827736 	bltu	r20,r2,486c4 <___vfiprintf_internal_r+0xb5c>
   47ce8:	100490ba 	slli	r2,r2,2
   47cec:	01000134 	movhi	r4,4
   47cf0:	211f4004 	addi	r4,r4,32000
   47cf4:	1105883a 	add	r2,r2,r4
   47cf8:	10800017 	ldw	r2,0(r2)
   47cfc:	1000683a 	jmp	r2
   47d00:	000483c4 	movi	zero,4623
   47d04:	000486c4 	movi	zero,4635
   47d08:	000486c4 	movi	zero,4635
   47d0c:	000483e0 	cmpeqi	zero,zero,4623
   47d10:	000486c4 	movi	zero,4635
   47d14:	000486c4 	movi	zero,4635
   47d18:	000486c4 	movi	zero,4635
   47d1c:	000486c4 	movi	zero,4635
   47d20:	000486c4 	movi	zero,4635
   47d24:	000486c4 	movi	zero,4635
   47d28:	000485e8 	cmpgeui	zero,zero,4631
   47d2c:	0004860c 	andi	zero,zero,4632
   47d30:	000486c4 	movi	zero,4635
   47d34:	00047f04 	movi	zero,4604
   47d38:	00048620 	cmpeqi	zero,zero,4632
   47d3c:	000486c4 	movi	zero,4635
   47d40:	000483ec 	andhi	zero,zero,4623
   47d44:	000483f8 	rdprs	zero,zero,4623
   47d48:	000483f8 	rdprs	zero,zero,4623
   47d4c:	000483f8 	rdprs	zero,zero,4623
   47d50:	000483f8 	rdprs	zero,zero,4623
   47d54:	000483f8 	rdprs	zero,zero,4623
   47d58:	000483f8 	rdprs	zero,zero,4623
   47d5c:	000483f8 	rdprs	zero,zero,4623
   47d60:	000483f8 	rdprs	zero,zero,4623
   47d64:	000483f8 	rdprs	zero,zero,4623
   47d68:	000486c4 	movi	zero,4635
   47d6c:	000486c4 	movi	zero,4635
   47d70:	000486c4 	movi	zero,4635
   47d74:	000486c4 	movi	zero,4635
   47d78:	000486c4 	movi	zero,4635
   47d7c:	000486c4 	movi	zero,4635
   47d80:	000486c4 	movi	zero,4635
   47d84:	000486c4 	movi	zero,4635
   47d88:	000486c4 	movi	zero,4635
   47d8c:	000486c4 	movi	zero,4635
   47d90:	00048438 	rdprs	zero,zero,4624
   47d94:	000486c4 	movi	zero,4635
   47d98:	000486c4 	movi	zero,4635
   47d9c:	000486c4 	movi	zero,4635
   47da0:	000486c4 	movi	zero,4635
   47da4:	000486c4 	movi	zero,4635
   47da8:	000486c4 	movi	zero,4635
   47dac:	000486c4 	movi	zero,4635
   47db0:	000486c4 	movi	zero,4635
   47db4:	000486c4 	movi	zero,4635
   47db8:	000486c4 	movi	zero,4635
   47dbc:	00048474 	movhi	zero,4625
   47dc0:	000486c4 	movi	zero,4635
   47dc4:	000486c4 	movi	zero,4635
   47dc8:	000486c4 	movi	zero,4635
   47dcc:	000486c4 	movi	zero,4635
   47dd0:	000486c4 	movi	zero,4635
   47dd4:	000484d0 	cmplti	zero,zero,4627
   47dd8:	000486c4 	movi	zero,4635
   47ddc:	000486c4 	movi	zero,4635
   47de0:	00048544 	movi	zero,4629
   47de4:	000486c4 	movi	zero,4635
   47de8:	000486c4 	movi	zero,4635
   47dec:	000486c4 	movi	zero,4635
   47df0:	000486c4 	movi	zero,4635
   47df4:	000486c4 	movi	zero,4635
   47df8:	000486c4 	movi	zero,4635
   47dfc:	000486c4 	movi	zero,4635
   47e00:	000486c4 	movi	zero,4635
   47e04:	000486c4 	movi	zero,4635
   47e08:	000486c4 	movi	zero,4635
   47e0c:	000482ec 	andhi	zero,zero,4619
   47e10:	0004831c 	xori	zero,zero,4620
   47e14:	000486c4 	movi	zero,4635
   47e18:	000486c4 	movi	zero,4635
   47e1c:	000486c4 	movi	zero,4635
   47e20:	0004866c 	andhi	zero,zero,4633
   47e24:	0004831c 	xori	zero,zero,4620
   47e28:	000486c4 	movi	zero,4635
   47e2c:	000486c4 	movi	zero,4635
   47e30:	000481c4 	movi	zero,4615
   47e34:	000486c4 	movi	zero,4635
   47e38:	000481d8 	cmpnei	zero,zero,4615
   47e3c:	00048210 	cmplti	zero,zero,4616
   47e40:	00047f10 	cmplti	zero,zero,4604
   47e44:	000481b8 	rdprs	zero,zero,4614
   47e48:	000486c4 	movi	zero,4635
   47e4c:	00048584 	movi	zero,4630
   47e50:	000486c4 	movi	zero,4635
   47e54:	000485d0 	cmplti	zero,zero,4631
   47e58:	000486c4 	movi	zero,4635
   47e5c:	000486c4 	movi	zero,4635
   47e60:	00048294 	movui	zero,4618
   47e64:	42000204 	addi	r8,r8,8
   47e68:	d8c02417 	ldw	r3,144(sp)
   47e6c:	1c07883a 	add	r3,r3,r16
   47e70:	d8c02415 	stw	r3,144(sp)
   47e74:	003f8c06 	br	47ca8 <__alt_data_end+0xfffe24a8>
   47e78:	d9402017 	ldw	r5,128(sp)
   47e7c:	d9002117 	ldw	r4,132(sp)
   47e80:	00432140 	call	43214 <__swsetup_r>
   47e84:	1003c11e 	bne	r2,zero,48d8c <___vfiprintf_internal_r+0x1224>
   47e88:	d9402017 	ldw	r5,128(sp)
   47e8c:	00c00284 	movi	r3,10
   47e90:	2880030b 	ldhu	r2,12(r5)
   47e94:	1080068c 	andi	r2,r2,26
   47e98:	10ff581e 	bne	r2,r3,47bfc <__alt_data_end+0xfffe23fc>
   47e9c:	d8c02017 	ldw	r3,128(sp)
   47ea0:	1880038f 	ldh	r2,14(r3)
   47ea4:	103f5516 	blt	r2,zero,47bfc <__alt_data_end+0xfffe23fc>
   47ea8:	d9c02217 	ldw	r7,136(sp)
   47eac:	d9002117 	ldw	r4,132(sp)
   47eb0:	a80d883a 	mov	r6,r21
   47eb4:	180b883a 	mov	r5,r3
   47eb8:	00490900 	call	49090 <__sbprintf>
   47ebc:	dfc03517 	ldw	ra,212(sp)
   47ec0:	df003417 	ldw	fp,208(sp)
   47ec4:	ddc03317 	ldw	r23,204(sp)
   47ec8:	dd803217 	ldw	r22,200(sp)
   47ecc:	dd403117 	ldw	r21,196(sp)
   47ed0:	dd003017 	ldw	r20,192(sp)
   47ed4:	dcc02f17 	ldw	r19,188(sp)
   47ed8:	dc802e17 	ldw	r18,184(sp)
   47edc:	dc402d17 	ldw	r17,180(sp)
   47ee0:	dc002c17 	ldw	r16,176(sp)
   47ee4:	dec03604 	addi	sp,sp,216
   47ee8:	f800283a 	ret
   47eec:	00452200 	call	45220 <__sinit>
   47ef0:	003f2f06 	br	47bb0 <__alt_data_end+0xfffe23b0>
   47ef4:	d8c02517 	ldw	r3,148(sp)
   47ef8:	d8802215 	stw	r2,136(sp)
   47efc:	00c7c83a 	sub	r3,zero,r3
   47f00:	d8c02515 	stw	r3,148(sp)
   47f04:	8c400114 	ori	r17,r17,4
   47f08:	b0c00007 	ldb	r3,0(r22)
   47f0c:	003f7306 	br	47cdc <__alt_data_end+0xfffe24dc>
   47f10:	00800c04 	movi	r2,48
   47f14:	d9402217 	ldw	r5,136(sp)
   47f18:	d8801d05 	stb	r2,116(sp)
   47f1c:	00801e04 	movi	r2,120
   47f20:	d8801d45 	stb	r2,117(sp)
   47f24:	d8001d85 	stb	zero,118(sp)
   47f28:	b811883a 	mov	r8,r23
   47f2c:	28c00104 	addi	r3,r5,4
   47f30:	2cc00017 	ldw	r19,0(r5)
   47f34:	0029883a 	mov	r20,zero
   47f38:	88800094 	ori	r2,r17,2
   47f3c:	80032516 	blt	r16,zero,48bd4 <___vfiprintf_internal_r+0x106c>
   47f40:	00bfdfc4 	movi	r2,-129
   47f44:	88a2703a 	and	r17,r17,r2
   47f48:	d8c02215 	stw	r3,136(sp)
   47f4c:	8c400094 	ori	r17,r17,2
   47f50:	98032a1e 	bne	r19,zero,48bfc <___vfiprintf_internal_r+0x1094>
   47f54:	008001b4 	movhi	r2,6
   47f58:	10a4d804 	addi	r2,r2,-27808
   47f5c:	d8802615 	stw	r2,152(sp)
   47f60:	002b883a 	mov	r21,zero
   47f64:	8001741e 	bne	r16,zero,48538 <___vfiprintf_internal_r+0x9d0>
   47f68:	0021883a 	mov	r16,zero
   47f6c:	0029883a 	mov	r20,zero
   47f70:	ddc01a04 	addi	r23,sp,104
   47f74:	8027883a 	mov	r19,r16
   47f78:	8500010e 	bge	r16,r20,47f80 <___vfiprintf_internal_r+0x418>
   47f7c:	a027883a 	mov	r19,r20
   47f80:	ad403fcc 	andi	r21,r21,255
   47f84:	ad40201c 	xori	r21,r21,128
   47f88:	ad7fe004 	addi	r21,r21,-128
   47f8c:	a8000126 	beq	r21,zero,47f94 <___vfiprintf_internal_r+0x42c>
   47f90:	9cc00044 	addi	r19,r19,1
   47f94:	89c0008c 	andi	r7,r17,2
   47f98:	38000126 	beq	r7,zero,47fa0 <___vfiprintf_internal_r+0x438>
   47f9c:	9cc00084 	addi	r19,r19,2
   47fa0:	88c0210c 	andi	r3,r17,132
   47fa4:	1801dd1e 	bne	r3,zero,4871c <___vfiprintf_internal_r+0xbb4>
   47fa8:	d9402517 	ldw	r5,148(sp)
   47fac:	2cebc83a 	sub	r21,r5,r19
   47fb0:	0541da0e 	bge	zero,r21,4871c <___vfiprintf_internal_r+0xbb4>
   47fb4:	07000404 	movi	fp,16
   47fb8:	d8801c17 	ldw	r2,112(sp)
   47fbc:	e543be0e 	bge	fp,r21,48eb8 <___vfiprintf_internal_r+0x1350>
   47fc0:	014001b4 	movhi	r5,6
   47fc4:	29653d04 	addi	r5,r5,-27404
   47fc8:	dc002715 	stw	r16,156(sp)
   47fcc:	d9801b17 	ldw	r6,108(sp)
   47fd0:	a821883a 	mov	r16,r21
   47fd4:	d9402315 	stw	r5,140(sp)
   47fd8:	028001c4 	movi	r10,7
   47fdc:	d9c02915 	stw	r7,164(sp)
   47fe0:	182b883a 	mov	r21,r3
   47fe4:	00000506 	br	47ffc <___vfiprintf_internal_r+0x494>
   47fe8:	31000084 	addi	r4,r6,2
   47fec:	42000204 	addi	r8,r8,8
   47ff0:	180d883a 	mov	r6,r3
   47ff4:	843ffc04 	addi	r16,r16,-16
   47ff8:	e4000f0e 	bge	fp,r16,48038 <___vfiprintf_internal_r+0x4d0>
   47ffc:	010001b4 	movhi	r4,6
   48000:	10800404 	addi	r2,r2,16
   48004:	30c00044 	addi	r3,r6,1
   48008:	21253d04 	addi	r4,r4,-27404
   4800c:	41000015 	stw	r4,0(r8)
   48010:	47000115 	stw	fp,4(r8)
   48014:	d8801c15 	stw	r2,112(sp)
   48018:	d8c01b15 	stw	r3,108(sp)
   4801c:	50fff20e 	bge	r10,r3,47fe8 <__alt_data_end+0xfffe27e8>
   48020:	1001b21e 	bne	r2,zero,486ec <___vfiprintf_internal_r+0xb84>
   48024:	843ffc04 	addi	r16,r16,-16
   48028:	000d883a 	mov	r6,zero
   4802c:	01000044 	movi	r4,1
   48030:	d811883a 	mov	r8,sp
   48034:	e43ff116 	blt	fp,r16,47ffc <__alt_data_end+0xfffe27fc>
   48038:	a807883a 	mov	r3,r21
   4803c:	d9c02917 	ldw	r7,164(sp)
   48040:	802b883a 	mov	r21,r16
   48044:	dc002717 	ldw	r16,156(sp)
   48048:	d9402317 	ldw	r5,140(sp)
   4804c:	a885883a 	add	r2,r21,r2
   48050:	45400115 	stw	r21,4(r8)
   48054:	41400015 	stw	r5,0(r8)
   48058:	d8801c15 	stw	r2,112(sp)
   4805c:	d9001b15 	stw	r4,108(sp)
   48060:	014001c4 	movi	r5,7
   48064:	29026216 	blt	r5,r4,489f0 <___vfiprintf_internal_r+0xe88>
   48068:	d9801d87 	ldb	r6,118(sp)
   4806c:	42000204 	addi	r8,r8,8
   48070:	21400044 	addi	r5,r4,1
   48074:	3001ae1e 	bne	r6,zero,48730 <___vfiprintf_internal_r+0xbc8>
   48078:	3801bb26 	beq	r7,zero,48768 <___vfiprintf_internal_r+0xc00>
   4807c:	d9001d04 	addi	r4,sp,116
   48080:	10800084 	addi	r2,r2,2
   48084:	41000015 	stw	r4,0(r8)
   48088:	01000084 	movi	r4,2
   4808c:	41000115 	stw	r4,4(r8)
   48090:	d8801c15 	stw	r2,112(sp)
   48094:	d9401b15 	stw	r5,108(sp)
   48098:	010001c4 	movi	r4,7
   4809c:	2142680e 	bge	r4,r5,48a40 <___vfiprintf_internal_r+0xed8>
   480a0:	1002b11e 	bne	r2,zero,48b68 <___vfiprintf_internal_r+0x1000>
   480a4:	01802004 	movi	r6,128
   480a8:	01400044 	movi	r5,1
   480ac:	0009883a 	mov	r4,zero
   480b0:	d811883a 	mov	r8,sp
   480b4:	1981ae1e 	bne	r3,r6,48770 <___vfiprintf_internal_r+0xc08>
   480b8:	d8c02517 	ldw	r3,148(sp)
   480bc:	1cf9c83a 	sub	fp,r3,r19
   480c0:	0701ab0e 	bge	zero,fp,48770 <___vfiprintf_internal_r+0xc08>
   480c4:	05400404 	movi	r21,16
   480c8:	af03a90e 	bge	r21,fp,48f70 <___vfiprintf_internal_r+0x1408>
   480cc:	014001b4 	movhi	r5,6
   480d0:	29653904 	addi	r5,r5,-27420
   480d4:	d9402315 	stw	r5,140(sp)
   480d8:	01c001c4 	movi	r7,7
   480dc:	00000506 	br	480f4 <___vfiprintf_internal_r+0x58c>
   480e0:	21800084 	addi	r6,r4,2
   480e4:	42000204 	addi	r8,r8,8
   480e8:	1809883a 	mov	r4,r3
   480ec:	e73ffc04 	addi	fp,fp,-16
   480f0:	af000d0e 	bge	r21,fp,48128 <___vfiprintf_internal_r+0x5c0>
   480f4:	10800404 	addi	r2,r2,16
   480f8:	20c00044 	addi	r3,r4,1
   480fc:	44800015 	stw	r18,0(r8)
   48100:	45400115 	stw	r21,4(r8)
   48104:	d8801c15 	stw	r2,112(sp)
   48108:	d8c01b15 	stw	r3,108(sp)
   4810c:	38fff40e 	bge	r7,r3,480e0 <__alt_data_end+0xfffe28e0>
   48110:	10022b1e 	bne	r2,zero,489c0 <___vfiprintf_internal_r+0xe58>
   48114:	e73ffc04 	addi	fp,fp,-16
   48118:	01800044 	movi	r6,1
   4811c:	0009883a 	mov	r4,zero
   48120:	d811883a 	mov	r8,sp
   48124:	af3ff316 	blt	r21,fp,480f4 <__alt_data_end+0xfffe28f4>
   48128:	d8c02317 	ldw	r3,140(sp)
   4812c:	1705883a 	add	r2,r2,fp
   48130:	47000115 	stw	fp,4(r8)
   48134:	40c00015 	stw	r3,0(r8)
   48138:	d8801c15 	stw	r2,112(sp)
   4813c:	d9801b15 	stw	r6,108(sp)
   48140:	00c001c4 	movi	r3,7
   48144:	19829416 	blt	r3,r6,48b98 <___vfiprintf_internal_r+0x1030>
   48148:	8521c83a 	sub	r16,r16,r20
   4814c:	42000204 	addi	r8,r8,8
   48150:	31400044 	addi	r5,r6,1
   48154:	3009883a 	mov	r4,r6
   48158:	04018716 	blt	zero,r16,48778 <___vfiprintf_internal_r+0xc10>
   4815c:	a085883a 	add	r2,r20,r2
   48160:	45c00015 	stw	r23,0(r8)
   48164:	45000115 	stw	r20,4(r8)
   48168:	d8801c15 	stw	r2,112(sp)
   4816c:	d9401b15 	stw	r5,108(sp)
   48170:	00c001c4 	movi	r3,7
   48174:	1941c20e 	bge	r3,r5,48880 <___vfiprintf_internal_r+0xd18>
   48178:	1002531e 	bne	r2,zero,48ac8 <___vfiprintf_internal_r+0xf60>
   4817c:	d8001b15 	stw	zero,108(sp)
   48180:	8c40010c 	andi	r17,r17,4
   48184:	88023226 	beq	r17,zero,48a50 <___vfiprintf_internal_r+0xee8>
   48188:	d9002517 	ldw	r4,148(sp)
   4818c:	24e3c83a 	sub	r17,r4,r19
   48190:	04432916 	blt	zero,r17,48e38 <___vfiprintf_internal_r+0x12d0>
   48194:	d8802517 	ldw	r2,148(sp)
   48198:	14c0010e 	bge	r2,r19,481a0 <___vfiprintf_internal_r+0x638>
   4819c:	9805883a 	mov	r2,r19
   481a0:	d8c02417 	ldw	r3,144(sp)
   481a4:	1887883a 	add	r3,r3,r2
   481a8:	d8c02415 	stw	r3,144(sp)
   481ac:	d8001b15 	stw	zero,108(sp)
   481b0:	d811883a 	mov	r8,sp
   481b4:	003ea006 	br	47c38 <__alt_data_end+0xfffe2438>
   481b8:	8c400814 	ori	r17,r17,32
   481bc:	b0c00007 	ldb	r3,0(r22)
   481c0:	003ec606 	br	47cdc <__alt_data_end+0xfffe24dc>
   481c4:	b0c00007 	ldb	r3,0(r22)
   481c8:	00801b04 	movi	r2,108
   481cc:	18832026 	beq	r3,r2,48e50 <___vfiprintf_internal_r+0x12e8>
   481d0:	8c400414 	ori	r17,r17,16
   481d4:	003ec106 	br	47cdc <__alt_data_end+0xfffe24dc>
   481d8:	9cc03fcc 	andi	r19,r19,255
   481dc:	b811883a 	mov	r8,r23
   481e0:	9803981e 	bne	r19,zero,49044 <___vfiprintf_internal_r+0x14dc>
   481e4:	8880080c 	andi	r2,r17,32
   481e8:	1002be26 	beq	r2,zero,48ce4 <___vfiprintf_internal_r+0x117c>
   481ec:	d9002217 	ldw	r4,136(sp)
   481f0:	d9402417 	ldw	r5,144(sp)
   481f4:	20800017 	ldw	r2,0(r4)
   481f8:	2807d7fa 	srai	r3,r5,31
   481fc:	21000104 	addi	r4,r4,4
   48200:	d9002215 	stw	r4,136(sp)
   48204:	11400015 	stw	r5,0(r2)
   48208:	10c00115 	stw	r3,4(r2)
   4820c:	003e8a06 	br	47c38 <__alt_data_end+0xfffe2438>
   48210:	9cc03fcc 	andi	r19,r19,255
   48214:	b811883a 	mov	r8,r23
   48218:	9803871e 	bne	r19,zero,49038 <___vfiprintf_internal_r+0x14d0>
   4821c:	8880080c 	andi	r2,r17,32
   48220:	10009a26 	beq	r2,zero,4848c <___vfiprintf_internal_r+0x924>
   48224:	d9002217 	ldw	r4,136(sp)
   48228:	d8001d85 	stb	zero,118(sp)
   4822c:	20800204 	addi	r2,r4,8
   48230:	24c00017 	ldw	r19,0(r4)
   48234:	25000117 	ldw	r20,4(r4)
   48238:	8002a416 	blt	r16,zero,48ccc <___vfiprintf_internal_r+0x1164>
   4823c:	013fdfc4 	movi	r4,-129
   48240:	9d06b03a 	or	r3,r19,r20
   48244:	d8802215 	stw	r2,136(sp)
   48248:	8922703a 	and	r17,r17,r4
   4824c:	18009b26 	beq	r3,zero,484bc <___vfiprintf_internal_r+0x954>
   48250:	002b883a 	mov	r21,zero
   48254:	ddc01a04 	addi	r23,sp,104
   48258:	9806d0fa 	srli	r3,r19,3
   4825c:	a008977a 	slli	r4,r20,29
   48260:	a028d0fa 	srli	r20,r20,3
   48264:	9cc001cc 	andi	r19,r19,7
   48268:	98800c04 	addi	r2,r19,48
   4826c:	bdffffc4 	addi	r23,r23,-1
   48270:	20e6b03a 	or	r19,r4,r3
   48274:	b8800005 	stb	r2,0(r23)
   48278:	9d06b03a 	or	r3,r19,r20
   4827c:	183ff61e 	bne	r3,zero,48258 <__alt_data_end+0xfffe2a58>
   48280:	88c0004c 	andi	r3,r17,1
   48284:	18021f1e 	bne	r3,zero,48b04 <___vfiprintf_internal_r+0xf9c>
   48288:	d9401e17 	ldw	r5,120(sp)
   4828c:	2de9c83a 	sub	r20,r5,r23
   48290:	003f3806 	br	47f74 <__alt_data_end+0xfffe2774>
   48294:	9cc03fcc 	andi	r19,r19,255
   48298:	b811883a 	mov	r8,r23
   4829c:	98034f1e 	bne	r19,zero,48fdc <___vfiprintf_internal_r+0x1474>
   482a0:	008001b4 	movhi	r2,6
   482a4:	10a4d804 	addi	r2,r2,-27808
   482a8:	d8802615 	stw	r2,152(sp)
   482ac:	8880080c 	andi	r2,r17,32
   482b0:	1000ac26 	beq	r2,zero,48564 <___vfiprintf_internal_r+0x9fc>
   482b4:	d9002217 	ldw	r4,136(sp)
   482b8:	24c00017 	ldw	r19,0(r4)
   482bc:	25000117 	ldw	r20,4(r4)
   482c0:	21000204 	addi	r4,r4,8
   482c4:	d9002215 	stw	r4,136(sp)
   482c8:	8880004c 	andi	r2,r17,1
   482cc:	1001e726 	beq	r2,zero,48a6c <___vfiprintf_internal_r+0xf04>
   482d0:	9d04b03a 	or	r2,r19,r20
   482d4:	10025c1e 	bne	r2,zero,48c48 <___vfiprintf_internal_r+0x10e0>
   482d8:	d8001d85 	stb	zero,118(sp)
   482dc:	80024416 	blt	r16,zero,48bf0 <___vfiprintf_internal_r+0x1088>
   482e0:	00bfdfc4 	movi	r2,-129
   482e4:	88a2703a 	and	r17,r17,r2
   482e8:	003f1d06 	br	47f60 <__alt_data_end+0xfffe2760>
   482ec:	d8c02217 	ldw	r3,136(sp)
   482f0:	04c00044 	movi	r19,1
   482f4:	b811883a 	mov	r8,r23
   482f8:	18800017 	ldw	r2,0(r3)
   482fc:	18c00104 	addi	r3,r3,4
   48300:	d8001d85 	stb	zero,118(sp)
   48304:	d8801005 	stb	r2,64(sp)
   48308:	d8c02215 	stw	r3,136(sp)
   4830c:	9829883a 	mov	r20,r19
   48310:	ddc01004 	addi	r23,sp,64
   48314:	0021883a 	mov	r16,zero
   48318:	003f1e06 	br	47f94 <__alt_data_end+0xfffe2794>
   4831c:	9cc03fcc 	andi	r19,r19,255
   48320:	b811883a 	mov	r8,r23
   48324:	9803331e 	bne	r19,zero,48ff4 <___vfiprintf_internal_r+0x148c>
   48328:	8880080c 	andi	r2,r17,32
   4832c:	10004826 	beq	r2,zero,48450 <___vfiprintf_internal_r+0x8e8>
   48330:	d9002217 	ldw	r4,136(sp)
   48334:	20800117 	ldw	r2,4(r4)
   48338:	24c00017 	ldw	r19,0(r4)
   4833c:	21000204 	addi	r4,r4,8
   48340:	d9002215 	stw	r4,136(sp)
   48344:	1029883a 	mov	r20,r2
   48348:	10024c16 	blt	r2,zero,48c7c <___vfiprintf_internal_r+0x1114>
   4834c:	dd401d83 	ldbu	r21,118(sp)
   48350:	80007116 	blt	r16,zero,48518 <___vfiprintf_internal_r+0x9b0>
   48354:	00ffdfc4 	movi	r3,-129
   48358:	9d04b03a 	or	r2,r19,r20
   4835c:	88e2703a 	and	r17,r17,r3
   48360:	1000d126 	beq	r2,zero,486a8 <___vfiprintf_internal_r+0xb40>
   48364:	a0023526 	beq	r20,zero,48c3c <___vfiprintf_internal_r+0x10d4>
   48368:	ddc01a04 	addi	r23,sp,104
   4836c:	4039883a 	mov	fp,r8
   48370:	9809883a 	mov	r4,r19
   48374:	a00b883a 	mov	r5,r20
   48378:	01800284 	movi	r6,10
   4837c:	000f883a 	mov	r7,zero
   48380:	004ac1c0 	call	4ac1c <__umoddi3>
   48384:	10800c04 	addi	r2,r2,48
   48388:	bdffffc4 	addi	r23,r23,-1
   4838c:	9809883a 	mov	r4,r19
   48390:	a00b883a 	mov	r5,r20
   48394:	b8800005 	stb	r2,0(r23)
   48398:	01800284 	movi	r6,10
   4839c:	000f883a 	mov	r7,zero
   483a0:	004a6200 	call	4a620 <__udivdi3>
   483a4:	1027883a 	mov	r19,r2
   483a8:	10c4b03a 	or	r2,r2,r3
   483ac:	1829883a 	mov	r20,r3
   483b0:	103fef1e 	bne	r2,zero,48370 <__alt_data_end+0xfffe2b70>
   483b4:	d9001e17 	ldw	r4,120(sp)
   483b8:	e011883a 	mov	r8,fp
   483bc:	25e9c83a 	sub	r20,r4,r23
   483c0:	003eec06 	br	47f74 <__alt_data_end+0xfffe2774>
   483c4:	d8802307 	ldb	r2,140(sp)
   483c8:	1002361e 	bne	r2,zero,48ca4 <___vfiprintf_internal_r+0x113c>
   483cc:	00c00804 	movi	r3,32
   483d0:	d8c02305 	stb	r3,140(sp)
   483d4:	04c00044 	movi	r19,1
   483d8:	b0c00007 	ldb	r3,0(r22)
   483dc:	003e3f06 	br	47cdc <__alt_data_end+0xfffe24dc>
   483e0:	8c400054 	ori	r17,r17,1
   483e4:	b0c00007 	ldb	r3,0(r22)
   483e8:	003e3c06 	br	47cdc <__alt_data_end+0xfffe24dc>
   483ec:	8c402014 	ori	r17,r17,128
   483f0:	b0c00007 	ldb	r3,0(r22)
   483f4:	003e3906 	br	47cdc <__alt_data_end+0xfffe24dc>
   483f8:	dc002715 	stw	r16,156(sp)
   483fc:	d8002515 	stw	zero,148(sp)
   48400:	1f3ff404 	addi	fp,r3,-48
   48404:	0009883a 	mov	r4,zero
   48408:	b021883a 	mov	r16,r22
   4840c:	01400284 	movi	r5,10
   48410:	00407040 	call	40704 <__mulsi3>
   48414:	80c00007 	ldb	r3,0(r16)
   48418:	e089883a 	add	r4,fp,r2
   4841c:	b5800044 	addi	r22,r22,1
   48420:	1f3ff404 	addi	fp,r3,-48
   48424:	b021883a 	mov	r16,r22
   48428:	af3ff82e 	bgeu	r21,fp,4840c <__alt_data_end+0xfffe2c0c>
   4842c:	d9002515 	stw	r4,148(sp)
   48430:	dc002717 	ldw	r16,156(sp)
   48434:	003e2a06 	br	47ce0 <__alt_data_end+0xfffe24e0>
   48438:	9cc03fcc 	andi	r19,r19,255
   4843c:	b811883a 	mov	r8,r23
   48440:	9802e91e 	bne	r19,zero,48fe8 <___vfiprintf_internal_r+0x1480>
   48444:	8c400414 	ori	r17,r17,16
   48448:	8880080c 	andi	r2,r17,32
   4844c:	103fb81e 	bne	r2,zero,48330 <__alt_data_end+0xfffe2b30>
   48450:	8880040c 	andi	r2,r17,16
   48454:	10022e26 	beq	r2,zero,48d10 <___vfiprintf_internal_r+0x11a8>
   48458:	d9402217 	ldw	r5,136(sp)
   4845c:	2cc00017 	ldw	r19,0(r5)
   48460:	29400104 	addi	r5,r5,4
   48464:	d9402215 	stw	r5,136(sp)
   48468:	9829d7fa 	srai	r20,r19,31
   4846c:	a005883a 	mov	r2,r20
   48470:	003fb506 	br	48348 <__alt_data_end+0xfffe2b48>
   48474:	9cc03fcc 	andi	r19,r19,255
   48478:	b811883a 	mov	r8,r23
   4847c:	9802fa1e 	bne	r19,zero,49068 <___vfiprintf_internal_r+0x1500>
   48480:	8c400414 	ori	r17,r17,16
   48484:	8880080c 	andi	r2,r17,32
   48488:	103f661e 	bne	r2,zero,48224 <__alt_data_end+0xfffe2a24>
   4848c:	8880040c 	andi	r2,r17,16
   48490:	10020626 	beq	r2,zero,48cac <___vfiprintf_internal_r+0x1144>
   48494:	d9402217 	ldw	r5,136(sp)
   48498:	d8001d85 	stb	zero,118(sp)
   4849c:	0029883a 	mov	r20,zero
   484a0:	28800104 	addi	r2,r5,4
   484a4:	2cc00017 	ldw	r19,0(r5)
   484a8:	80020816 	blt	r16,zero,48ccc <___vfiprintf_internal_r+0x1164>
   484ac:	00ffdfc4 	movi	r3,-129
   484b0:	d8802215 	stw	r2,136(sp)
   484b4:	88e2703a 	and	r17,r17,r3
   484b8:	983f651e 	bne	r19,zero,48250 <__alt_data_end+0xfffe2a50>
   484bc:	002b883a 	mov	r21,zero
   484c0:	8002cf26 	beq	r16,zero,49000 <___vfiprintf_internal_r+0x1498>
   484c4:	0027883a 	mov	r19,zero
   484c8:	0029883a 	mov	r20,zero
   484cc:	003f6106 	br	48254 <__alt_data_end+0xfffe2a54>
   484d0:	9cc03fcc 	andi	r19,r19,255
   484d4:	b811883a 	mov	r8,r23
   484d8:	9802e01e 	bne	r19,zero,4905c <___vfiprintf_internal_r+0x14f4>
   484dc:	8c400414 	ori	r17,r17,16
   484e0:	8880080c 	andi	r2,r17,32
   484e4:	1000641e 	bne	r2,zero,48678 <___vfiprintf_internal_r+0xb10>
   484e8:	8880040c 	andi	r2,r17,16
   484ec:	1001c81e 	bne	r2,zero,48c10 <___vfiprintf_internal_r+0x10a8>
   484f0:	8880100c 	andi	r2,r17,64
   484f4:	d8001d85 	stb	zero,118(sp)
   484f8:	1002281e 	bne	r2,zero,48d9c <___vfiprintf_internal_r+0x1234>
   484fc:	d9002217 	ldw	r4,136(sp)
   48500:	0029883a 	mov	r20,zero
   48504:	20800104 	addi	r2,r4,4
   48508:	24c00017 	ldw	r19,0(r4)
   4850c:	8001c60e 	bge	r16,zero,48c28 <___vfiprintf_internal_r+0x10c0>
   48510:	d8802215 	stw	r2,136(sp)
   48514:	002b883a 	mov	r21,zero
   48518:	9d04b03a 	or	r2,r19,r20
   4851c:	103f911e 	bne	r2,zero,48364 <__alt_data_end+0xfffe2b64>
   48520:	00800044 	movi	r2,1
   48524:	10803fcc 	andi	r2,r2,255
   48528:	00c00044 	movi	r3,1
   4852c:	10c05f26 	beq	r2,r3,486ac <___vfiprintf_internal_r+0xb44>
   48530:	00c00084 	movi	r3,2
   48534:	10ffe31e 	bne	r2,r3,484c4 <__alt_data_end+0xfffe2cc4>
   48538:	0027883a 	mov	r19,zero
   4853c:	0029883a 	mov	r20,zero
   48540:	00015106 	br	48a88 <___vfiprintf_internal_r+0xf20>
   48544:	9cc03fcc 	andi	r19,r19,255
   48548:	b811883a 	mov	r8,r23
   4854c:	9802c01e 	bne	r19,zero,49050 <___vfiprintf_internal_r+0x14e8>
   48550:	014001b4 	movhi	r5,6
   48554:	2964d304 	addi	r5,r5,-27828
   48558:	d9402615 	stw	r5,152(sp)
   4855c:	8880080c 	andi	r2,r17,32
   48560:	103f541e 	bne	r2,zero,482b4 <__alt_data_end+0xfffe2ab4>
   48564:	8880040c 	andi	r2,r17,16
   48568:	1001f226 	beq	r2,zero,48d34 <___vfiprintf_internal_r+0x11cc>
   4856c:	d9402217 	ldw	r5,136(sp)
   48570:	0029883a 	mov	r20,zero
   48574:	2cc00017 	ldw	r19,0(r5)
   48578:	29400104 	addi	r5,r5,4
   4857c:	d9402215 	stw	r5,136(sp)
   48580:	003f5106 	br	482c8 <__alt_data_end+0xfffe2ac8>
   48584:	d8c02217 	ldw	r3,136(sp)
   48588:	b811883a 	mov	r8,r23
   4858c:	d8001d85 	stb	zero,118(sp)
   48590:	1dc00017 	ldw	r23,0(r3)
   48594:	1f000104 	addi	fp,r3,4
   48598:	b8025926 	beq	r23,zero,48f00 <___vfiprintf_internal_r+0x1398>
   4859c:	80023316 	blt	r16,zero,48e6c <___vfiprintf_internal_r+0x1304>
   485a0:	800d883a 	mov	r6,r16
   485a4:	000b883a 	mov	r5,zero
   485a8:	b809883a 	mov	r4,r23
   485ac:	da002a15 	stw	r8,168(sp)
   485b0:	00462d00 	call	462d0 <memchr>
   485b4:	da002a17 	ldw	r8,168(sp)
   485b8:	10026826 	beq	r2,zero,48f5c <___vfiprintf_internal_r+0x13f4>
   485bc:	15e9c83a 	sub	r20,r2,r23
   485c0:	dd401d83 	ldbu	r21,118(sp)
   485c4:	df002215 	stw	fp,136(sp)
   485c8:	0021883a 	mov	r16,zero
   485cc:	003e6906 	br	47f74 <__alt_data_end+0xfffe2774>
   485d0:	9cc03fcc 	andi	r19,r19,255
   485d4:	b811883a 	mov	r8,r23
   485d8:	983fc126 	beq	r19,zero,484e0 <__alt_data_end+0xfffe2ce0>
   485dc:	d8c02303 	ldbu	r3,140(sp)
   485e0:	d8c01d85 	stb	r3,118(sp)
   485e4:	003fbe06 	br	484e0 <__alt_data_end+0xfffe2ce0>
   485e8:	d9002217 	ldw	r4,136(sp)
   485ec:	d9402217 	ldw	r5,136(sp)
   485f0:	21000017 	ldw	r4,0(r4)
   485f4:	28800104 	addi	r2,r5,4
   485f8:	d9002515 	stw	r4,148(sp)
   485fc:	203e3d16 	blt	r4,zero,47ef4 <__alt_data_end+0xfffe26f4>
   48600:	d8802215 	stw	r2,136(sp)
   48604:	b0c00007 	ldb	r3,0(r22)
   48608:	003db406 	br	47cdc <__alt_data_end+0xfffe24dc>
   4860c:	00c00ac4 	movi	r3,43
   48610:	d8c02305 	stb	r3,140(sp)
   48614:	04c00044 	movi	r19,1
   48618:	b0c00007 	ldb	r3,0(r22)
   4861c:	003daf06 	br	47cdc <__alt_data_end+0xfffe24dc>
   48620:	b0c00007 	ldb	r3,0(r22)
   48624:	01000a84 	movi	r4,42
   48628:	b4000044 	addi	r16,r22,1
   4862c:	19025e26 	beq	r3,r4,48fa8 <___vfiprintf_internal_r+0x1440>
   48630:	1f3ff404 	addi	fp,r3,-48
   48634:	0009883a 	mov	r4,zero
   48638:	af025236 	bltu	r21,fp,48f84 <___vfiprintf_internal_r+0x141c>
   4863c:	01400284 	movi	r5,10
   48640:	00407040 	call	40704 <__mulsi3>
   48644:	80c00007 	ldb	r3,0(r16)
   48648:	1709883a 	add	r4,r2,fp
   4864c:	85800044 	addi	r22,r16,1
   48650:	1f3ff404 	addi	fp,r3,-48
   48654:	b021883a 	mov	r16,r22
   48658:	af3ff82e 	bgeu	r21,fp,4863c <__alt_data_end+0xfffe2e3c>
   4865c:	2021883a 	mov	r16,r4
   48660:	203d9f0e 	bge	r4,zero,47ce0 <__alt_data_end+0xfffe24e0>
   48664:	043fffc4 	movi	r16,-1
   48668:	003d9d06 	br	47ce0 <__alt_data_end+0xfffe24e0>
   4866c:	8c401014 	ori	r17,r17,64
   48670:	b0c00007 	ldb	r3,0(r22)
   48674:	003d9906 	br	47cdc <__alt_data_end+0xfffe24dc>
   48678:	d9002217 	ldw	r4,136(sp)
   4867c:	d8001d85 	stb	zero,118(sp)
   48680:	20c00204 	addi	r3,r4,8
   48684:	24c00017 	ldw	r19,0(r4)
   48688:	25000117 	ldw	r20,4(r4)
   4868c:	8001e716 	blt	r16,zero,48e2c <___vfiprintf_internal_r+0x12c4>
   48690:	013fdfc4 	movi	r4,-129
   48694:	9d04b03a 	or	r2,r19,r20
   48698:	d8c02215 	stw	r3,136(sp)
   4869c:	8922703a 	and	r17,r17,r4
   486a0:	002b883a 	mov	r21,zero
   486a4:	103f2f1e 	bne	r2,zero,48364 <__alt_data_end+0xfffe2b64>
   486a8:	803e2f26 	beq	r16,zero,47f68 <__alt_data_end+0xfffe2768>
   486ac:	0027883a 	mov	r19,zero
   486b0:	9cc00c04 	addi	r19,r19,48
   486b4:	dcc019c5 	stb	r19,103(sp)
   486b8:	dd002817 	ldw	r20,160(sp)
   486bc:	ddc019c4 	addi	r23,sp,103
   486c0:	003e2c06 	br	47f74 <__alt_data_end+0xfffe2774>
   486c4:	9cc03fcc 	andi	r19,r19,255
   486c8:	b811883a 	mov	r8,r23
   486cc:	9802571e 	bne	r19,zero,4902c <___vfiprintf_internal_r+0x14c4>
   486d0:	18005726 	beq	r3,zero,48830 <___vfiprintf_internal_r+0xcc8>
   486d4:	04c00044 	movi	r19,1
   486d8:	d8c01005 	stb	r3,64(sp)
   486dc:	d8001d85 	stb	zero,118(sp)
   486e0:	9829883a 	mov	r20,r19
   486e4:	ddc01004 	addi	r23,sp,64
   486e8:	003f0a06 	br	48314 <__alt_data_end+0xfffe2b14>
   486ec:	d9402017 	ldw	r5,128(sp)
   486f0:	d9002117 	ldw	r4,132(sp)
   486f4:	d9801a04 	addi	r6,sp,104
   486f8:	da802a15 	stw	r10,168(sp)
   486fc:	0047a540 	call	47a54 <__sprint_r.part.0>
   48700:	da802a17 	ldw	r10,168(sp)
   48704:	1000501e 	bne	r2,zero,48848 <___vfiprintf_internal_r+0xce0>
   48708:	d9801b17 	ldw	r6,108(sp)
   4870c:	d8801c17 	ldw	r2,112(sp)
   48710:	d811883a 	mov	r8,sp
   48714:	31000044 	addi	r4,r6,1
   48718:	003e3606 	br	47ff4 <__alt_data_end+0xfffe27f4>
   4871c:	d9001b17 	ldw	r4,108(sp)
   48720:	d8801c17 	ldw	r2,112(sp)
   48724:	21400044 	addi	r5,r4,1
   48728:	d9801d87 	ldb	r6,118(sp)
   4872c:	303e5226 	beq	r6,zero,48078 <__alt_data_end+0xfffe2878>
   48730:	01800044 	movi	r6,1
   48734:	d9001d84 	addi	r4,sp,118
   48738:	1185883a 	add	r2,r2,r6
   4873c:	41000015 	stw	r4,0(r8)
   48740:	41800115 	stw	r6,4(r8)
   48744:	d8801c15 	stw	r2,112(sp)
   48748:	d9401b15 	stw	r5,108(sp)
   4874c:	010001c4 	movi	r4,7
   48750:	2140b00e 	bge	r4,r5,48a14 <___vfiprintf_internal_r+0xeac>
   48754:	1000f61e 	bne	r2,zero,48b30 <___vfiprintf_internal_r+0xfc8>
   48758:	3800b31e 	bne	r7,zero,48a28 <___vfiprintf_internal_r+0xec0>
   4875c:	0009883a 	mov	r4,zero
   48760:	300b883a 	mov	r5,r6
   48764:	d811883a 	mov	r8,sp
   48768:	01802004 	movi	r6,128
   4876c:	19be5226 	beq	r3,r6,480b8 <__alt_data_end+0xfffe28b8>
   48770:	8521c83a 	sub	r16,r16,r20
   48774:	043e790e 	bge	zero,r16,4815c <__alt_data_end+0xfffe295c>
   48778:	05400404 	movi	r21,16
   4877c:	ac01b00e 	bge	r21,r16,48e40 <___vfiprintf_internal_r+0x12d8>
   48780:	014001b4 	movhi	r5,6
   48784:	29653904 	addi	r5,r5,-27420
   48788:	d9402315 	stw	r5,140(sp)
   4878c:	070001c4 	movi	fp,7
   48790:	00000506 	br	487a8 <___vfiprintf_internal_r+0xc40>
   48794:	21400084 	addi	r5,r4,2
   48798:	42000204 	addi	r8,r8,8
   4879c:	1809883a 	mov	r4,r3
   487a0:	843ffc04 	addi	r16,r16,-16
   487a4:	ac000d0e 	bge	r21,r16,487dc <___vfiprintf_internal_r+0xc74>
   487a8:	10800404 	addi	r2,r2,16
   487ac:	20c00044 	addi	r3,r4,1
   487b0:	44800015 	stw	r18,0(r8)
   487b4:	45400115 	stw	r21,4(r8)
   487b8:	d8801c15 	stw	r2,112(sp)
   487bc:	d8c01b15 	stw	r3,108(sp)
   487c0:	e0fff40e 	bge	fp,r3,48794 <__alt_data_end+0xfffe2f94>
   487c4:	1000101e 	bne	r2,zero,48808 <___vfiprintf_internal_r+0xca0>
   487c8:	843ffc04 	addi	r16,r16,-16
   487cc:	01400044 	movi	r5,1
   487d0:	0009883a 	mov	r4,zero
   487d4:	d811883a 	mov	r8,sp
   487d8:	ac3ff316 	blt	r21,r16,487a8 <__alt_data_end+0xfffe2fa8>
   487dc:	d8c02317 	ldw	r3,140(sp)
   487e0:	1405883a 	add	r2,r2,r16
   487e4:	44000115 	stw	r16,4(r8)
   487e8:	40c00015 	stw	r3,0(r8)
   487ec:	d8801c15 	stw	r2,112(sp)
   487f0:	d9401b15 	stw	r5,108(sp)
   487f4:	00c001c4 	movi	r3,7
   487f8:	19401916 	blt	r3,r5,48860 <___vfiprintf_internal_r+0xcf8>
   487fc:	42000204 	addi	r8,r8,8
   48800:	29400044 	addi	r5,r5,1
   48804:	003e5506 	br	4815c <__alt_data_end+0xfffe295c>
   48808:	d9402017 	ldw	r5,128(sp)
   4880c:	d9002117 	ldw	r4,132(sp)
   48810:	d9801a04 	addi	r6,sp,104
   48814:	0047a540 	call	47a54 <__sprint_r.part.0>
   48818:	10000b1e 	bne	r2,zero,48848 <___vfiprintf_internal_r+0xce0>
   4881c:	d9001b17 	ldw	r4,108(sp)
   48820:	d8801c17 	ldw	r2,112(sp)
   48824:	d811883a 	mov	r8,sp
   48828:	21400044 	addi	r5,r4,1
   4882c:	003fdc06 	br	487a0 <__alt_data_end+0xfffe2fa0>
   48830:	d8801c17 	ldw	r2,112(sp)
   48834:	10000426 	beq	r2,zero,48848 <___vfiprintf_internal_r+0xce0>
   48838:	d9402017 	ldw	r5,128(sp)
   4883c:	d9002117 	ldw	r4,132(sp)
   48840:	d9801a04 	addi	r6,sp,104
   48844:	0047a540 	call	47a54 <__sprint_r.part.0>
   48848:	d9402017 	ldw	r5,128(sp)
   4884c:	2880030b 	ldhu	r2,12(r5)
   48850:	1080100c 	andi	r2,r2,64
   48854:	10014d1e 	bne	r2,zero,48d8c <___vfiprintf_internal_r+0x1224>
   48858:	d8802417 	ldw	r2,144(sp)
   4885c:	003d9706 	br	47ebc <__alt_data_end+0xfffe26bc>
   48860:	1000d21e 	bne	r2,zero,48bac <___vfiprintf_internal_r+0x1044>
   48864:	00c00044 	movi	r3,1
   48868:	a005883a 	mov	r2,r20
   4886c:	ddc00015 	stw	r23,0(sp)
   48870:	dd000115 	stw	r20,4(sp)
   48874:	dd001c15 	stw	r20,112(sp)
   48878:	d8c01b15 	stw	r3,108(sp)
   4887c:	d811883a 	mov	r8,sp
   48880:	42000204 	addi	r8,r8,8
   48884:	8c40010c 	andi	r17,r17,4
   48888:	88004026 	beq	r17,zero,4898c <___vfiprintf_internal_r+0xe24>
   4888c:	d9002517 	ldw	r4,148(sp)
   48890:	24e3c83a 	sub	r17,r4,r19
   48894:	04403d0e 	bge	zero,r17,4898c <___vfiprintf_internal_r+0xe24>
   48898:	04000404 	movi	r16,16
   4889c:	8441a90e 	bge	r16,r17,48f44 <___vfiprintf_internal_r+0x13dc>
   488a0:	00c001b4 	movhi	r3,6
   488a4:	18e53d04 	addi	r3,r3,-27404
   488a8:	d9001b17 	ldw	r4,108(sp)
   488ac:	d8c02315 	stw	r3,140(sp)
   488b0:	050001c4 	movi	r20,7
   488b4:	dd402117 	ldw	r21,132(sp)
   488b8:	ddc02017 	ldw	r23,128(sp)
   488bc:	00000506 	br	488d4 <___vfiprintf_internal_r+0xd6c>
   488c0:	21400084 	addi	r5,r4,2
   488c4:	42000204 	addi	r8,r8,8
   488c8:	1809883a 	mov	r4,r3
   488cc:	8c7ffc04 	addi	r17,r17,-16
   488d0:	84400f0e 	bge	r16,r17,48910 <___vfiprintf_internal_r+0xda8>
   488d4:	014001b4 	movhi	r5,6
   488d8:	10800404 	addi	r2,r2,16
   488dc:	20c00044 	addi	r3,r4,1
   488e0:	29653d04 	addi	r5,r5,-27404
   488e4:	41400015 	stw	r5,0(r8)
   488e8:	44000115 	stw	r16,4(r8)
   488ec:	d8801c15 	stw	r2,112(sp)
   488f0:	d8c01b15 	stw	r3,108(sp)
   488f4:	a0fff20e 	bge	r20,r3,488c0 <__alt_data_end+0xfffe30c0>
   488f8:	1000141e 	bne	r2,zero,4894c <___vfiprintf_internal_r+0xde4>
   488fc:	8c7ffc04 	addi	r17,r17,-16
   48900:	01400044 	movi	r5,1
   48904:	0009883a 	mov	r4,zero
   48908:	d811883a 	mov	r8,sp
   4890c:	847ff116 	blt	r16,r17,488d4 <__alt_data_end+0xfffe30d4>
   48910:	d8c02317 	ldw	r3,140(sp)
   48914:	1445883a 	add	r2,r2,r17
   48918:	44400115 	stw	r17,4(r8)
   4891c:	40c00015 	stw	r3,0(r8)
   48920:	d8801c15 	stw	r2,112(sp)
   48924:	d9401b15 	stw	r5,108(sp)
   48928:	00c001c4 	movi	r3,7
   4892c:	1940170e 	bge	r3,r5,4898c <___vfiprintf_internal_r+0xe24>
   48930:	1000101e 	bne	r2,zero,48974 <___vfiprintf_internal_r+0xe0c>
   48934:	d8802517 	ldw	r2,148(sp)
   48938:	14c11616 	blt	r2,r19,48d94 <___vfiprintf_internal_r+0x122c>
   4893c:	d9002417 	ldw	r4,144(sp)
   48940:	2089883a 	add	r4,r4,r2
   48944:	d9002415 	stw	r4,144(sp)
   48948:	003e1806 	br	481ac <__alt_data_end+0xfffe29ac>
   4894c:	d9801a04 	addi	r6,sp,104
   48950:	b80b883a 	mov	r5,r23
   48954:	a809883a 	mov	r4,r21
   48958:	0047a540 	call	47a54 <__sprint_r.part.0>
   4895c:	103fba1e 	bne	r2,zero,48848 <__alt_data_end+0xfffe3048>
   48960:	d9001b17 	ldw	r4,108(sp)
   48964:	d8801c17 	ldw	r2,112(sp)
   48968:	d811883a 	mov	r8,sp
   4896c:	21400044 	addi	r5,r4,1
   48970:	003fd606 	br	488cc <__alt_data_end+0xfffe30cc>
   48974:	d9402017 	ldw	r5,128(sp)
   48978:	d9002117 	ldw	r4,132(sp)
   4897c:	d9801a04 	addi	r6,sp,104
   48980:	0047a540 	call	47a54 <__sprint_r.part.0>
   48984:	103fb01e 	bne	r2,zero,48848 <__alt_data_end+0xfffe3048>
   48988:	d8801c17 	ldw	r2,112(sp)
   4898c:	d8c02517 	ldw	r3,148(sp)
   48990:	1cc0010e 	bge	r3,r19,48998 <___vfiprintf_internal_r+0xe30>
   48994:	9807883a 	mov	r3,r19
   48998:	d9002417 	ldw	r4,144(sp)
   4899c:	20c9883a 	add	r4,r4,r3
   489a0:	d9002415 	stw	r4,144(sp)
   489a4:	103e0126 	beq	r2,zero,481ac <__alt_data_end+0xfffe29ac>
   489a8:	d9402017 	ldw	r5,128(sp)
   489ac:	d9002117 	ldw	r4,132(sp)
   489b0:	d9801a04 	addi	r6,sp,104
   489b4:	0047a540 	call	47a54 <__sprint_r.part.0>
   489b8:	103dfc26 	beq	r2,zero,481ac <__alt_data_end+0xfffe29ac>
   489bc:	003fa206 	br	48848 <__alt_data_end+0xfffe3048>
   489c0:	d9402017 	ldw	r5,128(sp)
   489c4:	d9002117 	ldw	r4,132(sp)
   489c8:	d9801a04 	addi	r6,sp,104
   489cc:	d9c02b15 	stw	r7,172(sp)
   489d0:	0047a540 	call	47a54 <__sprint_r.part.0>
   489d4:	d9c02b17 	ldw	r7,172(sp)
   489d8:	103f9b1e 	bne	r2,zero,48848 <__alt_data_end+0xfffe3048>
   489dc:	d9001b17 	ldw	r4,108(sp)
   489e0:	d8801c17 	ldw	r2,112(sp)
   489e4:	d811883a 	mov	r8,sp
   489e8:	21800044 	addi	r6,r4,1
   489ec:	003dbf06 	br	480ec <__alt_data_end+0xfffe28ec>
   489f0:	1000d81e 	bne	r2,zero,48d54 <___vfiprintf_internal_r+0x11ec>
   489f4:	d9001d87 	ldb	r4,118(sp)
   489f8:	20000a26 	beq	r4,zero,48a24 <___vfiprintf_internal_r+0xebc>
   489fc:	00800044 	movi	r2,1
   48a00:	d9001d84 	addi	r4,sp,118
   48a04:	100b883a 	mov	r5,r2
   48a08:	d9000015 	stw	r4,0(sp)
   48a0c:	d8800115 	stw	r2,4(sp)
   48a10:	d811883a 	mov	r8,sp
   48a14:	2809883a 	mov	r4,r5
   48a18:	42000204 	addi	r8,r8,8
   48a1c:	29400044 	addi	r5,r5,1
   48a20:	003d9506 	br	48078 <__alt_data_end+0xfffe2878>
   48a24:	3800fd26 	beq	r7,zero,48e1c <___vfiprintf_internal_r+0x12b4>
   48a28:	00800084 	movi	r2,2
   48a2c:	d9001d04 	addi	r4,sp,116
   48a30:	d9000015 	stw	r4,0(sp)
   48a34:	d8800115 	stw	r2,4(sp)
   48a38:	01400044 	movi	r5,1
   48a3c:	d811883a 	mov	r8,sp
   48a40:	2809883a 	mov	r4,r5
   48a44:	42000204 	addi	r8,r8,8
   48a48:	29400044 	addi	r5,r5,1
   48a4c:	003f4606 	br	48768 <__alt_data_end+0xfffe2f68>
   48a50:	d8802517 	ldw	r2,148(sp)
   48a54:	14c0010e 	bge	r2,r19,48a5c <___vfiprintf_internal_r+0xef4>
   48a58:	9805883a 	mov	r2,r19
   48a5c:	d9402417 	ldw	r5,144(sp)
   48a60:	288b883a 	add	r5,r5,r2
   48a64:	d9402415 	stw	r5,144(sp)
   48a68:	003dd006 	br	481ac <__alt_data_end+0xfffe29ac>
   48a6c:	d8001d85 	stb	zero,118(sp)
   48a70:	80005d16 	blt	r16,zero,48be8 <___vfiprintf_internal_r+0x1080>
   48a74:	00ffdfc4 	movi	r3,-129
   48a78:	9d04b03a 	or	r2,r19,r20
   48a7c:	88e2703a 	and	r17,r17,r3
   48a80:	103d3726 	beq	r2,zero,47f60 <__alt_data_end+0xfffe2760>
   48a84:	002b883a 	mov	r21,zero
   48a88:	d9002617 	ldw	r4,152(sp)
   48a8c:	ddc01a04 	addi	r23,sp,104
   48a90:	988003cc 	andi	r2,r19,15
   48a94:	a006973a 	slli	r3,r20,28
   48a98:	2085883a 	add	r2,r4,r2
   48a9c:	9826d13a 	srli	r19,r19,4
   48aa0:	10800003 	ldbu	r2,0(r2)
   48aa4:	a028d13a 	srli	r20,r20,4
   48aa8:	bdffffc4 	addi	r23,r23,-1
   48aac:	1ce6b03a 	or	r19,r3,r19
   48ab0:	b8800005 	stb	r2,0(r23)
   48ab4:	9d04b03a 	or	r2,r19,r20
   48ab8:	103ff51e 	bne	r2,zero,48a90 <__alt_data_end+0xfffe3290>
   48abc:	d8801e17 	ldw	r2,120(sp)
   48ac0:	15e9c83a 	sub	r20,r2,r23
   48ac4:	003d2b06 	br	47f74 <__alt_data_end+0xfffe2774>
   48ac8:	d9402017 	ldw	r5,128(sp)
   48acc:	d9002117 	ldw	r4,132(sp)
   48ad0:	d9801a04 	addi	r6,sp,104
   48ad4:	0047a540 	call	47a54 <__sprint_r.part.0>
   48ad8:	103f5b1e 	bne	r2,zero,48848 <__alt_data_end+0xfffe3048>
   48adc:	d8801c17 	ldw	r2,112(sp)
   48ae0:	d811883a 	mov	r8,sp
   48ae4:	003f6706 	br	48884 <__alt_data_end+0xfffe3084>
   48ae8:	d9402017 	ldw	r5,128(sp)
   48aec:	d9002117 	ldw	r4,132(sp)
   48af0:	d9801a04 	addi	r6,sp,104
   48af4:	0047a540 	call	47a54 <__sprint_r.part.0>
   48af8:	103f531e 	bne	r2,zero,48848 <__alt_data_end+0xfffe3048>
   48afc:	d811883a 	mov	r8,sp
   48b00:	003cd906 	br	47e68 <__alt_data_end+0xfffe2668>
   48b04:	10803fcc 	andi	r2,r2,255
   48b08:	1080201c 	xori	r2,r2,128
   48b0c:	10bfe004 	addi	r2,r2,-128
   48b10:	00c00c04 	movi	r3,48
   48b14:	10ffe926 	beq	r2,r3,48abc <__alt_data_end+0xfffe32bc>
   48b18:	b8ffffc5 	stb	r3,-1(r23)
   48b1c:	d8c01e17 	ldw	r3,120(sp)
   48b20:	b8bfffc4 	addi	r2,r23,-1
   48b24:	102f883a 	mov	r23,r2
   48b28:	18a9c83a 	sub	r20,r3,r2
   48b2c:	003d1106 	br	47f74 <__alt_data_end+0xfffe2774>
   48b30:	d9402017 	ldw	r5,128(sp)
   48b34:	d9002117 	ldw	r4,132(sp)
   48b38:	d9801a04 	addi	r6,sp,104
   48b3c:	d8c02a15 	stw	r3,168(sp)
   48b40:	d9c02b15 	stw	r7,172(sp)
   48b44:	0047a540 	call	47a54 <__sprint_r.part.0>
   48b48:	d8c02a17 	ldw	r3,168(sp)
   48b4c:	d9c02b17 	ldw	r7,172(sp)
   48b50:	103f3d1e 	bne	r2,zero,48848 <__alt_data_end+0xfffe3048>
   48b54:	d9001b17 	ldw	r4,108(sp)
   48b58:	d8801c17 	ldw	r2,112(sp)
   48b5c:	d811883a 	mov	r8,sp
   48b60:	21400044 	addi	r5,r4,1
   48b64:	003d4406 	br	48078 <__alt_data_end+0xfffe2878>
   48b68:	d9402017 	ldw	r5,128(sp)
   48b6c:	d9002117 	ldw	r4,132(sp)
   48b70:	d9801a04 	addi	r6,sp,104
   48b74:	d8c02a15 	stw	r3,168(sp)
   48b78:	0047a540 	call	47a54 <__sprint_r.part.0>
   48b7c:	d8c02a17 	ldw	r3,168(sp)
   48b80:	103f311e 	bne	r2,zero,48848 <__alt_data_end+0xfffe3048>
   48b84:	d9001b17 	ldw	r4,108(sp)
   48b88:	d8801c17 	ldw	r2,112(sp)
   48b8c:	d811883a 	mov	r8,sp
   48b90:	21400044 	addi	r5,r4,1
   48b94:	003ef406 	br	48768 <__alt_data_end+0xfffe2f68>
   48b98:	1000bd1e 	bne	r2,zero,48e90 <___vfiprintf_internal_r+0x1328>
   48b9c:	01400044 	movi	r5,1
   48ba0:	0009883a 	mov	r4,zero
   48ba4:	d811883a 	mov	r8,sp
   48ba8:	003ef106 	br	48770 <__alt_data_end+0xfffe2f70>
   48bac:	d9402017 	ldw	r5,128(sp)
   48bb0:	d9002117 	ldw	r4,132(sp)
   48bb4:	d9801a04 	addi	r6,sp,104
   48bb8:	0047a540 	call	47a54 <__sprint_r.part.0>
   48bbc:	103f221e 	bne	r2,zero,48848 <__alt_data_end+0xfffe3048>
   48bc0:	d9401b17 	ldw	r5,108(sp)
   48bc4:	d8801c17 	ldw	r2,112(sp)
   48bc8:	d811883a 	mov	r8,sp
   48bcc:	29400044 	addi	r5,r5,1
   48bd0:	003d6206 	br	4815c <__alt_data_end+0xfffe295c>
   48bd4:	014001b4 	movhi	r5,6
   48bd8:	2964d804 	addi	r5,r5,-27808
   48bdc:	d9402615 	stw	r5,152(sp)
   48be0:	d8c02215 	stw	r3,136(sp)
   48be4:	1023883a 	mov	r17,r2
   48be8:	9d04b03a 	or	r2,r19,r20
   48bec:	103fa51e 	bne	r2,zero,48a84 <__alt_data_end+0xfffe3284>
   48bf0:	002b883a 	mov	r21,zero
   48bf4:	00800084 	movi	r2,2
   48bf8:	003e4a06 	br	48524 <__alt_data_end+0xfffe2d24>
   48bfc:	014001b4 	movhi	r5,6
   48c00:	2964d804 	addi	r5,r5,-27808
   48c04:	002b883a 	mov	r21,zero
   48c08:	d9402615 	stw	r5,152(sp)
   48c0c:	003f9e06 	br	48a88 <__alt_data_end+0xfffe3288>
   48c10:	d9402217 	ldw	r5,136(sp)
   48c14:	d8001d85 	stb	zero,118(sp)
   48c18:	0029883a 	mov	r20,zero
   48c1c:	28800104 	addi	r2,r5,4
   48c20:	2cc00017 	ldw	r19,0(r5)
   48c24:	803e3a16 	blt	r16,zero,48510 <__alt_data_end+0xfffe2d10>
   48c28:	00ffdfc4 	movi	r3,-129
   48c2c:	d8802215 	stw	r2,136(sp)
   48c30:	88e2703a 	and	r17,r17,r3
   48c34:	002b883a 	mov	r21,zero
   48c38:	983e9b26 	beq	r19,zero,486a8 <__alt_data_end+0xfffe2ea8>
   48c3c:	00800244 	movi	r2,9
   48c40:	14fdc936 	bltu	r2,r19,48368 <__alt_data_end+0xfffe2b68>
   48c44:	003e9a06 	br	486b0 <__alt_data_end+0xfffe2eb0>
   48c48:	00800c04 	movi	r2,48
   48c4c:	d8c01d45 	stb	r3,117(sp)
   48c50:	d8801d05 	stb	r2,116(sp)
   48c54:	d8001d85 	stb	zero,118(sp)
   48c58:	88c00094 	ori	r3,r17,2
   48c5c:	80009c16 	blt	r16,zero,48ed0 <___vfiprintf_internal_r+0x1368>
   48c60:	00bfdfc4 	movi	r2,-129
   48c64:	88a2703a 	and	r17,r17,r2
   48c68:	8c400094 	ori	r17,r17,2
   48c6c:	002b883a 	mov	r21,zero
   48c70:	003f8506 	br	48a88 <__alt_data_end+0xfffe3288>
   48c74:	b029883a 	mov	r20,r22
   48c78:	003c0b06 	br	47ca8 <__alt_data_end+0xfffe24a8>
   48c7c:	04e7c83a 	sub	r19,zero,r19
   48c80:	05400b44 	movi	r21,45
   48c84:	9804c03a 	cmpne	r2,r19,zero
   48c88:	0529c83a 	sub	r20,zero,r20
   48c8c:	dd401d85 	stb	r21,118(sp)
   48c90:	a0a9c83a 	sub	r20,r20,r2
   48c94:	80009716 	blt	r16,zero,48ef4 <___vfiprintf_internal_r+0x138c>
   48c98:	00bfdfc4 	movi	r2,-129
   48c9c:	88a2703a 	and	r17,r17,r2
   48ca0:	003db006 	br	48364 <__alt_data_end+0xfffe2b64>
   48ca4:	b0c00007 	ldb	r3,0(r22)
   48ca8:	003c0c06 	br	47cdc <__alt_data_end+0xfffe24dc>
   48cac:	8880100c 	andi	r2,r17,64
   48cb0:	d8001d85 	stb	zero,118(sp)
   48cb4:	1000461e 	bne	r2,zero,48dd0 <___vfiprintf_internal_r+0x1268>
   48cb8:	d9002217 	ldw	r4,136(sp)
   48cbc:	0029883a 	mov	r20,zero
   48cc0:	20800104 	addi	r2,r4,4
   48cc4:	24c00017 	ldw	r19,0(r4)
   48cc8:	803df80e 	bge	r16,zero,484ac <__alt_data_end+0xfffe2cac>
   48ccc:	9d06b03a 	or	r3,r19,r20
   48cd0:	d8802215 	stw	r2,136(sp)
   48cd4:	183d5e1e 	bne	r3,zero,48250 <__alt_data_end+0xfffe2a50>
   48cd8:	002b883a 	mov	r21,zero
   48cdc:	0005883a 	mov	r2,zero
   48ce0:	003e1006 	br	48524 <__alt_data_end+0xfffe2d24>
   48ce4:	8880040c 	andi	r2,r17,16
   48ce8:	1000321e 	bne	r2,zero,48db4 <___vfiprintf_internal_r+0x124c>
   48cec:	8c40100c 	andi	r17,r17,64
   48cf0:	88008d26 	beq	r17,zero,48f28 <___vfiprintf_internal_r+0x13c0>
   48cf4:	d9402217 	ldw	r5,136(sp)
   48cf8:	d8c02417 	ldw	r3,144(sp)
   48cfc:	28800017 	ldw	r2,0(r5)
   48d00:	29400104 	addi	r5,r5,4
   48d04:	d9402215 	stw	r5,136(sp)
   48d08:	10c0000d 	sth	r3,0(r2)
   48d0c:	003bca06 	br	47c38 <__alt_data_end+0xfffe2438>
   48d10:	8880100c 	andi	r2,r17,64
   48d14:	10003a26 	beq	r2,zero,48e00 <___vfiprintf_internal_r+0x1298>
   48d18:	d8802217 	ldw	r2,136(sp)
   48d1c:	14c0000f 	ldh	r19,0(r2)
   48d20:	10800104 	addi	r2,r2,4
   48d24:	d8802215 	stw	r2,136(sp)
   48d28:	9829d7fa 	srai	r20,r19,31
   48d2c:	a005883a 	mov	r2,r20
   48d30:	003d8506 	br	48348 <__alt_data_end+0xfffe2b48>
   48d34:	8880100c 	andi	r2,r17,64
   48d38:	10002b26 	beq	r2,zero,48de8 <___vfiprintf_internal_r+0x1280>
   48d3c:	d8802217 	ldw	r2,136(sp)
   48d40:	0029883a 	mov	r20,zero
   48d44:	14c0000b 	ldhu	r19,0(r2)
   48d48:	10800104 	addi	r2,r2,4
   48d4c:	d8802215 	stw	r2,136(sp)
   48d50:	003d5d06 	br	482c8 <__alt_data_end+0xfffe2ac8>
   48d54:	d9402017 	ldw	r5,128(sp)
   48d58:	d9002117 	ldw	r4,132(sp)
   48d5c:	d9801a04 	addi	r6,sp,104
   48d60:	d8c02a15 	stw	r3,168(sp)
   48d64:	d9c02b15 	stw	r7,172(sp)
   48d68:	0047a540 	call	47a54 <__sprint_r.part.0>
   48d6c:	d8c02a17 	ldw	r3,168(sp)
   48d70:	d9c02b17 	ldw	r7,172(sp)
   48d74:	103eb41e 	bne	r2,zero,48848 <__alt_data_end+0xfffe3048>
   48d78:	d9001b17 	ldw	r4,108(sp)
   48d7c:	d8801c17 	ldw	r2,112(sp)
   48d80:	d811883a 	mov	r8,sp
   48d84:	21400044 	addi	r5,r4,1
   48d88:	003e6706 	br	48728 <__alt_data_end+0xfffe2f28>
   48d8c:	00bfffc4 	movi	r2,-1
   48d90:	003c4a06 	br	47ebc <__alt_data_end+0xfffe26bc>
   48d94:	9805883a 	mov	r2,r19
   48d98:	003ee806 	br	4893c <__alt_data_end+0xfffe313c>
   48d9c:	d8c02217 	ldw	r3,136(sp)
   48da0:	0029883a 	mov	r20,zero
   48da4:	18800104 	addi	r2,r3,4
   48da8:	1cc0000b 	ldhu	r19,0(r3)
   48dac:	803f9e0e 	bge	r16,zero,48c28 <__alt_data_end+0xfffe3428>
   48db0:	003dd706 	br	48510 <__alt_data_end+0xfffe2d10>
   48db4:	d8c02217 	ldw	r3,136(sp)
   48db8:	d9002417 	ldw	r4,144(sp)
   48dbc:	18800017 	ldw	r2,0(r3)
   48dc0:	18c00104 	addi	r3,r3,4
   48dc4:	d8c02215 	stw	r3,136(sp)
   48dc8:	11000015 	stw	r4,0(r2)
   48dcc:	003b9a06 	br	47c38 <__alt_data_end+0xfffe2438>
   48dd0:	d8c02217 	ldw	r3,136(sp)
   48dd4:	0029883a 	mov	r20,zero
   48dd8:	18800104 	addi	r2,r3,4
   48ddc:	1cc0000b 	ldhu	r19,0(r3)
   48de0:	803db20e 	bge	r16,zero,484ac <__alt_data_end+0xfffe2cac>
   48de4:	003fb906 	br	48ccc <__alt_data_end+0xfffe34cc>
   48de8:	d9002217 	ldw	r4,136(sp)
   48dec:	0029883a 	mov	r20,zero
   48df0:	24c00017 	ldw	r19,0(r4)
   48df4:	21000104 	addi	r4,r4,4
   48df8:	d9002215 	stw	r4,136(sp)
   48dfc:	003d3206 	br	482c8 <__alt_data_end+0xfffe2ac8>
   48e00:	d8c02217 	ldw	r3,136(sp)
   48e04:	1cc00017 	ldw	r19,0(r3)
   48e08:	18c00104 	addi	r3,r3,4
   48e0c:	d8c02215 	stw	r3,136(sp)
   48e10:	9829d7fa 	srai	r20,r19,31
   48e14:	a005883a 	mov	r2,r20
   48e18:	003d4b06 	br	48348 <__alt_data_end+0xfffe2b48>
   48e1c:	0009883a 	mov	r4,zero
   48e20:	01400044 	movi	r5,1
   48e24:	d811883a 	mov	r8,sp
   48e28:	003e4f06 	br	48768 <__alt_data_end+0xfffe2f68>
   48e2c:	d8c02215 	stw	r3,136(sp)
   48e30:	002b883a 	mov	r21,zero
   48e34:	003db806 	br	48518 <__alt_data_end+0xfffe2d18>
   48e38:	d811883a 	mov	r8,sp
   48e3c:	003e9606 	br	48898 <__alt_data_end+0xfffe3098>
   48e40:	010001b4 	movhi	r4,6
   48e44:	21253904 	addi	r4,r4,-27420
   48e48:	d9002315 	stw	r4,140(sp)
   48e4c:	003e6306 	br	487dc <__alt_data_end+0xfffe2fdc>
   48e50:	b0c00043 	ldbu	r3,1(r22)
   48e54:	8c400814 	ori	r17,r17,32
   48e58:	b5800044 	addi	r22,r22,1
   48e5c:	18c03fcc 	andi	r3,r3,255
   48e60:	18c0201c 	xori	r3,r3,128
   48e64:	18ffe004 	addi	r3,r3,-128
   48e68:	003b9c06 	br	47cdc <__alt_data_end+0xfffe24dc>
   48e6c:	b809883a 	mov	r4,r23
   48e70:	da002a15 	stw	r8,168(sp)
   48e74:	00479bc0 	call	479bc <strlen>
   48e78:	1029883a 	mov	r20,r2
   48e7c:	dd401d83 	ldbu	r21,118(sp)
   48e80:	df002215 	stw	fp,136(sp)
   48e84:	0021883a 	mov	r16,zero
   48e88:	da002a17 	ldw	r8,168(sp)
   48e8c:	003c3906 	br	47f74 <__alt_data_end+0xfffe2774>
   48e90:	d9402017 	ldw	r5,128(sp)
   48e94:	d9002117 	ldw	r4,132(sp)
   48e98:	d9801a04 	addi	r6,sp,104
   48e9c:	0047a540 	call	47a54 <__sprint_r.part.0>
   48ea0:	103e691e 	bne	r2,zero,48848 <__alt_data_end+0xfffe3048>
   48ea4:	d9001b17 	ldw	r4,108(sp)
   48ea8:	d8801c17 	ldw	r2,112(sp)
   48eac:	d811883a 	mov	r8,sp
   48eb0:	21400044 	addi	r5,r4,1
   48eb4:	003e2e06 	br	48770 <__alt_data_end+0xfffe2f70>
   48eb8:	010001b4 	movhi	r4,6
   48ebc:	21253d04 	addi	r4,r4,-27404
   48ec0:	d9002315 	stw	r4,140(sp)
   48ec4:	d9001b17 	ldw	r4,108(sp)
   48ec8:	21000044 	addi	r4,r4,1
   48ecc:	003c5e06 	br	48048 <__alt_data_end+0xfffe2848>
   48ed0:	002b883a 	mov	r21,zero
   48ed4:	00800084 	movi	r2,2
   48ed8:	10803fcc 	andi	r2,r2,255
   48edc:	01000044 	movi	r4,1
   48ee0:	11002b26 	beq	r2,r4,48f90 <___vfiprintf_internal_r+0x1428>
   48ee4:	01000084 	movi	r4,2
   48ee8:	11002b1e 	bne	r2,r4,48f98 <___vfiprintf_internal_r+0x1430>
   48eec:	1823883a 	mov	r17,r3
   48ef0:	003ee506 	br	48a88 <__alt_data_end+0xfffe3288>
   48ef4:	8807883a 	mov	r3,r17
   48ef8:	00800044 	movi	r2,1
   48efc:	003ff606 	br	48ed8 <__alt_data_end+0xfffe36d8>
   48f00:	00800184 	movi	r2,6
   48f04:	1400012e 	bgeu	r2,r16,48f0c <___vfiprintf_internal_r+0x13a4>
   48f08:	1021883a 	mov	r16,r2
   48f0c:	8029883a 	mov	r20,r16
   48f10:	8027883a 	mov	r19,r16
   48f14:	80002216 	blt	r16,zero,48fa0 <___vfiprintf_internal_r+0x1438>
   48f18:	05c001b4 	movhi	r23,6
   48f1c:	df002215 	stw	fp,136(sp)
   48f20:	bde4dd04 	addi	r23,r23,-27788
   48f24:	003cfb06 	br	48314 <__alt_data_end+0xfffe2b14>
   48f28:	d9002217 	ldw	r4,136(sp)
   48f2c:	d9402417 	ldw	r5,144(sp)
   48f30:	20800017 	ldw	r2,0(r4)
   48f34:	21000104 	addi	r4,r4,4
   48f38:	d9002215 	stw	r4,136(sp)
   48f3c:	11400015 	stw	r5,0(r2)
   48f40:	003b3d06 	br	47c38 <__alt_data_end+0xfffe2438>
   48f44:	014001b4 	movhi	r5,6
   48f48:	29653d04 	addi	r5,r5,-27404
   48f4c:	d9402315 	stw	r5,140(sp)
   48f50:	d9401b17 	ldw	r5,108(sp)
   48f54:	29400044 	addi	r5,r5,1
   48f58:	003e6d06 	br	48910 <__alt_data_end+0xfffe3110>
   48f5c:	8029883a 	mov	r20,r16
   48f60:	dd401d83 	ldbu	r21,118(sp)
   48f64:	df002215 	stw	fp,136(sp)
   48f68:	0021883a 	mov	r16,zero
   48f6c:	003c0106 	br	47f74 <__alt_data_end+0xfffe2774>
   48f70:	00c001b4 	movhi	r3,6
   48f74:	18e53904 	addi	r3,r3,-27420
   48f78:	d8c02315 	stw	r3,140(sp)
   48f7c:	280d883a 	mov	r6,r5
   48f80:	003c6906 	br	48128 <__alt_data_end+0xfffe2928>
   48f84:	802d883a 	mov	r22,r16
   48f88:	0021883a 	mov	r16,zero
   48f8c:	003b5406 	br	47ce0 <__alt_data_end+0xfffe24e0>
   48f90:	1823883a 	mov	r17,r3
   48f94:	003cf306 	br	48364 <__alt_data_end+0xfffe2b64>
   48f98:	1823883a 	mov	r17,r3
   48f9c:	003cad06 	br	48254 <__alt_data_end+0xfffe2a54>
   48fa0:	0027883a 	mov	r19,zero
   48fa4:	003fdc06 	br	48f18 <__alt_data_end+0xfffe3718>
   48fa8:	d9402217 	ldw	r5,136(sp)
   48fac:	8005883a 	mov	r2,r16
   48fb0:	b0c00043 	ldbu	r3,1(r22)
   48fb4:	2c000017 	ldw	r16,0(r5)
   48fb8:	29000104 	addi	r4,r5,4
   48fbc:	d9002215 	stw	r4,136(sp)
   48fc0:	102d883a 	mov	r22,r2
   48fc4:	803fa50e 	bge	r16,zero,48e5c <__alt_data_end+0xfffe365c>
   48fc8:	18c03fcc 	andi	r3,r3,255
   48fcc:	18c0201c 	xori	r3,r3,128
   48fd0:	043fffc4 	movi	r16,-1
   48fd4:	18ffe004 	addi	r3,r3,-128
   48fd8:	003b4006 	br	47cdc <__alt_data_end+0xfffe24dc>
   48fdc:	d9402303 	ldbu	r5,140(sp)
   48fe0:	d9401d85 	stb	r5,118(sp)
   48fe4:	003cae06 	br	482a0 <__alt_data_end+0xfffe2aa0>
   48fe8:	d8c02303 	ldbu	r3,140(sp)
   48fec:	d8c01d85 	stb	r3,118(sp)
   48ff0:	003d1406 	br	48444 <__alt_data_end+0xfffe2c44>
   48ff4:	d8c02303 	ldbu	r3,140(sp)
   48ff8:	d8c01d85 	stb	r3,118(sp)
   48ffc:	003cca06 	br	48328 <__alt_data_end+0xfffe2b28>
   49000:	8880004c 	andi	r2,r17,1
   49004:	002b883a 	mov	r21,zero
   49008:	10000526 	beq	r2,zero,49020 <___vfiprintf_internal_r+0x14b8>
   4900c:	00800c04 	movi	r2,48
   49010:	d88019c5 	stb	r2,103(sp)
   49014:	dd002817 	ldw	r20,160(sp)
   49018:	ddc019c4 	addi	r23,sp,103
   4901c:	003bd506 	br	47f74 <__alt_data_end+0xfffe2774>
   49020:	0029883a 	mov	r20,zero
   49024:	ddc01a04 	addi	r23,sp,104
   49028:	003bd206 	br	47f74 <__alt_data_end+0xfffe2774>
   4902c:	d9002303 	ldbu	r4,140(sp)
   49030:	d9001d85 	stb	r4,118(sp)
   49034:	003da606 	br	486d0 <__alt_data_end+0xfffe2ed0>
   49038:	d8c02303 	ldbu	r3,140(sp)
   4903c:	d8c01d85 	stb	r3,118(sp)
   49040:	003c7606 	br	4821c <__alt_data_end+0xfffe2a1c>
   49044:	d8c02303 	ldbu	r3,140(sp)
   49048:	d8c01d85 	stb	r3,118(sp)
   4904c:	003c6506 	br	481e4 <__alt_data_end+0xfffe29e4>
   49050:	d9002303 	ldbu	r4,140(sp)
   49054:	d9001d85 	stb	r4,118(sp)
   49058:	003d3d06 	br	48550 <__alt_data_end+0xfffe2d50>
   4905c:	d8c02303 	ldbu	r3,140(sp)
   49060:	d8c01d85 	stb	r3,118(sp)
   49064:	003d1d06 	br	484dc <__alt_data_end+0xfffe2cdc>
   49068:	d8c02303 	ldbu	r3,140(sp)
   4906c:	d8c01d85 	stb	r3,118(sp)
   49070:	003d0306 	br	48480 <__alt_data_end+0xfffe2c80>

00049074 <__vfiprintf_internal>:
   49074:	008001b4 	movhi	r2,6
   49078:	10ac4504 	addi	r2,r2,-20204
   4907c:	300f883a 	mov	r7,r6
   49080:	280d883a 	mov	r6,r5
   49084:	200b883a 	mov	r5,r4
   49088:	11000017 	ldw	r4,0(r2)
   4908c:	0047b681 	jmpi	47b68 <___vfiprintf_internal_r>

00049090 <__sbprintf>:
   49090:	2880030b 	ldhu	r2,12(r5)
   49094:	2ac01917 	ldw	r11,100(r5)
   49098:	2a80038b 	ldhu	r10,14(r5)
   4909c:	2a400717 	ldw	r9,28(r5)
   490a0:	2a000917 	ldw	r8,36(r5)
   490a4:	defee204 	addi	sp,sp,-1144
   490a8:	00c10004 	movi	r3,1024
   490ac:	dc011a15 	stw	r16,1128(sp)
   490b0:	10bfff4c 	andi	r2,r2,65533
   490b4:	2821883a 	mov	r16,r5
   490b8:	d8cb883a 	add	r5,sp,r3
   490bc:	dc811c15 	stw	r18,1136(sp)
   490c0:	dc411b15 	stw	r17,1132(sp)
   490c4:	dfc11d15 	stw	ra,1140(sp)
   490c8:	2025883a 	mov	r18,r4
   490cc:	d881030d 	sth	r2,1036(sp)
   490d0:	dac11915 	stw	r11,1124(sp)
   490d4:	da81038d 	sth	r10,1038(sp)
   490d8:	da410715 	stw	r9,1052(sp)
   490dc:	da010915 	stw	r8,1060(sp)
   490e0:	dec10015 	stw	sp,1024(sp)
   490e4:	dec10415 	stw	sp,1040(sp)
   490e8:	d8c10215 	stw	r3,1032(sp)
   490ec:	d8c10515 	stw	r3,1044(sp)
   490f0:	d8010615 	stw	zero,1048(sp)
   490f4:	0047b680 	call	47b68 <___vfiprintf_internal_r>
   490f8:	1023883a 	mov	r17,r2
   490fc:	10000416 	blt	r2,zero,49110 <__sbprintf+0x80>
   49100:	d9410004 	addi	r5,sp,1024
   49104:	9009883a 	mov	r4,r18
   49108:	0044e340 	call	44e34 <_fflush_r>
   4910c:	10000d1e 	bne	r2,zero,49144 <__sbprintf+0xb4>
   49110:	d881030b 	ldhu	r2,1036(sp)
   49114:	1080100c 	andi	r2,r2,64
   49118:	10000326 	beq	r2,zero,49128 <__sbprintf+0x98>
   4911c:	8080030b 	ldhu	r2,12(r16)
   49120:	10801014 	ori	r2,r2,64
   49124:	8080030d 	sth	r2,12(r16)
   49128:	8805883a 	mov	r2,r17
   4912c:	dfc11d17 	ldw	ra,1140(sp)
   49130:	dc811c17 	ldw	r18,1136(sp)
   49134:	dc411b17 	ldw	r17,1132(sp)
   49138:	dc011a17 	ldw	r16,1128(sp)
   4913c:	dec11e04 	addi	sp,sp,1144
   49140:	f800283a 	ret
   49144:	047fffc4 	movi	r17,-1
   49148:	003ff106 	br	49110 <__alt_data_end+0xfffe3910>

0004914c <_write_r>:
   4914c:	defffd04 	addi	sp,sp,-12
   49150:	2805883a 	mov	r2,r5
   49154:	dc000015 	stw	r16,0(sp)
   49158:	040001b4 	movhi	r16,6
   4915c:	dc400115 	stw	r17,4(sp)
   49160:	300b883a 	mov	r5,r6
   49164:	84335b04 	addi	r16,r16,-12948
   49168:	2023883a 	mov	r17,r4
   4916c:	380d883a 	mov	r6,r7
   49170:	1009883a 	mov	r4,r2
   49174:	dfc00215 	stw	ra,8(sp)
   49178:	80000015 	stw	zero,0(r16)
   4917c:	004e7000 	call	4e700 <write>
   49180:	00ffffc4 	movi	r3,-1
   49184:	10c00526 	beq	r2,r3,4919c <_write_r+0x50>
   49188:	dfc00217 	ldw	ra,8(sp)
   4918c:	dc400117 	ldw	r17,4(sp)
   49190:	dc000017 	ldw	r16,0(sp)
   49194:	dec00304 	addi	sp,sp,12
   49198:	f800283a 	ret
   4919c:	80c00017 	ldw	r3,0(r16)
   491a0:	183ff926 	beq	r3,zero,49188 <__alt_data_end+0xfffe3988>
   491a4:	88c00015 	stw	r3,0(r17)
   491a8:	003ff706 	br	49188 <__alt_data_end+0xfffe3988>

000491ac <_close_r>:
   491ac:	defffd04 	addi	sp,sp,-12
   491b0:	dc000015 	stw	r16,0(sp)
   491b4:	040001b4 	movhi	r16,6
   491b8:	dc400115 	stw	r17,4(sp)
   491bc:	84335b04 	addi	r16,r16,-12948
   491c0:	2023883a 	mov	r17,r4
   491c4:	2809883a 	mov	r4,r5
   491c8:	dfc00215 	stw	ra,8(sp)
   491cc:	80000015 	stw	zero,0(r16)
   491d0:	004dc100 	call	4dc10 <close>
   491d4:	00ffffc4 	movi	r3,-1
   491d8:	10c00526 	beq	r2,r3,491f0 <_close_r+0x44>
   491dc:	dfc00217 	ldw	ra,8(sp)
   491e0:	dc400117 	ldw	r17,4(sp)
   491e4:	dc000017 	ldw	r16,0(sp)
   491e8:	dec00304 	addi	sp,sp,12
   491ec:	f800283a 	ret
   491f0:	80c00017 	ldw	r3,0(r16)
   491f4:	183ff926 	beq	r3,zero,491dc <__alt_data_end+0xfffe39dc>
   491f8:	88c00015 	stw	r3,0(r17)
   491fc:	003ff706 	br	491dc <__alt_data_end+0xfffe39dc>

00049200 <_calloc_r>:
   49200:	defffe04 	addi	sp,sp,-8
   49204:	2805883a 	mov	r2,r5
   49208:	dc000015 	stw	r16,0(sp)
   4920c:	300b883a 	mov	r5,r6
   49210:	2021883a 	mov	r16,r4
   49214:	1009883a 	mov	r4,r2
   49218:	dfc00115 	stw	ra,4(sp)
   4921c:	00407040 	call	40704 <__mulsi3>
   49220:	100b883a 	mov	r5,r2
   49224:	8009883a 	mov	r4,r16
   49228:	0045ac40 	call	45ac4 <_malloc_r>
   4922c:	10002926 	beq	r2,zero,492d4 <_calloc_r+0xd4>
   49230:	11bfff17 	ldw	r6,-4(r2)
   49234:	1021883a 	mov	r16,r2
   49238:	00bfff04 	movi	r2,-4
   4923c:	308c703a 	and	r6,r6,r2
   49240:	00c00904 	movi	r3,36
   49244:	308d883a 	add	r6,r6,r2
   49248:	19801636 	bltu	r3,r6,492a4 <_calloc_r+0xa4>
   4924c:	008004c4 	movi	r2,19
   49250:	11800b2e 	bgeu	r2,r6,49280 <_calloc_r+0x80>
   49254:	80000015 	stw	zero,0(r16)
   49258:	80000115 	stw	zero,4(r16)
   4925c:	008006c4 	movi	r2,27
   49260:	11801a2e 	bgeu	r2,r6,492cc <_calloc_r+0xcc>
   49264:	80000215 	stw	zero,8(r16)
   49268:	80000315 	stw	zero,12(r16)
   4926c:	30c0151e 	bne	r6,r3,492c4 <_calloc_r+0xc4>
   49270:	80000415 	stw	zero,16(r16)
   49274:	80800604 	addi	r2,r16,24
   49278:	80000515 	stw	zero,20(r16)
   4927c:	00000106 	br	49284 <_calloc_r+0x84>
   49280:	8005883a 	mov	r2,r16
   49284:	10000015 	stw	zero,0(r2)
   49288:	10000115 	stw	zero,4(r2)
   4928c:	10000215 	stw	zero,8(r2)
   49290:	8005883a 	mov	r2,r16
   49294:	dfc00117 	ldw	ra,4(sp)
   49298:	dc000017 	ldw	r16,0(sp)
   4929c:	dec00204 	addi	sp,sp,8
   492a0:	f800283a 	ret
   492a4:	000b883a 	mov	r5,zero
   492a8:	8009883a 	mov	r4,r16
   492ac:	00464fc0 	call	464fc <memset>
   492b0:	8005883a 	mov	r2,r16
   492b4:	dfc00117 	ldw	ra,4(sp)
   492b8:	dc000017 	ldw	r16,0(sp)
   492bc:	dec00204 	addi	sp,sp,8
   492c0:	f800283a 	ret
   492c4:	80800404 	addi	r2,r16,16
   492c8:	003fee06 	br	49284 <__alt_data_end+0xfffe3a84>
   492cc:	80800204 	addi	r2,r16,8
   492d0:	003fec06 	br	49284 <__alt_data_end+0xfffe3a84>
   492d4:	0005883a 	mov	r2,zero
   492d8:	003fee06 	br	49294 <__alt_data_end+0xfffe3a94>

000492dc <_fclose_r>:
   492dc:	28003926 	beq	r5,zero,493c4 <_fclose_r+0xe8>
   492e0:	defffc04 	addi	sp,sp,-16
   492e4:	dc400115 	stw	r17,4(sp)
   492e8:	dc000015 	stw	r16,0(sp)
   492ec:	dfc00315 	stw	ra,12(sp)
   492f0:	dc800215 	stw	r18,8(sp)
   492f4:	2023883a 	mov	r17,r4
   492f8:	2821883a 	mov	r16,r5
   492fc:	20000226 	beq	r4,zero,49308 <_fclose_r+0x2c>
   49300:	20800e17 	ldw	r2,56(r4)
   49304:	10002726 	beq	r2,zero,493a4 <_fclose_r+0xc8>
   49308:	8080030f 	ldh	r2,12(r16)
   4930c:	1000071e 	bne	r2,zero,4932c <_fclose_r+0x50>
   49310:	0005883a 	mov	r2,zero
   49314:	dfc00317 	ldw	ra,12(sp)
   49318:	dc800217 	ldw	r18,8(sp)
   4931c:	dc400117 	ldw	r17,4(sp)
   49320:	dc000017 	ldw	r16,0(sp)
   49324:	dec00404 	addi	sp,sp,16
   49328:	f800283a 	ret
   4932c:	800b883a 	mov	r5,r16
   49330:	8809883a 	mov	r4,r17
   49334:	0044c180 	call	44c18 <__sflush_r>
   49338:	1025883a 	mov	r18,r2
   4933c:	80800b17 	ldw	r2,44(r16)
   49340:	10000426 	beq	r2,zero,49354 <_fclose_r+0x78>
   49344:	81400717 	ldw	r5,28(r16)
   49348:	8809883a 	mov	r4,r17
   4934c:	103ee83a 	callr	r2
   49350:	10001616 	blt	r2,zero,493ac <_fclose_r+0xd0>
   49354:	8080030b 	ldhu	r2,12(r16)
   49358:	1080200c 	andi	r2,r2,128
   4935c:	1000151e 	bne	r2,zero,493b4 <_fclose_r+0xd8>
   49360:	81400c17 	ldw	r5,48(r16)
   49364:	28000526 	beq	r5,zero,4937c <_fclose_r+0xa0>
   49368:	80801004 	addi	r2,r16,64
   4936c:	28800226 	beq	r5,r2,49378 <_fclose_r+0x9c>
   49370:	8809883a 	mov	r4,r17
   49374:	00453940 	call	45394 <_free_r>
   49378:	80000c15 	stw	zero,48(r16)
   4937c:	81401117 	ldw	r5,68(r16)
   49380:	28000326 	beq	r5,zero,49390 <_fclose_r+0xb4>
   49384:	8809883a 	mov	r4,r17
   49388:	00453940 	call	45394 <_free_r>
   4938c:	80001115 	stw	zero,68(r16)
   49390:	00452300 	call	45230 <__sfp_lock_acquire>
   49394:	8000030d 	sth	zero,12(r16)
   49398:	00452340 	call	45234 <__sfp_lock_release>
   4939c:	9005883a 	mov	r2,r18
   493a0:	003fdc06 	br	49314 <__alt_data_end+0xfffe3b14>
   493a4:	00452200 	call	45220 <__sinit>
   493a8:	003fd706 	br	49308 <__alt_data_end+0xfffe3b08>
   493ac:	04bfffc4 	movi	r18,-1
   493b0:	003fe806 	br	49354 <__alt_data_end+0xfffe3b54>
   493b4:	81400417 	ldw	r5,16(r16)
   493b8:	8809883a 	mov	r4,r17
   493bc:	00453940 	call	45394 <_free_r>
   493c0:	003fe706 	br	49360 <__alt_data_end+0xfffe3b60>
   493c4:	0005883a 	mov	r2,zero
   493c8:	f800283a 	ret

000493cc <fclose>:
   493cc:	008001b4 	movhi	r2,6
   493d0:	10ac4504 	addi	r2,r2,-20204
   493d4:	200b883a 	mov	r5,r4
   493d8:	11000017 	ldw	r4,0(r2)
   493dc:	00492dc1 	jmpi	492dc <_fclose_r>

000493e0 <__fputwc>:
   493e0:	defff804 	addi	sp,sp,-32
   493e4:	dcc00415 	stw	r19,16(sp)
   493e8:	dc800315 	stw	r18,12(sp)
   493ec:	dc000115 	stw	r16,4(sp)
   493f0:	dfc00715 	stw	ra,28(sp)
   493f4:	dd400615 	stw	r21,24(sp)
   493f8:	dd000515 	stw	r20,20(sp)
   493fc:	dc400215 	stw	r17,8(sp)
   49400:	2027883a 	mov	r19,r4
   49404:	2825883a 	mov	r18,r5
   49408:	3021883a 	mov	r16,r6
   4940c:	00458b40 	call	458b4 <__locale_mb_cur_max>
   49410:	00c00044 	movi	r3,1
   49414:	10c03e26 	beq	r2,r3,49510 <__fputwc+0x130>
   49418:	81c01704 	addi	r7,r16,92
   4941c:	900d883a 	mov	r6,r18
   49420:	d80b883a 	mov	r5,sp
   49424:	9809883a 	mov	r4,r19
   49428:	004a4380 	call	4a438 <_wcrtomb_r>
   4942c:	1029883a 	mov	r20,r2
   49430:	00bfffc4 	movi	r2,-1
   49434:	a0802026 	beq	r20,r2,494b8 <__fputwc+0xd8>
   49438:	d9400003 	ldbu	r5,0(sp)
   4943c:	a0001c26 	beq	r20,zero,494b0 <__fputwc+0xd0>
   49440:	0023883a 	mov	r17,zero
   49444:	05400284 	movi	r21,10
   49448:	00000906 	br	49470 <__fputwc+0x90>
   4944c:	80800017 	ldw	r2,0(r16)
   49450:	11400005 	stb	r5,0(r2)
   49454:	80c00017 	ldw	r3,0(r16)
   49458:	18c00044 	addi	r3,r3,1
   4945c:	80c00015 	stw	r3,0(r16)
   49460:	8c400044 	addi	r17,r17,1
   49464:	dc45883a 	add	r2,sp,r17
   49468:	8d00112e 	bgeu	r17,r20,494b0 <__fputwc+0xd0>
   4946c:	11400003 	ldbu	r5,0(r2)
   49470:	80c00217 	ldw	r3,8(r16)
   49474:	18ffffc4 	addi	r3,r3,-1
   49478:	80c00215 	stw	r3,8(r16)
   4947c:	183ff30e 	bge	r3,zero,4944c <__alt_data_end+0xfffe3c4c>
   49480:	80800617 	ldw	r2,24(r16)
   49484:	18801916 	blt	r3,r2,494ec <__fputwc+0x10c>
   49488:	80800017 	ldw	r2,0(r16)
   4948c:	11400005 	stb	r5,0(r2)
   49490:	80800017 	ldw	r2,0(r16)
   49494:	10c00003 	ldbu	r3,0(r2)
   49498:	10800044 	addi	r2,r2,1
   4949c:	1d402326 	beq	r3,r21,4952c <__fputwc+0x14c>
   494a0:	80800015 	stw	r2,0(r16)
   494a4:	8c400044 	addi	r17,r17,1
   494a8:	dc45883a 	add	r2,sp,r17
   494ac:	8d3fef36 	bltu	r17,r20,4946c <__alt_data_end+0xfffe3c6c>
   494b0:	9005883a 	mov	r2,r18
   494b4:	00000406 	br	494c8 <__fputwc+0xe8>
   494b8:	80c0030b 	ldhu	r3,12(r16)
   494bc:	a005883a 	mov	r2,r20
   494c0:	18c01014 	ori	r3,r3,64
   494c4:	80c0030d 	sth	r3,12(r16)
   494c8:	dfc00717 	ldw	ra,28(sp)
   494cc:	dd400617 	ldw	r21,24(sp)
   494d0:	dd000517 	ldw	r20,20(sp)
   494d4:	dcc00417 	ldw	r19,16(sp)
   494d8:	dc800317 	ldw	r18,12(sp)
   494dc:	dc400217 	ldw	r17,8(sp)
   494e0:	dc000117 	ldw	r16,4(sp)
   494e4:	dec00804 	addi	sp,sp,32
   494e8:	f800283a 	ret
   494ec:	800d883a 	mov	r6,r16
   494f0:	29403fcc 	andi	r5,r5,255
   494f4:	9809883a 	mov	r4,r19
   494f8:	004a2e00 	call	4a2e0 <__swbuf_r>
   494fc:	10bfffe0 	cmpeqi	r2,r2,-1
   49500:	10803fcc 	andi	r2,r2,255
   49504:	103fd626 	beq	r2,zero,49460 <__alt_data_end+0xfffe3c60>
   49508:	00bfffc4 	movi	r2,-1
   4950c:	003fee06 	br	494c8 <__alt_data_end+0xfffe3cc8>
   49510:	90ffffc4 	addi	r3,r18,-1
   49514:	01003f84 	movi	r4,254
   49518:	20ffbf36 	bltu	r4,r3,49418 <__alt_data_end+0xfffe3c18>
   4951c:	900b883a 	mov	r5,r18
   49520:	dc800005 	stb	r18,0(sp)
   49524:	1029883a 	mov	r20,r2
   49528:	003fc506 	br	49440 <__alt_data_end+0xfffe3c40>
   4952c:	800d883a 	mov	r6,r16
   49530:	a80b883a 	mov	r5,r21
   49534:	9809883a 	mov	r4,r19
   49538:	004a2e00 	call	4a2e0 <__swbuf_r>
   4953c:	10bfffe0 	cmpeqi	r2,r2,-1
   49540:	003fef06 	br	49500 <__alt_data_end+0xfffe3d00>

00049544 <_fputwc_r>:
   49544:	3080030b 	ldhu	r2,12(r6)
   49548:	10c8000c 	andi	r3,r2,8192
   4954c:	1800051e 	bne	r3,zero,49564 <_fputwc_r+0x20>
   49550:	30c01917 	ldw	r3,100(r6)
   49554:	10880014 	ori	r2,r2,8192
   49558:	3080030d 	sth	r2,12(r6)
   4955c:	18880014 	ori	r2,r3,8192
   49560:	30801915 	stw	r2,100(r6)
   49564:	00493e01 	jmpi	493e0 <__fputwc>

00049568 <fputwc>:
   49568:	008001b4 	movhi	r2,6
   4956c:	defffc04 	addi	sp,sp,-16
   49570:	10ac4504 	addi	r2,r2,-20204
   49574:	dc000115 	stw	r16,4(sp)
   49578:	14000017 	ldw	r16,0(r2)
   4957c:	dc400215 	stw	r17,8(sp)
   49580:	dfc00315 	stw	ra,12(sp)
   49584:	2023883a 	mov	r17,r4
   49588:	80000226 	beq	r16,zero,49594 <fputwc+0x2c>
   4958c:	80800e17 	ldw	r2,56(r16)
   49590:	10001026 	beq	r2,zero,495d4 <fputwc+0x6c>
   49594:	2880030b 	ldhu	r2,12(r5)
   49598:	10c8000c 	andi	r3,r2,8192
   4959c:	1800051e 	bne	r3,zero,495b4 <fputwc+0x4c>
   495a0:	28c01917 	ldw	r3,100(r5)
   495a4:	10880014 	ori	r2,r2,8192
   495a8:	2880030d 	sth	r2,12(r5)
   495ac:	18880014 	ori	r2,r3,8192
   495b0:	28801915 	stw	r2,100(r5)
   495b4:	280d883a 	mov	r6,r5
   495b8:	8009883a 	mov	r4,r16
   495bc:	880b883a 	mov	r5,r17
   495c0:	dfc00317 	ldw	ra,12(sp)
   495c4:	dc400217 	ldw	r17,8(sp)
   495c8:	dc000117 	ldw	r16,4(sp)
   495cc:	dec00404 	addi	sp,sp,16
   495d0:	00493e01 	jmpi	493e0 <__fputwc>
   495d4:	8009883a 	mov	r4,r16
   495d8:	d9400015 	stw	r5,0(sp)
   495dc:	00452200 	call	45220 <__sinit>
   495e0:	d9400017 	ldw	r5,0(sp)
   495e4:	003feb06 	br	49594 <__alt_data_end+0xfffe3d94>

000495e8 <_fstat_r>:
   495e8:	defffd04 	addi	sp,sp,-12
   495ec:	2805883a 	mov	r2,r5
   495f0:	dc000015 	stw	r16,0(sp)
   495f4:	040001b4 	movhi	r16,6
   495f8:	dc400115 	stw	r17,4(sp)
   495fc:	84335b04 	addi	r16,r16,-12948
   49600:	2023883a 	mov	r17,r4
   49604:	300b883a 	mov	r5,r6
   49608:	1009883a 	mov	r4,r2
   4960c:	dfc00215 	stw	ra,8(sp)
   49610:	80000015 	stw	zero,0(r16)
   49614:	004dd500 	call	4dd50 <fstat>
   49618:	00ffffc4 	movi	r3,-1
   4961c:	10c00526 	beq	r2,r3,49634 <_fstat_r+0x4c>
   49620:	dfc00217 	ldw	ra,8(sp)
   49624:	dc400117 	ldw	r17,4(sp)
   49628:	dc000017 	ldw	r16,0(sp)
   4962c:	dec00304 	addi	sp,sp,12
   49630:	f800283a 	ret
   49634:	80c00017 	ldw	r3,0(r16)
   49638:	183ff926 	beq	r3,zero,49620 <__alt_data_end+0xfffe3e20>
   4963c:	88c00015 	stw	r3,0(r17)
   49640:	003ff706 	br	49620 <__alt_data_end+0xfffe3e20>

00049644 <__sfvwrite_r>:
   49644:	30800217 	ldw	r2,8(r6)
   49648:	10006726 	beq	r2,zero,497e8 <__sfvwrite_r+0x1a4>
   4964c:	28c0030b 	ldhu	r3,12(r5)
   49650:	defff404 	addi	sp,sp,-48
   49654:	dd400715 	stw	r21,28(sp)
   49658:	dd000615 	stw	r20,24(sp)
   4965c:	dc000215 	stw	r16,8(sp)
   49660:	dfc00b15 	stw	ra,44(sp)
   49664:	df000a15 	stw	fp,40(sp)
   49668:	ddc00915 	stw	r23,36(sp)
   4966c:	dd800815 	stw	r22,32(sp)
   49670:	dcc00515 	stw	r19,20(sp)
   49674:	dc800415 	stw	r18,16(sp)
   49678:	dc400315 	stw	r17,12(sp)
   4967c:	1880020c 	andi	r2,r3,8
   49680:	2821883a 	mov	r16,r5
   49684:	202b883a 	mov	r21,r4
   49688:	3029883a 	mov	r20,r6
   4968c:	10002726 	beq	r2,zero,4972c <__sfvwrite_r+0xe8>
   49690:	28800417 	ldw	r2,16(r5)
   49694:	10002526 	beq	r2,zero,4972c <__sfvwrite_r+0xe8>
   49698:	1880008c 	andi	r2,r3,2
   4969c:	a4400017 	ldw	r17,0(r20)
   496a0:	10002a26 	beq	r2,zero,4974c <__sfvwrite_r+0x108>
   496a4:	05a00034 	movhi	r22,32768
   496a8:	0027883a 	mov	r19,zero
   496ac:	0025883a 	mov	r18,zero
   496b0:	b5bf0004 	addi	r22,r22,-1024
   496b4:	980d883a 	mov	r6,r19
   496b8:	a809883a 	mov	r4,r21
   496bc:	90004626 	beq	r18,zero,497d8 <__sfvwrite_r+0x194>
   496c0:	900f883a 	mov	r7,r18
   496c4:	b480022e 	bgeu	r22,r18,496d0 <__sfvwrite_r+0x8c>
   496c8:	01e00034 	movhi	r7,32768
   496cc:	39ff0004 	addi	r7,r7,-1024
   496d0:	80800917 	ldw	r2,36(r16)
   496d4:	81400717 	ldw	r5,28(r16)
   496d8:	103ee83a 	callr	r2
   496dc:	00805a0e 	bge	zero,r2,49848 <__sfvwrite_r+0x204>
   496e0:	a0c00217 	ldw	r3,8(r20)
   496e4:	98a7883a 	add	r19,r19,r2
   496e8:	90a5c83a 	sub	r18,r18,r2
   496ec:	1885c83a 	sub	r2,r3,r2
   496f0:	a0800215 	stw	r2,8(r20)
   496f4:	103fef1e 	bne	r2,zero,496b4 <__alt_data_end+0xfffe3eb4>
   496f8:	0005883a 	mov	r2,zero
   496fc:	dfc00b17 	ldw	ra,44(sp)
   49700:	df000a17 	ldw	fp,40(sp)
   49704:	ddc00917 	ldw	r23,36(sp)
   49708:	dd800817 	ldw	r22,32(sp)
   4970c:	dd400717 	ldw	r21,28(sp)
   49710:	dd000617 	ldw	r20,24(sp)
   49714:	dcc00517 	ldw	r19,20(sp)
   49718:	dc800417 	ldw	r18,16(sp)
   4971c:	dc400317 	ldw	r17,12(sp)
   49720:	dc000217 	ldw	r16,8(sp)
   49724:	dec00c04 	addi	sp,sp,48
   49728:	f800283a 	ret
   4972c:	800b883a 	mov	r5,r16
   49730:	a809883a 	mov	r4,r21
   49734:	00432140 	call	43214 <__swsetup_r>
   49738:	1000ee1e 	bne	r2,zero,49af4 <__sfvwrite_r+0x4b0>
   4973c:	80c0030b 	ldhu	r3,12(r16)
   49740:	a4400017 	ldw	r17,0(r20)
   49744:	1880008c 	andi	r2,r3,2
   49748:	103fd61e 	bne	r2,zero,496a4 <__alt_data_end+0xfffe3ea4>
   4974c:	1880004c 	andi	r2,r3,1
   49750:	1000421e 	bne	r2,zero,4985c <__sfvwrite_r+0x218>
   49754:	0039883a 	mov	fp,zero
   49758:	0025883a 	mov	r18,zero
   4975c:	90001a26 	beq	r18,zero,497c8 <__sfvwrite_r+0x184>
   49760:	1880800c 	andi	r2,r3,512
   49764:	84c00217 	ldw	r19,8(r16)
   49768:	10002126 	beq	r2,zero,497f0 <__sfvwrite_r+0x1ac>
   4976c:	982f883a 	mov	r23,r19
   49770:	94c09636 	bltu	r18,r19,499cc <__sfvwrite_r+0x388>
   49774:	1881200c 	andi	r2,r3,1152
   49778:	1000a11e 	bne	r2,zero,49a00 <__sfvwrite_r+0x3bc>
   4977c:	81000017 	ldw	r4,0(r16)
   49780:	b80d883a 	mov	r6,r23
   49784:	e00b883a 	mov	r5,fp
   49788:	0049bc00 	call	49bc0 <memmove>
   4978c:	80c00217 	ldw	r3,8(r16)
   49790:	81000017 	ldw	r4,0(r16)
   49794:	9005883a 	mov	r2,r18
   49798:	1ce7c83a 	sub	r19,r3,r19
   4979c:	25cf883a 	add	r7,r4,r23
   497a0:	84c00215 	stw	r19,8(r16)
   497a4:	81c00015 	stw	r7,0(r16)
   497a8:	a0c00217 	ldw	r3,8(r20)
   497ac:	e0b9883a 	add	fp,fp,r2
   497b0:	90a5c83a 	sub	r18,r18,r2
   497b4:	18a7c83a 	sub	r19,r3,r2
   497b8:	a4c00215 	stw	r19,8(r20)
   497bc:	983fce26 	beq	r19,zero,496f8 <__alt_data_end+0xfffe3ef8>
   497c0:	80c0030b 	ldhu	r3,12(r16)
   497c4:	903fe61e 	bne	r18,zero,49760 <__alt_data_end+0xfffe3f60>
   497c8:	8f000017 	ldw	fp,0(r17)
   497cc:	8c800117 	ldw	r18,4(r17)
   497d0:	8c400204 	addi	r17,r17,8
   497d4:	003fe106 	br	4975c <__alt_data_end+0xfffe3f5c>
   497d8:	8cc00017 	ldw	r19,0(r17)
   497dc:	8c800117 	ldw	r18,4(r17)
   497e0:	8c400204 	addi	r17,r17,8
   497e4:	003fb306 	br	496b4 <__alt_data_end+0xfffe3eb4>
   497e8:	0005883a 	mov	r2,zero
   497ec:	f800283a 	ret
   497f0:	81000017 	ldw	r4,0(r16)
   497f4:	80800417 	ldw	r2,16(r16)
   497f8:	11005a36 	bltu	r2,r4,49964 <__sfvwrite_r+0x320>
   497fc:	85c00517 	ldw	r23,20(r16)
   49800:	95c05836 	bltu	r18,r23,49964 <__sfvwrite_r+0x320>
   49804:	00a00034 	movhi	r2,32768
   49808:	10bfffc4 	addi	r2,r2,-1
   4980c:	9009883a 	mov	r4,r18
   49810:	1480012e 	bgeu	r2,r18,49818 <__sfvwrite_r+0x1d4>
   49814:	1009883a 	mov	r4,r2
   49818:	b80b883a 	mov	r5,r23
   4981c:	004b1e00 	call	4b1e0 <__divsi3>
   49820:	b80b883a 	mov	r5,r23
   49824:	1009883a 	mov	r4,r2
   49828:	00407040 	call	40704 <__mulsi3>
   4982c:	81400717 	ldw	r5,28(r16)
   49830:	80c00917 	ldw	r3,36(r16)
   49834:	100f883a 	mov	r7,r2
   49838:	e00d883a 	mov	r6,fp
   4983c:	a809883a 	mov	r4,r21
   49840:	183ee83a 	callr	r3
   49844:	00bfd816 	blt	zero,r2,497a8 <__alt_data_end+0xfffe3fa8>
   49848:	8080030b 	ldhu	r2,12(r16)
   4984c:	10801014 	ori	r2,r2,64
   49850:	8080030d 	sth	r2,12(r16)
   49854:	00bfffc4 	movi	r2,-1
   49858:	003fa806 	br	496fc <__alt_data_end+0xfffe3efc>
   4985c:	0027883a 	mov	r19,zero
   49860:	0011883a 	mov	r8,zero
   49864:	0039883a 	mov	fp,zero
   49868:	0025883a 	mov	r18,zero
   4986c:	90001f26 	beq	r18,zero,498ec <__sfvwrite_r+0x2a8>
   49870:	40005a26 	beq	r8,zero,499dc <__sfvwrite_r+0x398>
   49874:	982d883a 	mov	r22,r19
   49878:	94c0012e 	bgeu	r18,r19,49880 <__sfvwrite_r+0x23c>
   4987c:	902d883a 	mov	r22,r18
   49880:	81000017 	ldw	r4,0(r16)
   49884:	80800417 	ldw	r2,16(r16)
   49888:	b02f883a 	mov	r23,r22
   4988c:	81c00517 	ldw	r7,20(r16)
   49890:	1100032e 	bgeu	r2,r4,498a0 <__sfvwrite_r+0x25c>
   49894:	80c00217 	ldw	r3,8(r16)
   49898:	38c7883a 	add	r3,r7,r3
   4989c:	1d801816 	blt	r3,r22,49900 <__sfvwrite_r+0x2bc>
   498a0:	b1c03e16 	blt	r22,r7,4999c <__sfvwrite_r+0x358>
   498a4:	80800917 	ldw	r2,36(r16)
   498a8:	81400717 	ldw	r5,28(r16)
   498ac:	e00d883a 	mov	r6,fp
   498b0:	da000115 	stw	r8,4(sp)
   498b4:	a809883a 	mov	r4,r21
   498b8:	103ee83a 	callr	r2
   498bc:	102f883a 	mov	r23,r2
   498c0:	da000117 	ldw	r8,4(sp)
   498c4:	00bfe00e 	bge	zero,r2,49848 <__alt_data_end+0xfffe4048>
   498c8:	9de7c83a 	sub	r19,r19,r23
   498cc:	98001f26 	beq	r19,zero,4994c <__sfvwrite_r+0x308>
   498d0:	a0800217 	ldw	r2,8(r20)
   498d4:	e5f9883a 	add	fp,fp,r23
   498d8:	95e5c83a 	sub	r18,r18,r23
   498dc:	15efc83a 	sub	r23,r2,r23
   498e0:	a5c00215 	stw	r23,8(r20)
   498e4:	b83f8426 	beq	r23,zero,496f8 <__alt_data_end+0xfffe3ef8>
   498e8:	903fe11e 	bne	r18,zero,49870 <__alt_data_end+0xfffe4070>
   498ec:	8f000017 	ldw	fp,0(r17)
   498f0:	8c800117 	ldw	r18,4(r17)
   498f4:	0011883a 	mov	r8,zero
   498f8:	8c400204 	addi	r17,r17,8
   498fc:	003fdb06 	br	4986c <__alt_data_end+0xfffe406c>
   49900:	180d883a 	mov	r6,r3
   49904:	e00b883a 	mov	r5,fp
   49908:	da000115 	stw	r8,4(sp)
   4990c:	d8c00015 	stw	r3,0(sp)
   49910:	0049bc00 	call	49bc0 <memmove>
   49914:	d8c00017 	ldw	r3,0(sp)
   49918:	80800017 	ldw	r2,0(r16)
   4991c:	800b883a 	mov	r5,r16
   49920:	a809883a 	mov	r4,r21
   49924:	10c5883a 	add	r2,r2,r3
   49928:	80800015 	stw	r2,0(r16)
   4992c:	d8c00015 	stw	r3,0(sp)
   49930:	0044e340 	call	44e34 <_fflush_r>
   49934:	d8c00017 	ldw	r3,0(sp)
   49938:	da000117 	ldw	r8,4(sp)
   4993c:	103fc21e 	bne	r2,zero,49848 <__alt_data_end+0xfffe4048>
   49940:	182f883a 	mov	r23,r3
   49944:	9de7c83a 	sub	r19,r19,r23
   49948:	983fe11e 	bne	r19,zero,498d0 <__alt_data_end+0xfffe40d0>
   4994c:	800b883a 	mov	r5,r16
   49950:	a809883a 	mov	r4,r21
   49954:	0044e340 	call	44e34 <_fflush_r>
   49958:	103fbb1e 	bne	r2,zero,49848 <__alt_data_end+0xfffe4048>
   4995c:	0011883a 	mov	r8,zero
   49960:	003fdb06 	br	498d0 <__alt_data_end+0xfffe40d0>
   49964:	94c0012e 	bgeu	r18,r19,4996c <__sfvwrite_r+0x328>
   49968:	9027883a 	mov	r19,r18
   4996c:	980d883a 	mov	r6,r19
   49970:	e00b883a 	mov	r5,fp
   49974:	0049bc00 	call	49bc0 <memmove>
   49978:	80800217 	ldw	r2,8(r16)
   4997c:	80c00017 	ldw	r3,0(r16)
   49980:	14c5c83a 	sub	r2,r2,r19
   49984:	1cc7883a 	add	r3,r3,r19
   49988:	80800215 	stw	r2,8(r16)
   4998c:	80c00015 	stw	r3,0(r16)
   49990:	10004326 	beq	r2,zero,49aa0 <__sfvwrite_r+0x45c>
   49994:	9805883a 	mov	r2,r19
   49998:	003f8306 	br	497a8 <__alt_data_end+0xfffe3fa8>
   4999c:	b00d883a 	mov	r6,r22
   499a0:	e00b883a 	mov	r5,fp
   499a4:	da000115 	stw	r8,4(sp)
   499a8:	0049bc00 	call	49bc0 <memmove>
   499ac:	80800217 	ldw	r2,8(r16)
   499b0:	80c00017 	ldw	r3,0(r16)
   499b4:	da000117 	ldw	r8,4(sp)
   499b8:	1585c83a 	sub	r2,r2,r22
   499bc:	1dad883a 	add	r22,r3,r22
   499c0:	80800215 	stw	r2,8(r16)
   499c4:	85800015 	stw	r22,0(r16)
   499c8:	003fbf06 	br	498c8 <__alt_data_end+0xfffe40c8>
   499cc:	81000017 	ldw	r4,0(r16)
   499d0:	9027883a 	mov	r19,r18
   499d4:	902f883a 	mov	r23,r18
   499d8:	003f6906 	br	49780 <__alt_data_end+0xfffe3f80>
   499dc:	900d883a 	mov	r6,r18
   499e0:	01400284 	movi	r5,10
   499e4:	e009883a 	mov	r4,fp
   499e8:	00462d00 	call	462d0 <memchr>
   499ec:	10003e26 	beq	r2,zero,49ae8 <__sfvwrite_r+0x4a4>
   499f0:	10800044 	addi	r2,r2,1
   499f4:	1727c83a 	sub	r19,r2,fp
   499f8:	02000044 	movi	r8,1
   499fc:	003f9d06 	br	49874 <__alt_data_end+0xfffe4074>
   49a00:	80800517 	ldw	r2,20(r16)
   49a04:	81400417 	ldw	r5,16(r16)
   49a08:	81c00017 	ldw	r7,0(r16)
   49a0c:	10a7883a 	add	r19,r2,r2
   49a10:	9885883a 	add	r2,r19,r2
   49a14:	1026d7fa 	srli	r19,r2,31
   49a18:	396dc83a 	sub	r22,r7,r5
   49a1c:	b1000044 	addi	r4,r22,1
   49a20:	9885883a 	add	r2,r19,r2
   49a24:	1027d07a 	srai	r19,r2,1
   49a28:	2485883a 	add	r2,r4,r18
   49a2c:	980d883a 	mov	r6,r19
   49a30:	9880022e 	bgeu	r19,r2,49a3c <__sfvwrite_r+0x3f8>
   49a34:	1027883a 	mov	r19,r2
   49a38:	100d883a 	mov	r6,r2
   49a3c:	18c1000c 	andi	r3,r3,1024
   49a40:	18001c26 	beq	r3,zero,49ab4 <__sfvwrite_r+0x470>
   49a44:	300b883a 	mov	r5,r6
   49a48:	a809883a 	mov	r4,r21
   49a4c:	0045ac40 	call	45ac4 <_malloc_r>
   49a50:	102f883a 	mov	r23,r2
   49a54:	10002926 	beq	r2,zero,49afc <__sfvwrite_r+0x4b8>
   49a58:	81400417 	ldw	r5,16(r16)
   49a5c:	b00d883a 	mov	r6,r22
   49a60:	1009883a 	mov	r4,r2
   49a64:	00463b40 	call	463b4 <memcpy>
   49a68:	8080030b 	ldhu	r2,12(r16)
   49a6c:	00fedfc4 	movi	r3,-1153
   49a70:	10c4703a 	and	r2,r2,r3
   49a74:	10802014 	ori	r2,r2,128
   49a78:	8080030d 	sth	r2,12(r16)
   49a7c:	bd89883a 	add	r4,r23,r22
   49a80:	9d8fc83a 	sub	r7,r19,r22
   49a84:	85c00415 	stw	r23,16(r16)
   49a88:	84c00515 	stw	r19,20(r16)
   49a8c:	81000015 	stw	r4,0(r16)
   49a90:	9027883a 	mov	r19,r18
   49a94:	81c00215 	stw	r7,8(r16)
   49a98:	902f883a 	mov	r23,r18
   49a9c:	003f3806 	br	49780 <__alt_data_end+0xfffe3f80>
   49aa0:	800b883a 	mov	r5,r16
   49aa4:	a809883a 	mov	r4,r21
   49aa8:	0044e340 	call	44e34 <_fflush_r>
   49aac:	103fb926 	beq	r2,zero,49994 <__alt_data_end+0xfffe4194>
   49ab0:	003f6506 	br	49848 <__alt_data_end+0xfffe4048>
   49ab4:	a809883a 	mov	r4,r21
   49ab8:	0049d7c0 	call	49d7c <_realloc_r>
   49abc:	102f883a 	mov	r23,r2
   49ac0:	103fee1e 	bne	r2,zero,49a7c <__alt_data_end+0xfffe427c>
   49ac4:	81400417 	ldw	r5,16(r16)
   49ac8:	a809883a 	mov	r4,r21
   49acc:	00453940 	call	45394 <_free_r>
   49ad0:	8080030b 	ldhu	r2,12(r16)
   49ad4:	00ffdfc4 	movi	r3,-129
   49ad8:	1884703a 	and	r2,r3,r2
   49adc:	00c00304 	movi	r3,12
   49ae0:	a8c00015 	stw	r3,0(r21)
   49ae4:	003f5906 	br	4984c <__alt_data_end+0xfffe404c>
   49ae8:	94c00044 	addi	r19,r18,1
   49aec:	02000044 	movi	r8,1
   49af0:	003f6006 	br	49874 <__alt_data_end+0xfffe4074>
   49af4:	00bfffc4 	movi	r2,-1
   49af8:	003f0006 	br	496fc <__alt_data_end+0xfffe3efc>
   49afc:	00800304 	movi	r2,12
   49b00:	a8800015 	stw	r2,0(r21)
   49b04:	8080030b 	ldhu	r2,12(r16)
   49b08:	003f5006 	br	4984c <__alt_data_end+0xfffe404c>

00049b0c <_isatty_r>:
   49b0c:	defffd04 	addi	sp,sp,-12
   49b10:	dc000015 	stw	r16,0(sp)
   49b14:	040001b4 	movhi	r16,6
   49b18:	dc400115 	stw	r17,4(sp)
   49b1c:	84335b04 	addi	r16,r16,-12948
   49b20:	2023883a 	mov	r17,r4
   49b24:	2809883a 	mov	r4,r5
   49b28:	dfc00215 	stw	ra,8(sp)
   49b2c:	80000015 	stw	zero,0(r16)
   49b30:	004e0e40 	call	4e0e4 <isatty>
   49b34:	00ffffc4 	movi	r3,-1
   49b38:	10c00526 	beq	r2,r3,49b50 <_isatty_r+0x44>
   49b3c:	dfc00217 	ldw	ra,8(sp)
   49b40:	dc400117 	ldw	r17,4(sp)
   49b44:	dc000017 	ldw	r16,0(sp)
   49b48:	dec00304 	addi	sp,sp,12
   49b4c:	f800283a 	ret
   49b50:	80c00017 	ldw	r3,0(r16)
   49b54:	183ff926 	beq	r3,zero,49b3c <__alt_data_end+0xfffe433c>
   49b58:	88c00015 	stw	r3,0(r17)
   49b5c:	003ff706 	br	49b3c <__alt_data_end+0xfffe433c>

00049b60 <_lseek_r>:
   49b60:	defffd04 	addi	sp,sp,-12
   49b64:	2805883a 	mov	r2,r5
   49b68:	dc000015 	stw	r16,0(sp)
   49b6c:	040001b4 	movhi	r16,6
   49b70:	dc400115 	stw	r17,4(sp)
   49b74:	300b883a 	mov	r5,r6
   49b78:	84335b04 	addi	r16,r16,-12948
   49b7c:	2023883a 	mov	r17,r4
   49b80:	380d883a 	mov	r6,r7
   49b84:	1009883a 	mov	r4,r2
   49b88:	dfc00215 	stw	ra,8(sp)
   49b8c:	80000015 	stw	zero,0(r16)
   49b90:	004e2b80 	call	4e2b8 <lseek>
   49b94:	00ffffc4 	movi	r3,-1
   49b98:	10c00526 	beq	r2,r3,49bb0 <_lseek_r+0x50>
   49b9c:	dfc00217 	ldw	ra,8(sp)
   49ba0:	dc400117 	ldw	r17,4(sp)
   49ba4:	dc000017 	ldw	r16,0(sp)
   49ba8:	dec00304 	addi	sp,sp,12
   49bac:	f800283a 	ret
   49bb0:	80c00017 	ldw	r3,0(r16)
   49bb4:	183ff926 	beq	r3,zero,49b9c <__alt_data_end+0xfffe439c>
   49bb8:	88c00015 	stw	r3,0(r17)
   49bbc:	003ff706 	br	49b9c <__alt_data_end+0xfffe439c>

00049bc0 <memmove>:
   49bc0:	2005883a 	mov	r2,r4
   49bc4:	29000b2e 	bgeu	r5,r4,49bf4 <memmove+0x34>
   49bc8:	298f883a 	add	r7,r5,r6
   49bcc:	21c0092e 	bgeu	r4,r7,49bf4 <memmove+0x34>
   49bd0:	2187883a 	add	r3,r4,r6
   49bd4:	198bc83a 	sub	r5,r3,r6
   49bd8:	30004826 	beq	r6,zero,49cfc <memmove+0x13c>
   49bdc:	39ffffc4 	addi	r7,r7,-1
   49be0:	39000003 	ldbu	r4,0(r7)
   49be4:	18ffffc4 	addi	r3,r3,-1
   49be8:	19000005 	stb	r4,0(r3)
   49bec:	28fffb1e 	bne	r5,r3,49bdc <__alt_data_end+0xfffe43dc>
   49bf0:	f800283a 	ret
   49bf4:	00c003c4 	movi	r3,15
   49bf8:	1980412e 	bgeu	r3,r6,49d00 <memmove+0x140>
   49bfc:	2886b03a 	or	r3,r5,r2
   49c00:	18c000cc 	andi	r3,r3,3
   49c04:	1800401e 	bne	r3,zero,49d08 <memmove+0x148>
   49c08:	33fffc04 	addi	r15,r6,-16
   49c0c:	781ed13a 	srli	r15,r15,4
   49c10:	28c00104 	addi	r3,r5,4
   49c14:	13400104 	addi	r13,r2,4
   49c18:	781c913a 	slli	r14,r15,4
   49c1c:	2b000204 	addi	r12,r5,8
   49c20:	12c00204 	addi	r11,r2,8
   49c24:	73800504 	addi	r14,r14,20
   49c28:	2a800304 	addi	r10,r5,12
   49c2c:	12400304 	addi	r9,r2,12
   49c30:	2b9d883a 	add	r14,r5,r14
   49c34:	2811883a 	mov	r8,r5
   49c38:	100f883a 	mov	r7,r2
   49c3c:	41000017 	ldw	r4,0(r8)
   49c40:	39c00404 	addi	r7,r7,16
   49c44:	18c00404 	addi	r3,r3,16
   49c48:	393ffc15 	stw	r4,-16(r7)
   49c4c:	193ffc17 	ldw	r4,-16(r3)
   49c50:	6b400404 	addi	r13,r13,16
   49c54:	5ac00404 	addi	r11,r11,16
   49c58:	693ffc15 	stw	r4,-16(r13)
   49c5c:	61000017 	ldw	r4,0(r12)
   49c60:	4a400404 	addi	r9,r9,16
   49c64:	42000404 	addi	r8,r8,16
   49c68:	593ffc15 	stw	r4,-16(r11)
   49c6c:	51000017 	ldw	r4,0(r10)
   49c70:	63000404 	addi	r12,r12,16
   49c74:	52800404 	addi	r10,r10,16
   49c78:	493ffc15 	stw	r4,-16(r9)
   49c7c:	1bbfef1e 	bne	r3,r14,49c3c <__alt_data_end+0xfffe443c>
   49c80:	79000044 	addi	r4,r15,1
   49c84:	2008913a 	slli	r4,r4,4
   49c88:	328003cc 	andi	r10,r6,15
   49c8c:	02c000c4 	movi	r11,3
   49c90:	1107883a 	add	r3,r2,r4
   49c94:	290b883a 	add	r5,r5,r4
   49c98:	5a801e2e 	bgeu	r11,r10,49d14 <memmove+0x154>
   49c9c:	1813883a 	mov	r9,r3
   49ca0:	2811883a 	mov	r8,r5
   49ca4:	500f883a 	mov	r7,r10
   49ca8:	41000017 	ldw	r4,0(r8)
   49cac:	4a400104 	addi	r9,r9,4
   49cb0:	39ffff04 	addi	r7,r7,-4
   49cb4:	493fff15 	stw	r4,-4(r9)
   49cb8:	42000104 	addi	r8,r8,4
   49cbc:	59fffa36 	bltu	r11,r7,49ca8 <__alt_data_end+0xfffe44a8>
   49cc0:	513fff04 	addi	r4,r10,-4
   49cc4:	2008d0ba 	srli	r4,r4,2
   49cc8:	318000cc 	andi	r6,r6,3
   49ccc:	21000044 	addi	r4,r4,1
   49cd0:	2109883a 	add	r4,r4,r4
   49cd4:	2109883a 	add	r4,r4,r4
   49cd8:	1907883a 	add	r3,r3,r4
   49cdc:	290b883a 	add	r5,r5,r4
   49ce0:	30000b26 	beq	r6,zero,49d10 <memmove+0x150>
   49ce4:	198d883a 	add	r6,r3,r6
   49ce8:	29c00003 	ldbu	r7,0(r5)
   49cec:	18c00044 	addi	r3,r3,1
   49cf0:	29400044 	addi	r5,r5,1
   49cf4:	19ffffc5 	stb	r7,-1(r3)
   49cf8:	19bffb1e 	bne	r3,r6,49ce8 <__alt_data_end+0xfffe44e8>
   49cfc:	f800283a 	ret
   49d00:	1007883a 	mov	r3,r2
   49d04:	003ff606 	br	49ce0 <__alt_data_end+0xfffe44e0>
   49d08:	1007883a 	mov	r3,r2
   49d0c:	003ff506 	br	49ce4 <__alt_data_end+0xfffe44e4>
   49d10:	f800283a 	ret
   49d14:	500d883a 	mov	r6,r10
   49d18:	003ff106 	br	49ce0 <__alt_data_end+0xfffe44e0>

00049d1c <_read_r>:
   49d1c:	defffd04 	addi	sp,sp,-12
   49d20:	2805883a 	mov	r2,r5
   49d24:	dc000015 	stw	r16,0(sp)
   49d28:	040001b4 	movhi	r16,6
   49d2c:	dc400115 	stw	r17,4(sp)
   49d30:	300b883a 	mov	r5,r6
   49d34:	84335b04 	addi	r16,r16,-12948
   49d38:	2023883a 	mov	r17,r4
   49d3c:	380d883a 	mov	r6,r7
   49d40:	1009883a 	mov	r4,r2
   49d44:	dfc00215 	stw	ra,8(sp)
   49d48:	80000015 	stw	zero,0(r16)
   49d4c:	004e48c0 	call	4e48c <read>
   49d50:	00ffffc4 	movi	r3,-1
   49d54:	10c00526 	beq	r2,r3,49d6c <_read_r+0x50>
   49d58:	dfc00217 	ldw	ra,8(sp)
   49d5c:	dc400117 	ldw	r17,4(sp)
   49d60:	dc000017 	ldw	r16,0(sp)
   49d64:	dec00304 	addi	sp,sp,12
   49d68:	f800283a 	ret
   49d6c:	80c00017 	ldw	r3,0(r16)
   49d70:	183ff926 	beq	r3,zero,49d58 <__alt_data_end+0xfffe4558>
   49d74:	88c00015 	stw	r3,0(r17)
   49d78:	003ff706 	br	49d58 <__alt_data_end+0xfffe4558>

00049d7c <_realloc_r>:
   49d7c:	defff604 	addi	sp,sp,-40
   49d80:	dc800215 	stw	r18,8(sp)
   49d84:	dfc00915 	stw	ra,36(sp)
   49d88:	df000815 	stw	fp,32(sp)
   49d8c:	ddc00715 	stw	r23,28(sp)
   49d90:	dd800615 	stw	r22,24(sp)
   49d94:	dd400515 	stw	r21,20(sp)
   49d98:	dd000415 	stw	r20,16(sp)
   49d9c:	dcc00315 	stw	r19,12(sp)
   49da0:	dc400115 	stw	r17,4(sp)
   49da4:	dc000015 	stw	r16,0(sp)
   49da8:	3025883a 	mov	r18,r6
   49dac:	2800b726 	beq	r5,zero,4a08c <_realloc_r+0x310>
   49db0:	282b883a 	mov	r21,r5
   49db4:	2029883a 	mov	r20,r4
   49db8:	004e9240 	call	4e924 <__malloc_lock>
   49dbc:	a8bfff17 	ldw	r2,-4(r21)
   49dc0:	043fff04 	movi	r16,-4
   49dc4:	90c002c4 	addi	r3,r18,11
   49dc8:	01000584 	movi	r4,22
   49dcc:	acfffe04 	addi	r19,r21,-8
   49dd0:	1420703a 	and	r16,r2,r16
   49dd4:	20c0332e 	bgeu	r4,r3,49ea4 <_realloc_r+0x128>
   49dd8:	047ffe04 	movi	r17,-8
   49ddc:	1c62703a 	and	r17,r3,r17
   49de0:	8807883a 	mov	r3,r17
   49de4:	88005816 	blt	r17,zero,49f48 <_realloc_r+0x1cc>
   49de8:	8c805736 	bltu	r17,r18,49f48 <_realloc_r+0x1cc>
   49dec:	80c0300e 	bge	r16,r3,49eb0 <_realloc_r+0x134>
   49df0:	070001b4 	movhi	fp,6
   49df4:	e726bc04 	addi	fp,fp,-25872
   49df8:	e1c00217 	ldw	r7,8(fp)
   49dfc:	9c09883a 	add	r4,r19,r16
   49e00:	22000117 	ldw	r8,4(r4)
   49e04:	21c06326 	beq	r4,r7,49f94 <_realloc_r+0x218>
   49e08:	017fff84 	movi	r5,-2
   49e0c:	414a703a 	and	r5,r8,r5
   49e10:	214b883a 	add	r5,r4,r5
   49e14:	29800117 	ldw	r6,4(r5)
   49e18:	3180004c 	andi	r6,r6,1
   49e1c:	30003f26 	beq	r6,zero,49f1c <_realloc_r+0x1a0>
   49e20:	1080004c 	andi	r2,r2,1
   49e24:	10008326 	beq	r2,zero,4a034 <_realloc_r+0x2b8>
   49e28:	900b883a 	mov	r5,r18
   49e2c:	a009883a 	mov	r4,r20
   49e30:	0045ac40 	call	45ac4 <_malloc_r>
   49e34:	1025883a 	mov	r18,r2
   49e38:	10011e26 	beq	r2,zero,4a2b4 <_realloc_r+0x538>
   49e3c:	a93fff17 	ldw	r4,-4(r21)
   49e40:	10fffe04 	addi	r3,r2,-8
   49e44:	00bfff84 	movi	r2,-2
   49e48:	2084703a 	and	r2,r4,r2
   49e4c:	9885883a 	add	r2,r19,r2
   49e50:	1880ee26 	beq	r3,r2,4a20c <_realloc_r+0x490>
   49e54:	81bfff04 	addi	r6,r16,-4
   49e58:	00800904 	movi	r2,36
   49e5c:	1180b836 	bltu	r2,r6,4a140 <_realloc_r+0x3c4>
   49e60:	00c004c4 	movi	r3,19
   49e64:	19809636 	bltu	r3,r6,4a0c0 <_realloc_r+0x344>
   49e68:	9005883a 	mov	r2,r18
   49e6c:	a807883a 	mov	r3,r21
   49e70:	19000017 	ldw	r4,0(r3)
   49e74:	11000015 	stw	r4,0(r2)
   49e78:	19000117 	ldw	r4,4(r3)
   49e7c:	11000115 	stw	r4,4(r2)
   49e80:	18c00217 	ldw	r3,8(r3)
   49e84:	10c00215 	stw	r3,8(r2)
   49e88:	a80b883a 	mov	r5,r21
   49e8c:	a009883a 	mov	r4,r20
   49e90:	00453940 	call	45394 <_free_r>
   49e94:	a009883a 	mov	r4,r20
   49e98:	004ea440 	call	4ea44 <__malloc_unlock>
   49e9c:	9005883a 	mov	r2,r18
   49ea0:	00001206 	br	49eec <_realloc_r+0x170>
   49ea4:	00c00404 	movi	r3,16
   49ea8:	1823883a 	mov	r17,r3
   49eac:	003fce06 	br	49de8 <__alt_data_end+0xfffe45e8>
   49eb0:	a825883a 	mov	r18,r21
   49eb4:	8445c83a 	sub	r2,r16,r17
   49eb8:	00c003c4 	movi	r3,15
   49ebc:	18802636 	bltu	r3,r2,49f58 <_realloc_r+0x1dc>
   49ec0:	99800117 	ldw	r6,4(r19)
   49ec4:	9c07883a 	add	r3,r19,r16
   49ec8:	3180004c 	andi	r6,r6,1
   49ecc:	3420b03a 	or	r16,r6,r16
   49ed0:	9c000115 	stw	r16,4(r19)
   49ed4:	18800117 	ldw	r2,4(r3)
   49ed8:	10800054 	ori	r2,r2,1
   49edc:	18800115 	stw	r2,4(r3)
   49ee0:	a009883a 	mov	r4,r20
   49ee4:	004ea440 	call	4ea44 <__malloc_unlock>
   49ee8:	9005883a 	mov	r2,r18
   49eec:	dfc00917 	ldw	ra,36(sp)
   49ef0:	df000817 	ldw	fp,32(sp)
   49ef4:	ddc00717 	ldw	r23,28(sp)
   49ef8:	dd800617 	ldw	r22,24(sp)
   49efc:	dd400517 	ldw	r21,20(sp)
   49f00:	dd000417 	ldw	r20,16(sp)
   49f04:	dcc00317 	ldw	r19,12(sp)
   49f08:	dc800217 	ldw	r18,8(sp)
   49f0c:	dc400117 	ldw	r17,4(sp)
   49f10:	dc000017 	ldw	r16,0(sp)
   49f14:	dec00a04 	addi	sp,sp,40
   49f18:	f800283a 	ret
   49f1c:	017fff04 	movi	r5,-4
   49f20:	414a703a 	and	r5,r8,r5
   49f24:	814d883a 	add	r6,r16,r5
   49f28:	30c01f16 	blt	r6,r3,49fa8 <_realloc_r+0x22c>
   49f2c:	20800317 	ldw	r2,12(r4)
   49f30:	20c00217 	ldw	r3,8(r4)
   49f34:	a825883a 	mov	r18,r21
   49f38:	3021883a 	mov	r16,r6
   49f3c:	18800315 	stw	r2,12(r3)
   49f40:	10c00215 	stw	r3,8(r2)
   49f44:	003fdb06 	br	49eb4 <__alt_data_end+0xfffe46b4>
   49f48:	00800304 	movi	r2,12
   49f4c:	a0800015 	stw	r2,0(r20)
   49f50:	0005883a 	mov	r2,zero
   49f54:	003fe506 	br	49eec <__alt_data_end+0xfffe46ec>
   49f58:	98c00117 	ldw	r3,4(r19)
   49f5c:	9c4b883a 	add	r5,r19,r17
   49f60:	11000054 	ori	r4,r2,1
   49f64:	18c0004c 	andi	r3,r3,1
   49f68:	1c62b03a 	or	r17,r3,r17
   49f6c:	9c400115 	stw	r17,4(r19)
   49f70:	29000115 	stw	r4,4(r5)
   49f74:	2885883a 	add	r2,r5,r2
   49f78:	10c00117 	ldw	r3,4(r2)
   49f7c:	29400204 	addi	r5,r5,8
   49f80:	a009883a 	mov	r4,r20
   49f84:	18c00054 	ori	r3,r3,1
   49f88:	10c00115 	stw	r3,4(r2)
   49f8c:	00453940 	call	45394 <_free_r>
   49f90:	003fd306 	br	49ee0 <__alt_data_end+0xfffe46e0>
   49f94:	017fff04 	movi	r5,-4
   49f98:	414a703a 	and	r5,r8,r5
   49f9c:	89800404 	addi	r6,r17,16
   49fa0:	8151883a 	add	r8,r16,r5
   49fa4:	4180590e 	bge	r8,r6,4a10c <_realloc_r+0x390>
   49fa8:	1080004c 	andi	r2,r2,1
   49fac:	103f9e1e 	bne	r2,zero,49e28 <__alt_data_end+0xfffe4628>
   49fb0:	adbffe17 	ldw	r22,-8(r21)
   49fb4:	00bfff04 	movi	r2,-4
   49fb8:	9dadc83a 	sub	r22,r19,r22
   49fbc:	b1800117 	ldw	r6,4(r22)
   49fc0:	3084703a 	and	r2,r6,r2
   49fc4:	20002026 	beq	r4,zero,4a048 <_realloc_r+0x2cc>
   49fc8:	80af883a 	add	r23,r16,r2
   49fcc:	b96f883a 	add	r23,r23,r5
   49fd0:	21c05f26 	beq	r4,r7,4a150 <_realloc_r+0x3d4>
   49fd4:	b8c01c16 	blt	r23,r3,4a048 <_realloc_r+0x2cc>
   49fd8:	20800317 	ldw	r2,12(r4)
   49fdc:	20c00217 	ldw	r3,8(r4)
   49fe0:	81bfff04 	addi	r6,r16,-4
   49fe4:	01000904 	movi	r4,36
   49fe8:	18800315 	stw	r2,12(r3)
   49fec:	10c00215 	stw	r3,8(r2)
   49ff0:	b0c00217 	ldw	r3,8(r22)
   49ff4:	b0800317 	ldw	r2,12(r22)
   49ff8:	b4800204 	addi	r18,r22,8
   49ffc:	18800315 	stw	r2,12(r3)
   4a000:	10c00215 	stw	r3,8(r2)
   4a004:	21801b36 	bltu	r4,r6,4a074 <_realloc_r+0x2f8>
   4a008:	008004c4 	movi	r2,19
   4a00c:	1180352e 	bgeu	r2,r6,4a0e4 <_realloc_r+0x368>
   4a010:	a8800017 	ldw	r2,0(r21)
   4a014:	b0800215 	stw	r2,8(r22)
   4a018:	a8800117 	ldw	r2,4(r21)
   4a01c:	b0800315 	stw	r2,12(r22)
   4a020:	008006c4 	movi	r2,27
   4a024:	11807f36 	bltu	r2,r6,4a224 <_realloc_r+0x4a8>
   4a028:	b0800404 	addi	r2,r22,16
   4a02c:	ad400204 	addi	r21,r21,8
   4a030:	00002d06 	br	4a0e8 <_realloc_r+0x36c>
   4a034:	adbffe17 	ldw	r22,-8(r21)
   4a038:	00bfff04 	movi	r2,-4
   4a03c:	9dadc83a 	sub	r22,r19,r22
   4a040:	b1000117 	ldw	r4,4(r22)
   4a044:	2084703a 	and	r2,r4,r2
   4a048:	b03f7726 	beq	r22,zero,49e28 <__alt_data_end+0xfffe4628>
   4a04c:	80af883a 	add	r23,r16,r2
   4a050:	b8ff7516 	blt	r23,r3,49e28 <__alt_data_end+0xfffe4628>
   4a054:	b0800317 	ldw	r2,12(r22)
   4a058:	b0c00217 	ldw	r3,8(r22)
   4a05c:	81bfff04 	addi	r6,r16,-4
   4a060:	01000904 	movi	r4,36
   4a064:	18800315 	stw	r2,12(r3)
   4a068:	10c00215 	stw	r3,8(r2)
   4a06c:	b4800204 	addi	r18,r22,8
   4a070:	21bfe52e 	bgeu	r4,r6,4a008 <__alt_data_end+0xfffe4808>
   4a074:	a80b883a 	mov	r5,r21
   4a078:	9009883a 	mov	r4,r18
   4a07c:	0049bc00 	call	49bc0 <memmove>
   4a080:	b821883a 	mov	r16,r23
   4a084:	b027883a 	mov	r19,r22
   4a088:	003f8a06 	br	49eb4 <__alt_data_end+0xfffe46b4>
   4a08c:	300b883a 	mov	r5,r6
   4a090:	dfc00917 	ldw	ra,36(sp)
   4a094:	df000817 	ldw	fp,32(sp)
   4a098:	ddc00717 	ldw	r23,28(sp)
   4a09c:	dd800617 	ldw	r22,24(sp)
   4a0a0:	dd400517 	ldw	r21,20(sp)
   4a0a4:	dd000417 	ldw	r20,16(sp)
   4a0a8:	dcc00317 	ldw	r19,12(sp)
   4a0ac:	dc800217 	ldw	r18,8(sp)
   4a0b0:	dc400117 	ldw	r17,4(sp)
   4a0b4:	dc000017 	ldw	r16,0(sp)
   4a0b8:	dec00a04 	addi	sp,sp,40
   4a0bc:	0045ac41 	jmpi	45ac4 <_malloc_r>
   4a0c0:	a8c00017 	ldw	r3,0(r21)
   4a0c4:	90c00015 	stw	r3,0(r18)
   4a0c8:	a8c00117 	ldw	r3,4(r21)
   4a0cc:	90c00115 	stw	r3,4(r18)
   4a0d0:	00c006c4 	movi	r3,27
   4a0d4:	19804536 	bltu	r3,r6,4a1ec <_realloc_r+0x470>
   4a0d8:	90800204 	addi	r2,r18,8
   4a0dc:	a8c00204 	addi	r3,r21,8
   4a0e0:	003f6306 	br	49e70 <__alt_data_end+0xfffe4670>
   4a0e4:	9005883a 	mov	r2,r18
   4a0e8:	a8c00017 	ldw	r3,0(r21)
   4a0ec:	b821883a 	mov	r16,r23
   4a0f0:	b027883a 	mov	r19,r22
   4a0f4:	10c00015 	stw	r3,0(r2)
   4a0f8:	a8c00117 	ldw	r3,4(r21)
   4a0fc:	10c00115 	stw	r3,4(r2)
   4a100:	a8c00217 	ldw	r3,8(r21)
   4a104:	10c00215 	stw	r3,8(r2)
   4a108:	003f6a06 	br	49eb4 <__alt_data_end+0xfffe46b4>
   4a10c:	9c67883a 	add	r19,r19,r17
   4a110:	4445c83a 	sub	r2,r8,r17
   4a114:	e4c00215 	stw	r19,8(fp)
   4a118:	10800054 	ori	r2,r2,1
   4a11c:	98800115 	stw	r2,4(r19)
   4a120:	a8bfff17 	ldw	r2,-4(r21)
   4a124:	a009883a 	mov	r4,r20
   4a128:	1080004c 	andi	r2,r2,1
   4a12c:	1462b03a 	or	r17,r2,r17
   4a130:	ac7fff15 	stw	r17,-4(r21)
   4a134:	004ea440 	call	4ea44 <__malloc_unlock>
   4a138:	a805883a 	mov	r2,r21
   4a13c:	003f6b06 	br	49eec <__alt_data_end+0xfffe46ec>
   4a140:	a80b883a 	mov	r5,r21
   4a144:	9009883a 	mov	r4,r18
   4a148:	0049bc00 	call	49bc0 <memmove>
   4a14c:	003f4e06 	br	49e88 <__alt_data_end+0xfffe4688>
   4a150:	89000404 	addi	r4,r17,16
   4a154:	b93fbc16 	blt	r23,r4,4a048 <__alt_data_end+0xfffe4848>
   4a158:	b0800317 	ldw	r2,12(r22)
   4a15c:	b0c00217 	ldw	r3,8(r22)
   4a160:	81bfff04 	addi	r6,r16,-4
   4a164:	01000904 	movi	r4,36
   4a168:	18800315 	stw	r2,12(r3)
   4a16c:	10c00215 	stw	r3,8(r2)
   4a170:	b4800204 	addi	r18,r22,8
   4a174:	21804336 	bltu	r4,r6,4a284 <_realloc_r+0x508>
   4a178:	008004c4 	movi	r2,19
   4a17c:	11803f2e 	bgeu	r2,r6,4a27c <_realloc_r+0x500>
   4a180:	a8800017 	ldw	r2,0(r21)
   4a184:	b0800215 	stw	r2,8(r22)
   4a188:	a8800117 	ldw	r2,4(r21)
   4a18c:	b0800315 	stw	r2,12(r22)
   4a190:	008006c4 	movi	r2,27
   4a194:	11803f36 	bltu	r2,r6,4a294 <_realloc_r+0x518>
   4a198:	b0800404 	addi	r2,r22,16
   4a19c:	ad400204 	addi	r21,r21,8
   4a1a0:	a8c00017 	ldw	r3,0(r21)
   4a1a4:	10c00015 	stw	r3,0(r2)
   4a1a8:	a8c00117 	ldw	r3,4(r21)
   4a1ac:	10c00115 	stw	r3,4(r2)
   4a1b0:	a8c00217 	ldw	r3,8(r21)
   4a1b4:	10c00215 	stw	r3,8(r2)
   4a1b8:	b447883a 	add	r3,r22,r17
   4a1bc:	bc45c83a 	sub	r2,r23,r17
   4a1c0:	e0c00215 	stw	r3,8(fp)
   4a1c4:	10800054 	ori	r2,r2,1
   4a1c8:	18800115 	stw	r2,4(r3)
   4a1cc:	b0800117 	ldw	r2,4(r22)
   4a1d0:	a009883a 	mov	r4,r20
   4a1d4:	1080004c 	andi	r2,r2,1
   4a1d8:	1462b03a 	or	r17,r2,r17
   4a1dc:	b4400115 	stw	r17,4(r22)
   4a1e0:	004ea440 	call	4ea44 <__malloc_unlock>
   4a1e4:	9005883a 	mov	r2,r18
   4a1e8:	003f4006 	br	49eec <__alt_data_end+0xfffe46ec>
   4a1ec:	a8c00217 	ldw	r3,8(r21)
   4a1f0:	90c00215 	stw	r3,8(r18)
   4a1f4:	a8c00317 	ldw	r3,12(r21)
   4a1f8:	90c00315 	stw	r3,12(r18)
   4a1fc:	30801126 	beq	r6,r2,4a244 <_realloc_r+0x4c8>
   4a200:	90800404 	addi	r2,r18,16
   4a204:	a8c00404 	addi	r3,r21,16
   4a208:	003f1906 	br	49e70 <__alt_data_end+0xfffe4670>
   4a20c:	90ffff17 	ldw	r3,-4(r18)
   4a210:	00bfff04 	movi	r2,-4
   4a214:	a825883a 	mov	r18,r21
   4a218:	1884703a 	and	r2,r3,r2
   4a21c:	80a1883a 	add	r16,r16,r2
   4a220:	003f2406 	br	49eb4 <__alt_data_end+0xfffe46b4>
   4a224:	a8800217 	ldw	r2,8(r21)
   4a228:	b0800415 	stw	r2,16(r22)
   4a22c:	a8800317 	ldw	r2,12(r21)
   4a230:	b0800515 	stw	r2,20(r22)
   4a234:	31000a26 	beq	r6,r4,4a260 <_realloc_r+0x4e4>
   4a238:	b0800604 	addi	r2,r22,24
   4a23c:	ad400404 	addi	r21,r21,16
   4a240:	003fa906 	br	4a0e8 <__alt_data_end+0xfffe48e8>
   4a244:	a9000417 	ldw	r4,16(r21)
   4a248:	90800604 	addi	r2,r18,24
   4a24c:	a8c00604 	addi	r3,r21,24
   4a250:	91000415 	stw	r4,16(r18)
   4a254:	a9000517 	ldw	r4,20(r21)
   4a258:	91000515 	stw	r4,20(r18)
   4a25c:	003f0406 	br	49e70 <__alt_data_end+0xfffe4670>
   4a260:	a8c00417 	ldw	r3,16(r21)
   4a264:	ad400604 	addi	r21,r21,24
   4a268:	b0800804 	addi	r2,r22,32
   4a26c:	b0c00615 	stw	r3,24(r22)
   4a270:	a8ffff17 	ldw	r3,-4(r21)
   4a274:	b0c00715 	stw	r3,28(r22)
   4a278:	003f9b06 	br	4a0e8 <__alt_data_end+0xfffe48e8>
   4a27c:	9005883a 	mov	r2,r18
   4a280:	003fc706 	br	4a1a0 <__alt_data_end+0xfffe49a0>
   4a284:	a80b883a 	mov	r5,r21
   4a288:	9009883a 	mov	r4,r18
   4a28c:	0049bc00 	call	49bc0 <memmove>
   4a290:	003fc906 	br	4a1b8 <__alt_data_end+0xfffe49b8>
   4a294:	a8800217 	ldw	r2,8(r21)
   4a298:	b0800415 	stw	r2,16(r22)
   4a29c:	a8800317 	ldw	r2,12(r21)
   4a2a0:	b0800515 	stw	r2,20(r22)
   4a2a4:	31000726 	beq	r6,r4,4a2c4 <_realloc_r+0x548>
   4a2a8:	b0800604 	addi	r2,r22,24
   4a2ac:	ad400404 	addi	r21,r21,16
   4a2b0:	003fbb06 	br	4a1a0 <__alt_data_end+0xfffe49a0>
   4a2b4:	a009883a 	mov	r4,r20
   4a2b8:	004ea440 	call	4ea44 <__malloc_unlock>
   4a2bc:	0005883a 	mov	r2,zero
   4a2c0:	003f0a06 	br	49eec <__alt_data_end+0xfffe46ec>
   4a2c4:	a8c00417 	ldw	r3,16(r21)
   4a2c8:	ad400604 	addi	r21,r21,24
   4a2cc:	b0800804 	addi	r2,r22,32
   4a2d0:	b0c00615 	stw	r3,24(r22)
   4a2d4:	a8ffff17 	ldw	r3,-4(r21)
   4a2d8:	b0c00715 	stw	r3,28(r22)
   4a2dc:	003fb006 	br	4a1a0 <__alt_data_end+0xfffe49a0>

0004a2e0 <__swbuf_r>:
   4a2e0:	defffb04 	addi	sp,sp,-20
   4a2e4:	dcc00315 	stw	r19,12(sp)
   4a2e8:	dc800215 	stw	r18,8(sp)
   4a2ec:	dc000015 	stw	r16,0(sp)
   4a2f0:	dfc00415 	stw	ra,16(sp)
   4a2f4:	dc400115 	stw	r17,4(sp)
   4a2f8:	2025883a 	mov	r18,r4
   4a2fc:	2827883a 	mov	r19,r5
   4a300:	3021883a 	mov	r16,r6
   4a304:	20000226 	beq	r4,zero,4a310 <__swbuf_r+0x30>
   4a308:	20800e17 	ldw	r2,56(r4)
   4a30c:	10004226 	beq	r2,zero,4a418 <__swbuf_r+0x138>
   4a310:	80800617 	ldw	r2,24(r16)
   4a314:	8100030b 	ldhu	r4,12(r16)
   4a318:	80800215 	stw	r2,8(r16)
   4a31c:	2080020c 	andi	r2,r4,8
   4a320:	10003626 	beq	r2,zero,4a3fc <__swbuf_r+0x11c>
   4a324:	80c00417 	ldw	r3,16(r16)
   4a328:	18003426 	beq	r3,zero,4a3fc <__swbuf_r+0x11c>
   4a32c:	2088000c 	andi	r2,r4,8192
   4a330:	9c403fcc 	andi	r17,r19,255
   4a334:	10001a26 	beq	r2,zero,4a3a0 <__swbuf_r+0xc0>
   4a338:	80800017 	ldw	r2,0(r16)
   4a33c:	81000517 	ldw	r4,20(r16)
   4a340:	10c7c83a 	sub	r3,r2,r3
   4a344:	1900200e 	bge	r3,r4,4a3c8 <__swbuf_r+0xe8>
   4a348:	18c00044 	addi	r3,r3,1
   4a34c:	81000217 	ldw	r4,8(r16)
   4a350:	11400044 	addi	r5,r2,1
   4a354:	81400015 	stw	r5,0(r16)
   4a358:	213fffc4 	addi	r4,r4,-1
   4a35c:	81000215 	stw	r4,8(r16)
   4a360:	14c00005 	stb	r19,0(r2)
   4a364:	80800517 	ldw	r2,20(r16)
   4a368:	10c01e26 	beq	r2,r3,4a3e4 <__swbuf_r+0x104>
   4a36c:	8080030b 	ldhu	r2,12(r16)
   4a370:	1080004c 	andi	r2,r2,1
   4a374:	10000226 	beq	r2,zero,4a380 <__swbuf_r+0xa0>
   4a378:	00800284 	movi	r2,10
   4a37c:	88801926 	beq	r17,r2,4a3e4 <__swbuf_r+0x104>
   4a380:	8805883a 	mov	r2,r17
   4a384:	dfc00417 	ldw	ra,16(sp)
   4a388:	dcc00317 	ldw	r19,12(sp)
   4a38c:	dc800217 	ldw	r18,8(sp)
   4a390:	dc400117 	ldw	r17,4(sp)
   4a394:	dc000017 	ldw	r16,0(sp)
   4a398:	dec00504 	addi	sp,sp,20
   4a39c:	f800283a 	ret
   4a3a0:	81401917 	ldw	r5,100(r16)
   4a3a4:	00b7ffc4 	movi	r2,-8193
   4a3a8:	21080014 	ori	r4,r4,8192
   4a3ac:	2884703a 	and	r2,r5,r2
   4a3b0:	80801915 	stw	r2,100(r16)
   4a3b4:	80800017 	ldw	r2,0(r16)
   4a3b8:	8100030d 	sth	r4,12(r16)
   4a3bc:	81000517 	ldw	r4,20(r16)
   4a3c0:	10c7c83a 	sub	r3,r2,r3
   4a3c4:	193fe016 	blt	r3,r4,4a348 <__alt_data_end+0xfffe4b48>
   4a3c8:	800b883a 	mov	r5,r16
   4a3cc:	9009883a 	mov	r4,r18
   4a3d0:	0044e340 	call	44e34 <_fflush_r>
   4a3d4:	1000071e 	bne	r2,zero,4a3f4 <__swbuf_r+0x114>
   4a3d8:	80800017 	ldw	r2,0(r16)
   4a3dc:	00c00044 	movi	r3,1
   4a3e0:	003fda06 	br	4a34c <__alt_data_end+0xfffe4b4c>
   4a3e4:	800b883a 	mov	r5,r16
   4a3e8:	9009883a 	mov	r4,r18
   4a3ec:	0044e340 	call	44e34 <_fflush_r>
   4a3f0:	103fe326 	beq	r2,zero,4a380 <__alt_data_end+0xfffe4b80>
   4a3f4:	00bfffc4 	movi	r2,-1
   4a3f8:	003fe206 	br	4a384 <__alt_data_end+0xfffe4b84>
   4a3fc:	800b883a 	mov	r5,r16
   4a400:	9009883a 	mov	r4,r18
   4a404:	00432140 	call	43214 <__swsetup_r>
   4a408:	103ffa1e 	bne	r2,zero,4a3f4 <__alt_data_end+0xfffe4bf4>
   4a40c:	8100030b 	ldhu	r4,12(r16)
   4a410:	80c00417 	ldw	r3,16(r16)
   4a414:	003fc506 	br	4a32c <__alt_data_end+0xfffe4b2c>
   4a418:	00452200 	call	45220 <__sinit>
   4a41c:	003fbc06 	br	4a310 <__alt_data_end+0xfffe4b10>

0004a420 <__swbuf>:
   4a420:	008001b4 	movhi	r2,6
   4a424:	10ac4504 	addi	r2,r2,-20204
   4a428:	280d883a 	mov	r6,r5
   4a42c:	200b883a 	mov	r5,r4
   4a430:	11000017 	ldw	r4,0(r2)
   4a434:	004a2e01 	jmpi	4a2e0 <__swbuf_r>

0004a438 <_wcrtomb_r>:
   4a438:	defff604 	addi	sp,sp,-40
   4a43c:	008001b4 	movhi	r2,6
   4a440:	dc800815 	stw	r18,32(sp)
   4a444:	dc400715 	stw	r17,28(sp)
   4a448:	dc000615 	stw	r16,24(sp)
   4a44c:	10ac4904 	addi	r2,r2,-20188
   4a450:	dfc00915 	stw	ra,36(sp)
   4a454:	2021883a 	mov	r16,r4
   4a458:	3823883a 	mov	r17,r7
   4a45c:	14800017 	ldw	r18,0(r2)
   4a460:	28001426 	beq	r5,zero,4a4b4 <_wcrtomb_r+0x7c>
   4a464:	d9400415 	stw	r5,16(sp)
   4a468:	d9800515 	stw	r6,20(sp)
   4a46c:	00458a80 	call	458a8 <__locale_charset>
   4a470:	d9800517 	ldw	r6,20(sp)
   4a474:	d9400417 	ldw	r5,16(sp)
   4a478:	100f883a 	mov	r7,r2
   4a47c:	dc400015 	stw	r17,0(sp)
   4a480:	8009883a 	mov	r4,r16
   4a484:	903ee83a 	callr	r18
   4a488:	00ffffc4 	movi	r3,-1
   4a48c:	10c0031e 	bne	r2,r3,4a49c <_wcrtomb_r+0x64>
   4a490:	88000015 	stw	zero,0(r17)
   4a494:	00c02284 	movi	r3,138
   4a498:	80c00015 	stw	r3,0(r16)
   4a49c:	dfc00917 	ldw	ra,36(sp)
   4a4a0:	dc800817 	ldw	r18,32(sp)
   4a4a4:	dc400717 	ldw	r17,28(sp)
   4a4a8:	dc000617 	ldw	r16,24(sp)
   4a4ac:	dec00a04 	addi	sp,sp,40
   4a4b0:	f800283a 	ret
   4a4b4:	00458a80 	call	458a8 <__locale_charset>
   4a4b8:	100f883a 	mov	r7,r2
   4a4bc:	dc400015 	stw	r17,0(sp)
   4a4c0:	000d883a 	mov	r6,zero
   4a4c4:	d9400104 	addi	r5,sp,4
   4a4c8:	8009883a 	mov	r4,r16
   4a4cc:	903ee83a 	callr	r18
   4a4d0:	003fed06 	br	4a488 <__alt_data_end+0xfffe4c88>

0004a4d4 <wcrtomb>:
   4a4d4:	defff604 	addi	sp,sp,-40
   4a4d8:	008001b4 	movhi	r2,6
   4a4dc:	dc800615 	stw	r18,24(sp)
   4a4e0:	dc400515 	stw	r17,20(sp)
   4a4e4:	10ac4504 	addi	r2,r2,-20204
   4a4e8:	dfc00915 	stw	ra,36(sp)
   4a4ec:	dd000815 	stw	r20,32(sp)
   4a4f0:	dcc00715 	stw	r19,28(sp)
   4a4f4:	dc000415 	stw	r16,16(sp)
   4a4f8:	3025883a 	mov	r18,r6
   4a4fc:	14400017 	ldw	r17,0(r2)
   4a500:	20001926 	beq	r4,zero,4a568 <wcrtomb+0x94>
   4a504:	008001b4 	movhi	r2,6
   4a508:	10ac4904 	addi	r2,r2,-20188
   4a50c:	15000017 	ldw	r20,0(r2)
   4a510:	2021883a 	mov	r16,r4
   4a514:	2827883a 	mov	r19,r5
   4a518:	00458a80 	call	458a8 <__locale_charset>
   4a51c:	100f883a 	mov	r7,r2
   4a520:	dc800015 	stw	r18,0(sp)
   4a524:	980d883a 	mov	r6,r19
   4a528:	800b883a 	mov	r5,r16
   4a52c:	8809883a 	mov	r4,r17
   4a530:	a03ee83a 	callr	r20
   4a534:	00ffffc4 	movi	r3,-1
   4a538:	10c0031e 	bne	r2,r3,4a548 <wcrtomb+0x74>
   4a53c:	90000015 	stw	zero,0(r18)
   4a540:	00c02284 	movi	r3,138
   4a544:	88c00015 	stw	r3,0(r17)
   4a548:	dfc00917 	ldw	ra,36(sp)
   4a54c:	dd000817 	ldw	r20,32(sp)
   4a550:	dcc00717 	ldw	r19,28(sp)
   4a554:	dc800617 	ldw	r18,24(sp)
   4a558:	dc400517 	ldw	r17,20(sp)
   4a55c:	dc000417 	ldw	r16,16(sp)
   4a560:	dec00a04 	addi	sp,sp,40
   4a564:	f800283a 	ret
   4a568:	008001b4 	movhi	r2,6
   4a56c:	10ac4904 	addi	r2,r2,-20188
   4a570:	14000017 	ldw	r16,0(r2)
   4a574:	00458a80 	call	458a8 <__locale_charset>
   4a578:	100f883a 	mov	r7,r2
   4a57c:	dc800015 	stw	r18,0(sp)
   4a580:	000d883a 	mov	r6,zero
   4a584:	d9400104 	addi	r5,sp,4
   4a588:	8809883a 	mov	r4,r17
   4a58c:	803ee83a 	callr	r16
   4a590:	003fe806 	br	4a534 <__alt_data_end+0xfffe4d34>

0004a594 <__ascii_wctomb>:
   4a594:	28000526 	beq	r5,zero,4a5ac <__ascii_wctomb+0x18>
   4a598:	00803fc4 	movi	r2,255
   4a59c:	11800536 	bltu	r2,r6,4a5b4 <__ascii_wctomb+0x20>
   4a5a0:	29800005 	stb	r6,0(r5)
   4a5a4:	00800044 	movi	r2,1
   4a5a8:	f800283a 	ret
   4a5ac:	0005883a 	mov	r2,zero
   4a5b0:	f800283a 	ret
   4a5b4:	00802284 	movi	r2,138
   4a5b8:	20800015 	stw	r2,0(r4)
   4a5bc:	00bfffc4 	movi	r2,-1
   4a5c0:	f800283a 	ret

0004a5c4 <_wctomb_r>:
   4a5c4:	008001b4 	movhi	r2,6
   4a5c8:	defff904 	addi	sp,sp,-28
   4a5cc:	10ac4904 	addi	r2,r2,-20188
   4a5d0:	dfc00615 	stw	ra,24(sp)
   4a5d4:	dc400515 	stw	r17,20(sp)
   4a5d8:	dc000415 	stw	r16,16(sp)
   4a5dc:	3823883a 	mov	r17,r7
   4a5e0:	14000017 	ldw	r16,0(r2)
   4a5e4:	d9000115 	stw	r4,4(sp)
   4a5e8:	d9400215 	stw	r5,8(sp)
   4a5ec:	d9800315 	stw	r6,12(sp)
   4a5f0:	00458a80 	call	458a8 <__locale_charset>
   4a5f4:	d9800317 	ldw	r6,12(sp)
   4a5f8:	d9400217 	ldw	r5,8(sp)
   4a5fc:	d9000117 	ldw	r4,4(sp)
   4a600:	100f883a 	mov	r7,r2
   4a604:	dc400015 	stw	r17,0(sp)
   4a608:	803ee83a 	callr	r16
   4a60c:	dfc00617 	ldw	ra,24(sp)
   4a610:	dc400517 	ldw	r17,20(sp)
   4a614:	dc000417 	ldw	r16,16(sp)
   4a618:	dec00704 	addi	sp,sp,28
   4a61c:	f800283a 	ret

0004a620 <__udivdi3>:
   4a620:	defff404 	addi	sp,sp,-48
   4a624:	dcc00515 	stw	r19,20(sp)
   4a628:	dc000215 	stw	r16,8(sp)
   4a62c:	dfc00b15 	stw	ra,44(sp)
   4a630:	df000a15 	stw	fp,40(sp)
   4a634:	ddc00915 	stw	r23,36(sp)
   4a638:	dd800815 	stw	r22,32(sp)
   4a63c:	dd400715 	stw	r21,28(sp)
   4a640:	dd000615 	stw	r20,24(sp)
   4a644:	dc800415 	stw	r18,16(sp)
   4a648:	dc400315 	stw	r17,12(sp)
   4a64c:	2027883a 	mov	r19,r4
   4a650:	2821883a 	mov	r16,r5
   4a654:	3800461e 	bne	r7,zero,4a770 <__udivdi3+0x150>
   4a658:	3023883a 	mov	r17,r6
   4a65c:	2025883a 	mov	r18,r4
   4a660:	2980572e 	bgeu	r5,r6,4a7c0 <__udivdi3+0x1a0>
   4a664:	00bfffd4 	movui	r2,65535
   4a668:	282d883a 	mov	r22,r5
   4a66c:	1180b236 	bltu	r2,r6,4a938 <__udivdi3+0x318>
   4a670:	00803fc4 	movi	r2,255
   4a674:	1185803a 	cmpltu	r2,r2,r6
   4a678:	100490fa 	slli	r2,r2,3
   4a67c:	3086d83a 	srl	r3,r6,r2
   4a680:	010001b4 	movhi	r4,6
   4a684:	21248e44 	addi	r4,r4,-28103
   4a688:	20c7883a 	add	r3,r4,r3
   4a68c:	18c00003 	ldbu	r3,0(r3)
   4a690:	1885883a 	add	r2,r3,r2
   4a694:	00c00804 	movi	r3,32
   4a698:	1887c83a 	sub	r3,r3,r2
   4a69c:	18000526 	beq	r3,zero,4a6b4 <__udivdi3+0x94>
   4a6a0:	80e0983a 	sll	r16,r16,r3
   4a6a4:	9884d83a 	srl	r2,r19,r2
   4a6a8:	30e2983a 	sll	r17,r6,r3
   4a6ac:	98e4983a 	sll	r18,r19,r3
   4a6b0:	142cb03a 	or	r22,r2,r16
   4a6b4:	882ad43a 	srli	r21,r17,16
   4a6b8:	b009883a 	mov	r4,r22
   4a6bc:	8d3fffcc 	andi	r20,r17,65535
   4a6c0:	a80b883a 	mov	r5,r21
   4a6c4:	004b33c0 	call	4b33c <__umodsi3>
   4a6c8:	b009883a 	mov	r4,r22
   4a6cc:	a80b883a 	mov	r5,r21
   4a6d0:	1027883a 	mov	r19,r2
   4a6d4:	004b2d80 	call	4b2d8 <__udivsi3>
   4a6d8:	100b883a 	mov	r5,r2
   4a6dc:	a009883a 	mov	r4,r20
   4a6e0:	102d883a 	mov	r22,r2
   4a6e4:	00407040 	call	40704 <__mulsi3>
   4a6e8:	9826943a 	slli	r19,r19,16
   4a6ec:	9006d43a 	srli	r3,r18,16
   4a6f0:	1cc6b03a 	or	r3,r3,r19
   4a6f4:	1880052e 	bgeu	r3,r2,4a70c <__udivdi3+0xec>
   4a6f8:	1c47883a 	add	r3,r3,r17
   4a6fc:	b13fffc4 	addi	r4,r22,-1
   4a700:	1c400136 	bltu	r3,r17,4a708 <__udivdi3+0xe8>
   4a704:	18814236 	bltu	r3,r2,4ac10 <__udivdi3+0x5f0>
   4a708:	202d883a 	mov	r22,r4
   4a70c:	18a1c83a 	sub	r16,r3,r2
   4a710:	8009883a 	mov	r4,r16
   4a714:	a80b883a 	mov	r5,r21
   4a718:	004b33c0 	call	4b33c <__umodsi3>
   4a71c:	1027883a 	mov	r19,r2
   4a720:	8009883a 	mov	r4,r16
   4a724:	a80b883a 	mov	r5,r21
   4a728:	9826943a 	slli	r19,r19,16
   4a72c:	004b2d80 	call	4b2d8 <__udivsi3>
   4a730:	100b883a 	mov	r5,r2
   4a734:	a009883a 	mov	r4,r20
   4a738:	94bfffcc 	andi	r18,r18,65535
   4a73c:	1021883a 	mov	r16,r2
   4a740:	94e4b03a 	or	r18,r18,r19
   4a744:	00407040 	call	40704 <__mulsi3>
   4a748:	9080052e 	bgeu	r18,r2,4a760 <__udivdi3+0x140>
   4a74c:	8ca5883a 	add	r18,r17,r18
   4a750:	80ffffc4 	addi	r3,r16,-1
   4a754:	94410c36 	bltu	r18,r17,4ab88 <__udivdi3+0x568>
   4a758:	90810b2e 	bgeu	r18,r2,4ab88 <__udivdi3+0x568>
   4a75c:	843fff84 	addi	r16,r16,-2
   4a760:	b004943a 	slli	r2,r22,16
   4a764:	0007883a 	mov	r3,zero
   4a768:	1404b03a 	or	r2,r2,r16
   4a76c:	00005e06 	br	4a8e8 <__udivdi3+0x2c8>
   4a770:	29c05b36 	bltu	r5,r7,4a8e0 <__udivdi3+0x2c0>
   4a774:	00bfffd4 	movui	r2,65535
   4a778:	11c0672e 	bgeu	r2,r7,4a918 <__udivdi3+0x2f8>
   4a77c:	00804034 	movhi	r2,256
   4a780:	10bfffc4 	addi	r2,r2,-1
   4a784:	11c10a36 	bltu	r2,r7,4abb0 <__udivdi3+0x590>
   4a788:	00800404 	movi	r2,16
   4a78c:	3886d83a 	srl	r3,r7,r2
   4a790:	010001b4 	movhi	r4,6
   4a794:	21248e44 	addi	r4,r4,-28103
   4a798:	20c7883a 	add	r3,r4,r3
   4a79c:	18c00003 	ldbu	r3,0(r3)
   4a7a0:	05c00804 	movi	r23,32
   4a7a4:	1885883a 	add	r2,r3,r2
   4a7a8:	b8afc83a 	sub	r23,r23,r2
   4a7ac:	b800671e 	bne	r23,zero,4a94c <__udivdi3+0x32c>
   4a7b0:	3c010536 	bltu	r7,r16,4abc8 <__udivdi3+0x5a8>
   4a7b4:	9985403a 	cmpgeu	r2,r19,r6
   4a7b8:	0007883a 	mov	r3,zero
   4a7bc:	00004a06 	br	4a8e8 <__udivdi3+0x2c8>
   4a7c0:	3000041e 	bne	r6,zero,4a7d4 <__udivdi3+0x1b4>
   4a7c4:	000b883a 	mov	r5,zero
   4a7c8:	01000044 	movi	r4,1
   4a7cc:	004b2d80 	call	4b2d8 <__udivsi3>
   4a7d0:	1023883a 	mov	r17,r2
   4a7d4:	00bfffd4 	movui	r2,65535
   4a7d8:	1440532e 	bgeu	r2,r17,4a928 <__udivdi3+0x308>
   4a7dc:	00804034 	movhi	r2,256
   4a7e0:	10bfffc4 	addi	r2,r2,-1
   4a7e4:	1440f436 	bltu	r2,r17,4abb8 <__udivdi3+0x598>
   4a7e8:	00800404 	movi	r2,16
   4a7ec:	8886d83a 	srl	r3,r17,r2
   4a7f0:	010001b4 	movhi	r4,6
   4a7f4:	21248e44 	addi	r4,r4,-28103
   4a7f8:	20c7883a 	add	r3,r4,r3
   4a7fc:	18c00003 	ldbu	r3,0(r3)
   4a800:	1885883a 	add	r2,r3,r2
   4a804:	00c00804 	movi	r3,32
   4a808:	1887c83a 	sub	r3,r3,r2
   4a80c:	1800a51e 	bne	r3,zero,4aaa4 <__udivdi3+0x484>
   4a810:	882ad43a 	srli	r21,r17,16
   4a814:	8461c83a 	sub	r16,r16,r17
   4a818:	8d3fffcc 	andi	r20,r17,65535
   4a81c:	00c00044 	movi	r3,1
   4a820:	a80b883a 	mov	r5,r21
   4a824:	8009883a 	mov	r4,r16
   4a828:	d8c00115 	stw	r3,4(sp)
   4a82c:	004b33c0 	call	4b33c <__umodsi3>
   4a830:	a80b883a 	mov	r5,r21
   4a834:	8009883a 	mov	r4,r16
   4a838:	1027883a 	mov	r19,r2
   4a83c:	004b2d80 	call	4b2d8 <__udivsi3>
   4a840:	a00b883a 	mov	r5,r20
   4a844:	1009883a 	mov	r4,r2
   4a848:	102d883a 	mov	r22,r2
   4a84c:	00407040 	call	40704 <__mulsi3>
   4a850:	9826943a 	slli	r19,r19,16
   4a854:	900ed43a 	srli	r7,r18,16
   4a858:	d8c00117 	ldw	r3,4(sp)
   4a85c:	3cceb03a 	or	r7,r7,r19
   4a860:	3880052e 	bgeu	r7,r2,4a878 <__udivdi3+0x258>
   4a864:	3c4f883a 	add	r7,r7,r17
   4a868:	b13fffc4 	addi	r4,r22,-1
   4a86c:	3c400136 	bltu	r7,r17,4a874 <__udivdi3+0x254>
   4a870:	3880e436 	bltu	r7,r2,4ac04 <__udivdi3+0x5e4>
   4a874:	202d883a 	mov	r22,r4
   4a878:	38a1c83a 	sub	r16,r7,r2
   4a87c:	8009883a 	mov	r4,r16
   4a880:	a80b883a 	mov	r5,r21
   4a884:	d8c00115 	stw	r3,4(sp)
   4a888:	004b33c0 	call	4b33c <__umodsi3>
   4a88c:	1027883a 	mov	r19,r2
   4a890:	8009883a 	mov	r4,r16
   4a894:	a80b883a 	mov	r5,r21
   4a898:	9826943a 	slli	r19,r19,16
   4a89c:	004b2d80 	call	4b2d8 <__udivsi3>
   4a8a0:	a00b883a 	mov	r5,r20
   4a8a4:	1009883a 	mov	r4,r2
   4a8a8:	94bfffcc 	andi	r18,r18,65535
   4a8ac:	1021883a 	mov	r16,r2
   4a8b0:	94e4b03a 	or	r18,r18,r19
   4a8b4:	00407040 	call	40704 <__mulsi3>
   4a8b8:	d8c00117 	ldw	r3,4(sp)
   4a8bc:	9080052e 	bgeu	r18,r2,4a8d4 <__udivdi3+0x2b4>
   4a8c0:	8ca5883a 	add	r18,r17,r18
   4a8c4:	813fffc4 	addi	r4,r16,-1
   4a8c8:	9440ad36 	bltu	r18,r17,4ab80 <__udivdi3+0x560>
   4a8cc:	9080ac2e 	bgeu	r18,r2,4ab80 <__udivdi3+0x560>
   4a8d0:	843fff84 	addi	r16,r16,-2
   4a8d4:	b004943a 	slli	r2,r22,16
   4a8d8:	1404b03a 	or	r2,r2,r16
   4a8dc:	00000206 	br	4a8e8 <__udivdi3+0x2c8>
   4a8e0:	0007883a 	mov	r3,zero
   4a8e4:	0005883a 	mov	r2,zero
   4a8e8:	dfc00b17 	ldw	ra,44(sp)
   4a8ec:	df000a17 	ldw	fp,40(sp)
   4a8f0:	ddc00917 	ldw	r23,36(sp)
   4a8f4:	dd800817 	ldw	r22,32(sp)
   4a8f8:	dd400717 	ldw	r21,28(sp)
   4a8fc:	dd000617 	ldw	r20,24(sp)
   4a900:	dcc00517 	ldw	r19,20(sp)
   4a904:	dc800417 	ldw	r18,16(sp)
   4a908:	dc400317 	ldw	r17,12(sp)
   4a90c:	dc000217 	ldw	r16,8(sp)
   4a910:	dec00c04 	addi	sp,sp,48
   4a914:	f800283a 	ret
   4a918:	00803fc4 	movi	r2,255
   4a91c:	11c5803a 	cmpltu	r2,r2,r7
   4a920:	100490fa 	slli	r2,r2,3
   4a924:	003f9906 	br	4a78c <__alt_data_end+0xfffe4f8c>
   4a928:	00803fc4 	movi	r2,255
   4a92c:	1445803a 	cmpltu	r2,r2,r17
   4a930:	100490fa 	slli	r2,r2,3
   4a934:	003fad06 	br	4a7ec <__alt_data_end+0xfffe4fec>
   4a938:	00804034 	movhi	r2,256
   4a93c:	10bfffc4 	addi	r2,r2,-1
   4a940:	11809f36 	bltu	r2,r6,4abc0 <__udivdi3+0x5a0>
   4a944:	00800404 	movi	r2,16
   4a948:	003f4c06 	br	4a67c <__alt_data_end+0xfffe4e7c>
   4a94c:	3dce983a 	sll	r7,r7,r23
   4a950:	30b8d83a 	srl	fp,r6,r2
   4a954:	80a2d83a 	srl	r17,r16,r2
   4a958:	35cc983a 	sll	r6,r6,r23
   4a95c:	3f38b03a 	or	fp,r7,fp
   4a960:	e024d43a 	srli	r18,fp,16
   4a964:	9884d83a 	srl	r2,r19,r2
   4a968:	85e0983a 	sll	r16,r16,r23
   4a96c:	8809883a 	mov	r4,r17
   4a970:	900b883a 	mov	r5,r18
   4a974:	d9800015 	stw	r6,0(sp)
   4a978:	1420b03a 	or	r16,r2,r16
   4a97c:	004b33c0 	call	4b33c <__umodsi3>
   4a980:	900b883a 	mov	r5,r18
   4a984:	8809883a 	mov	r4,r17
   4a988:	1029883a 	mov	r20,r2
   4a98c:	e5bfffcc 	andi	r22,fp,65535
   4a990:	004b2d80 	call	4b2d8 <__udivsi3>
   4a994:	100b883a 	mov	r5,r2
   4a998:	b009883a 	mov	r4,r22
   4a99c:	102b883a 	mov	r21,r2
   4a9a0:	00407040 	call	40704 <__mulsi3>
   4a9a4:	a028943a 	slli	r20,r20,16
   4a9a8:	8006d43a 	srli	r3,r16,16
   4a9ac:	1d06b03a 	or	r3,r3,r20
   4a9b0:	1880042e 	bgeu	r3,r2,4a9c4 <__udivdi3+0x3a4>
   4a9b4:	1f07883a 	add	r3,r3,fp
   4a9b8:	a93fffc4 	addi	r4,r21,-1
   4a9bc:	1f00892e 	bgeu	r3,fp,4abe4 <__udivdi3+0x5c4>
   4a9c0:	202b883a 	mov	r21,r4
   4a9c4:	18a3c83a 	sub	r17,r3,r2
   4a9c8:	8809883a 	mov	r4,r17
   4a9cc:	900b883a 	mov	r5,r18
   4a9d0:	004b33c0 	call	4b33c <__umodsi3>
   4a9d4:	1029883a 	mov	r20,r2
   4a9d8:	8809883a 	mov	r4,r17
   4a9dc:	900b883a 	mov	r5,r18
   4a9e0:	a028943a 	slli	r20,r20,16
   4a9e4:	004b2d80 	call	4b2d8 <__udivsi3>
   4a9e8:	100b883a 	mov	r5,r2
   4a9ec:	b009883a 	mov	r4,r22
   4a9f0:	843fffcc 	andi	r16,r16,65535
   4a9f4:	1023883a 	mov	r17,r2
   4a9f8:	8520b03a 	or	r16,r16,r20
   4a9fc:	00407040 	call	40704 <__mulsi3>
   4aa00:	8080042e 	bgeu	r16,r2,4aa14 <__udivdi3+0x3f4>
   4aa04:	8721883a 	add	r16,r16,fp
   4aa08:	88ffffc4 	addi	r3,r17,-1
   4aa0c:	8700712e 	bgeu	r16,fp,4abd4 <__udivdi3+0x5b4>
   4aa10:	1823883a 	mov	r17,r3
   4aa14:	a80e943a 	slli	r7,r21,16
   4aa18:	d8c00017 	ldw	r3,0(sp)
   4aa1c:	80a1c83a 	sub	r16,r16,r2
   4aa20:	3c64b03a 	or	r18,r7,r17
   4aa24:	1d3fffcc 	andi	r20,r3,65535
   4aa28:	9022d43a 	srli	r17,r18,16
   4aa2c:	95bfffcc 	andi	r22,r18,65535
   4aa30:	a00b883a 	mov	r5,r20
   4aa34:	b009883a 	mov	r4,r22
   4aa38:	182ad43a 	srli	r21,r3,16
   4aa3c:	00407040 	call	40704 <__mulsi3>
   4aa40:	a00b883a 	mov	r5,r20
   4aa44:	8809883a 	mov	r4,r17
   4aa48:	1039883a 	mov	fp,r2
   4aa4c:	00407040 	call	40704 <__mulsi3>
   4aa50:	8809883a 	mov	r4,r17
   4aa54:	a80b883a 	mov	r5,r21
   4aa58:	1029883a 	mov	r20,r2
   4aa5c:	00407040 	call	40704 <__mulsi3>
   4aa60:	a80b883a 	mov	r5,r21
   4aa64:	b009883a 	mov	r4,r22
   4aa68:	1023883a 	mov	r17,r2
   4aa6c:	00407040 	call	40704 <__mulsi3>
   4aa70:	e006d43a 	srli	r3,fp,16
   4aa74:	1505883a 	add	r2,r2,r20
   4aa78:	1887883a 	add	r3,r3,r2
   4aa7c:	1d00022e 	bgeu	r3,r20,4aa88 <__udivdi3+0x468>
   4aa80:	00800074 	movhi	r2,1
   4aa84:	88a3883a 	add	r17,r17,r2
   4aa88:	1804d43a 	srli	r2,r3,16
   4aa8c:	1463883a 	add	r17,r2,r17
   4aa90:	84404436 	bltu	r16,r17,4aba4 <__udivdi3+0x584>
   4aa94:	84403e26 	beq	r16,r17,4ab90 <__udivdi3+0x570>
   4aa98:	9005883a 	mov	r2,r18
   4aa9c:	0007883a 	mov	r3,zero
   4aaa0:	003f9106 	br	4a8e8 <__alt_data_end+0xfffe50e8>
   4aaa4:	88e2983a 	sll	r17,r17,r3
   4aaa8:	80aed83a 	srl	r23,r16,r2
   4aaac:	80e0983a 	sll	r16,r16,r3
   4aab0:	882ad43a 	srli	r21,r17,16
   4aab4:	9884d83a 	srl	r2,r19,r2
   4aab8:	b809883a 	mov	r4,r23
   4aabc:	a80b883a 	mov	r5,r21
   4aac0:	98e4983a 	sll	r18,r19,r3
   4aac4:	142cb03a 	or	r22,r2,r16
   4aac8:	004b33c0 	call	4b33c <__umodsi3>
   4aacc:	b809883a 	mov	r4,r23
   4aad0:	a80b883a 	mov	r5,r21
   4aad4:	1027883a 	mov	r19,r2
   4aad8:	8d3fffcc 	andi	r20,r17,65535
   4aadc:	004b2d80 	call	4b2d8 <__udivsi3>
   4aae0:	a009883a 	mov	r4,r20
   4aae4:	100b883a 	mov	r5,r2
   4aae8:	102f883a 	mov	r23,r2
   4aaec:	00407040 	call	40704 <__mulsi3>
   4aaf0:	9826943a 	slli	r19,r19,16
   4aaf4:	b008d43a 	srli	r4,r22,16
   4aaf8:	24c8b03a 	or	r4,r4,r19
   4aafc:	2080062e 	bgeu	r4,r2,4ab18 <__udivdi3+0x4f8>
   4ab00:	2449883a 	add	r4,r4,r17
   4ab04:	b8ffffc4 	addi	r3,r23,-1
   4ab08:	24403c36 	bltu	r4,r17,4abfc <__udivdi3+0x5dc>
   4ab0c:	20803b2e 	bgeu	r4,r2,4abfc <__udivdi3+0x5dc>
   4ab10:	bdffff84 	addi	r23,r23,-2
   4ab14:	2449883a 	add	r4,r4,r17
   4ab18:	20a1c83a 	sub	r16,r4,r2
   4ab1c:	a80b883a 	mov	r5,r21
   4ab20:	8009883a 	mov	r4,r16
   4ab24:	004b33c0 	call	4b33c <__umodsi3>
   4ab28:	a80b883a 	mov	r5,r21
   4ab2c:	8009883a 	mov	r4,r16
   4ab30:	1027883a 	mov	r19,r2
   4ab34:	004b2d80 	call	4b2d8 <__udivsi3>
   4ab38:	a009883a 	mov	r4,r20
   4ab3c:	100b883a 	mov	r5,r2
   4ab40:	9826943a 	slli	r19,r19,16
   4ab44:	1039883a 	mov	fp,r2
   4ab48:	00407040 	call	40704 <__mulsi3>
   4ab4c:	b13fffcc 	andi	r4,r22,65535
   4ab50:	24c8b03a 	or	r4,r4,r19
   4ab54:	2080062e 	bgeu	r4,r2,4ab70 <__udivdi3+0x550>
   4ab58:	2449883a 	add	r4,r4,r17
   4ab5c:	e0ffffc4 	addi	r3,fp,-1
   4ab60:	24402436 	bltu	r4,r17,4abf4 <__udivdi3+0x5d4>
   4ab64:	2080232e 	bgeu	r4,r2,4abf4 <__udivdi3+0x5d4>
   4ab68:	e73fff84 	addi	fp,fp,-2
   4ab6c:	2449883a 	add	r4,r4,r17
   4ab70:	b82e943a 	slli	r23,r23,16
   4ab74:	20a1c83a 	sub	r16,r4,r2
   4ab78:	bf06b03a 	or	r3,r23,fp
   4ab7c:	003f2806 	br	4a820 <__alt_data_end+0xfffe5020>
   4ab80:	2021883a 	mov	r16,r4
   4ab84:	003f5306 	br	4a8d4 <__alt_data_end+0xfffe50d4>
   4ab88:	1821883a 	mov	r16,r3
   4ab8c:	003ef406 	br	4a760 <__alt_data_end+0xfffe4f60>
   4ab90:	1806943a 	slli	r3,r3,16
   4ab94:	9de6983a 	sll	r19,r19,r23
   4ab98:	e73fffcc 	andi	fp,fp,65535
   4ab9c:	1f07883a 	add	r3,r3,fp
   4aba0:	98ffbd2e 	bgeu	r19,r3,4aa98 <__alt_data_end+0xfffe5298>
   4aba4:	90bfffc4 	addi	r2,r18,-1
   4aba8:	0007883a 	mov	r3,zero
   4abac:	003f4e06 	br	4a8e8 <__alt_data_end+0xfffe50e8>
   4abb0:	00800604 	movi	r2,24
   4abb4:	003ef506 	br	4a78c <__alt_data_end+0xfffe4f8c>
   4abb8:	00800604 	movi	r2,24
   4abbc:	003f0b06 	br	4a7ec <__alt_data_end+0xfffe4fec>
   4abc0:	00800604 	movi	r2,24
   4abc4:	003ead06 	br	4a67c <__alt_data_end+0xfffe4e7c>
   4abc8:	0007883a 	mov	r3,zero
   4abcc:	00800044 	movi	r2,1
   4abd0:	003f4506 	br	4a8e8 <__alt_data_end+0xfffe50e8>
   4abd4:	80bf8e2e 	bgeu	r16,r2,4aa10 <__alt_data_end+0xfffe5210>
   4abd8:	8c7fff84 	addi	r17,r17,-2
   4abdc:	8721883a 	add	r16,r16,fp
   4abe0:	003f8c06 	br	4aa14 <__alt_data_end+0xfffe5214>
   4abe4:	18bf762e 	bgeu	r3,r2,4a9c0 <__alt_data_end+0xfffe51c0>
   4abe8:	ad7fff84 	addi	r21,r21,-2
   4abec:	1f07883a 	add	r3,r3,fp
   4abf0:	003f7406 	br	4a9c4 <__alt_data_end+0xfffe51c4>
   4abf4:	1839883a 	mov	fp,r3
   4abf8:	003fdd06 	br	4ab70 <__alt_data_end+0xfffe5370>
   4abfc:	182f883a 	mov	r23,r3
   4ac00:	003fc506 	br	4ab18 <__alt_data_end+0xfffe5318>
   4ac04:	b5bfff84 	addi	r22,r22,-2
   4ac08:	3c4f883a 	add	r7,r7,r17
   4ac0c:	003f1a06 	br	4a878 <__alt_data_end+0xfffe5078>
   4ac10:	b5bfff84 	addi	r22,r22,-2
   4ac14:	1c47883a 	add	r3,r3,r17
   4ac18:	003ebc06 	br	4a70c <__alt_data_end+0xfffe4f0c>

0004ac1c <__umoddi3>:
   4ac1c:	defff304 	addi	sp,sp,-52
   4ac20:	df000b15 	stw	fp,44(sp)
   4ac24:	dc400415 	stw	r17,16(sp)
   4ac28:	dc000315 	stw	r16,12(sp)
   4ac2c:	dfc00c15 	stw	ra,48(sp)
   4ac30:	ddc00a15 	stw	r23,40(sp)
   4ac34:	dd800915 	stw	r22,36(sp)
   4ac38:	dd400815 	stw	r21,32(sp)
   4ac3c:	dd000715 	stw	r20,28(sp)
   4ac40:	dcc00615 	stw	r19,24(sp)
   4ac44:	dc800515 	stw	r18,20(sp)
   4ac48:	2021883a 	mov	r16,r4
   4ac4c:	2823883a 	mov	r17,r5
   4ac50:	2839883a 	mov	fp,r5
   4ac54:	3800401e 	bne	r7,zero,4ad58 <__umoddi3+0x13c>
   4ac58:	3027883a 	mov	r19,r6
   4ac5c:	2029883a 	mov	r20,r4
   4ac60:	2980552e 	bgeu	r5,r6,4adb8 <__umoddi3+0x19c>
   4ac64:	00bfffd4 	movui	r2,65535
   4ac68:	1180a236 	bltu	r2,r6,4aef4 <__umoddi3+0x2d8>
   4ac6c:	01003fc4 	movi	r4,255
   4ac70:	2189803a 	cmpltu	r4,r4,r6
   4ac74:	200890fa 	slli	r4,r4,3
   4ac78:	3104d83a 	srl	r2,r6,r4
   4ac7c:	00c001b4 	movhi	r3,6
   4ac80:	18e48e44 	addi	r3,r3,-28103
   4ac84:	1885883a 	add	r2,r3,r2
   4ac88:	10c00003 	ldbu	r3,0(r2)
   4ac8c:	00800804 	movi	r2,32
   4ac90:	1909883a 	add	r4,r3,r4
   4ac94:	1125c83a 	sub	r18,r2,r4
   4ac98:	90000526 	beq	r18,zero,4acb0 <__umoddi3+0x94>
   4ac9c:	8ca2983a 	sll	r17,r17,r18
   4aca0:	8108d83a 	srl	r4,r16,r4
   4aca4:	34a6983a 	sll	r19,r6,r18
   4aca8:	84a8983a 	sll	r20,r16,r18
   4acac:	2478b03a 	or	fp,r4,r17
   4acb0:	982cd43a 	srli	r22,r19,16
   4acb4:	e009883a 	mov	r4,fp
   4acb8:	9dffffcc 	andi	r23,r19,65535
   4acbc:	b00b883a 	mov	r5,r22
   4acc0:	004b33c0 	call	4b33c <__umodsi3>
   4acc4:	b00b883a 	mov	r5,r22
   4acc8:	e009883a 	mov	r4,fp
   4accc:	102b883a 	mov	r21,r2
   4acd0:	004b2d80 	call	4b2d8 <__udivsi3>
   4acd4:	100b883a 	mov	r5,r2
   4acd8:	b809883a 	mov	r4,r23
   4acdc:	00407040 	call	40704 <__mulsi3>
   4ace0:	a82a943a 	slli	r21,r21,16
   4ace4:	a006d43a 	srli	r3,r20,16
   4ace8:	1d46b03a 	or	r3,r3,r21
   4acec:	1880032e 	bgeu	r3,r2,4acfc <__umoddi3+0xe0>
   4acf0:	1cc7883a 	add	r3,r3,r19
   4acf4:	1cc00136 	bltu	r3,r19,4acfc <__umoddi3+0xe0>
   4acf8:	18813136 	bltu	r3,r2,4b1c0 <__umoddi3+0x5a4>
   4acfc:	18a1c83a 	sub	r16,r3,r2
   4ad00:	b00b883a 	mov	r5,r22
   4ad04:	8009883a 	mov	r4,r16
   4ad08:	004b33c0 	call	4b33c <__umodsi3>
   4ad0c:	b00b883a 	mov	r5,r22
   4ad10:	8009883a 	mov	r4,r16
   4ad14:	1023883a 	mov	r17,r2
   4ad18:	004b2d80 	call	4b2d8 <__udivsi3>
   4ad1c:	100b883a 	mov	r5,r2
   4ad20:	b809883a 	mov	r4,r23
   4ad24:	8822943a 	slli	r17,r17,16
   4ad28:	00407040 	call	40704 <__mulsi3>
   4ad2c:	a0ffffcc 	andi	r3,r20,65535
   4ad30:	1c46b03a 	or	r3,r3,r17
   4ad34:	1880042e 	bgeu	r3,r2,4ad48 <__umoddi3+0x12c>
   4ad38:	1cc7883a 	add	r3,r3,r19
   4ad3c:	1cc00236 	bltu	r3,r19,4ad48 <__umoddi3+0x12c>
   4ad40:	1880012e 	bgeu	r3,r2,4ad48 <__umoddi3+0x12c>
   4ad44:	1cc7883a 	add	r3,r3,r19
   4ad48:	1885c83a 	sub	r2,r3,r2
   4ad4c:	1484d83a 	srl	r2,r2,r18
   4ad50:	0007883a 	mov	r3,zero
   4ad54:	00005306 	br	4aea4 <__umoddi3+0x288>
   4ad58:	29c05036 	bltu	r5,r7,4ae9c <__umoddi3+0x280>
   4ad5c:	00bfffd4 	movui	r2,65535
   4ad60:	11c05c2e 	bgeu	r2,r7,4aed4 <__umoddi3+0x2b8>
   4ad64:	00804034 	movhi	r2,256
   4ad68:	10bfffc4 	addi	r2,r2,-1
   4ad6c:	11c10636 	bltu	r2,r7,4b188 <__umoddi3+0x56c>
   4ad70:	01000404 	movi	r4,16
   4ad74:	3904d83a 	srl	r2,r7,r4
   4ad78:	00c001b4 	movhi	r3,6
   4ad7c:	18e48e44 	addi	r3,r3,-28103
   4ad80:	1885883a 	add	r2,r3,r2
   4ad84:	14c00003 	ldbu	r19,0(r2)
   4ad88:	00c00804 	movi	r3,32
   4ad8c:	9927883a 	add	r19,r19,r4
   4ad90:	1ce9c83a 	sub	r20,r3,r19
   4ad94:	a0005c1e 	bne	r20,zero,4af08 <__umoddi3+0x2ec>
   4ad98:	3c400136 	bltu	r7,r17,4ada0 <__umoddi3+0x184>
   4ad9c:	81810a36 	bltu	r16,r6,4b1c8 <__umoddi3+0x5ac>
   4ada0:	8185c83a 	sub	r2,r16,r6
   4ada4:	89e3c83a 	sub	r17,r17,r7
   4ada8:	8089803a 	cmpltu	r4,r16,r2
   4adac:	8939c83a 	sub	fp,r17,r4
   4adb0:	e007883a 	mov	r3,fp
   4adb4:	00003b06 	br	4aea4 <__umoddi3+0x288>
   4adb8:	3000041e 	bne	r6,zero,4adcc <__umoddi3+0x1b0>
   4adbc:	000b883a 	mov	r5,zero
   4adc0:	01000044 	movi	r4,1
   4adc4:	004b2d80 	call	4b2d8 <__udivsi3>
   4adc8:	1027883a 	mov	r19,r2
   4adcc:	00bfffd4 	movui	r2,65535
   4add0:	14c0442e 	bgeu	r2,r19,4aee4 <__umoddi3+0x2c8>
   4add4:	00804034 	movhi	r2,256
   4add8:	10bfffc4 	addi	r2,r2,-1
   4addc:	14c0ec36 	bltu	r2,r19,4b190 <__umoddi3+0x574>
   4ade0:	00800404 	movi	r2,16
   4ade4:	9886d83a 	srl	r3,r19,r2
   4ade8:	010001b4 	movhi	r4,6
   4adec:	21248e44 	addi	r4,r4,-28103
   4adf0:	20c7883a 	add	r3,r4,r3
   4adf4:	18c00003 	ldbu	r3,0(r3)
   4adf8:	1887883a 	add	r3,r3,r2
   4adfc:	00800804 	movi	r2,32
   4ae00:	10e5c83a 	sub	r18,r2,r3
   4ae04:	9000ab1e 	bne	r18,zero,4b0b4 <__umoddi3+0x498>
   4ae08:	982cd43a 	srli	r22,r19,16
   4ae0c:	8ce3c83a 	sub	r17,r17,r19
   4ae10:	9dffffcc 	andi	r23,r19,65535
   4ae14:	b00b883a 	mov	r5,r22
   4ae18:	8809883a 	mov	r4,r17
   4ae1c:	004b33c0 	call	4b33c <__umodsi3>
   4ae20:	b00b883a 	mov	r5,r22
   4ae24:	8809883a 	mov	r4,r17
   4ae28:	102b883a 	mov	r21,r2
   4ae2c:	004b2d80 	call	4b2d8 <__udivsi3>
   4ae30:	b80b883a 	mov	r5,r23
   4ae34:	1009883a 	mov	r4,r2
   4ae38:	00407040 	call	40704 <__mulsi3>
   4ae3c:	a82a943a 	slli	r21,r21,16
   4ae40:	a006d43a 	srli	r3,r20,16
   4ae44:	1d46b03a 	or	r3,r3,r21
   4ae48:	1880042e 	bgeu	r3,r2,4ae5c <__umoddi3+0x240>
   4ae4c:	1cc7883a 	add	r3,r3,r19
   4ae50:	1cc00236 	bltu	r3,r19,4ae5c <__umoddi3+0x240>
   4ae54:	1880012e 	bgeu	r3,r2,4ae5c <__umoddi3+0x240>
   4ae58:	1cc7883a 	add	r3,r3,r19
   4ae5c:	18a1c83a 	sub	r16,r3,r2
   4ae60:	b00b883a 	mov	r5,r22
   4ae64:	8009883a 	mov	r4,r16
   4ae68:	004b33c0 	call	4b33c <__umodsi3>
   4ae6c:	1023883a 	mov	r17,r2
   4ae70:	b00b883a 	mov	r5,r22
   4ae74:	8009883a 	mov	r4,r16
   4ae78:	004b2d80 	call	4b2d8 <__udivsi3>
   4ae7c:	8822943a 	slli	r17,r17,16
   4ae80:	b80b883a 	mov	r5,r23
   4ae84:	1009883a 	mov	r4,r2
   4ae88:	00407040 	call	40704 <__mulsi3>
   4ae8c:	a53fffcc 	andi	r20,r20,65535
   4ae90:	a446b03a 	or	r3,r20,r17
   4ae94:	18bfac2e 	bgeu	r3,r2,4ad48 <__alt_data_end+0xfffe5548>
   4ae98:	003fa706 	br	4ad38 <__alt_data_end+0xfffe5538>
   4ae9c:	2005883a 	mov	r2,r4
   4aea0:	2807883a 	mov	r3,r5
   4aea4:	dfc00c17 	ldw	ra,48(sp)
   4aea8:	df000b17 	ldw	fp,44(sp)
   4aeac:	ddc00a17 	ldw	r23,40(sp)
   4aeb0:	dd800917 	ldw	r22,36(sp)
   4aeb4:	dd400817 	ldw	r21,32(sp)
   4aeb8:	dd000717 	ldw	r20,28(sp)
   4aebc:	dcc00617 	ldw	r19,24(sp)
   4aec0:	dc800517 	ldw	r18,20(sp)
   4aec4:	dc400417 	ldw	r17,16(sp)
   4aec8:	dc000317 	ldw	r16,12(sp)
   4aecc:	dec00d04 	addi	sp,sp,52
   4aed0:	f800283a 	ret
   4aed4:	04c03fc4 	movi	r19,255
   4aed8:	99c9803a 	cmpltu	r4,r19,r7
   4aedc:	200890fa 	slli	r4,r4,3
   4aee0:	003fa406 	br	4ad74 <__alt_data_end+0xfffe5574>
   4aee4:	00803fc4 	movi	r2,255
   4aee8:	14c5803a 	cmpltu	r2,r2,r19
   4aeec:	100490fa 	slli	r2,r2,3
   4aef0:	003fbc06 	br	4ade4 <__alt_data_end+0xfffe55e4>
   4aef4:	00804034 	movhi	r2,256
   4aef8:	10bfffc4 	addi	r2,r2,-1
   4aefc:	1180a636 	bltu	r2,r6,4b198 <__umoddi3+0x57c>
   4af00:	01000404 	movi	r4,16
   4af04:	003f5c06 	br	4ac78 <__alt_data_end+0xfffe5478>
   4af08:	3d0e983a 	sll	r7,r7,r20
   4af0c:	34ead83a 	srl	r21,r6,r19
   4af10:	8cc6d83a 	srl	r3,r17,r19
   4af14:	8d10983a 	sll	r8,r17,r20
   4af18:	3d6ab03a 	or	r21,r7,r21
   4af1c:	a82cd43a 	srli	r22,r21,16
   4af20:	84e2d83a 	srl	r17,r16,r19
   4af24:	1809883a 	mov	r4,r3
   4af28:	b00b883a 	mov	r5,r22
   4af2c:	8a22b03a 	or	r17,r17,r8
   4af30:	3524983a 	sll	r18,r6,r20
   4af34:	dc400015 	stw	r17,0(sp)
   4af38:	d8c00115 	stw	r3,4(sp)
   4af3c:	004b33c0 	call	4b33c <__umodsi3>
   4af40:	d8c00117 	ldw	r3,4(sp)
   4af44:	b00b883a 	mov	r5,r22
   4af48:	1039883a 	mov	fp,r2
   4af4c:	1809883a 	mov	r4,r3
   4af50:	004b2d80 	call	4b2d8 <__udivsi3>
   4af54:	adffffcc 	andi	r23,r21,65535
   4af58:	100b883a 	mov	r5,r2
   4af5c:	b809883a 	mov	r4,r23
   4af60:	1023883a 	mov	r17,r2
   4af64:	00407040 	call	40704 <__mulsi3>
   4af68:	d9400017 	ldw	r5,0(sp)
   4af6c:	e008943a 	slli	r4,fp,16
   4af70:	8520983a 	sll	r16,r16,r20
   4af74:	2806d43a 	srli	r3,r5,16
   4af78:	1906b03a 	or	r3,r3,r4
   4af7c:	1880042e 	bgeu	r3,r2,4af90 <__umoddi3+0x374>
   4af80:	1d47883a 	add	r3,r3,r21
   4af84:	893fffc4 	addi	r4,r17,-1
   4af88:	1d40892e 	bgeu	r3,r21,4b1b0 <__umoddi3+0x594>
   4af8c:	2023883a 	mov	r17,r4
   4af90:	18b9c83a 	sub	fp,r3,r2
   4af94:	b00b883a 	mov	r5,r22
   4af98:	e009883a 	mov	r4,fp
   4af9c:	004b33c0 	call	4b33c <__umodsi3>
   4afa0:	b00b883a 	mov	r5,r22
   4afa4:	e009883a 	mov	r4,fp
   4afa8:	d8800215 	stw	r2,8(sp)
   4afac:	004b2d80 	call	4b2d8 <__udivsi3>
   4afb0:	100b883a 	mov	r5,r2
   4afb4:	b809883a 	mov	r4,r23
   4afb8:	102d883a 	mov	r22,r2
   4afbc:	00407040 	call	40704 <__mulsi3>
   4afc0:	d9800217 	ldw	r6,8(sp)
   4afc4:	d8c00017 	ldw	r3,0(sp)
   4afc8:	300c943a 	slli	r6,r6,16
   4afcc:	1a3fffcc 	andi	r8,r3,65535
   4afd0:	4190b03a 	or	r8,r8,r6
   4afd4:	4080042e 	bgeu	r8,r2,4afe8 <__umoddi3+0x3cc>
   4afd8:	4551883a 	add	r8,r8,r21
   4afdc:	b0ffffc4 	addi	r3,r22,-1
   4afe0:	45406f2e 	bgeu	r8,r21,4b1a0 <__umoddi3+0x584>
   4afe4:	182d883a 	mov	r22,r3
   4afe8:	880e943a 	slli	r7,r17,16
   4afec:	9006d43a 	srli	r3,r18,16
   4aff0:	91bfffcc 	andi	r6,r18,65535
   4aff4:	3dacb03a 	or	r22,r7,r22
   4aff8:	b02ed43a 	srli	r23,r22,16
   4affc:	b5bfffcc 	andi	r22,r22,65535
   4b000:	300b883a 	mov	r5,r6
   4b004:	b009883a 	mov	r4,r22
   4b008:	40a3c83a 	sub	r17,r8,r2
   4b00c:	d8c00115 	stw	r3,4(sp)
   4b010:	d9800215 	stw	r6,8(sp)
   4b014:	00407040 	call	40704 <__mulsi3>
   4b018:	d9800217 	ldw	r6,8(sp)
   4b01c:	b809883a 	mov	r4,r23
   4b020:	1039883a 	mov	fp,r2
   4b024:	300b883a 	mov	r5,r6
   4b028:	00407040 	call	40704 <__mulsi3>
   4b02c:	d8c00117 	ldw	r3,4(sp)
   4b030:	b809883a 	mov	r4,r23
   4b034:	d8800215 	stw	r2,8(sp)
   4b038:	180b883a 	mov	r5,r3
   4b03c:	00407040 	call	40704 <__mulsi3>
   4b040:	d8c00117 	ldw	r3,4(sp)
   4b044:	b009883a 	mov	r4,r22
   4b048:	102f883a 	mov	r23,r2
   4b04c:	180b883a 	mov	r5,r3
   4b050:	00407040 	call	40704 <__mulsi3>
   4b054:	d9800217 	ldw	r6,8(sp)
   4b058:	e006d43a 	srli	r3,fp,16
   4b05c:	1185883a 	add	r2,r2,r6
   4b060:	1885883a 	add	r2,r3,r2
   4b064:	1180022e 	bgeu	r2,r6,4b070 <__umoddi3+0x454>
   4b068:	00c00074 	movhi	r3,1
   4b06c:	b8ef883a 	add	r23,r23,r3
   4b070:	1006d43a 	srli	r3,r2,16
   4b074:	1004943a 	slli	r2,r2,16
   4b078:	e73fffcc 	andi	fp,fp,65535
   4b07c:	1dc7883a 	add	r3,r3,r23
   4b080:	1739883a 	add	fp,r2,fp
   4b084:	88c03a36 	bltu	r17,r3,4b170 <__umoddi3+0x554>
   4b088:	88c05126 	beq	r17,r3,4b1d0 <__umoddi3+0x5b4>
   4b08c:	88c9c83a 	sub	r4,r17,r3
   4b090:	e00f883a 	mov	r7,fp
   4b094:	81cfc83a 	sub	r7,r16,r7
   4b098:	81c7803a 	cmpltu	r3,r16,r7
   4b09c:	20c7c83a 	sub	r3,r4,r3
   4b0a0:	1cc4983a 	sll	r2,r3,r19
   4b0a4:	3d0ed83a 	srl	r7,r7,r20
   4b0a8:	1d06d83a 	srl	r3,r3,r20
   4b0ac:	11c4b03a 	or	r2,r2,r7
   4b0b0:	003f7c06 	br	4aea4 <__alt_data_end+0xfffe56a4>
   4b0b4:	9ca6983a 	sll	r19,r19,r18
   4b0b8:	88f8d83a 	srl	fp,r17,r3
   4b0bc:	80c4d83a 	srl	r2,r16,r3
   4b0c0:	982cd43a 	srli	r22,r19,16
   4b0c4:	8ca2983a 	sll	r17,r17,r18
   4b0c8:	e009883a 	mov	r4,fp
   4b0cc:	b00b883a 	mov	r5,r22
   4b0d0:	146ab03a 	or	r21,r2,r17
   4b0d4:	004b33c0 	call	4b33c <__umodsi3>
   4b0d8:	b00b883a 	mov	r5,r22
   4b0dc:	e009883a 	mov	r4,fp
   4b0e0:	1029883a 	mov	r20,r2
   4b0e4:	9dffffcc 	andi	r23,r19,65535
   4b0e8:	004b2d80 	call	4b2d8 <__udivsi3>
   4b0ec:	b809883a 	mov	r4,r23
   4b0f0:	100b883a 	mov	r5,r2
   4b0f4:	00407040 	call	40704 <__mulsi3>
   4b0f8:	a008943a 	slli	r4,r20,16
   4b0fc:	a806d43a 	srli	r3,r21,16
   4b100:	84a8983a 	sll	r20,r16,r18
   4b104:	1906b03a 	or	r3,r3,r4
   4b108:	1880042e 	bgeu	r3,r2,4b11c <__umoddi3+0x500>
   4b10c:	1cc7883a 	add	r3,r3,r19
   4b110:	1cc00236 	bltu	r3,r19,4b11c <__umoddi3+0x500>
   4b114:	1880012e 	bgeu	r3,r2,4b11c <__umoddi3+0x500>
   4b118:	1cc7883a 	add	r3,r3,r19
   4b11c:	18a3c83a 	sub	r17,r3,r2
   4b120:	b00b883a 	mov	r5,r22
   4b124:	8809883a 	mov	r4,r17
   4b128:	004b33c0 	call	4b33c <__umodsi3>
   4b12c:	b00b883a 	mov	r5,r22
   4b130:	8809883a 	mov	r4,r17
   4b134:	1021883a 	mov	r16,r2
   4b138:	004b2d80 	call	4b2d8 <__udivsi3>
   4b13c:	100b883a 	mov	r5,r2
   4b140:	b809883a 	mov	r4,r23
   4b144:	8020943a 	slli	r16,r16,16
   4b148:	00407040 	call	40704 <__mulsi3>
   4b14c:	a8ffffcc 	andi	r3,r21,65535
   4b150:	1c06b03a 	or	r3,r3,r16
   4b154:	1880042e 	bgeu	r3,r2,4b168 <__umoddi3+0x54c>
   4b158:	1cc7883a 	add	r3,r3,r19
   4b15c:	1cc00236 	bltu	r3,r19,4b168 <__umoddi3+0x54c>
   4b160:	1880012e 	bgeu	r3,r2,4b168 <__umoddi3+0x54c>
   4b164:	1cc7883a 	add	r3,r3,r19
   4b168:	18a3c83a 	sub	r17,r3,r2
   4b16c:	003f2906 	br	4ae14 <__alt_data_end+0xfffe5614>
   4b170:	e48fc83a 	sub	r7,fp,r18
   4b174:	1d49c83a 	sub	r4,r3,r21
   4b178:	e1f9803a 	cmpltu	fp,fp,r7
   4b17c:	2739c83a 	sub	fp,r4,fp
   4b180:	8f09c83a 	sub	r4,r17,fp
   4b184:	003fc306 	br	4b094 <__alt_data_end+0xfffe5894>
   4b188:	01000604 	movi	r4,24
   4b18c:	003ef906 	br	4ad74 <__alt_data_end+0xfffe5574>
   4b190:	00800604 	movi	r2,24
   4b194:	003f1306 	br	4ade4 <__alt_data_end+0xfffe55e4>
   4b198:	01000604 	movi	r4,24
   4b19c:	003eb606 	br	4ac78 <__alt_data_end+0xfffe5478>
   4b1a0:	40bf902e 	bgeu	r8,r2,4afe4 <__alt_data_end+0xfffe57e4>
   4b1a4:	b5bfff84 	addi	r22,r22,-2
   4b1a8:	4551883a 	add	r8,r8,r21
   4b1ac:	003f8e06 	br	4afe8 <__alt_data_end+0xfffe57e8>
   4b1b0:	18bf762e 	bgeu	r3,r2,4af8c <__alt_data_end+0xfffe578c>
   4b1b4:	8c7fff84 	addi	r17,r17,-2
   4b1b8:	1d47883a 	add	r3,r3,r21
   4b1bc:	003f7406 	br	4af90 <__alt_data_end+0xfffe5790>
   4b1c0:	1cc7883a 	add	r3,r3,r19
   4b1c4:	003ecd06 	br	4acfc <__alt_data_end+0xfffe54fc>
   4b1c8:	8005883a 	mov	r2,r16
   4b1cc:	003ef806 	br	4adb0 <__alt_data_end+0xfffe55b0>
   4b1d0:	873fe736 	bltu	r16,fp,4b170 <__alt_data_end+0xfffe5970>
   4b1d4:	e00f883a 	mov	r7,fp
   4b1d8:	0009883a 	mov	r4,zero
   4b1dc:	003fad06 	br	4b094 <__alt_data_end+0xfffe5894>

0004b1e0 <__divsi3>:
   4b1e0:	20001b16 	blt	r4,zero,4b250 <__divsi3+0x70>
   4b1e4:	000f883a 	mov	r7,zero
   4b1e8:	28001616 	blt	r5,zero,4b244 <__divsi3+0x64>
   4b1ec:	200d883a 	mov	r6,r4
   4b1f0:	29001a2e 	bgeu	r5,r4,4b25c <__divsi3+0x7c>
   4b1f4:	00800804 	movi	r2,32
   4b1f8:	00c00044 	movi	r3,1
   4b1fc:	00000106 	br	4b204 <__divsi3+0x24>
   4b200:	10000d26 	beq	r2,zero,4b238 <__divsi3+0x58>
   4b204:	294b883a 	add	r5,r5,r5
   4b208:	10bfffc4 	addi	r2,r2,-1
   4b20c:	18c7883a 	add	r3,r3,r3
   4b210:	293ffb36 	bltu	r5,r4,4b200 <__alt_data_end+0xfffe5a00>
   4b214:	0005883a 	mov	r2,zero
   4b218:	18000726 	beq	r3,zero,4b238 <__divsi3+0x58>
   4b21c:	0005883a 	mov	r2,zero
   4b220:	31400236 	bltu	r6,r5,4b22c <__divsi3+0x4c>
   4b224:	314dc83a 	sub	r6,r6,r5
   4b228:	10c4b03a 	or	r2,r2,r3
   4b22c:	1806d07a 	srli	r3,r3,1
   4b230:	280ad07a 	srli	r5,r5,1
   4b234:	183ffa1e 	bne	r3,zero,4b220 <__alt_data_end+0xfffe5a20>
   4b238:	38000126 	beq	r7,zero,4b240 <__divsi3+0x60>
   4b23c:	0085c83a 	sub	r2,zero,r2
   4b240:	f800283a 	ret
   4b244:	014bc83a 	sub	r5,zero,r5
   4b248:	39c0005c 	xori	r7,r7,1
   4b24c:	003fe706 	br	4b1ec <__alt_data_end+0xfffe59ec>
   4b250:	0109c83a 	sub	r4,zero,r4
   4b254:	01c00044 	movi	r7,1
   4b258:	003fe306 	br	4b1e8 <__alt_data_end+0xfffe59e8>
   4b25c:	00c00044 	movi	r3,1
   4b260:	003fee06 	br	4b21c <__alt_data_end+0xfffe5a1c>

0004b264 <__modsi3>:
   4b264:	20001716 	blt	r4,zero,4b2c4 <__modsi3+0x60>
   4b268:	000f883a 	mov	r7,zero
   4b26c:	2005883a 	mov	r2,r4
   4b270:	28001216 	blt	r5,zero,4b2bc <__modsi3+0x58>
   4b274:	2900162e 	bgeu	r5,r4,4b2d0 <__modsi3+0x6c>
   4b278:	01800804 	movi	r6,32
   4b27c:	00c00044 	movi	r3,1
   4b280:	00000106 	br	4b288 <__modsi3+0x24>
   4b284:	30000a26 	beq	r6,zero,4b2b0 <__modsi3+0x4c>
   4b288:	294b883a 	add	r5,r5,r5
   4b28c:	31bfffc4 	addi	r6,r6,-1
   4b290:	18c7883a 	add	r3,r3,r3
   4b294:	293ffb36 	bltu	r5,r4,4b284 <__alt_data_end+0xfffe5a84>
   4b298:	18000526 	beq	r3,zero,4b2b0 <__modsi3+0x4c>
   4b29c:	1806d07a 	srli	r3,r3,1
   4b2a0:	11400136 	bltu	r2,r5,4b2a8 <__modsi3+0x44>
   4b2a4:	1145c83a 	sub	r2,r2,r5
   4b2a8:	280ad07a 	srli	r5,r5,1
   4b2ac:	183ffb1e 	bne	r3,zero,4b29c <__alt_data_end+0xfffe5a9c>
   4b2b0:	38000126 	beq	r7,zero,4b2b8 <__modsi3+0x54>
   4b2b4:	0085c83a 	sub	r2,zero,r2
   4b2b8:	f800283a 	ret
   4b2bc:	014bc83a 	sub	r5,zero,r5
   4b2c0:	003fec06 	br	4b274 <__alt_data_end+0xfffe5a74>
   4b2c4:	0109c83a 	sub	r4,zero,r4
   4b2c8:	01c00044 	movi	r7,1
   4b2cc:	003fe706 	br	4b26c <__alt_data_end+0xfffe5a6c>
   4b2d0:	00c00044 	movi	r3,1
   4b2d4:	003ff106 	br	4b29c <__alt_data_end+0xfffe5a9c>

0004b2d8 <__udivsi3>:
   4b2d8:	200d883a 	mov	r6,r4
   4b2dc:	2900152e 	bgeu	r5,r4,4b334 <__udivsi3+0x5c>
   4b2e0:	28001416 	blt	r5,zero,4b334 <__udivsi3+0x5c>
   4b2e4:	00800804 	movi	r2,32
   4b2e8:	00c00044 	movi	r3,1
   4b2ec:	00000206 	br	4b2f8 <__udivsi3+0x20>
   4b2f0:	10000e26 	beq	r2,zero,4b32c <__udivsi3+0x54>
   4b2f4:	28000516 	blt	r5,zero,4b30c <__udivsi3+0x34>
   4b2f8:	294b883a 	add	r5,r5,r5
   4b2fc:	10bfffc4 	addi	r2,r2,-1
   4b300:	18c7883a 	add	r3,r3,r3
   4b304:	293ffa36 	bltu	r5,r4,4b2f0 <__alt_data_end+0xfffe5af0>
   4b308:	18000826 	beq	r3,zero,4b32c <__udivsi3+0x54>
   4b30c:	0005883a 	mov	r2,zero
   4b310:	31400236 	bltu	r6,r5,4b31c <__udivsi3+0x44>
   4b314:	314dc83a 	sub	r6,r6,r5
   4b318:	10c4b03a 	or	r2,r2,r3
   4b31c:	1806d07a 	srli	r3,r3,1
   4b320:	280ad07a 	srli	r5,r5,1
   4b324:	183ffa1e 	bne	r3,zero,4b310 <__alt_data_end+0xfffe5b10>
   4b328:	f800283a 	ret
   4b32c:	0005883a 	mov	r2,zero
   4b330:	f800283a 	ret
   4b334:	00c00044 	movi	r3,1
   4b338:	003ff406 	br	4b30c <__alt_data_end+0xfffe5b0c>

0004b33c <__umodsi3>:
   4b33c:	2005883a 	mov	r2,r4
   4b340:	2900122e 	bgeu	r5,r4,4b38c <__umodsi3+0x50>
   4b344:	28001116 	blt	r5,zero,4b38c <__umodsi3+0x50>
   4b348:	01800804 	movi	r6,32
   4b34c:	00c00044 	movi	r3,1
   4b350:	00000206 	br	4b35c <__umodsi3+0x20>
   4b354:	30000c26 	beq	r6,zero,4b388 <__umodsi3+0x4c>
   4b358:	28000516 	blt	r5,zero,4b370 <__umodsi3+0x34>
   4b35c:	294b883a 	add	r5,r5,r5
   4b360:	31bfffc4 	addi	r6,r6,-1
   4b364:	18c7883a 	add	r3,r3,r3
   4b368:	293ffa36 	bltu	r5,r4,4b354 <__alt_data_end+0xfffe5b54>
   4b36c:	18000626 	beq	r3,zero,4b388 <__umodsi3+0x4c>
   4b370:	1806d07a 	srli	r3,r3,1
   4b374:	11400136 	bltu	r2,r5,4b37c <__umodsi3+0x40>
   4b378:	1145c83a 	sub	r2,r2,r5
   4b37c:	280ad07a 	srli	r5,r5,1
   4b380:	183ffb1e 	bne	r3,zero,4b370 <__alt_data_end+0xfffe5b70>
   4b384:	f800283a 	ret
   4b388:	f800283a 	ret
   4b38c:	00c00044 	movi	r3,1
   4b390:	003ff706 	br	4b370 <__alt_data_end+0xfffe5b70>

0004b394 <__adddf3>:
   4b394:	02c00434 	movhi	r11,16
   4b398:	5affffc4 	addi	r11,r11,-1
   4b39c:	2806d7fa 	srli	r3,r5,31
   4b3a0:	2ad4703a 	and	r10,r5,r11
   4b3a4:	3ad2703a 	and	r9,r7,r11
   4b3a8:	3804d53a 	srli	r2,r7,20
   4b3ac:	3018d77a 	srli	r12,r6,29
   4b3b0:	280ad53a 	srli	r5,r5,20
   4b3b4:	501490fa 	slli	r10,r10,3
   4b3b8:	2010d77a 	srli	r8,r4,29
   4b3bc:	481290fa 	slli	r9,r9,3
   4b3c0:	380ed7fa 	srli	r7,r7,31
   4b3c4:	defffb04 	addi	sp,sp,-20
   4b3c8:	dc800215 	stw	r18,8(sp)
   4b3cc:	dc400115 	stw	r17,4(sp)
   4b3d0:	dc000015 	stw	r16,0(sp)
   4b3d4:	dfc00415 	stw	ra,16(sp)
   4b3d8:	dcc00315 	stw	r19,12(sp)
   4b3dc:	1c803fcc 	andi	r18,r3,255
   4b3e0:	2c01ffcc 	andi	r16,r5,2047
   4b3e4:	5210b03a 	or	r8,r10,r8
   4b3e8:	202290fa 	slli	r17,r4,3
   4b3ec:	1081ffcc 	andi	r2,r2,2047
   4b3f0:	4b12b03a 	or	r9,r9,r12
   4b3f4:	300c90fa 	slli	r6,r6,3
   4b3f8:	91c07526 	beq	r18,r7,4b5d0 <__adddf3+0x23c>
   4b3fc:	8087c83a 	sub	r3,r16,r2
   4b400:	00c0ab0e 	bge	zero,r3,4b6b0 <__adddf3+0x31c>
   4b404:	10002a1e 	bne	r2,zero,4b4b0 <__adddf3+0x11c>
   4b408:	4984b03a 	or	r2,r9,r6
   4b40c:	1000961e 	bne	r2,zero,4b668 <__adddf3+0x2d4>
   4b410:	888001cc 	andi	r2,r17,7
   4b414:	10000726 	beq	r2,zero,4b434 <__adddf3+0xa0>
   4b418:	888003cc 	andi	r2,r17,15
   4b41c:	00c00104 	movi	r3,4
   4b420:	10c00426 	beq	r2,r3,4b434 <__adddf3+0xa0>
   4b424:	88c7883a 	add	r3,r17,r3
   4b428:	1c63803a 	cmpltu	r17,r3,r17
   4b42c:	4451883a 	add	r8,r8,r17
   4b430:	1823883a 	mov	r17,r3
   4b434:	4080202c 	andhi	r2,r8,128
   4b438:	10005926 	beq	r2,zero,4b5a0 <__adddf3+0x20c>
   4b43c:	84000044 	addi	r16,r16,1
   4b440:	0081ffc4 	movi	r2,2047
   4b444:	8080ba26 	beq	r16,r2,4b730 <__adddf3+0x39c>
   4b448:	00bfe034 	movhi	r2,65408
   4b44c:	10bfffc4 	addi	r2,r2,-1
   4b450:	4090703a 	and	r8,r8,r2
   4b454:	4004977a 	slli	r2,r8,29
   4b458:	4010927a 	slli	r8,r8,9
   4b45c:	8822d0fa 	srli	r17,r17,3
   4b460:	8401ffcc 	andi	r16,r16,2047
   4b464:	4010d33a 	srli	r8,r8,12
   4b468:	9007883a 	mov	r3,r18
   4b46c:	1444b03a 	or	r2,r2,r17
   4b470:	8401ffcc 	andi	r16,r16,2047
   4b474:	8020953a 	slli	r16,r16,20
   4b478:	18c03fcc 	andi	r3,r3,255
   4b47c:	01000434 	movhi	r4,16
   4b480:	213fffc4 	addi	r4,r4,-1
   4b484:	180697fa 	slli	r3,r3,31
   4b488:	4110703a 	and	r8,r8,r4
   4b48c:	4410b03a 	or	r8,r8,r16
   4b490:	40c6b03a 	or	r3,r8,r3
   4b494:	dfc00417 	ldw	ra,16(sp)
   4b498:	dcc00317 	ldw	r19,12(sp)
   4b49c:	dc800217 	ldw	r18,8(sp)
   4b4a0:	dc400117 	ldw	r17,4(sp)
   4b4a4:	dc000017 	ldw	r16,0(sp)
   4b4a8:	dec00504 	addi	sp,sp,20
   4b4ac:	f800283a 	ret
   4b4b0:	0081ffc4 	movi	r2,2047
   4b4b4:	80bfd626 	beq	r16,r2,4b410 <__alt_data_end+0xfffe5c10>
   4b4b8:	4a402034 	orhi	r9,r9,128
   4b4bc:	00800e04 	movi	r2,56
   4b4c0:	10c09f16 	blt	r2,r3,4b740 <__adddf3+0x3ac>
   4b4c4:	008007c4 	movi	r2,31
   4b4c8:	10c0c216 	blt	r2,r3,4b7d4 <__adddf3+0x440>
   4b4cc:	00800804 	movi	r2,32
   4b4d0:	10c5c83a 	sub	r2,r2,r3
   4b4d4:	488a983a 	sll	r5,r9,r2
   4b4d8:	30c8d83a 	srl	r4,r6,r3
   4b4dc:	3084983a 	sll	r2,r6,r2
   4b4e0:	48c6d83a 	srl	r3,r9,r3
   4b4e4:	290cb03a 	or	r6,r5,r4
   4b4e8:	1004c03a 	cmpne	r2,r2,zero
   4b4ec:	308cb03a 	or	r6,r6,r2
   4b4f0:	898dc83a 	sub	r6,r17,r6
   4b4f4:	89a3803a 	cmpltu	r17,r17,r6
   4b4f8:	40d1c83a 	sub	r8,r8,r3
   4b4fc:	4451c83a 	sub	r8,r8,r17
   4b500:	3023883a 	mov	r17,r6
   4b504:	4080202c 	andhi	r2,r8,128
   4b508:	10002326 	beq	r2,zero,4b598 <__adddf3+0x204>
   4b50c:	04c02034 	movhi	r19,128
   4b510:	9cffffc4 	addi	r19,r19,-1
   4b514:	44e6703a 	and	r19,r8,r19
   4b518:	98007626 	beq	r19,zero,4b6f4 <__adddf3+0x360>
   4b51c:	9809883a 	mov	r4,r19
   4b520:	0040d900 	call	40d90 <__clzsi2>
   4b524:	10fffe04 	addi	r3,r2,-8
   4b528:	010007c4 	movi	r4,31
   4b52c:	20c07716 	blt	r4,r3,4b70c <__adddf3+0x378>
   4b530:	00800804 	movi	r2,32
   4b534:	10c5c83a 	sub	r2,r2,r3
   4b538:	8884d83a 	srl	r2,r17,r2
   4b53c:	98d0983a 	sll	r8,r19,r3
   4b540:	88e2983a 	sll	r17,r17,r3
   4b544:	1204b03a 	or	r2,r2,r8
   4b548:	1c007416 	blt	r3,r16,4b71c <__adddf3+0x388>
   4b54c:	1c21c83a 	sub	r16,r3,r16
   4b550:	82000044 	addi	r8,r16,1
   4b554:	00c007c4 	movi	r3,31
   4b558:	1a009116 	blt	r3,r8,4b7a0 <__adddf3+0x40c>
   4b55c:	00c00804 	movi	r3,32
   4b560:	1a07c83a 	sub	r3,r3,r8
   4b564:	8a08d83a 	srl	r4,r17,r8
   4b568:	88e2983a 	sll	r17,r17,r3
   4b56c:	10c6983a 	sll	r3,r2,r3
   4b570:	1210d83a 	srl	r8,r2,r8
   4b574:	8804c03a 	cmpne	r2,r17,zero
   4b578:	1906b03a 	or	r3,r3,r4
   4b57c:	18a2b03a 	or	r17,r3,r2
   4b580:	0021883a 	mov	r16,zero
   4b584:	003fa206 	br	4b410 <__alt_data_end+0xfffe5c10>
   4b588:	1890b03a 	or	r8,r3,r2
   4b58c:	40017d26 	beq	r8,zero,4bb84 <__adddf3+0x7f0>
   4b590:	1011883a 	mov	r8,r2
   4b594:	1823883a 	mov	r17,r3
   4b598:	888001cc 	andi	r2,r17,7
   4b59c:	103f9e1e 	bne	r2,zero,4b418 <__alt_data_end+0xfffe5c18>
   4b5a0:	4004977a 	slli	r2,r8,29
   4b5a4:	8822d0fa 	srli	r17,r17,3
   4b5a8:	4010d0fa 	srli	r8,r8,3
   4b5ac:	9007883a 	mov	r3,r18
   4b5b0:	1444b03a 	or	r2,r2,r17
   4b5b4:	0101ffc4 	movi	r4,2047
   4b5b8:	81002426 	beq	r16,r4,4b64c <__adddf3+0x2b8>
   4b5bc:	8120703a 	and	r16,r16,r4
   4b5c0:	01000434 	movhi	r4,16
   4b5c4:	213fffc4 	addi	r4,r4,-1
   4b5c8:	4110703a 	and	r8,r8,r4
   4b5cc:	003fa806 	br	4b470 <__alt_data_end+0xfffe5c70>
   4b5d0:	8089c83a 	sub	r4,r16,r2
   4b5d4:	01005e0e 	bge	zero,r4,4b750 <__adddf3+0x3bc>
   4b5d8:	10002b26 	beq	r2,zero,4b688 <__adddf3+0x2f4>
   4b5dc:	0081ffc4 	movi	r2,2047
   4b5e0:	80bf8b26 	beq	r16,r2,4b410 <__alt_data_end+0xfffe5c10>
   4b5e4:	4a402034 	orhi	r9,r9,128
   4b5e8:	00800e04 	movi	r2,56
   4b5ec:	1100a40e 	bge	r2,r4,4b880 <__adddf3+0x4ec>
   4b5f0:	498cb03a 	or	r6,r9,r6
   4b5f4:	300ac03a 	cmpne	r5,r6,zero
   4b5f8:	0013883a 	mov	r9,zero
   4b5fc:	2c4b883a 	add	r5,r5,r17
   4b600:	2c63803a 	cmpltu	r17,r5,r17
   4b604:	4a11883a 	add	r8,r9,r8
   4b608:	8a11883a 	add	r8,r17,r8
   4b60c:	2823883a 	mov	r17,r5
   4b610:	4080202c 	andhi	r2,r8,128
   4b614:	103fe026 	beq	r2,zero,4b598 <__alt_data_end+0xfffe5d98>
   4b618:	84000044 	addi	r16,r16,1
   4b61c:	0081ffc4 	movi	r2,2047
   4b620:	8080d226 	beq	r16,r2,4b96c <__adddf3+0x5d8>
   4b624:	00bfe034 	movhi	r2,65408
   4b628:	10bfffc4 	addi	r2,r2,-1
   4b62c:	4090703a 	and	r8,r8,r2
   4b630:	880ad07a 	srli	r5,r17,1
   4b634:	400897fa 	slli	r4,r8,31
   4b638:	88c0004c 	andi	r3,r17,1
   4b63c:	28e2b03a 	or	r17,r5,r3
   4b640:	4010d07a 	srli	r8,r8,1
   4b644:	2462b03a 	or	r17,r4,r17
   4b648:	003f7106 	br	4b410 <__alt_data_end+0xfffe5c10>
   4b64c:	4088b03a 	or	r4,r8,r2
   4b650:	20014526 	beq	r4,zero,4bb68 <__adddf3+0x7d4>
   4b654:	01000434 	movhi	r4,16
   4b658:	42000234 	orhi	r8,r8,8
   4b65c:	213fffc4 	addi	r4,r4,-1
   4b660:	4110703a 	and	r8,r8,r4
   4b664:	003f8206 	br	4b470 <__alt_data_end+0xfffe5c70>
   4b668:	18ffffc4 	addi	r3,r3,-1
   4b66c:	1800491e 	bne	r3,zero,4b794 <__adddf3+0x400>
   4b670:	898bc83a 	sub	r5,r17,r6
   4b674:	8963803a 	cmpltu	r17,r17,r5
   4b678:	4251c83a 	sub	r8,r8,r9
   4b67c:	4451c83a 	sub	r8,r8,r17
   4b680:	2823883a 	mov	r17,r5
   4b684:	003f9f06 	br	4b504 <__alt_data_end+0xfffe5d04>
   4b688:	4984b03a 	or	r2,r9,r6
   4b68c:	103f6026 	beq	r2,zero,4b410 <__alt_data_end+0xfffe5c10>
   4b690:	213fffc4 	addi	r4,r4,-1
   4b694:	2000931e 	bne	r4,zero,4b8e4 <__adddf3+0x550>
   4b698:	898d883a 	add	r6,r17,r6
   4b69c:	3463803a 	cmpltu	r17,r6,r17
   4b6a0:	4251883a 	add	r8,r8,r9
   4b6a4:	8a11883a 	add	r8,r17,r8
   4b6a8:	3023883a 	mov	r17,r6
   4b6ac:	003fd806 	br	4b610 <__alt_data_end+0xfffe5e10>
   4b6b0:	1800541e 	bne	r3,zero,4b804 <__adddf3+0x470>
   4b6b4:	80800044 	addi	r2,r16,1
   4b6b8:	1081ffcc 	andi	r2,r2,2047
   4b6bc:	00c00044 	movi	r3,1
   4b6c0:	1880a00e 	bge	r3,r2,4b944 <__adddf3+0x5b0>
   4b6c4:	8989c83a 	sub	r4,r17,r6
   4b6c8:	8905803a 	cmpltu	r2,r17,r4
   4b6cc:	4267c83a 	sub	r19,r8,r9
   4b6d0:	98a7c83a 	sub	r19,r19,r2
   4b6d4:	9880202c 	andhi	r2,r19,128
   4b6d8:	10006326 	beq	r2,zero,4b868 <__adddf3+0x4d4>
   4b6dc:	3463c83a 	sub	r17,r6,r17
   4b6e0:	4a07c83a 	sub	r3,r9,r8
   4b6e4:	344d803a 	cmpltu	r6,r6,r17
   4b6e8:	19a7c83a 	sub	r19,r3,r6
   4b6ec:	3825883a 	mov	r18,r7
   4b6f0:	983f8a1e 	bne	r19,zero,4b51c <__alt_data_end+0xfffe5d1c>
   4b6f4:	8809883a 	mov	r4,r17
   4b6f8:	0040d900 	call	40d90 <__clzsi2>
   4b6fc:	10800804 	addi	r2,r2,32
   4b700:	10fffe04 	addi	r3,r2,-8
   4b704:	010007c4 	movi	r4,31
   4b708:	20ff890e 	bge	r4,r3,4b530 <__alt_data_end+0xfffe5d30>
   4b70c:	10bff604 	addi	r2,r2,-40
   4b710:	8884983a 	sll	r2,r17,r2
   4b714:	0023883a 	mov	r17,zero
   4b718:	1c3f8c0e 	bge	r3,r16,4b54c <__alt_data_end+0xfffe5d4c>
   4b71c:	023fe034 	movhi	r8,65408
   4b720:	423fffc4 	addi	r8,r8,-1
   4b724:	80e1c83a 	sub	r16,r16,r3
   4b728:	1210703a 	and	r8,r2,r8
   4b72c:	003f3806 	br	4b410 <__alt_data_end+0xfffe5c10>
   4b730:	9007883a 	mov	r3,r18
   4b734:	0011883a 	mov	r8,zero
   4b738:	0005883a 	mov	r2,zero
   4b73c:	003f4c06 	br	4b470 <__alt_data_end+0xfffe5c70>
   4b740:	498cb03a 	or	r6,r9,r6
   4b744:	300cc03a 	cmpne	r6,r6,zero
   4b748:	0007883a 	mov	r3,zero
   4b74c:	003f6806 	br	4b4f0 <__alt_data_end+0xfffe5cf0>
   4b750:	20009c1e 	bne	r4,zero,4b9c4 <__adddf3+0x630>
   4b754:	80800044 	addi	r2,r16,1
   4b758:	1141ffcc 	andi	r5,r2,2047
   4b75c:	01000044 	movi	r4,1
   4b760:	2140670e 	bge	r4,r5,4b900 <__adddf3+0x56c>
   4b764:	0101ffc4 	movi	r4,2047
   4b768:	11007f26 	beq	r2,r4,4b968 <__adddf3+0x5d4>
   4b76c:	898d883a 	add	r6,r17,r6
   4b770:	4247883a 	add	r3,r8,r9
   4b774:	3451803a 	cmpltu	r8,r6,r17
   4b778:	40d1883a 	add	r8,r8,r3
   4b77c:	402297fa 	slli	r17,r8,31
   4b780:	300cd07a 	srli	r6,r6,1
   4b784:	4010d07a 	srli	r8,r8,1
   4b788:	1021883a 	mov	r16,r2
   4b78c:	89a2b03a 	or	r17,r17,r6
   4b790:	003f1f06 	br	4b410 <__alt_data_end+0xfffe5c10>
   4b794:	0081ffc4 	movi	r2,2047
   4b798:	80bf481e 	bne	r16,r2,4b4bc <__alt_data_end+0xfffe5cbc>
   4b79c:	003f1c06 	br	4b410 <__alt_data_end+0xfffe5c10>
   4b7a0:	843ff844 	addi	r16,r16,-31
   4b7a4:	01000804 	movi	r4,32
   4b7a8:	1406d83a 	srl	r3,r2,r16
   4b7ac:	41005026 	beq	r8,r4,4b8f0 <__adddf3+0x55c>
   4b7b0:	01001004 	movi	r4,64
   4b7b4:	2211c83a 	sub	r8,r4,r8
   4b7b8:	1204983a 	sll	r2,r2,r8
   4b7bc:	88a2b03a 	or	r17,r17,r2
   4b7c0:	8822c03a 	cmpne	r17,r17,zero
   4b7c4:	1c62b03a 	or	r17,r3,r17
   4b7c8:	0011883a 	mov	r8,zero
   4b7cc:	0021883a 	mov	r16,zero
   4b7d0:	003f7106 	br	4b598 <__alt_data_end+0xfffe5d98>
   4b7d4:	193ff804 	addi	r4,r3,-32
   4b7d8:	00800804 	movi	r2,32
   4b7dc:	4908d83a 	srl	r4,r9,r4
   4b7e0:	18804526 	beq	r3,r2,4b8f8 <__adddf3+0x564>
   4b7e4:	00801004 	movi	r2,64
   4b7e8:	10c5c83a 	sub	r2,r2,r3
   4b7ec:	4886983a 	sll	r3,r9,r2
   4b7f0:	198cb03a 	or	r6,r3,r6
   4b7f4:	300cc03a 	cmpne	r6,r6,zero
   4b7f8:	218cb03a 	or	r6,r4,r6
   4b7fc:	0007883a 	mov	r3,zero
   4b800:	003f3b06 	br	4b4f0 <__alt_data_end+0xfffe5cf0>
   4b804:	80002a26 	beq	r16,zero,4b8b0 <__adddf3+0x51c>
   4b808:	0101ffc4 	movi	r4,2047
   4b80c:	11006826 	beq	r2,r4,4b9b0 <__adddf3+0x61c>
   4b810:	00c7c83a 	sub	r3,zero,r3
   4b814:	42002034 	orhi	r8,r8,128
   4b818:	01000e04 	movi	r4,56
   4b81c:	20c07c16 	blt	r4,r3,4ba10 <__adddf3+0x67c>
   4b820:	010007c4 	movi	r4,31
   4b824:	20c0da16 	blt	r4,r3,4bb90 <__adddf3+0x7fc>
   4b828:	01000804 	movi	r4,32
   4b82c:	20c9c83a 	sub	r4,r4,r3
   4b830:	4114983a 	sll	r10,r8,r4
   4b834:	88cad83a 	srl	r5,r17,r3
   4b838:	8908983a 	sll	r4,r17,r4
   4b83c:	40c6d83a 	srl	r3,r8,r3
   4b840:	5162b03a 	or	r17,r10,r5
   4b844:	2008c03a 	cmpne	r4,r4,zero
   4b848:	8922b03a 	or	r17,r17,r4
   4b84c:	3463c83a 	sub	r17,r6,r17
   4b850:	48c7c83a 	sub	r3,r9,r3
   4b854:	344d803a 	cmpltu	r6,r6,r17
   4b858:	1991c83a 	sub	r8,r3,r6
   4b85c:	1021883a 	mov	r16,r2
   4b860:	3825883a 	mov	r18,r7
   4b864:	003f2706 	br	4b504 <__alt_data_end+0xfffe5d04>
   4b868:	24d0b03a 	or	r8,r4,r19
   4b86c:	40001b1e 	bne	r8,zero,4b8dc <__adddf3+0x548>
   4b870:	0005883a 	mov	r2,zero
   4b874:	0007883a 	mov	r3,zero
   4b878:	0021883a 	mov	r16,zero
   4b87c:	003f4d06 	br	4b5b4 <__alt_data_end+0xfffe5db4>
   4b880:	008007c4 	movi	r2,31
   4b884:	11003c16 	blt	r2,r4,4b978 <__adddf3+0x5e4>
   4b888:	00800804 	movi	r2,32
   4b88c:	1105c83a 	sub	r2,r2,r4
   4b890:	488e983a 	sll	r7,r9,r2
   4b894:	310ad83a 	srl	r5,r6,r4
   4b898:	3084983a 	sll	r2,r6,r2
   4b89c:	4912d83a 	srl	r9,r9,r4
   4b8a0:	394ab03a 	or	r5,r7,r5
   4b8a4:	1004c03a 	cmpne	r2,r2,zero
   4b8a8:	288ab03a 	or	r5,r5,r2
   4b8ac:	003f5306 	br	4b5fc <__alt_data_end+0xfffe5dfc>
   4b8b0:	4448b03a 	or	r4,r8,r17
   4b8b4:	20003e26 	beq	r4,zero,4b9b0 <__adddf3+0x61c>
   4b8b8:	00c6303a 	nor	r3,zero,r3
   4b8bc:	18003a1e 	bne	r3,zero,4b9a8 <__adddf3+0x614>
   4b8c0:	3463c83a 	sub	r17,r6,r17
   4b8c4:	4a07c83a 	sub	r3,r9,r8
   4b8c8:	344d803a 	cmpltu	r6,r6,r17
   4b8cc:	1991c83a 	sub	r8,r3,r6
   4b8d0:	1021883a 	mov	r16,r2
   4b8d4:	3825883a 	mov	r18,r7
   4b8d8:	003f0a06 	br	4b504 <__alt_data_end+0xfffe5d04>
   4b8dc:	2023883a 	mov	r17,r4
   4b8e0:	003f0d06 	br	4b518 <__alt_data_end+0xfffe5d18>
   4b8e4:	0081ffc4 	movi	r2,2047
   4b8e8:	80bf3f1e 	bne	r16,r2,4b5e8 <__alt_data_end+0xfffe5de8>
   4b8ec:	003ec806 	br	4b410 <__alt_data_end+0xfffe5c10>
   4b8f0:	0005883a 	mov	r2,zero
   4b8f4:	003fb106 	br	4b7bc <__alt_data_end+0xfffe5fbc>
   4b8f8:	0007883a 	mov	r3,zero
   4b8fc:	003fbc06 	br	4b7f0 <__alt_data_end+0xfffe5ff0>
   4b900:	4444b03a 	or	r2,r8,r17
   4b904:	8000871e 	bne	r16,zero,4bb24 <__adddf3+0x790>
   4b908:	1000ba26 	beq	r2,zero,4bbf4 <__adddf3+0x860>
   4b90c:	4984b03a 	or	r2,r9,r6
   4b910:	103ebf26 	beq	r2,zero,4b410 <__alt_data_end+0xfffe5c10>
   4b914:	8985883a 	add	r2,r17,r6
   4b918:	4247883a 	add	r3,r8,r9
   4b91c:	1451803a 	cmpltu	r8,r2,r17
   4b920:	40d1883a 	add	r8,r8,r3
   4b924:	40c0202c 	andhi	r3,r8,128
   4b928:	1023883a 	mov	r17,r2
   4b92c:	183f1a26 	beq	r3,zero,4b598 <__alt_data_end+0xfffe5d98>
   4b930:	00bfe034 	movhi	r2,65408
   4b934:	10bfffc4 	addi	r2,r2,-1
   4b938:	2021883a 	mov	r16,r4
   4b93c:	4090703a 	and	r8,r8,r2
   4b940:	003eb306 	br	4b410 <__alt_data_end+0xfffe5c10>
   4b944:	4444b03a 	or	r2,r8,r17
   4b948:	8000291e 	bne	r16,zero,4b9f0 <__adddf3+0x65c>
   4b94c:	10004b1e 	bne	r2,zero,4ba7c <__adddf3+0x6e8>
   4b950:	4990b03a 	or	r8,r9,r6
   4b954:	40008b26 	beq	r8,zero,4bb84 <__adddf3+0x7f0>
   4b958:	4811883a 	mov	r8,r9
   4b95c:	3023883a 	mov	r17,r6
   4b960:	3825883a 	mov	r18,r7
   4b964:	003eaa06 	br	4b410 <__alt_data_end+0xfffe5c10>
   4b968:	1021883a 	mov	r16,r2
   4b96c:	0011883a 	mov	r8,zero
   4b970:	0005883a 	mov	r2,zero
   4b974:	003f0f06 	br	4b5b4 <__alt_data_end+0xfffe5db4>
   4b978:	217ff804 	addi	r5,r4,-32
   4b97c:	00800804 	movi	r2,32
   4b980:	494ad83a 	srl	r5,r9,r5
   4b984:	20807d26 	beq	r4,r2,4bb7c <__adddf3+0x7e8>
   4b988:	00801004 	movi	r2,64
   4b98c:	1109c83a 	sub	r4,r2,r4
   4b990:	4912983a 	sll	r9,r9,r4
   4b994:	498cb03a 	or	r6,r9,r6
   4b998:	300cc03a 	cmpne	r6,r6,zero
   4b99c:	298ab03a 	or	r5,r5,r6
   4b9a0:	0013883a 	mov	r9,zero
   4b9a4:	003f1506 	br	4b5fc <__alt_data_end+0xfffe5dfc>
   4b9a8:	0101ffc4 	movi	r4,2047
   4b9ac:	113f9a1e 	bne	r2,r4,4b818 <__alt_data_end+0xfffe6018>
   4b9b0:	4811883a 	mov	r8,r9
   4b9b4:	3023883a 	mov	r17,r6
   4b9b8:	1021883a 	mov	r16,r2
   4b9bc:	3825883a 	mov	r18,r7
   4b9c0:	003e9306 	br	4b410 <__alt_data_end+0xfffe5c10>
   4b9c4:	8000161e 	bne	r16,zero,4ba20 <__adddf3+0x68c>
   4b9c8:	444ab03a 	or	r5,r8,r17
   4b9cc:	28005126 	beq	r5,zero,4bb14 <__adddf3+0x780>
   4b9d0:	0108303a 	nor	r4,zero,r4
   4b9d4:	20004d1e 	bne	r4,zero,4bb0c <__adddf3+0x778>
   4b9d8:	89a3883a 	add	r17,r17,r6
   4b9dc:	4253883a 	add	r9,r8,r9
   4b9e0:	898d803a 	cmpltu	r6,r17,r6
   4b9e4:	3251883a 	add	r8,r6,r9
   4b9e8:	1021883a 	mov	r16,r2
   4b9ec:	003f0806 	br	4b610 <__alt_data_end+0xfffe5e10>
   4b9f0:	1000301e 	bne	r2,zero,4bab4 <__adddf3+0x720>
   4b9f4:	4984b03a 	or	r2,r9,r6
   4b9f8:	10007126 	beq	r2,zero,4bbc0 <__adddf3+0x82c>
   4b9fc:	4811883a 	mov	r8,r9
   4ba00:	3023883a 	mov	r17,r6
   4ba04:	3825883a 	mov	r18,r7
   4ba08:	0401ffc4 	movi	r16,2047
   4ba0c:	003e8006 	br	4b410 <__alt_data_end+0xfffe5c10>
   4ba10:	4462b03a 	or	r17,r8,r17
   4ba14:	8822c03a 	cmpne	r17,r17,zero
   4ba18:	0007883a 	mov	r3,zero
   4ba1c:	003f8b06 	br	4b84c <__alt_data_end+0xfffe604c>
   4ba20:	0141ffc4 	movi	r5,2047
   4ba24:	11403b26 	beq	r2,r5,4bb14 <__adddf3+0x780>
   4ba28:	0109c83a 	sub	r4,zero,r4
   4ba2c:	42002034 	orhi	r8,r8,128
   4ba30:	01400e04 	movi	r5,56
   4ba34:	29006716 	blt	r5,r4,4bbd4 <__adddf3+0x840>
   4ba38:	014007c4 	movi	r5,31
   4ba3c:	29007016 	blt	r5,r4,4bc00 <__adddf3+0x86c>
   4ba40:	01400804 	movi	r5,32
   4ba44:	290bc83a 	sub	r5,r5,r4
   4ba48:	4154983a 	sll	r10,r8,r5
   4ba4c:	890ed83a 	srl	r7,r17,r4
   4ba50:	894a983a 	sll	r5,r17,r5
   4ba54:	4108d83a 	srl	r4,r8,r4
   4ba58:	51e2b03a 	or	r17,r10,r7
   4ba5c:	280ac03a 	cmpne	r5,r5,zero
   4ba60:	8962b03a 	or	r17,r17,r5
   4ba64:	89a3883a 	add	r17,r17,r6
   4ba68:	2253883a 	add	r9,r4,r9
   4ba6c:	898d803a 	cmpltu	r6,r17,r6
   4ba70:	3251883a 	add	r8,r6,r9
   4ba74:	1021883a 	mov	r16,r2
   4ba78:	003ee506 	br	4b610 <__alt_data_end+0xfffe5e10>
   4ba7c:	4984b03a 	or	r2,r9,r6
   4ba80:	103e6326 	beq	r2,zero,4b410 <__alt_data_end+0xfffe5c10>
   4ba84:	8987c83a 	sub	r3,r17,r6
   4ba88:	88c9803a 	cmpltu	r4,r17,r3
   4ba8c:	4245c83a 	sub	r2,r8,r9
   4ba90:	1105c83a 	sub	r2,r2,r4
   4ba94:	1100202c 	andhi	r4,r2,128
   4ba98:	203ebb26 	beq	r4,zero,4b588 <__alt_data_end+0xfffe5d88>
   4ba9c:	3463c83a 	sub	r17,r6,r17
   4baa0:	4a07c83a 	sub	r3,r9,r8
   4baa4:	344d803a 	cmpltu	r6,r6,r17
   4baa8:	1991c83a 	sub	r8,r3,r6
   4baac:	3825883a 	mov	r18,r7
   4bab0:	003e5706 	br	4b410 <__alt_data_end+0xfffe5c10>
   4bab4:	4984b03a 	or	r2,r9,r6
   4bab8:	10002e26 	beq	r2,zero,4bb74 <__adddf3+0x7e0>
   4babc:	4004d0fa 	srli	r2,r8,3
   4bac0:	8822d0fa 	srli	r17,r17,3
   4bac4:	4010977a 	slli	r8,r8,29
   4bac8:	10c0022c 	andhi	r3,r2,8
   4bacc:	4462b03a 	or	r17,r8,r17
   4bad0:	18000826 	beq	r3,zero,4baf4 <__adddf3+0x760>
   4bad4:	4808d0fa 	srli	r4,r9,3
   4bad8:	20c0022c 	andhi	r3,r4,8
   4badc:	1800051e 	bne	r3,zero,4baf4 <__adddf3+0x760>
   4bae0:	300cd0fa 	srli	r6,r6,3
   4bae4:	4806977a 	slli	r3,r9,29
   4bae8:	2005883a 	mov	r2,r4
   4baec:	3825883a 	mov	r18,r7
   4baf0:	19a2b03a 	or	r17,r3,r6
   4baf4:	8810d77a 	srli	r8,r17,29
   4baf8:	100490fa 	slli	r2,r2,3
   4bafc:	882290fa 	slli	r17,r17,3
   4bb00:	0401ffc4 	movi	r16,2047
   4bb04:	4090b03a 	or	r8,r8,r2
   4bb08:	003e4106 	br	4b410 <__alt_data_end+0xfffe5c10>
   4bb0c:	0141ffc4 	movi	r5,2047
   4bb10:	117fc71e 	bne	r2,r5,4ba30 <__alt_data_end+0xfffe6230>
   4bb14:	4811883a 	mov	r8,r9
   4bb18:	3023883a 	mov	r17,r6
   4bb1c:	1021883a 	mov	r16,r2
   4bb20:	003e3b06 	br	4b410 <__alt_data_end+0xfffe5c10>
   4bb24:	10002f26 	beq	r2,zero,4bbe4 <__adddf3+0x850>
   4bb28:	4984b03a 	or	r2,r9,r6
   4bb2c:	10001126 	beq	r2,zero,4bb74 <__adddf3+0x7e0>
   4bb30:	4004d0fa 	srli	r2,r8,3
   4bb34:	8822d0fa 	srli	r17,r17,3
   4bb38:	4010977a 	slli	r8,r8,29
   4bb3c:	10c0022c 	andhi	r3,r2,8
   4bb40:	4462b03a 	or	r17,r8,r17
   4bb44:	183feb26 	beq	r3,zero,4baf4 <__alt_data_end+0xfffe62f4>
   4bb48:	4808d0fa 	srli	r4,r9,3
   4bb4c:	20c0022c 	andhi	r3,r4,8
   4bb50:	183fe81e 	bne	r3,zero,4baf4 <__alt_data_end+0xfffe62f4>
   4bb54:	300cd0fa 	srli	r6,r6,3
   4bb58:	4806977a 	slli	r3,r9,29
   4bb5c:	2005883a 	mov	r2,r4
   4bb60:	19a2b03a 	or	r17,r3,r6
   4bb64:	003fe306 	br	4baf4 <__alt_data_end+0xfffe62f4>
   4bb68:	0011883a 	mov	r8,zero
   4bb6c:	0005883a 	mov	r2,zero
   4bb70:	003e3f06 	br	4b470 <__alt_data_end+0xfffe5c70>
   4bb74:	0401ffc4 	movi	r16,2047
   4bb78:	003e2506 	br	4b410 <__alt_data_end+0xfffe5c10>
   4bb7c:	0013883a 	mov	r9,zero
   4bb80:	003f8406 	br	4b994 <__alt_data_end+0xfffe6194>
   4bb84:	0005883a 	mov	r2,zero
   4bb88:	0007883a 	mov	r3,zero
   4bb8c:	003e8906 	br	4b5b4 <__alt_data_end+0xfffe5db4>
   4bb90:	197ff804 	addi	r5,r3,-32
   4bb94:	01000804 	movi	r4,32
   4bb98:	414ad83a 	srl	r5,r8,r5
   4bb9c:	19002426 	beq	r3,r4,4bc30 <__adddf3+0x89c>
   4bba0:	01001004 	movi	r4,64
   4bba4:	20c7c83a 	sub	r3,r4,r3
   4bba8:	40c6983a 	sll	r3,r8,r3
   4bbac:	1c46b03a 	or	r3,r3,r17
   4bbb0:	1806c03a 	cmpne	r3,r3,zero
   4bbb4:	28e2b03a 	or	r17,r5,r3
   4bbb8:	0007883a 	mov	r3,zero
   4bbbc:	003f2306 	br	4b84c <__alt_data_end+0xfffe604c>
   4bbc0:	0007883a 	mov	r3,zero
   4bbc4:	5811883a 	mov	r8,r11
   4bbc8:	00bfffc4 	movi	r2,-1
   4bbcc:	0401ffc4 	movi	r16,2047
   4bbd0:	003e7806 	br	4b5b4 <__alt_data_end+0xfffe5db4>
   4bbd4:	4462b03a 	or	r17,r8,r17
   4bbd8:	8822c03a 	cmpne	r17,r17,zero
   4bbdc:	0009883a 	mov	r4,zero
   4bbe0:	003fa006 	br	4ba64 <__alt_data_end+0xfffe6264>
   4bbe4:	4811883a 	mov	r8,r9
   4bbe8:	3023883a 	mov	r17,r6
   4bbec:	0401ffc4 	movi	r16,2047
   4bbf0:	003e0706 	br	4b410 <__alt_data_end+0xfffe5c10>
   4bbf4:	4811883a 	mov	r8,r9
   4bbf8:	3023883a 	mov	r17,r6
   4bbfc:	003e0406 	br	4b410 <__alt_data_end+0xfffe5c10>
   4bc00:	21fff804 	addi	r7,r4,-32
   4bc04:	01400804 	movi	r5,32
   4bc08:	41ced83a 	srl	r7,r8,r7
   4bc0c:	21400a26 	beq	r4,r5,4bc38 <__adddf3+0x8a4>
   4bc10:	01401004 	movi	r5,64
   4bc14:	2909c83a 	sub	r4,r5,r4
   4bc18:	4108983a 	sll	r4,r8,r4
   4bc1c:	2448b03a 	or	r4,r4,r17
   4bc20:	2008c03a 	cmpne	r4,r4,zero
   4bc24:	3922b03a 	or	r17,r7,r4
   4bc28:	0009883a 	mov	r4,zero
   4bc2c:	003f8d06 	br	4ba64 <__alt_data_end+0xfffe6264>
   4bc30:	0007883a 	mov	r3,zero
   4bc34:	003fdd06 	br	4bbac <__alt_data_end+0xfffe63ac>
   4bc38:	0009883a 	mov	r4,zero
   4bc3c:	003ff706 	br	4bc1c <__alt_data_end+0xfffe641c>

0004bc40 <__divdf3>:
   4bc40:	defff004 	addi	sp,sp,-64
   4bc44:	dc800815 	stw	r18,32(sp)
   4bc48:	2824d53a 	srli	r18,r5,20
   4bc4c:	dd800c15 	stw	r22,48(sp)
   4bc50:	282cd7fa 	srli	r22,r5,31
   4bc54:	dc000615 	stw	r16,24(sp)
   4bc58:	04000434 	movhi	r16,16
   4bc5c:	843fffc4 	addi	r16,r16,-1
   4bc60:	dfc00f15 	stw	ra,60(sp)
   4bc64:	df000e15 	stw	fp,56(sp)
   4bc68:	ddc00d15 	stw	r23,52(sp)
   4bc6c:	dd400b15 	stw	r21,44(sp)
   4bc70:	dd000a15 	stw	r20,40(sp)
   4bc74:	dcc00915 	stw	r19,36(sp)
   4bc78:	dc400715 	stw	r17,28(sp)
   4bc7c:	9481ffcc 	andi	r18,r18,2047
   4bc80:	2c20703a 	and	r16,r5,r16
   4bc84:	b2003fcc 	andi	r8,r22,255
   4bc88:	90006126 	beq	r18,zero,4be10 <__divdf3+0x1d0>
   4bc8c:	0081ffc4 	movi	r2,2047
   4bc90:	202b883a 	mov	r21,r4
   4bc94:	90803726 	beq	r18,r2,4bd74 <__divdf3+0x134>
   4bc98:	80800434 	orhi	r2,r16,16
   4bc9c:	100490fa 	slli	r2,r2,3
   4bca0:	2020d77a 	srli	r16,r4,29
   4bca4:	202a90fa 	slli	r21,r4,3
   4bca8:	94bf0044 	addi	r18,r18,-1023
   4bcac:	80a0b03a 	or	r16,r16,r2
   4bcb0:	0013883a 	mov	r9,zero
   4bcb4:	000b883a 	mov	r5,zero
   4bcb8:	3806d53a 	srli	r3,r7,20
   4bcbc:	382ed7fa 	srli	r23,r7,31
   4bcc0:	04400434 	movhi	r17,16
   4bcc4:	8c7fffc4 	addi	r17,r17,-1
   4bcc8:	18c1ffcc 	andi	r3,r3,2047
   4bccc:	3029883a 	mov	r20,r6
   4bcd0:	3c62703a 	and	r17,r7,r17
   4bcd4:	bf003fcc 	andi	fp,r23,255
   4bcd8:	18006e26 	beq	r3,zero,4be94 <__divdf3+0x254>
   4bcdc:	0081ffc4 	movi	r2,2047
   4bce0:	18806626 	beq	r3,r2,4be7c <__divdf3+0x23c>
   4bce4:	88800434 	orhi	r2,r17,16
   4bce8:	100490fa 	slli	r2,r2,3
   4bcec:	3022d77a 	srli	r17,r6,29
   4bcf0:	302890fa 	slli	r20,r6,3
   4bcf4:	18ff0044 	addi	r3,r3,-1023
   4bcf8:	88a2b03a 	or	r17,r17,r2
   4bcfc:	000f883a 	mov	r7,zero
   4bd00:	b5e6f03a 	xor	r19,r22,r23
   4bd04:	3a4cb03a 	or	r6,r7,r9
   4bd08:	008003c4 	movi	r2,15
   4bd0c:	9809883a 	mov	r4,r19
   4bd10:	90c7c83a 	sub	r3,r18,r3
   4bd14:	9cc03fcc 	andi	r19,r19,255
   4bd18:	11809636 	bltu	r2,r6,4bf74 <__divdf3+0x334>
   4bd1c:	300c90ba 	slli	r6,r6,2
   4bd20:	00800174 	movhi	r2,5
   4bd24:	10af4d04 	addi	r2,r2,-17100
   4bd28:	308d883a 	add	r6,r6,r2
   4bd2c:	30800017 	ldw	r2,0(r6)
   4bd30:	1000683a 	jmp	r2
   4bd34:	0004bf74 	movhi	zero,4861
   4bd38:	0004bdac 	andhi	zero,zero,4854
   4bd3c:	0004bf64 	muli	zero,zero,4861
   4bd40:	0004bda0 	cmpeqi	zero,zero,4854
   4bd44:	0004bf64 	muli	zero,zero,4861
   4bd48:	0004bf38 	rdprs	zero,zero,4860
   4bd4c:	0004bf64 	muli	zero,zero,4861
   4bd50:	0004bda0 	cmpeqi	zero,zero,4854
   4bd54:	0004bdac 	andhi	zero,zero,4854
   4bd58:	0004bdac 	andhi	zero,zero,4854
   4bd5c:	0004bf38 	rdprs	zero,zero,4860
   4bd60:	0004bda0 	cmpeqi	zero,zero,4854
   4bd64:	0004bd90 	cmplti	zero,zero,4854
   4bd68:	0004bd90 	cmplti	zero,zero,4854
   4bd6c:	0004bd90 	cmplti	zero,zero,4854
   4bd70:	0004c2fc 	xorhi	zero,zero,4875
   4bd74:	2404b03a 	or	r2,r4,r16
   4bd78:	10006c1e 	bne	r2,zero,4bf2c <__divdf3+0x2ec>
   4bd7c:	02400204 	movi	r9,8
   4bd80:	0021883a 	mov	r16,zero
   4bd84:	002b883a 	mov	r21,zero
   4bd88:	01400084 	movi	r5,2
   4bd8c:	003fca06 	br	4bcb8 <__alt_data_end+0xfffe64b8>
   4bd90:	8023883a 	mov	r17,r16
   4bd94:	a829883a 	mov	r20,r21
   4bd98:	4039883a 	mov	fp,r8
   4bd9c:	280f883a 	mov	r7,r5
   4bda0:	00800084 	movi	r2,2
   4bda4:	3881601e 	bne	r7,r2,4c328 <__divdf3+0x6e8>
   4bda8:	e027883a 	mov	r19,fp
   4bdac:	9900004c 	andi	r4,r19,1
   4bdb0:	0081ffc4 	movi	r2,2047
   4bdb4:	0021883a 	mov	r16,zero
   4bdb8:	002b883a 	mov	r21,zero
   4bdbc:	1004953a 	slli	r2,r2,20
   4bdc0:	20c03fcc 	andi	r3,r4,255
   4bdc4:	01400434 	movhi	r5,16
   4bdc8:	297fffc4 	addi	r5,r5,-1
   4bdcc:	180697fa 	slli	r3,r3,31
   4bdd0:	8160703a 	and	r16,r16,r5
   4bdd4:	80a0b03a 	or	r16,r16,r2
   4bdd8:	80c6b03a 	or	r3,r16,r3
   4bddc:	a805883a 	mov	r2,r21
   4bde0:	dfc00f17 	ldw	ra,60(sp)
   4bde4:	df000e17 	ldw	fp,56(sp)
   4bde8:	ddc00d17 	ldw	r23,52(sp)
   4bdec:	dd800c17 	ldw	r22,48(sp)
   4bdf0:	dd400b17 	ldw	r21,44(sp)
   4bdf4:	dd000a17 	ldw	r20,40(sp)
   4bdf8:	dcc00917 	ldw	r19,36(sp)
   4bdfc:	dc800817 	ldw	r18,32(sp)
   4be00:	dc400717 	ldw	r17,28(sp)
   4be04:	dc000617 	ldw	r16,24(sp)
   4be08:	dec01004 	addi	sp,sp,64
   4be0c:	f800283a 	ret
   4be10:	2404b03a 	or	r2,r4,r16
   4be14:	2023883a 	mov	r17,r4
   4be18:	10003f26 	beq	r2,zero,4bf18 <__divdf3+0x2d8>
   4be1c:	80015e26 	beq	r16,zero,4c398 <__divdf3+0x758>
   4be20:	8009883a 	mov	r4,r16
   4be24:	d9800215 	stw	r6,8(sp)
   4be28:	d9c00515 	stw	r7,20(sp)
   4be2c:	da000415 	stw	r8,16(sp)
   4be30:	0040d900 	call	40d90 <__clzsi2>
   4be34:	d9800217 	ldw	r6,8(sp)
   4be38:	d9c00517 	ldw	r7,20(sp)
   4be3c:	da000417 	ldw	r8,16(sp)
   4be40:	113ffd44 	addi	r4,r2,-11
   4be44:	00c00704 	movi	r3,28
   4be48:	19014f16 	blt	r3,r4,4c388 <__divdf3+0x748>
   4be4c:	00c00744 	movi	r3,29
   4be50:	157ffe04 	addi	r21,r2,-8
   4be54:	1907c83a 	sub	r3,r3,r4
   4be58:	8560983a 	sll	r16,r16,r21
   4be5c:	88c6d83a 	srl	r3,r17,r3
   4be60:	8d6a983a 	sll	r21,r17,r21
   4be64:	1c20b03a 	or	r16,r3,r16
   4be68:	1080fcc4 	addi	r2,r2,1011
   4be6c:	00a5c83a 	sub	r18,zero,r2
   4be70:	0013883a 	mov	r9,zero
   4be74:	000b883a 	mov	r5,zero
   4be78:	003f8f06 	br	4bcb8 <__alt_data_end+0xfffe64b8>
   4be7c:	3444b03a 	or	r2,r6,r17
   4be80:	1000231e 	bne	r2,zero,4bf10 <__divdf3+0x2d0>
   4be84:	0023883a 	mov	r17,zero
   4be88:	0029883a 	mov	r20,zero
   4be8c:	01c00084 	movi	r7,2
   4be90:	003f9b06 	br	4bd00 <__alt_data_end+0xfffe6500>
   4be94:	3444b03a 	or	r2,r6,r17
   4be98:	10001926 	beq	r2,zero,4bf00 <__divdf3+0x2c0>
   4be9c:	88014b26 	beq	r17,zero,4c3cc <__divdf3+0x78c>
   4bea0:	8809883a 	mov	r4,r17
   4bea4:	d9400115 	stw	r5,4(sp)
   4bea8:	d9800215 	stw	r6,8(sp)
   4beac:	da000415 	stw	r8,16(sp)
   4beb0:	da400315 	stw	r9,12(sp)
   4beb4:	0040d900 	call	40d90 <__clzsi2>
   4beb8:	d9400117 	ldw	r5,4(sp)
   4bebc:	d9800217 	ldw	r6,8(sp)
   4bec0:	da000417 	ldw	r8,16(sp)
   4bec4:	da400317 	ldw	r9,12(sp)
   4bec8:	113ffd44 	addi	r4,r2,-11
   4becc:	00c00704 	movi	r3,28
   4bed0:	19013a16 	blt	r3,r4,4c3bc <__divdf3+0x77c>
   4bed4:	00c00744 	movi	r3,29
   4bed8:	153ffe04 	addi	r20,r2,-8
   4bedc:	1907c83a 	sub	r3,r3,r4
   4bee0:	8d22983a 	sll	r17,r17,r20
   4bee4:	30c6d83a 	srl	r3,r6,r3
   4bee8:	3528983a 	sll	r20,r6,r20
   4beec:	1c62b03a 	or	r17,r3,r17
   4bef0:	1080fcc4 	addi	r2,r2,1011
   4bef4:	0087c83a 	sub	r3,zero,r2
   4bef8:	000f883a 	mov	r7,zero
   4befc:	003f8006 	br	4bd00 <__alt_data_end+0xfffe6500>
   4bf00:	0023883a 	mov	r17,zero
   4bf04:	0029883a 	mov	r20,zero
   4bf08:	01c00044 	movi	r7,1
   4bf0c:	003f7c06 	br	4bd00 <__alt_data_end+0xfffe6500>
   4bf10:	01c000c4 	movi	r7,3
   4bf14:	003f7a06 	br	4bd00 <__alt_data_end+0xfffe6500>
   4bf18:	02400104 	movi	r9,4
   4bf1c:	0021883a 	mov	r16,zero
   4bf20:	002b883a 	mov	r21,zero
   4bf24:	01400044 	movi	r5,1
   4bf28:	003f6306 	br	4bcb8 <__alt_data_end+0xfffe64b8>
   4bf2c:	02400304 	movi	r9,12
   4bf30:	014000c4 	movi	r5,3
   4bf34:	003f6006 	br	4bcb8 <__alt_data_end+0xfffe64b8>
   4bf38:	04000434 	movhi	r16,16
   4bf3c:	0009883a 	mov	r4,zero
   4bf40:	843fffc4 	addi	r16,r16,-1
   4bf44:	057fffc4 	movi	r21,-1
   4bf48:	0081ffc4 	movi	r2,2047
   4bf4c:	003f9b06 	br	4bdbc <__alt_data_end+0xfffe65bc>
   4bf50:	00c00044 	movi	r3,1
   4bf54:	1887c83a 	sub	r3,r3,r2
   4bf58:	01000e04 	movi	r4,56
   4bf5c:	20c1530e 	bge	r4,r3,4c4ac <__divdf3+0x86c>
   4bf60:	9900004c 	andi	r4,r19,1
   4bf64:	0005883a 	mov	r2,zero
   4bf68:	0021883a 	mov	r16,zero
   4bf6c:	002b883a 	mov	r21,zero
   4bf70:	003f9206 	br	4bdbc <__alt_data_end+0xfffe65bc>
   4bf74:	8c012e36 	bltu	r17,r16,4c430 <__divdf3+0x7f0>
   4bf78:	84412c26 	beq	r16,r17,4c42c <__divdf3+0x7ec>
   4bf7c:	a82f883a 	mov	r23,r21
   4bf80:	18ffffc4 	addi	r3,r3,-1
   4bf84:	002b883a 	mov	r21,zero
   4bf88:	a004d63a 	srli	r2,r20,24
   4bf8c:	8822923a 	slli	r17,r17,8
   4bf90:	a028923a 	slli	r20,r20,8
   4bf94:	8009883a 	mov	r4,r16
   4bf98:	88acb03a 	or	r22,r17,r2
   4bf9c:	dd000015 	stw	r20,0(sp)
   4bfa0:	b028d43a 	srli	r20,r22,16
   4bfa4:	d8c00215 	stw	r3,8(sp)
   4bfa8:	b4bfffcc 	andi	r18,r22,65535
   4bfac:	a00b883a 	mov	r5,r20
   4bfb0:	004b2d80 	call	4b2d8 <__udivsi3>
   4bfb4:	100b883a 	mov	r5,r2
   4bfb8:	9009883a 	mov	r4,r18
   4bfbc:	1023883a 	mov	r17,r2
   4bfc0:	00407040 	call	40704 <__mulsi3>
   4bfc4:	8009883a 	mov	r4,r16
   4bfc8:	a00b883a 	mov	r5,r20
   4bfcc:	1039883a 	mov	fp,r2
   4bfd0:	004b33c0 	call	4b33c <__umodsi3>
   4bfd4:	1004943a 	slli	r2,r2,16
   4bfd8:	b808d43a 	srli	r4,r23,16
   4bfdc:	d8c00217 	ldw	r3,8(sp)
   4bfe0:	2084b03a 	or	r2,r4,r2
   4bfe4:	1700062e 	bgeu	r2,fp,4c000 <__divdf3+0x3c0>
   4bfe8:	1585883a 	add	r2,r2,r22
   4bfec:	893fffc4 	addi	r4,r17,-1
   4bff0:	15811d36 	bltu	r2,r22,4c468 <__divdf3+0x828>
   4bff4:	17011c2e 	bgeu	r2,fp,4c468 <__divdf3+0x828>
   4bff8:	8c7fff84 	addi	r17,r17,-2
   4bffc:	1585883a 	add	r2,r2,r22
   4c000:	1739c83a 	sub	fp,r2,fp
   4c004:	a00b883a 	mov	r5,r20
   4c008:	e009883a 	mov	r4,fp
   4c00c:	d8c00215 	stw	r3,8(sp)
   4c010:	004b2d80 	call	4b2d8 <__udivsi3>
   4c014:	100b883a 	mov	r5,r2
   4c018:	9009883a 	mov	r4,r18
   4c01c:	1021883a 	mov	r16,r2
   4c020:	00407040 	call	40704 <__mulsi3>
   4c024:	a00b883a 	mov	r5,r20
   4c028:	e009883a 	mov	r4,fp
   4c02c:	d8800415 	stw	r2,16(sp)
   4c030:	004b33c0 	call	4b33c <__umodsi3>
   4c034:	1004943a 	slli	r2,r2,16
   4c038:	da000417 	ldw	r8,16(sp)
   4c03c:	bdffffcc 	andi	r23,r23,65535
   4c040:	b884b03a 	or	r2,r23,r2
   4c044:	d8c00217 	ldw	r3,8(sp)
   4c048:	1200062e 	bgeu	r2,r8,4c064 <__divdf3+0x424>
   4c04c:	1585883a 	add	r2,r2,r22
   4c050:	813fffc4 	addi	r4,r16,-1
   4c054:	15810236 	bltu	r2,r22,4c460 <__divdf3+0x820>
   4c058:	1201012e 	bgeu	r2,r8,4c460 <__divdf3+0x820>
   4c05c:	843fff84 	addi	r16,r16,-2
   4c060:	1585883a 	add	r2,r2,r22
   4c064:	8822943a 	slli	r17,r17,16
   4c068:	d9800017 	ldw	r6,0(sp)
   4c06c:	1211c83a 	sub	r8,r2,r8
   4c070:	8c22b03a 	or	r17,r17,r16
   4c074:	373fffcc 	andi	fp,r6,65535
   4c078:	8abfffcc 	andi	r10,r17,65535
   4c07c:	8820d43a 	srli	r16,r17,16
   4c080:	5009883a 	mov	r4,r10
   4c084:	e00b883a 	mov	r5,fp
   4c088:	302ed43a 	srli	r23,r6,16
   4c08c:	d8c00215 	stw	r3,8(sp)
   4c090:	da000415 	stw	r8,16(sp)
   4c094:	da800115 	stw	r10,4(sp)
   4c098:	00407040 	call	40704 <__mulsi3>
   4c09c:	800b883a 	mov	r5,r16
   4c0a0:	e009883a 	mov	r4,fp
   4c0a4:	d8800515 	stw	r2,20(sp)
   4c0a8:	00407040 	call	40704 <__mulsi3>
   4c0ac:	8009883a 	mov	r4,r16
   4c0b0:	b80b883a 	mov	r5,r23
   4c0b4:	d8800315 	stw	r2,12(sp)
   4c0b8:	00407040 	call	40704 <__mulsi3>
   4c0bc:	da800117 	ldw	r10,4(sp)
   4c0c0:	b80b883a 	mov	r5,r23
   4c0c4:	1021883a 	mov	r16,r2
   4c0c8:	5009883a 	mov	r4,r10
   4c0cc:	00407040 	call	40704 <__mulsi3>
   4c0d0:	d9c00517 	ldw	r7,20(sp)
   4c0d4:	da400317 	ldw	r9,12(sp)
   4c0d8:	d8c00217 	ldw	r3,8(sp)
   4c0dc:	3808d43a 	srli	r4,r7,16
   4c0e0:	1245883a 	add	r2,r2,r9
   4c0e4:	da000417 	ldw	r8,16(sp)
   4c0e8:	2085883a 	add	r2,r4,r2
   4c0ec:	1240022e 	bgeu	r2,r9,4c0f8 <__divdf3+0x4b8>
   4c0f0:	01000074 	movhi	r4,1
   4c0f4:	8121883a 	add	r16,r16,r4
   4c0f8:	1008d43a 	srli	r4,r2,16
   4c0fc:	1004943a 	slli	r2,r2,16
   4c100:	39ffffcc 	andi	r7,r7,65535
   4c104:	2409883a 	add	r4,r4,r16
   4c108:	11c5883a 	add	r2,r2,r7
   4c10c:	4100bb36 	bltu	r8,r4,4c3fc <__divdf3+0x7bc>
   4c110:	4100d726 	beq	r8,r4,4c470 <__divdf3+0x830>
   4c114:	4109c83a 	sub	r4,r8,r4
   4c118:	a8a1c83a 	sub	r16,r21,r2
   4c11c:	ac2b803a 	cmpltu	r21,r21,r16
   4c120:	256bc83a 	sub	r21,r4,r21
   4c124:	b540d926 	beq	r22,r21,4c48c <__divdf3+0x84c>
   4c128:	a00b883a 	mov	r5,r20
   4c12c:	a809883a 	mov	r4,r21
   4c130:	d8c00215 	stw	r3,8(sp)
   4c134:	004b2d80 	call	4b2d8 <__udivsi3>
   4c138:	100b883a 	mov	r5,r2
   4c13c:	9009883a 	mov	r4,r18
   4c140:	d8800515 	stw	r2,20(sp)
   4c144:	00407040 	call	40704 <__mulsi3>
   4c148:	a809883a 	mov	r4,r21
   4c14c:	a00b883a 	mov	r5,r20
   4c150:	d8800415 	stw	r2,16(sp)
   4c154:	004b33c0 	call	4b33c <__umodsi3>
   4c158:	1004943a 	slli	r2,r2,16
   4c15c:	8008d43a 	srli	r4,r16,16
   4c160:	da000417 	ldw	r8,16(sp)
   4c164:	d8c00217 	ldw	r3,8(sp)
   4c168:	2084b03a 	or	r2,r4,r2
   4c16c:	d9c00517 	ldw	r7,20(sp)
   4c170:	1200062e 	bgeu	r2,r8,4c18c <__divdf3+0x54c>
   4c174:	1585883a 	add	r2,r2,r22
   4c178:	393fffc4 	addi	r4,r7,-1
   4c17c:	1580c536 	bltu	r2,r22,4c494 <__divdf3+0x854>
   4c180:	1200c42e 	bgeu	r2,r8,4c494 <__divdf3+0x854>
   4c184:	39ffff84 	addi	r7,r7,-2
   4c188:	1585883a 	add	r2,r2,r22
   4c18c:	122bc83a 	sub	r21,r2,r8
   4c190:	a00b883a 	mov	r5,r20
   4c194:	a809883a 	mov	r4,r21
   4c198:	d8c00215 	stw	r3,8(sp)
   4c19c:	d9c00515 	stw	r7,20(sp)
   4c1a0:	004b2d80 	call	4b2d8 <__udivsi3>
   4c1a4:	9009883a 	mov	r4,r18
   4c1a8:	100b883a 	mov	r5,r2
   4c1ac:	d8800415 	stw	r2,16(sp)
   4c1b0:	00407040 	call	40704 <__mulsi3>
   4c1b4:	a809883a 	mov	r4,r21
   4c1b8:	a00b883a 	mov	r5,r20
   4c1bc:	1025883a 	mov	r18,r2
   4c1c0:	004b33c0 	call	4b33c <__umodsi3>
   4c1c4:	1004943a 	slli	r2,r2,16
   4c1c8:	813fffcc 	andi	r4,r16,65535
   4c1cc:	d8c00217 	ldw	r3,8(sp)
   4c1d0:	20a0b03a 	or	r16,r4,r2
   4c1d4:	d9c00517 	ldw	r7,20(sp)
   4c1d8:	da000417 	ldw	r8,16(sp)
   4c1dc:	8480062e 	bgeu	r16,r18,4c1f8 <__divdf3+0x5b8>
   4c1e0:	85a1883a 	add	r16,r16,r22
   4c1e4:	40bfffc4 	addi	r2,r8,-1
   4c1e8:	8580ac36 	bltu	r16,r22,4c49c <__divdf3+0x85c>
   4c1ec:	8480ab2e 	bgeu	r16,r18,4c49c <__divdf3+0x85c>
   4c1f0:	423fff84 	addi	r8,r8,-2
   4c1f4:	85a1883a 	add	r16,r16,r22
   4c1f8:	3804943a 	slli	r2,r7,16
   4c1fc:	84a1c83a 	sub	r16,r16,r18
   4c200:	e009883a 	mov	r4,fp
   4c204:	1228b03a 	or	r20,r2,r8
   4c208:	a1ffffcc 	andi	r7,r20,65535
   4c20c:	a024d43a 	srli	r18,r20,16
   4c210:	380b883a 	mov	r5,r7
   4c214:	d8c00215 	stw	r3,8(sp)
   4c218:	d9c00515 	stw	r7,20(sp)
   4c21c:	00407040 	call	40704 <__mulsi3>
   4c220:	900b883a 	mov	r5,r18
   4c224:	e009883a 	mov	r4,fp
   4c228:	102b883a 	mov	r21,r2
   4c22c:	00407040 	call	40704 <__mulsi3>
   4c230:	900b883a 	mov	r5,r18
   4c234:	b809883a 	mov	r4,r23
   4c238:	1039883a 	mov	fp,r2
   4c23c:	00407040 	call	40704 <__mulsi3>
   4c240:	d9c00517 	ldw	r7,20(sp)
   4c244:	b80b883a 	mov	r5,r23
   4c248:	1025883a 	mov	r18,r2
   4c24c:	3809883a 	mov	r4,r7
   4c250:	00407040 	call	40704 <__mulsi3>
   4c254:	a808d43a 	srli	r4,r21,16
   4c258:	1705883a 	add	r2,r2,fp
   4c25c:	d8c00217 	ldw	r3,8(sp)
   4c260:	2085883a 	add	r2,r4,r2
   4c264:	1700022e 	bgeu	r2,fp,4c270 <__divdf3+0x630>
   4c268:	01000074 	movhi	r4,1
   4c26c:	9125883a 	add	r18,r18,r4
   4c270:	1008d43a 	srli	r4,r2,16
   4c274:	1004943a 	slli	r2,r2,16
   4c278:	ad7fffcc 	andi	r21,r21,65535
   4c27c:	2489883a 	add	r4,r4,r18
   4c280:	1545883a 	add	r2,r2,r21
   4c284:	81003836 	bltu	r16,r4,4c368 <__divdf3+0x728>
   4c288:	81003626 	beq	r16,r4,4c364 <__divdf3+0x724>
   4c28c:	a5000054 	ori	r20,r20,1
   4c290:	1880ffc4 	addi	r2,r3,1023
   4c294:	00bf2e0e 	bge	zero,r2,4bf50 <__alt_data_end+0xfffe6750>
   4c298:	a10001cc 	andi	r4,r20,7
   4c29c:	20000726 	beq	r4,zero,4c2bc <__divdf3+0x67c>
   4c2a0:	a10003cc 	andi	r4,r20,15
   4c2a4:	01400104 	movi	r5,4
   4c2a8:	21400426 	beq	r4,r5,4c2bc <__divdf3+0x67c>
   4c2ac:	a149883a 	add	r4,r20,r5
   4c2b0:	2529803a 	cmpltu	r20,r4,r20
   4c2b4:	8d23883a 	add	r17,r17,r20
   4c2b8:	2029883a 	mov	r20,r4
   4c2bc:	8900402c 	andhi	r4,r17,256
   4c2c0:	20000426 	beq	r4,zero,4c2d4 <__divdf3+0x694>
   4c2c4:	18810004 	addi	r2,r3,1024
   4c2c8:	00ffc034 	movhi	r3,65280
   4c2cc:	18ffffc4 	addi	r3,r3,-1
   4c2d0:	88e2703a 	and	r17,r17,r3
   4c2d4:	00c1ff84 	movi	r3,2046
   4c2d8:	18beb416 	blt	r3,r2,4bdac <__alt_data_end+0xfffe65ac>
   4c2dc:	a028d0fa 	srli	r20,r20,3
   4c2e0:	882a977a 	slli	r21,r17,29
   4c2e4:	8820927a 	slli	r16,r17,9
   4c2e8:	1081ffcc 	andi	r2,r2,2047
   4c2ec:	ad2ab03a 	or	r21,r21,r20
   4c2f0:	8020d33a 	srli	r16,r16,12
   4c2f4:	9900004c 	andi	r4,r19,1
   4c2f8:	003eb006 	br	4bdbc <__alt_data_end+0xfffe65bc>
   4c2fc:	8080022c 	andhi	r2,r16,8
   4c300:	10001226 	beq	r2,zero,4c34c <__divdf3+0x70c>
   4c304:	8880022c 	andhi	r2,r17,8
   4c308:	1000101e 	bne	r2,zero,4c34c <__divdf3+0x70c>
   4c30c:	00800434 	movhi	r2,16
   4c310:	8c000234 	orhi	r16,r17,8
   4c314:	10bfffc4 	addi	r2,r2,-1
   4c318:	b809883a 	mov	r4,r23
   4c31c:	80a0703a 	and	r16,r16,r2
   4c320:	a02b883a 	mov	r21,r20
   4c324:	003f0806 	br	4bf48 <__alt_data_end+0xfffe6748>
   4c328:	008000c4 	movi	r2,3
   4c32c:	3880b126 	beq	r7,r2,4c5f4 <__divdf3+0x9b4>
   4c330:	00800044 	movi	r2,1
   4c334:	38805b1e 	bne	r7,r2,4c4a4 <__divdf3+0x864>
   4c338:	e009883a 	mov	r4,fp
   4c33c:	0005883a 	mov	r2,zero
   4c340:	0021883a 	mov	r16,zero
   4c344:	002b883a 	mov	r21,zero
   4c348:	003e9c06 	br	4bdbc <__alt_data_end+0xfffe65bc>
   4c34c:	00800434 	movhi	r2,16
   4c350:	84000234 	orhi	r16,r16,8
   4c354:	10bfffc4 	addi	r2,r2,-1
   4c358:	b009883a 	mov	r4,r22
   4c35c:	80a0703a 	and	r16,r16,r2
   4c360:	003ef906 	br	4bf48 <__alt_data_end+0xfffe6748>
   4c364:	103fca26 	beq	r2,zero,4c290 <__alt_data_end+0xfffe6a90>
   4c368:	b421883a 	add	r16,r22,r16
   4c36c:	a17fffc4 	addi	r5,r20,-1
   4c370:	8580422e 	bgeu	r16,r22,4c47c <__divdf3+0x83c>
   4c374:	2829883a 	mov	r20,r5
   4c378:	813fc41e 	bne	r16,r4,4c28c <__alt_data_end+0xfffe6a8c>
   4c37c:	d9800017 	ldw	r6,0(sp)
   4c380:	30bfc21e 	bne	r6,r2,4c28c <__alt_data_end+0xfffe6a8c>
   4c384:	003fc206 	br	4c290 <__alt_data_end+0xfffe6a90>
   4c388:	143ff604 	addi	r16,r2,-40
   4c38c:	8c20983a 	sll	r16,r17,r16
   4c390:	002b883a 	mov	r21,zero
   4c394:	003eb406 	br	4be68 <__alt_data_end+0xfffe6668>
   4c398:	d9800215 	stw	r6,8(sp)
   4c39c:	d9c00515 	stw	r7,20(sp)
   4c3a0:	da000415 	stw	r8,16(sp)
   4c3a4:	0040d900 	call	40d90 <__clzsi2>
   4c3a8:	10800804 	addi	r2,r2,32
   4c3ac:	da000417 	ldw	r8,16(sp)
   4c3b0:	d9c00517 	ldw	r7,20(sp)
   4c3b4:	d9800217 	ldw	r6,8(sp)
   4c3b8:	003ea106 	br	4be40 <__alt_data_end+0xfffe6640>
   4c3bc:	147ff604 	addi	r17,r2,-40
   4c3c0:	3462983a 	sll	r17,r6,r17
   4c3c4:	0029883a 	mov	r20,zero
   4c3c8:	003ec906 	br	4bef0 <__alt_data_end+0xfffe66f0>
   4c3cc:	3009883a 	mov	r4,r6
   4c3d0:	d9400115 	stw	r5,4(sp)
   4c3d4:	d9800215 	stw	r6,8(sp)
   4c3d8:	da000415 	stw	r8,16(sp)
   4c3dc:	da400315 	stw	r9,12(sp)
   4c3e0:	0040d900 	call	40d90 <__clzsi2>
   4c3e4:	10800804 	addi	r2,r2,32
   4c3e8:	da400317 	ldw	r9,12(sp)
   4c3ec:	da000417 	ldw	r8,16(sp)
   4c3f0:	d9800217 	ldw	r6,8(sp)
   4c3f4:	d9400117 	ldw	r5,4(sp)
   4c3f8:	003eb306 	br	4bec8 <__alt_data_end+0xfffe66c8>
   4c3fc:	d9800017 	ldw	r6,0(sp)
   4c400:	a9ab883a 	add	r21,r21,r6
   4c404:	a98b803a 	cmpltu	r5,r21,r6
   4c408:	2d8b883a 	add	r5,r5,r22
   4c40c:	2a11883a 	add	r8,r5,r8
   4c410:	897fffc4 	addi	r5,r17,-1
   4c414:	b2000c2e 	bgeu	r22,r8,4c448 <__divdf3+0x808>
   4c418:	41003f36 	bltu	r8,r4,4c518 <__divdf3+0x8d8>
   4c41c:	22006c26 	beq	r4,r8,4c5d0 <__divdf3+0x990>
   4c420:	4109c83a 	sub	r4,r8,r4
   4c424:	2823883a 	mov	r17,r5
   4c428:	003f3b06 	br	4c118 <__alt_data_end+0xfffe6918>
   4c42c:	ad3ed336 	bltu	r21,r20,4bf7c <__alt_data_end+0xfffe677c>
   4c430:	a804d07a 	srli	r2,r21,1
   4c434:	802e97fa 	slli	r23,r16,31
   4c438:	a82a97fa 	slli	r21,r21,31
   4c43c:	8020d07a 	srli	r16,r16,1
   4c440:	b8aeb03a 	or	r23,r23,r2
   4c444:	003ed006 	br	4bf88 <__alt_data_end+0xfffe6788>
   4c448:	b23ff51e 	bne	r22,r8,4c420 <__alt_data_end+0xfffe6c20>
   4c44c:	d9800017 	ldw	r6,0(sp)
   4c450:	a9bff12e 	bgeu	r21,r6,4c418 <__alt_data_end+0xfffe6c18>
   4c454:	b109c83a 	sub	r4,r22,r4
   4c458:	2823883a 	mov	r17,r5
   4c45c:	003f2e06 	br	4c118 <__alt_data_end+0xfffe6918>
   4c460:	2021883a 	mov	r16,r4
   4c464:	003eff06 	br	4c064 <__alt_data_end+0xfffe6864>
   4c468:	2023883a 	mov	r17,r4
   4c46c:	003ee406 	br	4c000 <__alt_data_end+0xfffe6800>
   4c470:	a8bfe236 	bltu	r21,r2,4c3fc <__alt_data_end+0xfffe6bfc>
   4c474:	0009883a 	mov	r4,zero
   4c478:	003f2706 	br	4c118 <__alt_data_end+0xfffe6918>
   4c47c:	81002d36 	bltu	r16,r4,4c534 <__divdf3+0x8f4>
   4c480:	24005626 	beq	r4,r16,4c5dc <__divdf3+0x99c>
   4c484:	2829883a 	mov	r20,r5
   4c488:	003f8006 	br	4c28c <__alt_data_end+0xfffe6a8c>
   4c48c:	053fffc4 	movi	r20,-1
   4c490:	003f7f06 	br	4c290 <__alt_data_end+0xfffe6a90>
   4c494:	200f883a 	mov	r7,r4
   4c498:	003f3c06 	br	4c18c <__alt_data_end+0xfffe698c>
   4c49c:	1011883a 	mov	r8,r2
   4c4a0:	003f5506 	br	4c1f8 <__alt_data_end+0xfffe69f8>
   4c4a4:	e027883a 	mov	r19,fp
   4c4a8:	003f7906 	br	4c290 <__alt_data_end+0xfffe6a90>
   4c4ac:	010007c4 	movi	r4,31
   4c4b0:	20c02816 	blt	r4,r3,4c554 <__divdf3+0x914>
   4c4b4:	00800804 	movi	r2,32
   4c4b8:	10c5c83a 	sub	r2,r2,r3
   4c4bc:	888a983a 	sll	r5,r17,r2
   4c4c0:	a0c8d83a 	srl	r4,r20,r3
   4c4c4:	a084983a 	sll	r2,r20,r2
   4c4c8:	88e2d83a 	srl	r17,r17,r3
   4c4cc:	2906b03a 	or	r3,r5,r4
   4c4d0:	1004c03a 	cmpne	r2,r2,zero
   4c4d4:	1886b03a 	or	r3,r3,r2
   4c4d8:	188001cc 	andi	r2,r3,7
   4c4dc:	10000726 	beq	r2,zero,4c4fc <__divdf3+0x8bc>
   4c4e0:	188003cc 	andi	r2,r3,15
   4c4e4:	01000104 	movi	r4,4
   4c4e8:	11000426 	beq	r2,r4,4c4fc <__divdf3+0x8bc>
   4c4ec:	1805883a 	mov	r2,r3
   4c4f0:	10c00104 	addi	r3,r2,4
   4c4f4:	1885803a 	cmpltu	r2,r3,r2
   4c4f8:	88a3883a 	add	r17,r17,r2
   4c4fc:	8880202c 	andhi	r2,r17,128
   4c500:	10002926 	beq	r2,zero,4c5a8 <__divdf3+0x968>
   4c504:	9900004c 	andi	r4,r19,1
   4c508:	00800044 	movi	r2,1
   4c50c:	0021883a 	mov	r16,zero
   4c510:	002b883a 	mov	r21,zero
   4c514:	003e2906 	br	4bdbc <__alt_data_end+0xfffe65bc>
   4c518:	d9800017 	ldw	r6,0(sp)
   4c51c:	8c7fff84 	addi	r17,r17,-2
   4c520:	a9ab883a 	add	r21,r21,r6
   4c524:	a98b803a 	cmpltu	r5,r21,r6
   4c528:	2d8b883a 	add	r5,r5,r22
   4c52c:	2a11883a 	add	r8,r5,r8
   4c530:	003ef806 	br	4c114 <__alt_data_end+0xfffe6914>
   4c534:	d9800017 	ldw	r6,0(sp)
   4c538:	318f883a 	add	r7,r6,r6
   4c53c:	398b803a 	cmpltu	r5,r7,r6
   4c540:	2d8d883a 	add	r6,r5,r22
   4c544:	81a1883a 	add	r16,r16,r6
   4c548:	a17fff84 	addi	r5,r20,-2
   4c54c:	d9c00015 	stw	r7,0(sp)
   4c550:	003f8806 	br	4c374 <__alt_data_end+0xfffe6b74>
   4c554:	013ff844 	movi	r4,-31
   4c558:	2085c83a 	sub	r2,r4,r2
   4c55c:	8888d83a 	srl	r4,r17,r2
   4c560:	00800804 	movi	r2,32
   4c564:	18802126 	beq	r3,r2,4c5ec <__divdf3+0x9ac>
   4c568:	04001004 	movi	r16,64
   4c56c:	80c7c83a 	sub	r3,r16,r3
   4c570:	88e0983a 	sll	r16,r17,r3
   4c574:	8504b03a 	or	r2,r16,r20
   4c578:	1004c03a 	cmpne	r2,r2,zero
   4c57c:	2084b03a 	or	r2,r4,r2
   4c580:	144001cc 	andi	r17,r2,7
   4c584:	88000d1e 	bne	r17,zero,4c5bc <__divdf3+0x97c>
   4c588:	0021883a 	mov	r16,zero
   4c58c:	102ad0fa 	srli	r21,r2,3
   4c590:	9900004c 	andi	r4,r19,1
   4c594:	0005883a 	mov	r2,zero
   4c598:	ac6ab03a 	or	r21,r21,r17
   4c59c:	003e0706 	br	4bdbc <__alt_data_end+0xfffe65bc>
   4c5a0:	1007883a 	mov	r3,r2
   4c5a4:	0023883a 	mov	r17,zero
   4c5a8:	8820927a 	slli	r16,r17,9
   4c5ac:	1805883a 	mov	r2,r3
   4c5b0:	8822977a 	slli	r17,r17,29
   4c5b4:	8020d33a 	srli	r16,r16,12
   4c5b8:	003ff406 	br	4c58c <__alt_data_end+0xfffe6d8c>
   4c5bc:	10c003cc 	andi	r3,r2,15
   4c5c0:	01000104 	movi	r4,4
   4c5c4:	193ff626 	beq	r3,r4,4c5a0 <__alt_data_end+0xfffe6da0>
   4c5c8:	0023883a 	mov	r17,zero
   4c5cc:	003fc806 	br	4c4f0 <__alt_data_end+0xfffe6cf0>
   4c5d0:	a8bfd136 	bltu	r21,r2,4c518 <__alt_data_end+0xfffe6d18>
   4c5d4:	2823883a 	mov	r17,r5
   4c5d8:	003fa606 	br	4c474 <__alt_data_end+0xfffe6c74>
   4c5dc:	d9800017 	ldw	r6,0(sp)
   4c5e0:	30bfd436 	bltu	r6,r2,4c534 <__alt_data_end+0xfffe6d34>
   4c5e4:	2829883a 	mov	r20,r5
   4c5e8:	003f6406 	br	4c37c <__alt_data_end+0xfffe6b7c>
   4c5ec:	0021883a 	mov	r16,zero
   4c5f0:	003fe006 	br	4c574 <__alt_data_end+0xfffe6d74>
   4c5f4:	00800434 	movhi	r2,16
   4c5f8:	8c000234 	orhi	r16,r17,8
   4c5fc:	10bfffc4 	addi	r2,r2,-1
   4c600:	e009883a 	mov	r4,fp
   4c604:	80a0703a 	and	r16,r16,r2
   4c608:	a02b883a 	mov	r21,r20
   4c60c:	003e4e06 	br	4bf48 <__alt_data_end+0xfffe6748>

0004c610 <__eqdf2>:
   4c610:	2804d53a 	srli	r2,r5,20
   4c614:	3806d53a 	srli	r3,r7,20
   4c618:	02000434 	movhi	r8,16
   4c61c:	423fffc4 	addi	r8,r8,-1
   4c620:	1081ffcc 	andi	r2,r2,2047
   4c624:	0281ffc4 	movi	r10,2047
   4c628:	2a12703a 	and	r9,r5,r8
   4c62c:	18c1ffcc 	andi	r3,r3,2047
   4c630:	3a10703a 	and	r8,r7,r8
   4c634:	280ad7fa 	srli	r5,r5,31
   4c638:	380ed7fa 	srli	r7,r7,31
   4c63c:	12801026 	beq	r2,r10,4c680 <__eqdf2+0x70>
   4c640:	0281ffc4 	movi	r10,2047
   4c644:	1a800a26 	beq	r3,r10,4c670 <__eqdf2+0x60>
   4c648:	10c00226 	beq	r2,r3,4c654 <__eqdf2+0x44>
   4c64c:	00800044 	movi	r2,1
   4c650:	f800283a 	ret
   4c654:	4a3ffd1e 	bne	r9,r8,4c64c <__alt_data_end+0xfffe6e4c>
   4c658:	21bffc1e 	bne	r4,r6,4c64c <__alt_data_end+0xfffe6e4c>
   4c65c:	29c00c26 	beq	r5,r7,4c690 <__eqdf2+0x80>
   4c660:	103ffa1e 	bne	r2,zero,4c64c <__alt_data_end+0xfffe6e4c>
   4c664:	2244b03a 	or	r2,r4,r9
   4c668:	1004c03a 	cmpne	r2,r2,zero
   4c66c:	f800283a 	ret
   4c670:	3214b03a 	or	r10,r6,r8
   4c674:	503ff426 	beq	r10,zero,4c648 <__alt_data_end+0xfffe6e48>
   4c678:	00800044 	movi	r2,1
   4c67c:	f800283a 	ret
   4c680:	2254b03a 	or	r10,r4,r9
   4c684:	503fee26 	beq	r10,zero,4c640 <__alt_data_end+0xfffe6e40>
   4c688:	00800044 	movi	r2,1
   4c68c:	f800283a 	ret
   4c690:	0005883a 	mov	r2,zero
   4c694:	f800283a 	ret

0004c698 <__gedf2>:
   4c698:	2804d53a 	srli	r2,r5,20
   4c69c:	3806d53a 	srli	r3,r7,20
   4c6a0:	02000434 	movhi	r8,16
   4c6a4:	423fffc4 	addi	r8,r8,-1
   4c6a8:	1081ffcc 	andi	r2,r2,2047
   4c6ac:	0241ffc4 	movi	r9,2047
   4c6b0:	2a14703a 	and	r10,r5,r8
   4c6b4:	18c1ffcc 	andi	r3,r3,2047
   4c6b8:	3a10703a 	and	r8,r7,r8
   4c6bc:	280ad7fa 	srli	r5,r5,31
   4c6c0:	380ed7fa 	srli	r7,r7,31
   4c6c4:	12401d26 	beq	r2,r9,4c73c <__gedf2+0xa4>
   4c6c8:	0241ffc4 	movi	r9,2047
   4c6cc:	1a401226 	beq	r3,r9,4c718 <__gedf2+0x80>
   4c6d0:	1000081e 	bne	r2,zero,4c6f4 <__gedf2+0x5c>
   4c6d4:	2296b03a 	or	r11,r4,r10
   4c6d8:	5813003a 	cmpeq	r9,r11,zero
   4c6dc:	1800091e 	bne	r3,zero,4c704 <__gedf2+0x6c>
   4c6e0:	3218b03a 	or	r12,r6,r8
   4c6e4:	6000071e 	bne	r12,zero,4c704 <__gedf2+0x6c>
   4c6e8:	0005883a 	mov	r2,zero
   4c6ec:	5800101e 	bne	r11,zero,4c730 <__gedf2+0x98>
   4c6f0:	f800283a 	ret
   4c6f4:	18000c1e 	bne	r3,zero,4c728 <__gedf2+0x90>
   4c6f8:	3212b03a 	or	r9,r6,r8
   4c6fc:	48000c26 	beq	r9,zero,4c730 <__gedf2+0x98>
   4c700:	0013883a 	mov	r9,zero
   4c704:	39c03fcc 	andi	r7,r7,255
   4c708:	48000826 	beq	r9,zero,4c72c <__gedf2+0x94>
   4c70c:	38000926 	beq	r7,zero,4c734 <__gedf2+0x9c>
   4c710:	00800044 	movi	r2,1
   4c714:	f800283a 	ret
   4c718:	3212b03a 	or	r9,r6,r8
   4c71c:	483fec26 	beq	r9,zero,4c6d0 <__alt_data_end+0xfffe6ed0>
   4c720:	00bfff84 	movi	r2,-2
   4c724:	f800283a 	ret
   4c728:	39c03fcc 	andi	r7,r7,255
   4c72c:	29c00626 	beq	r5,r7,4c748 <__gedf2+0xb0>
   4c730:	283ff726 	beq	r5,zero,4c710 <__alt_data_end+0xfffe6f10>
   4c734:	00bfffc4 	movi	r2,-1
   4c738:	f800283a 	ret
   4c73c:	2292b03a 	or	r9,r4,r10
   4c740:	483fe126 	beq	r9,zero,4c6c8 <__alt_data_end+0xfffe6ec8>
   4c744:	003ff606 	br	4c720 <__alt_data_end+0xfffe6f20>
   4c748:	18bff916 	blt	r3,r2,4c730 <__alt_data_end+0xfffe6f30>
   4c74c:	10c00316 	blt	r2,r3,4c75c <__gedf2+0xc4>
   4c750:	42bff736 	bltu	r8,r10,4c730 <__alt_data_end+0xfffe6f30>
   4c754:	52000326 	beq	r10,r8,4c764 <__gedf2+0xcc>
   4c758:	5200042e 	bgeu	r10,r8,4c76c <__gedf2+0xd4>
   4c75c:	283fec1e 	bne	r5,zero,4c710 <__alt_data_end+0xfffe6f10>
   4c760:	003ff406 	br	4c734 <__alt_data_end+0xfffe6f34>
   4c764:	313ff236 	bltu	r6,r4,4c730 <__alt_data_end+0xfffe6f30>
   4c768:	21bffc36 	bltu	r4,r6,4c75c <__alt_data_end+0xfffe6f5c>
   4c76c:	0005883a 	mov	r2,zero
   4c770:	f800283a 	ret

0004c774 <__ledf2>:
   4c774:	2804d53a 	srli	r2,r5,20
   4c778:	3810d53a 	srli	r8,r7,20
   4c77c:	00c00434 	movhi	r3,16
   4c780:	18ffffc4 	addi	r3,r3,-1
   4c784:	1081ffcc 	andi	r2,r2,2047
   4c788:	0241ffc4 	movi	r9,2047
   4c78c:	28d4703a 	and	r10,r5,r3
   4c790:	4201ffcc 	andi	r8,r8,2047
   4c794:	38c6703a 	and	r3,r7,r3
   4c798:	280ad7fa 	srli	r5,r5,31
   4c79c:	380ed7fa 	srli	r7,r7,31
   4c7a0:	12401f26 	beq	r2,r9,4c820 <__ledf2+0xac>
   4c7a4:	0241ffc4 	movi	r9,2047
   4c7a8:	42401426 	beq	r8,r9,4c7fc <__ledf2+0x88>
   4c7ac:	1000091e 	bne	r2,zero,4c7d4 <__ledf2+0x60>
   4c7b0:	2296b03a 	or	r11,r4,r10
   4c7b4:	5813003a 	cmpeq	r9,r11,zero
   4c7b8:	29403fcc 	andi	r5,r5,255
   4c7bc:	40000a1e 	bne	r8,zero,4c7e8 <__ledf2+0x74>
   4c7c0:	30d8b03a 	or	r12,r6,r3
   4c7c4:	6000081e 	bne	r12,zero,4c7e8 <__ledf2+0x74>
   4c7c8:	0005883a 	mov	r2,zero
   4c7cc:	5800111e 	bne	r11,zero,4c814 <__ledf2+0xa0>
   4c7d0:	f800283a 	ret
   4c7d4:	29403fcc 	andi	r5,r5,255
   4c7d8:	40000c1e 	bne	r8,zero,4c80c <__ledf2+0x98>
   4c7dc:	30d2b03a 	or	r9,r6,r3
   4c7e0:	48000c26 	beq	r9,zero,4c814 <__ledf2+0xa0>
   4c7e4:	0013883a 	mov	r9,zero
   4c7e8:	39c03fcc 	andi	r7,r7,255
   4c7ec:	48000826 	beq	r9,zero,4c810 <__ledf2+0x9c>
   4c7f0:	38001126 	beq	r7,zero,4c838 <__ledf2+0xc4>
   4c7f4:	00800044 	movi	r2,1
   4c7f8:	f800283a 	ret
   4c7fc:	30d2b03a 	or	r9,r6,r3
   4c800:	483fea26 	beq	r9,zero,4c7ac <__alt_data_end+0xfffe6fac>
   4c804:	00800084 	movi	r2,2
   4c808:	f800283a 	ret
   4c80c:	39c03fcc 	andi	r7,r7,255
   4c810:	39400726 	beq	r7,r5,4c830 <__ledf2+0xbc>
   4c814:	2800081e 	bne	r5,zero,4c838 <__ledf2+0xc4>
   4c818:	00800044 	movi	r2,1
   4c81c:	f800283a 	ret
   4c820:	2292b03a 	or	r9,r4,r10
   4c824:	483fdf26 	beq	r9,zero,4c7a4 <__alt_data_end+0xfffe6fa4>
   4c828:	00800084 	movi	r2,2
   4c82c:	f800283a 	ret
   4c830:	4080030e 	bge	r8,r2,4c840 <__ledf2+0xcc>
   4c834:	383fef26 	beq	r7,zero,4c7f4 <__alt_data_end+0xfffe6ff4>
   4c838:	00bfffc4 	movi	r2,-1
   4c83c:	f800283a 	ret
   4c840:	123feb16 	blt	r2,r8,4c7f0 <__alt_data_end+0xfffe6ff0>
   4c844:	1abff336 	bltu	r3,r10,4c814 <__alt_data_end+0xfffe7014>
   4c848:	50c00326 	beq	r10,r3,4c858 <__ledf2+0xe4>
   4c84c:	50c0042e 	bgeu	r10,r3,4c860 <__ledf2+0xec>
   4c850:	283fe81e 	bne	r5,zero,4c7f4 <__alt_data_end+0xfffe6ff4>
   4c854:	003ff806 	br	4c838 <__alt_data_end+0xfffe7038>
   4c858:	313fee36 	bltu	r6,r4,4c814 <__alt_data_end+0xfffe7014>
   4c85c:	21bffc36 	bltu	r4,r6,4c850 <__alt_data_end+0xfffe7050>
   4c860:	0005883a 	mov	r2,zero
   4c864:	f800283a 	ret

0004c868 <__muldf3>:
   4c868:	deffee04 	addi	sp,sp,-72
   4c86c:	dd000c15 	stw	r20,48(sp)
   4c870:	2828d53a 	srli	r20,r5,20
   4c874:	ddc00f15 	stw	r23,60(sp)
   4c878:	282ed7fa 	srli	r23,r5,31
   4c87c:	dc000815 	stw	r16,32(sp)
   4c880:	04000434 	movhi	r16,16
   4c884:	dcc00b15 	stw	r19,44(sp)
   4c888:	843fffc4 	addi	r16,r16,-1
   4c88c:	dfc01115 	stw	ra,68(sp)
   4c890:	df001015 	stw	fp,64(sp)
   4c894:	dd800e15 	stw	r22,56(sp)
   4c898:	dd400d15 	stw	r21,52(sp)
   4c89c:	dc800a15 	stw	r18,40(sp)
   4c8a0:	dc400915 	stw	r17,36(sp)
   4c8a4:	a501ffcc 	andi	r20,r20,2047
   4c8a8:	2c20703a 	and	r16,r5,r16
   4c8ac:	b827883a 	mov	r19,r23
   4c8b0:	ba403fcc 	andi	r9,r23,255
   4c8b4:	a0006026 	beq	r20,zero,4ca38 <__muldf3+0x1d0>
   4c8b8:	0081ffc4 	movi	r2,2047
   4c8bc:	202d883a 	mov	r22,r4
   4c8c0:	a0803626 	beq	r20,r2,4c99c <__muldf3+0x134>
   4c8c4:	84000434 	orhi	r16,r16,16
   4c8c8:	200ad77a 	srli	r5,r4,29
   4c8cc:	800490fa 	slli	r2,r16,3
   4c8d0:	202c90fa 	slli	r22,r4,3
   4c8d4:	a53f0044 	addi	r20,r20,-1023
   4c8d8:	28a0b03a 	or	r16,r5,r2
   4c8dc:	002b883a 	mov	r21,zero
   4c8e0:	000b883a 	mov	r5,zero
   4c8e4:	3804d53a 	srli	r2,r7,20
   4c8e8:	3838d7fa 	srli	fp,r7,31
   4c8ec:	04400434 	movhi	r17,16
   4c8f0:	8c7fffc4 	addi	r17,r17,-1
   4c8f4:	1081ffcc 	andi	r2,r2,2047
   4c8f8:	3025883a 	mov	r18,r6
   4c8fc:	3c62703a 	and	r17,r7,r17
   4c900:	e2803fcc 	andi	r10,fp,255
   4c904:	10006d26 	beq	r2,zero,4cabc <__muldf3+0x254>
   4c908:	00c1ffc4 	movi	r3,2047
   4c90c:	10c06526 	beq	r2,r3,4caa4 <__muldf3+0x23c>
   4c910:	8c400434 	orhi	r17,r17,16
   4c914:	300ed77a 	srli	r7,r6,29
   4c918:	880690fa 	slli	r3,r17,3
   4c91c:	302490fa 	slli	r18,r6,3
   4c920:	10bf0044 	addi	r2,r2,-1023
   4c924:	38e2b03a 	or	r17,r7,r3
   4c928:	000f883a 	mov	r7,zero
   4c92c:	a087883a 	add	r3,r20,r2
   4c930:	010003c4 	movi	r4,15
   4c934:	3d44b03a 	or	r2,r7,r21
   4c938:	e5ccf03a 	xor	r6,fp,r23
   4c93c:	1a000044 	addi	r8,r3,1
   4c940:	20809b36 	bltu	r4,r2,4cbb0 <__muldf3+0x348>
   4c944:	100490ba 	slli	r2,r2,2
   4c948:	01000174 	movhi	r4,5
   4c94c:	21325704 	addi	r4,r4,-13988
   4c950:	1105883a 	add	r2,r2,r4
   4c954:	10800017 	ldw	r2,0(r2)
   4c958:	1000683a 	jmp	r2
   4c95c:	0004cbb0 	cmpltui	zero,zero,4910
   4c960:	0004c9bc 	xorhi	zero,zero,4902
   4c964:	0004c9bc 	xorhi	zero,zero,4902
   4c968:	0004c9b8 	rdprs	zero,zero,4902
   4c96c:	0004cb8c 	andi	zero,zero,4910
   4c970:	0004cb8c 	andi	zero,zero,4910
   4c974:	0004cb74 	movhi	zero,4909
   4c978:	0004c9b8 	rdprs	zero,zero,4902
   4c97c:	0004cb8c 	andi	zero,zero,4910
   4c980:	0004cb74 	movhi	zero,4909
   4c984:	0004cb8c 	andi	zero,zero,4910
   4c988:	0004c9b8 	rdprs	zero,zero,4902
   4c98c:	0004cb9c 	xori	zero,zero,4910
   4c990:	0004cb9c 	xori	zero,zero,4910
   4c994:	0004cb9c 	xori	zero,zero,4910
   4c998:	0004cefc 	xorhi	zero,zero,4923
   4c99c:	2404b03a 	or	r2,r4,r16
   4c9a0:	1000711e 	bne	r2,zero,4cb68 <__muldf3+0x300>
   4c9a4:	05400204 	movi	r21,8
   4c9a8:	0021883a 	mov	r16,zero
   4c9ac:	002d883a 	mov	r22,zero
   4c9b0:	01400084 	movi	r5,2
   4c9b4:	003fcb06 	br	4c8e4 <__alt_data_end+0xfffe70e4>
   4c9b8:	500d883a 	mov	r6,r10
   4c9bc:	00800084 	movi	r2,2
   4c9c0:	38805926 	beq	r7,r2,4cb28 <__muldf3+0x2c0>
   4c9c4:	008000c4 	movi	r2,3
   4c9c8:	3881bb26 	beq	r7,r2,4d0b8 <__muldf3+0x850>
   4c9cc:	00800044 	movi	r2,1
   4c9d0:	3881961e 	bne	r7,r2,4d02c <__muldf3+0x7c4>
   4c9d4:	3027883a 	mov	r19,r6
   4c9d8:	0005883a 	mov	r2,zero
   4c9dc:	0021883a 	mov	r16,zero
   4c9e0:	002d883a 	mov	r22,zero
   4c9e4:	1004953a 	slli	r2,r2,20
   4c9e8:	98c03fcc 	andi	r3,r19,255
   4c9ec:	04400434 	movhi	r17,16
   4c9f0:	8c7fffc4 	addi	r17,r17,-1
   4c9f4:	180697fa 	slli	r3,r3,31
   4c9f8:	8460703a 	and	r16,r16,r17
   4c9fc:	80a0b03a 	or	r16,r16,r2
   4ca00:	80c6b03a 	or	r3,r16,r3
   4ca04:	b005883a 	mov	r2,r22
   4ca08:	dfc01117 	ldw	ra,68(sp)
   4ca0c:	df001017 	ldw	fp,64(sp)
   4ca10:	ddc00f17 	ldw	r23,60(sp)
   4ca14:	dd800e17 	ldw	r22,56(sp)
   4ca18:	dd400d17 	ldw	r21,52(sp)
   4ca1c:	dd000c17 	ldw	r20,48(sp)
   4ca20:	dcc00b17 	ldw	r19,44(sp)
   4ca24:	dc800a17 	ldw	r18,40(sp)
   4ca28:	dc400917 	ldw	r17,36(sp)
   4ca2c:	dc000817 	ldw	r16,32(sp)
   4ca30:	dec01204 	addi	sp,sp,72
   4ca34:	f800283a 	ret
   4ca38:	2404b03a 	or	r2,r4,r16
   4ca3c:	202b883a 	mov	r21,r4
   4ca40:	10004426 	beq	r2,zero,4cb54 <__muldf3+0x2ec>
   4ca44:	80015126 	beq	r16,zero,4cf8c <__muldf3+0x724>
   4ca48:	8009883a 	mov	r4,r16
   4ca4c:	d9800715 	stw	r6,28(sp)
   4ca50:	d9c00215 	stw	r7,8(sp)
   4ca54:	da400415 	stw	r9,16(sp)
   4ca58:	0040d900 	call	40d90 <__clzsi2>
   4ca5c:	d9800717 	ldw	r6,28(sp)
   4ca60:	d9c00217 	ldw	r7,8(sp)
   4ca64:	da400417 	ldw	r9,16(sp)
   4ca68:	113ffd44 	addi	r4,r2,-11
   4ca6c:	00c00704 	movi	r3,28
   4ca70:	19014216 	blt	r3,r4,4cf7c <__muldf3+0x714>
   4ca74:	00c00744 	movi	r3,29
   4ca78:	15bffe04 	addi	r22,r2,-8
   4ca7c:	1907c83a 	sub	r3,r3,r4
   4ca80:	85a0983a 	sll	r16,r16,r22
   4ca84:	a8c6d83a 	srl	r3,r21,r3
   4ca88:	adac983a 	sll	r22,r21,r22
   4ca8c:	1c20b03a 	or	r16,r3,r16
   4ca90:	1080fcc4 	addi	r2,r2,1011
   4ca94:	00a9c83a 	sub	r20,zero,r2
   4ca98:	002b883a 	mov	r21,zero
   4ca9c:	000b883a 	mov	r5,zero
   4caa0:	003f9006 	br	4c8e4 <__alt_data_end+0xfffe70e4>
   4caa4:	3446b03a 	or	r3,r6,r17
   4caa8:	1800281e 	bne	r3,zero,4cb4c <__muldf3+0x2e4>
   4caac:	0023883a 	mov	r17,zero
   4cab0:	0025883a 	mov	r18,zero
   4cab4:	01c00084 	movi	r7,2
   4cab8:	003f9c06 	br	4c92c <__alt_data_end+0xfffe712c>
   4cabc:	3446b03a 	or	r3,r6,r17
   4cac0:	18001e26 	beq	r3,zero,4cb3c <__muldf3+0x2d4>
   4cac4:	88012126 	beq	r17,zero,4cf4c <__muldf3+0x6e4>
   4cac8:	8809883a 	mov	r4,r17
   4cacc:	d9400215 	stw	r5,8(sp)
   4cad0:	d9800715 	stw	r6,28(sp)
   4cad4:	da400415 	stw	r9,16(sp)
   4cad8:	da800315 	stw	r10,12(sp)
   4cadc:	0040d900 	call	40d90 <__clzsi2>
   4cae0:	d9400217 	ldw	r5,8(sp)
   4cae4:	d9800717 	ldw	r6,28(sp)
   4cae8:	da400417 	ldw	r9,16(sp)
   4caec:	da800317 	ldw	r10,12(sp)
   4caf0:	113ffd44 	addi	r4,r2,-11
   4caf4:	00c00704 	movi	r3,28
   4caf8:	19011016 	blt	r3,r4,4cf3c <__muldf3+0x6d4>
   4cafc:	00c00744 	movi	r3,29
   4cb00:	14bffe04 	addi	r18,r2,-8
   4cb04:	1907c83a 	sub	r3,r3,r4
   4cb08:	8ca2983a 	sll	r17,r17,r18
   4cb0c:	30c6d83a 	srl	r3,r6,r3
   4cb10:	34a4983a 	sll	r18,r6,r18
   4cb14:	1c62b03a 	or	r17,r3,r17
   4cb18:	1080fcc4 	addi	r2,r2,1011
   4cb1c:	0085c83a 	sub	r2,zero,r2
   4cb20:	000f883a 	mov	r7,zero
   4cb24:	003f8106 	br	4c92c <__alt_data_end+0xfffe712c>
   4cb28:	3027883a 	mov	r19,r6
   4cb2c:	0081ffc4 	movi	r2,2047
   4cb30:	0021883a 	mov	r16,zero
   4cb34:	002d883a 	mov	r22,zero
   4cb38:	003faa06 	br	4c9e4 <__alt_data_end+0xfffe71e4>
   4cb3c:	0023883a 	mov	r17,zero
   4cb40:	0025883a 	mov	r18,zero
   4cb44:	01c00044 	movi	r7,1
   4cb48:	003f7806 	br	4c92c <__alt_data_end+0xfffe712c>
   4cb4c:	01c000c4 	movi	r7,3
   4cb50:	003f7606 	br	4c92c <__alt_data_end+0xfffe712c>
   4cb54:	05400104 	movi	r21,4
   4cb58:	0021883a 	mov	r16,zero
   4cb5c:	002d883a 	mov	r22,zero
   4cb60:	01400044 	movi	r5,1
   4cb64:	003f5f06 	br	4c8e4 <__alt_data_end+0xfffe70e4>
   4cb68:	05400304 	movi	r21,12
   4cb6c:	014000c4 	movi	r5,3
   4cb70:	003f5c06 	br	4c8e4 <__alt_data_end+0xfffe70e4>
   4cb74:	04000434 	movhi	r16,16
   4cb78:	0027883a 	mov	r19,zero
   4cb7c:	843fffc4 	addi	r16,r16,-1
   4cb80:	05bfffc4 	movi	r22,-1
   4cb84:	0081ffc4 	movi	r2,2047
   4cb88:	003f9606 	br	4c9e4 <__alt_data_end+0xfffe71e4>
   4cb8c:	8023883a 	mov	r17,r16
   4cb90:	b025883a 	mov	r18,r22
   4cb94:	280f883a 	mov	r7,r5
   4cb98:	003f8806 	br	4c9bc <__alt_data_end+0xfffe71bc>
   4cb9c:	8023883a 	mov	r17,r16
   4cba0:	b025883a 	mov	r18,r22
   4cba4:	480d883a 	mov	r6,r9
   4cba8:	280f883a 	mov	r7,r5
   4cbac:	003f8306 	br	4c9bc <__alt_data_end+0xfffe71bc>
   4cbb0:	b026d43a 	srli	r19,r22,16
   4cbb4:	902ed43a 	srli	r23,r18,16
   4cbb8:	b5bfffcc 	andi	r22,r22,65535
   4cbbc:	94bfffcc 	andi	r18,r18,65535
   4cbc0:	b00b883a 	mov	r5,r22
   4cbc4:	9009883a 	mov	r4,r18
   4cbc8:	d8c00515 	stw	r3,20(sp)
   4cbcc:	d9800715 	stw	r6,28(sp)
   4cbd0:	da000615 	stw	r8,24(sp)
   4cbd4:	00407040 	call	40704 <__mulsi3>
   4cbd8:	980b883a 	mov	r5,r19
   4cbdc:	9009883a 	mov	r4,r18
   4cbe0:	1029883a 	mov	r20,r2
   4cbe4:	00407040 	call	40704 <__mulsi3>
   4cbe8:	b80b883a 	mov	r5,r23
   4cbec:	9809883a 	mov	r4,r19
   4cbf0:	102b883a 	mov	r21,r2
   4cbf4:	00407040 	call	40704 <__mulsi3>
   4cbf8:	b809883a 	mov	r4,r23
   4cbfc:	b00b883a 	mov	r5,r22
   4cc00:	1039883a 	mov	fp,r2
   4cc04:	00407040 	call	40704 <__mulsi3>
   4cc08:	a008d43a 	srli	r4,r20,16
   4cc0c:	1545883a 	add	r2,r2,r21
   4cc10:	d8c00517 	ldw	r3,20(sp)
   4cc14:	2085883a 	add	r2,r4,r2
   4cc18:	d9800717 	ldw	r6,28(sp)
   4cc1c:	da000617 	ldw	r8,24(sp)
   4cc20:	1540022e 	bgeu	r2,r21,4cc2c <__muldf3+0x3c4>
   4cc24:	01000074 	movhi	r4,1
   4cc28:	e139883a 	add	fp,fp,r4
   4cc2c:	100e943a 	slli	r7,r2,16
   4cc30:	1004d43a 	srli	r2,r2,16
   4cc34:	882ad43a 	srli	r21,r17,16
   4cc38:	a53fffcc 	andi	r20,r20,65535
   4cc3c:	8c7fffcc 	andi	r17,r17,65535
   4cc40:	3d29883a 	add	r20,r7,r20
   4cc44:	b00b883a 	mov	r5,r22
   4cc48:	8809883a 	mov	r4,r17
   4cc4c:	d8c00515 	stw	r3,20(sp)
   4cc50:	d9800715 	stw	r6,28(sp)
   4cc54:	da000615 	stw	r8,24(sp)
   4cc58:	dd000115 	stw	r20,4(sp)
   4cc5c:	d8800015 	stw	r2,0(sp)
   4cc60:	00407040 	call	40704 <__mulsi3>
   4cc64:	980b883a 	mov	r5,r19
   4cc68:	8809883a 	mov	r4,r17
   4cc6c:	d8800215 	stw	r2,8(sp)
   4cc70:	00407040 	call	40704 <__mulsi3>
   4cc74:	9809883a 	mov	r4,r19
   4cc78:	a80b883a 	mov	r5,r21
   4cc7c:	1029883a 	mov	r20,r2
   4cc80:	00407040 	call	40704 <__mulsi3>
   4cc84:	b00b883a 	mov	r5,r22
   4cc88:	a809883a 	mov	r4,r21
   4cc8c:	d8800415 	stw	r2,16(sp)
   4cc90:	00407040 	call	40704 <__mulsi3>
   4cc94:	d9c00217 	ldw	r7,8(sp)
   4cc98:	1505883a 	add	r2,r2,r20
   4cc9c:	d8c00517 	ldw	r3,20(sp)
   4cca0:	3826d43a 	srli	r19,r7,16
   4cca4:	d9800717 	ldw	r6,28(sp)
   4cca8:	da000617 	ldw	r8,24(sp)
   4ccac:	9885883a 	add	r2,r19,r2
   4ccb0:	da400417 	ldw	r9,16(sp)
   4ccb4:	1500022e 	bgeu	r2,r20,4ccc0 <__muldf3+0x458>
   4ccb8:	01000074 	movhi	r4,1
   4ccbc:	4913883a 	add	r9,r9,r4
   4ccc0:	1028d43a 	srli	r20,r2,16
   4ccc4:	1004943a 	slli	r2,r2,16
   4ccc8:	802cd43a 	srli	r22,r16,16
   4cccc:	843fffcc 	andi	r16,r16,65535
   4ccd0:	3cffffcc 	andi	r19,r7,65535
   4ccd4:	9009883a 	mov	r4,r18
   4ccd8:	800b883a 	mov	r5,r16
   4ccdc:	a269883a 	add	r20,r20,r9
   4cce0:	d8c00515 	stw	r3,20(sp)
   4cce4:	d9800715 	stw	r6,28(sp)
   4cce8:	da000615 	stw	r8,24(sp)
   4ccec:	14e7883a 	add	r19,r2,r19
   4ccf0:	00407040 	call	40704 <__mulsi3>
   4ccf4:	9009883a 	mov	r4,r18
   4ccf8:	b00b883a 	mov	r5,r22
   4ccfc:	d8800315 	stw	r2,12(sp)
   4cd00:	00407040 	call	40704 <__mulsi3>
   4cd04:	b809883a 	mov	r4,r23
   4cd08:	b00b883a 	mov	r5,r22
   4cd0c:	d8800215 	stw	r2,8(sp)
   4cd10:	00407040 	call	40704 <__mulsi3>
   4cd14:	b80b883a 	mov	r5,r23
   4cd18:	8009883a 	mov	r4,r16
   4cd1c:	d8800415 	stw	r2,16(sp)
   4cd20:	00407040 	call	40704 <__mulsi3>
   4cd24:	da800317 	ldw	r10,12(sp)
   4cd28:	d9c00217 	ldw	r7,8(sp)
   4cd2c:	d9000017 	ldw	r4,0(sp)
   4cd30:	502ed43a 	srli	r23,r10,16
   4cd34:	11c5883a 	add	r2,r2,r7
   4cd38:	24e5883a 	add	r18,r4,r19
   4cd3c:	b885883a 	add	r2,r23,r2
   4cd40:	d8c00517 	ldw	r3,20(sp)
   4cd44:	d9800717 	ldw	r6,28(sp)
   4cd48:	da000617 	ldw	r8,24(sp)
   4cd4c:	da400417 	ldw	r9,16(sp)
   4cd50:	11c0022e 	bgeu	r2,r7,4cd5c <__muldf3+0x4f4>
   4cd54:	01000074 	movhi	r4,1
   4cd58:	4913883a 	add	r9,r9,r4
   4cd5c:	100ed43a 	srli	r7,r2,16
   4cd60:	1004943a 	slli	r2,r2,16
   4cd64:	55ffffcc 	andi	r23,r10,65535
   4cd68:	3a53883a 	add	r9,r7,r9
   4cd6c:	8809883a 	mov	r4,r17
   4cd70:	800b883a 	mov	r5,r16
   4cd74:	d8c00515 	stw	r3,20(sp)
   4cd78:	d9800715 	stw	r6,28(sp)
   4cd7c:	da000615 	stw	r8,24(sp)
   4cd80:	da400415 	stw	r9,16(sp)
   4cd84:	15ef883a 	add	r23,r2,r23
   4cd88:	00407040 	call	40704 <__mulsi3>
   4cd8c:	8809883a 	mov	r4,r17
   4cd90:	b00b883a 	mov	r5,r22
   4cd94:	d8800215 	stw	r2,8(sp)
   4cd98:	00407040 	call	40704 <__mulsi3>
   4cd9c:	b00b883a 	mov	r5,r22
   4cda0:	a809883a 	mov	r4,r21
   4cda4:	d8800315 	stw	r2,12(sp)
   4cda8:	00407040 	call	40704 <__mulsi3>
   4cdac:	8009883a 	mov	r4,r16
   4cdb0:	a80b883a 	mov	r5,r21
   4cdb4:	1023883a 	mov	r17,r2
   4cdb8:	00407040 	call	40704 <__mulsi3>
   4cdbc:	d9c00217 	ldw	r7,8(sp)
   4cdc0:	da800317 	ldw	r10,12(sp)
   4cdc4:	d8c00517 	ldw	r3,20(sp)
   4cdc8:	3808d43a 	srli	r4,r7,16
   4cdcc:	1285883a 	add	r2,r2,r10
   4cdd0:	d9800717 	ldw	r6,28(sp)
   4cdd4:	2085883a 	add	r2,r4,r2
   4cdd8:	da000617 	ldw	r8,24(sp)
   4cddc:	da400417 	ldw	r9,16(sp)
   4cde0:	1280022e 	bgeu	r2,r10,4cdec <__muldf3+0x584>
   4cde4:	01000074 	movhi	r4,1
   4cde8:	8923883a 	add	r17,r17,r4
   4cdec:	1008943a 	slli	r4,r2,16
   4cdf0:	39ffffcc 	andi	r7,r7,65535
   4cdf4:	e4b9883a 	add	fp,fp,r18
   4cdf8:	21cf883a 	add	r7,r4,r7
   4cdfc:	e4e7803a 	cmpltu	r19,fp,r19
   4ce00:	3d0f883a 	add	r7,r7,r20
   4ce04:	bf39883a 	add	fp,r23,fp
   4ce08:	99c9883a 	add	r4,r19,r7
   4ce0c:	e5ef803a 	cmpltu	r23,fp,r23
   4ce10:	490b883a 	add	r5,r9,r4
   4ce14:	1004d43a 	srli	r2,r2,16
   4ce18:	b965883a 	add	r18,r23,r5
   4ce1c:	24c9803a 	cmpltu	r4,r4,r19
   4ce20:	3d29803a 	cmpltu	r20,r7,r20
   4ce24:	a128b03a 	or	r20,r20,r4
   4ce28:	95ef803a 	cmpltu	r23,r18,r23
   4ce2c:	2a53803a 	cmpltu	r9,r5,r9
   4ce30:	a0a9883a 	add	r20,r20,r2
   4ce34:	4deeb03a 	or	r23,r9,r23
   4ce38:	a5ef883a 	add	r23,r20,r23
   4ce3c:	bc63883a 	add	r17,r23,r17
   4ce40:	e004927a 	slli	r2,fp,9
   4ce44:	d9000117 	ldw	r4,4(sp)
   4ce48:	882e927a 	slli	r23,r17,9
   4ce4c:	9022d5fa 	srli	r17,r18,23
   4ce50:	e038d5fa 	srli	fp,fp,23
   4ce54:	1104b03a 	or	r2,r2,r4
   4ce58:	9024927a 	slli	r18,r18,9
   4ce5c:	1004c03a 	cmpne	r2,r2,zero
   4ce60:	bc62b03a 	or	r17,r23,r17
   4ce64:	1738b03a 	or	fp,r2,fp
   4ce68:	8880402c 	andhi	r2,r17,256
   4ce6c:	e4a4b03a 	or	r18,fp,r18
   4ce70:	10000726 	beq	r2,zero,4ce90 <__muldf3+0x628>
   4ce74:	9006d07a 	srli	r3,r18,1
   4ce78:	880497fa 	slli	r2,r17,31
   4ce7c:	9480004c 	andi	r18,r18,1
   4ce80:	8822d07a 	srli	r17,r17,1
   4ce84:	1ca4b03a 	or	r18,r3,r18
   4ce88:	14a4b03a 	or	r18,r2,r18
   4ce8c:	4007883a 	mov	r3,r8
   4ce90:	1880ffc4 	addi	r2,r3,1023
   4ce94:	0080460e 	bge	zero,r2,4cfb0 <__muldf3+0x748>
   4ce98:	910001cc 	andi	r4,r18,7
   4ce9c:	20000726 	beq	r4,zero,4cebc <__muldf3+0x654>
   4cea0:	910003cc 	andi	r4,r18,15
   4cea4:	01400104 	movi	r5,4
   4cea8:	21400426 	beq	r4,r5,4cebc <__muldf3+0x654>
   4ceac:	9149883a 	add	r4,r18,r5
   4ceb0:	24a5803a 	cmpltu	r18,r4,r18
   4ceb4:	8ca3883a 	add	r17,r17,r18
   4ceb8:	2025883a 	mov	r18,r4
   4cebc:	8900402c 	andhi	r4,r17,256
   4cec0:	20000426 	beq	r4,zero,4ced4 <__muldf3+0x66c>
   4cec4:	18810004 	addi	r2,r3,1024
   4cec8:	00ffc034 	movhi	r3,65280
   4cecc:	18ffffc4 	addi	r3,r3,-1
   4ced0:	88e2703a 	and	r17,r17,r3
   4ced4:	00c1ff84 	movi	r3,2046
   4ced8:	18bf1316 	blt	r3,r2,4cb28 <__alt_data_end+0xfffe7328>
   4cedc:	882c977a 	slli	r22,r17,29
   4cee0:	9024d0fa 	srli	r18,r18,3
   4cee4:	8822927a 	slli	r17,r17,9
   4cee8:	1081ffcc 	andi	r2,r2,2047
   4ceec:	b4acb03a 	or	r22,r22,r18
   4cef0:	8820d33a 	srli	r16,r17,12
   4cef4:	3027883a 	mov	r19,r6
   4cef8:	003eba06 	br	4c9e4 <__alt_data_end+0xfffe71e4>
   4cefc:	8080022c 	andhi	r2,r16,8
   4cf00:	10000926 	beq	r2,zero,4cf28 <__muldf3+0x6c0>
   4cf04:	8880022c 	andhi	r2,r17,8
   4cf08:	1000071e 	bne	r2,zero,4cf28 <__muldf3+0x6c0>
   4cf0c:	00800434 	movhi	r2,16
   4cf10:	8c000234 	orhi	r16,r17,8
   4cf14:	10bfffc4 	addi	r2,r2,-1
   4cf18:	e027883a 	mov	r19,fp
   4cf1c:	80a0703a 	and	r16,r16,r2
   4cf20:	902d883a 	mov	r22,r18
   4cf24:	003f1706 	br	4cb84 <__alt_data_end+0xfffe7384>
   4cf28:	00800434 	movhi	r2,16
   4cf2c:	84000234 	orhi	r16,r16,8
   4cf30:	10bfffc4 	addi	r2,r2,-1
   4cf34:	80a0703a 	and	r16,r16,r2
   4cf38:	003f1206 	br	4cb84 <__alt_data_end+0xfffe7384>
   4cf3c:	147ff604 	addi	r17,r2,-40
   4cf40:	3462983a 	sll	r17,r6,r17
   4cf44:	0025883a 	mov	r18,zero
   4cf48:	003ef306 	br	4cb18 <__alt_data_end+0xfffe7318>
   4cf4c:	3009883a 	mov	r4,r6
   4cf50:	d9400215 	stw	r5,8(sp)
   4cf54:	d9800715 	stw	r6,28(sp)
   4cf58:	da400415 	stw	r9,16(sp)
   4cf5c:	da800315 	stw	r10,12(sp)
   4cf60:	0040d900 	call	40d90 <__clzsi2>
   4cf64:	10800804 	addi	r2,r2,32
   4cf68:	da800317 	ldw	r10,12(sp)
   4cf6c:	da400417 	ldw	r9,16(sp)
   4cf70:	d9800717 	ldw	r6,28(sp)
   4cf74:	d9400217 	ldw	r5,8(sp)
   4cf78:	003edd06 	br	4caf0 <__alt_data_end+0xfffe72f0>
   4cf7c:	143ff604 	addi	r16,r2,-40
   4cf80:	ac20983a 	sll	r16,r21,r16
   4cf84:	002d883a 	mov	r22,zero
   4cf88:	003ec106 	br	4ca90 <__alt_data_end+0xfffe7290>
   4cf8c:	d9800715 	stw	r6,28(sp)
   4cf90:	d9c00215 	stw	r7,8(sp)
   4cf94:	da400415 	stw	r9,16(sp)
   4cf98:	0040d900 	call	40d90 <__clzsi2>
   4cf9c:	10800804 	addi	r2,r2,32
   4cfa0:	da400417 	ldw	r9,16(sp)
   4cfa4:	d9c00217 	ldw	r7,8(sp)
   4cfa8:	d9800717 	ldw	r6,28(sp)
   4cfac:	003eae06 	br	4ca68 <__alt_data_end+0xfffe7268>
   4cfb0:	00c00044 	movi	r3,1
   4cfb4:	1887c83a 	sub	r3,r3,r2
   4cfb8:	01000e04 	movi	r4,56
   4cfbc:	20fe8516 	blt	r4,r3,4c9d4 <__alt_data_end+0xfffe71d4>
   4cfc0:	010007c4 	movi	r4,31
   4cfc4:	20c01b16 	blt	r4,r3,4d034 <__muldf3+0x7cc>
   4cfc8:	00800804 	movi	r2,32
   4cfcc:	10c5c83a 	sub	r2,r2,r3
   4cfd0:	888a983a 	sll	r5,r17,r2
   4cfd4:	90c8d83a 	srl	r4,r18,r3
   4cfd8:	9084983a 	sll	r2,r18,r2
   4cfdc:	88e2d83a 	srl	r17,r17,r3
   4cfe0:	2906b03a 	or	r3,r5,r4
   4cfe4:	1004c03a 	cmpne	r2,r2,zero
   4cfe8:	1886b03a 	or	r3,r3,r2
   4cfec:	188001cc 	andi	r2,r3,7
   4cff0:	10000726 	beq	r2,zero,4d010 <__muldf3+0x7a8>
   4cff4:	188003cc 	andi	r2,r3,15
   4cff8:	01000104 	movi	r4,4
   4cffc:	11000426 	beq	r2,r4,4d010 <__muldf3+0x7a8>
   4d000:	1805883a 	mov	r2,r3
   4d004:	10c00104 	addi	r3,r2,4
   4d008:	1885803a 	cmpltu	r2,r3,r2
   4d00c:	88a3883a 	add	r17,r17,r2
   4d010:	8880202c 	andhi	r2,r17,128
   4d014:	10001c26 	beq	r2,zero,4d088 <__muldf3+0x820>
   4d018:	3027883a 	mov	r19,r6
   4d01c:	00800044 	movi	r2,1
   4d020:	0021883a 	mov	r16,zero
   4d024:	002d883a 	mov	r22,zero
   4d028:	003e6e06 	br	4c9e4 <__alt_data_end+0xfffe71e4>
   4d02c:	4007883a 	mov	r3,r8
   4d030:	003f9706 	br	4ce90 <__alt_data_end+0xfffe7690>
   4d034:	017ff844 	movi	r5,-31
   4d038:	2885c83a 	sub	r2,r5,r2
   4d03c:	888ad83a 	srl	r5,r17,r2
   4d040:	00800804 	movi	r2,32
   4d044:	18801a26 	beq	r3,r2,4d0b0 <__muldf3+0x848>
   4d048:	01001004 	movi	r4,64
   4d04c:	20c7c83a 	sub	r3,r4,r3
   4d050:	88e2983a 	sll	r17,r17,r3
   4d054:	8ca4b03a 	or	r18,r17,r18
   4d058:	9004c03a 	cmpne	r2,r18,zero
   4d05c:	2884b03a 	or	r2,r5,r2
   4d060:	144001cc 	andi	r17,r2,7
   4d064:	88000d1e 	bne	r17,zero,4d09c <__muldf3+0x834>
   4d068:	0021883a 	mov	r16,zero
   4d06c:	102cd0fa 	srli	r22,r2,3
   4d070:	3027883a 	mov	r19,r6
   4d074:	0005883a 	mov	r2,zero
   4d078:	b46cb03a 	or	r22,r22,r17
   4d07c:	003e5906 	br	4c9e4 <__alt_data_end+0xfffe71e4>
   4d080:	1007883a 	mov	r3,r2
   4d084:	0023883a 	mov	r17,zero
   4d088:	8820927a 	slli	r16,r17,9
   4d08c:	1805883a 	mov	r2,r3
   4d090:	8822977a 	slli	r17,r17,29
   4d094:	8020d33a 	srli	r16,r16,12
   4d098:	003ff406 	br	4d06c <__alt_data_end+0xfffe786c>
   4d09c:	10c003cc 	andi	r3,r2,15
   4d0a0:	01000104 	movi	r4,4
   4d0a4:	193ff626 	beq	r3,r4,4d080 <__alt_data_end+0xfffe7880>
   4d0a8:	0023883a 	mov	r17,zero
   4d0ac:	003fd506 	br	4d004 <__alt_data_end+0xfffe7804>
   4d0b0:	0023883a 	mov	r17,zero
   4d0b4:	003fe706 	br	4d054 <__alt_data_end+0xfffe7854>
   4d0b8:	00800434 	movhi	r2,16
   4d0bc:	8c000234 	orhi	r16,r17,8
   4d0c0:	10bfffc4 	addi	r2,r2,-1
   4d0c4:	3027883a 	mov	r19,r6
   4d0c8:	80a0703a 	and	r16,r16,r2
   4d0cc:	902d883a 	mov	r22,r18
   4d0d0:	003eac06 	br	4cb84 <__alt_data_end+0xfffe7384>

0004d0d4 <__subdf3>:
   4d0d4:	02000434 	movhi	r8,16
   4d0d8:	423fffc4 	addi	r8,r8,-1
   4d0dc:	defffb04 	addi	sp,sp,-20
   4d0e0:	2a14703a 	and	r10,r5,r8
   4d0e4:	3812d53a 	srli	r9,r7,20
   4d0e8:	3a10703a 	and	r8,r7,r8
   4d0ec:	2006d77a 	srli	r3,r4,29
   4d0f0:	3004d77a 	srli	r2,r6,29
   4d0f4:	dc000015 	stw	r16,0(sp)
   4d0f8:	501490fa 	slli	r10,r10,3
   4d0fc:	2820d53a 	srli	r16,r5,20
   4d100:	401090fa 	slli	r8,r8,3
   4d104:	dc800215 	stw	r18,8(sp)
   4d108:	dc400115 	stw	r17,4(sp)
   4d10c:	dfc00415 	stw	ra,16(sp)
   4d110:	202290fa 	slli	r17,r4,3
   4d114:	dcc00315 	stw	r19,12(sp)
   4d118:	4a41ffcc 	andi	r9,r9,2047
   4d11c:	0101ffc4 	movi	r4,2047
   4d120:	2824d7fa 	srli	r18,r5,31
   4d124:	8401ffcc 	andi	r16,r16,2047
   4d128:	50c6b03a 	or	r3,r10,r3
   4d12c:	380ed7fa 	srli	r7,r7,31
   4d130:	408ab03a 	or	r5,r8,r2
   4d134:	300c90fa 	slli	r6,r6,3
   4d138:	49009626 	beq	r9,r4,4d394 <__subdf3+0x2c0>
   4d13c:	39c0005c 	xori	r7,r7,1
   4d140:	8245c83a 	sub	r2,r16,r9
   4d144:	3c807426 	beq	r7,r18,4d318 <__subdf3+0x244>
   4d148:	0080af0e 	bge	zero,r2,4d408 <__subdf3+0x334>
   4d14c:	48002a1e 	bne	r9,zero,4d1f8 <__subdf3+0x124>
   4d150:	2988b03a 	or	r4,r5,r6
   4d154:	20009a1e 	bne	r4,zero,4d3c0 <__subdf3+0x2ec>
   4d158:	888001cc 	andi	r2,r17,7
   4d15c:	10000726 	beq	r2,zero,4d17c <__subdf3+0xa8>
   4d160:	888003cc 	andi	r2,r17,15
   4d164:	01000104 	movi	r4,4
   4d168:	11000426 	beq	r2,r4,4d17c <__subdf3+0xa8>
   4d16c:	890b883a 	add	r5,r17,r4
   4d170:	2c63803a 	cmpltu	r17,r5,r17
   4d174:	1c47883a 	add	r3,r3,r17
   4d178:	2823883a 	mov	r17,r5
   4d17c:	1880202c 	andhi	r2,r3,128
   4d180:	10005926 	beq	r2,zero,4d2e8 <__subdf3+0x214>
   4d184:	84000044 	addi	r16,r16,1
   4d188:	0081ffc4 	movi	r2,2047
   4d18c:	8080be26 	beq	r16,r2,4d488 <__subdf3+0x3b4>
   4d190:	017fe034 	movhi	r5,65408
   4d194:	297fffc4 	addi	r5,r5,-1
   4d198:	1946703a 	and	r3,r3,r5
   4d19c:	1804977a 	slli	r2,r3,29
   4d1a0:	1806927a 	slli	r3,r3,9
   4d1a4:	8822d0fa 	srli	r17,r17,3
   4d1a8:	8401ffcc 	andi	r16,r16,2047
   4d1ac:	180ad33a 	srli	r5,r3,12
   4d1b0:	9100004c 	andi	r4,r18,1
   4d1b4:	1444b03a 	or	r2,r2,r17
   4d1b8:	80c1ffcc 	andi	r3,r16,2047
   4d1bc:	1820953a 	slli	r16,r3,20
   4d1c0:	20c03fcc 	andi	r3,r4,255
   4d1c4:	180897fa 	slli	r4,r3,31
   4d1c8:	00c00434 	movhi	r3,16
   4d1cc:	18ffffc4 	addi	r3,r3,-1
   4d1d0:	28c6703a 	and	r3,r5,r3
   4d1d4:	1c06b03a 	or	r3,r3,r16
   4d1d8:	1906b03a 	or	r3,r3,r4
   4d1dc:	dfc00417 	ldw	ra,16(sp)
   4d1e0:	dcc00317 	ldw	r19,12(sp)
   4d1e4:	dc800217 	ldw	r18,8(sp)
   4d1e8:	dc400117 	ldw	r17,4(sp)
   4d1ec:	dc000017 	ldw	r16,0(sp)
   4d1f0:	dec00504 	addi	sp,sp,20
   4d1f4:	f800283a 	ret
   4d1f8:	0101ffc4 	movi	r4,2047
   4d1fc:	813fd626 	beq	r16,r4,4d158 <__alt_data_end+0xfffe7958>
   4d200:	29402034 	orhi	r5,r5,128
   4d204:	01000e04 	movi	r4,56
   4d208:	2080a316 	blt	r4,r2,4d498 <__subdf3+0x3c4>
   4d20c:	010007c4 	movi	r4,31
   4d210:	2080c616 	blt	r4,r2,4d52c <__subdf3+0x458>
   4d214:	01000804 	movi	r4,32
   4d218:	2089c83a 	sub	r4,r4,r2
   4d21c:	2910983a 	sll	r8,r5,r4
   4d220:	308ed83a 	srl	r7,r6,r2
   4d224:	3108983a 	sll	r4,r6,r4
   4d228:	2884d83a 	srl	r2,r5,r2
   4d22c:	41ccb03a 	or	r6,r8,r7
   4d230:	2008c03a 	cmpne	r4,r4,zero
   4d234:	310cb03a 	or	r6,r6,r4
   4d238:	898dc83a 	sub	r6,r17,r6
   4d23c:	89a3803a 	cmpltu	r17,r17,r6
   4d240:	1887c83a 	sub	r3,r3,r2
   4d244:	1c47c83a 	sub	r3,r3,r17
   4d248:	3023883a 	mov	r17,r6
   4d24c:	1880202c 	andhi	r2,r3,128
   4d250:	10002326 	beq	r2,zero,4d2e0 <__subdf3+0x20c>
   4d254:	04c02034 	movhi	r19,128
   4d258:	9cffffc4 	addi	r19,r19,-1
   4d25c:	1ce6703a 	and	r19,r3,r19
   4d260:	98007a26 	beq	r19,zero,4d44c <__subdf3+0x378>
   4d264:	9809883a 	mov	r4,r19
   4d268:	0040d900 	call	40d90 <__clzsi2>
   4d26c:	113ffe04 	addi	r4,r2,-8
   4d270:	00c007c4 	movi	r3,31
   4d274:	19007b16 	blt	r3,r4,4d464 <__subdf3+0x390>
   4d278:	00800804 	movi	r2,32
   4d27c:	1105c83a 	sub	r2,r2,r4
   4d280:	8884d83a 	srl	r2,r17,r2
   4d284:	9906983a 	sll	r3,r19,r4
   4d288:	8922983a 	sll	r17,r17,r4
   4d28c:	10c4b03a 	or	r2,r2,r3
   4d290:	24007816 	blt	r4,r16,4d474 <__subdf3+0x3a0>
   4d294:	2421c83a 	sub	r16,r4,r16
   4d298:	80c00044 	addi	r3,r16,1
   4d29c:	010007c4 	movi	r4,31
   4d2a0:	20c09516 	blt	r4,r3,4d4f8 <__subdf3+0x424>
   4d2a4:	01400804 	movi	r5,32
   4d2a8:	28cbc83a 	sub	r5,r5,r3
   4d2ac:	88c8d83a 	srl	r4,r17,r3
   4d2b0:	8962983a 	sll	r17,r17,r5
   4d2b4:	114a983a 	sll	r5,r2,r5
   4d2b8:	10c6d83a 	srl	r3,r2,r3
   4d2bc:	8804c03a 	cmpne	r2,r17,zero
   4d2c0:	290ab03a 	or	r5,r5,r4
   4d2c4:	28a2b03a 	or	r17,r5,r2
   4d2c8:	0021883a 	mov	r16,zero
   4d2cc:	003fa206 	br	4d158 <__alt_data_end+0xfffe7958>
   4d2d0:	2090b03a 	or	r8,r4,r2
   4d2d4:	40018e26 	beq	r8,zero,4d910 <__subdf3+0x83c>
   4d2d8:	1007883a 	mov	r3,r2
   4d2dc:	2023883a 	mov	r17,r4
   4d2e0:	888001cc 	andi	r2,r17,7
   4d2e4:	103f9e1e 	bne	r2,zero,4d160 <__alt_data_end+0xfffe7960>
   4d2e8:	1804977a 	slli	r2,r3,29
   4d2ec:	8822d0fa 	srli	r17,r17,3
   4d2f0:	1810d0fa 	srli	r8,r3,3
   4d2f4:	9100004c 	andi	r4,r18,1
   4d2f8:	1444b03a 	or	r2,r2,r17
   4d2fc:	00c1ffc4 	movi	r3,2047
   4d300:	80c02826 	beq	r16,r3,4d3a4 <__subdf3+0x2d0>
   4d304:	01400434 	movhi	r5,16
   4d308:	297fffc4 	addi	r5,r5,-1
   4d30c:	80e0703a 	and	r16,r16,r3
   4d310:	414a703a 	and	r5,r8,r5
   4d314:	003fa806 	br	4d1b8 <__alt_data_end+0xfffe79b8>
   4d318:	0080630e 	bge	zero,r2,4d4a8 <__subdf3+0x3d4>
   4d31c:	48003026 	beq	r9,zero,4d3e0 <__subdf3+0x30c>
   4d320:	0101ffc4 	movi	r4,2047
   4d324:	813f8c26 	beq	r16,r4,4d158 <__alt_data_end+0xfffe7958>
   4d328:	29402034 	orhi	r5,r5,128
   4d32c:	01000e04 	movi	r4,56
   4d330:	2080a90e 	bge	r4,r2,4d5d8 <__subdf3+0x504>
   4d334:	298cb03a 	or	r6,r5,r6
   4d338:	3012c03a 	cmpne	r9,r6,zero
   4d33c:	0005883a 	mov	r2,zero
   4d340:	4c53883a 	add	r9,r9,r17
   4d344:	4c63803a 	cmpltu	r17,r9,r17
   4d348:	10c7883a 	add	r3,r2,r3
   4d34c:	88c7883a 	add	r3,r17,r3
   4d350:	4823883a 	mov	r17,r9
   4d354:	1880202c 	andhi	r2,r3,128
   4d358:	1000d026 	beq	r2,zero,4d69c <__subdf3+0x5c8>
   4d35c:	84000044 	addi	r16,r16,1
   4d360:	0081ffc4 	movi	r2,2047
   4d364:	8080fe26 	beq	r16,r2,4d760 <__subdf3+0x68c>
   4d368:	00bfe034 	movhi	r2,65408
   4d36c:	10bfffc4 	addi	r2,r2,-1
   4d370:	1886703a 	and	r3,r3,r2
   4d374:	880ad07a 	srli	r5,r17,1
   4d378:	180497fa 	slli	r2,r3,31
   4d37c:	8900004c 	andi	r4,r17,1
   4d380:	2922b03a 	or	r17,r5,r4
   4d384:	1806d07a 	srli	r3,r3,1
   4d388:	1462b03a 	or	r17,r2,r17
   4d38c:	3825883a 	mov	r18,r7
   4d390:	003f7106 	br	4d158 <__alt_data_end+0xfffe7958>
   4d394:	2984b03a 	or	r2,r5,r6
   4d398:	103f6826 	beq	r2,zero,4d13c <__alt_data_end+0xfffe793c>
   4d39c:	39c03fcc 	andi	r7,r7,255
   4d3a0:	003f6706 	br	4d140 <__alt_data_end+0xfffe7940>
   4d3a4:	4086b03a 	or	r3,r8,r2
   4d3a8:	18015226 	beq	r3,zero,4d8f4 <__subdf3+0x820>
   4d3ac:	00c00434 	movhi	r3,16
   4d3b0:	41400234 	orhi	r5,r8,8
   4d3b4:	18ffffc4 	addi	r3,r3,-1
   4d3b8:	28ca703a 	and	r5,r5,r3
   4d3bc:	003f7e06 	br	4d1b8 <__alt_data_end+0xfffe79b8>
   4d3c0:	10bfffc4 	addi	r2,r2,-1
   4d3c4:	1000491e 	bne	r2,zero,4d4ec <__subdf3+0x418>
   4d3c8:	898fc83a 	sub	r7,r17,r6
   4d3cc:	89e3803a 	cmpltu	r17,r17,r7
   4d3d0:	1947c83a 	sub	r3,r3,r5
   4d3d4:	1c47c83a 	sub	r3,r3,r17
   4d3d8:	3823883a 	mov	r17,r7
   4d3dc:	003f9b06 	br	4d24c <__alt_data_end+0xfffe7a4c>
   4d3e0:	2988b03a 	or	r4,r5,r6
   4d3e4:	203f5c26 	beq	r4,zero,4d158 <__alt_data_end+0xfffe7958>
   4d3e8:	10bfffc4 	addi	r2,r2,-1
   4d3ec:	1000931e 	bne	r2,zero,4d63c <__subdf3+0x568>
   4d3f0:	898d883a 	add	r6,r17,r6
   4d3f4:	3463803a 	cmpltu	r17,r6,r17
   4d3f8:	1947883a 	add	r3,r3,r5
   4d3fc:	88c7883a 	add	r3,r17,r3
   4d400:	3023883a 	mov	r17,r6
   4d404:	003fd306 	br	4d354 <__alt_data_end+0xfffe7b54>
   4d408:	1000541e 	bne	r2,zero,4d55c <__subdf3+0x488>
   4d40c:	80800044 	addi	r2,r16,1
   4d410:	1081ffcc 	andi	r2,r2,2047
   4d414:	01000044 	movi	r4,1
   4d418:	2080a20e 	bge	r4,r2,4d6a4 <__subdf3+0x5d0>
   4d41c:	8989c83a 	sub	r4,r17,r6
   4d420:	8905803a 	cmpltu	r2,r17,r4
   4d424:	1967c83a 	sub	r19,r3,r5
   4d428:	98a7c83a 	sub	r19,r19,r2
   4d42c:	9880202c 	andhi	r2,r19,128
   4d430:	10006326 	beq	r2,zero,4d5c0 <__subdf3+0x4ec>
   4d434:	3463c83a 	sub	r17,r6,r17
   4d438:	28c7c83a 	sub	r3,r5,r3
   4d43c:	344d803a 	cmpltu	r6,r6,r17
   4d440:	19a7c83a 	sub	r19,r3,r6
   4d444:	3825883a 	mov	r18,r7
   4d448:	983f861e 	bne	r19,zero,4d264 <__alt_data_end+0xfffe7a64>
   4d44c:	8809883a 	mov	r4,r17
   4d450:	0040d900 	call	40d90 <__clzsi2>
   4d454:	10800804 	addi	r2,r2,32
   4d458:	113ffe04 	addi	r4,r2,-8
   4d45c:	00c007c4 	movi	r3,31
   4d460:	193f850e 	bge	r3,r4,4d278 <__alt_data_end+0xfffe7a78>
   4d464:	10bff604 	addi	r2,r2,-40
   4d468:	8884983a 	sll	r2,r17,r2
   4d46c:	0023883a 	mov	r17,zero
   4d470:	243f880e 	bge	r4,r16,4d294 <__alt_data_end+0xfffe7a94>
   4d474:	00ffe034 	movhi	r3,65408
   4d478:	18ffffc4 	addi	r3,r3,-1
   4d47c:	8121c83a 	sub	r16,r16,r4
   4d480:	10c6703a 	and	r3,r2,r3
   4d484:	003f3406 	br	4d158 <__alt_data_end+0xfffe7958>
   4d488:	9100004c 	andi	r4,r18,1
   4d48c:	000b883a 	mov	r5,zero
   4d490:	0005883a 	mov	r2,zero
   4d494:	003f4806 	br	4d1b8 <__alt_data_end+0xfffe79b8>
   4d498:	298cb03a 	or	r6,r5,r6
   4d49c:	300cc03a 	cmpne	r6,r6,zero
   4d4a0:	0005883a 	mov	r2,zero
   4d4a4:	003f6406 	br	4d238 <__alt_data_end+0xfffe7a38>
   4d4a8:	10009a1e 	bne	r2,zero,4d714 <__subdf3+0x640>
   4d4ac:	82400044 	addi	r9,r16,1
   4d4b0:	4881ffcc 	andi	r2,r9,2047
   4d4b4:	02800044 	movi	r10,1
   4d4b8:	5080670e 	bge	r10,r2,4d658 <__subdf3+0x584>
   4d4bc:	0081ffc4 	movi	r2,2047
   4d4c0:	4880af26 	beq	r9,r2,4d780 <__subdf3+0x6ac>
   4d4c4:	898d883a 	add	r6,r17,r6
   4d4c8:	1945883a 	add	r2,r3,r5
   4d4cc:	3447803a 	cmpltu	r3,r6,r17
   4d4d0:	1887883a 	add	r3,r3,r2
   4d4d4:	182297fa 	slli	r17,r3,31
   4d4d8:	300cd07a 	srli	r6,r6,1
   4d4dc:	1806d07a 	srli	r3,r3,1
   4d4e0:	4821883a 	mov	r16,r9
   4d4e4:	89a2b03a 	or	r17,r17,r6
   4d4e8:	003f1b06 	br	4d158 <__alt_data_end+0xfffe7958>
   4d4ec:	0101ffc4 	movi	r4,2047
   4d4f0:	813f441e 	bne	r16,r4,4d204 <__alt_data_end+0xfffe7a04>
   4d4f4:	003f1806 	br	4d158 <__alt_data_end+0xfffe7958>
   4d4f8:	843ff844 	addi	r16,r16,-31
   4d4fc:	01400804 	movi	r5,32
   4d500:	1408d83a 	srl	r4,r2,r16
   4d504:	19405026 	beq	r3,r5,4d648 <__subdf3+0x574>
   4d508:	01401004 	movi	r5,64
   4d50c:	28c7c83a 	sub	r3,r5,r3
   4d510:	10c4983a 	sll	r2,r2,r3
   4d514:	88a2b03a 	or	r17,r17,r2
   4d518:	8822c03a 	cmpne	r17,r17,zero
   4d51c:	2462b03a 	or	r17,r4,r17
   4d520:	0007883a 	mov	r3,zero
   4d524:	0021883a 	mov	r16,zero
   4d528:	003f6d06 	br	4d2e0 <__alt_data_end+0xfffe7ae0>
   4d52c:	11fff804 	addi	r7,r2,-32
   4d530:	01000804 	movi	r4,32
   4d534:	29ced83a 	srl	r7,r5,r7
   4d538:	11004526 	beq	r2,r4,4d650 <__subdf3+0x57c>
   4d53c:	01001004 	movi	r4,64
   4d540:	2089c83a 	sub	r4,r4,r2
   4d544:	2904983a 	sll	r2,r5,r4
   4d548:	118cb03a 	or	r6,r2,r6
   4d54c:	300cc03a 	cmpne	r6,r6,zero
   4d550:	398cb03a 	or	r6,r7,r6
   4d554:	0005883a 	mov	r2,zero
   4d558:	003f3706 	br	4d238 <__alt_data_end+0xfffe7a38>
   4d55c:	80002a26 	beq	r16,zero,4d608 <__subdf3+0x534>
   4d560:	0101ffc4 	movi	r4,2047
   4d564:	49006626 	beq	r9,r4,4d700 <__subdf3+0x62c>
   4d568:	0085c83a 	sub	r2,zero,r2
   4d56c:	18c02034 	orhi	r3,r3,128
   4d570:	01000e04 	movi	r4,56
   4d574:	20807e16 	blt	r4,r2,4d770 <__subdf3+0x69c>
   4d578:	010007c4 	movi	r4,31
   4d57c:	2080e716 	blt	r4,r2,4d91c <__subdf3+0x848>
   4d580:	01000804 	movi	r4,32
   4d584:	2089c83a 	sub	r4,r4,r2
   4d588:	1914983a 	sll	r10,r3,r4
   4d58c:	8890d83a 	srl	r8,r17,r2
   4d590:	8908983a 	sll	r4,r17,r4
   4d594:	1884d83a 	srl	r2,r3,r2
   4d598:	5222b03a 	or	r17,r10,r8
   4d59c:	2006c03a 	cmpne	r3,r4,zero
   4d5a0:	88e2b03a 	or	r17,r17,r3
   4d5a4:	3463c83a 	sub	r17,r6,r17
   4d5a8:	2885c83a 	sub	r2,r5,r2
   4d5ac:	344d803a 	cmpltu	r6,r6,r17
   4d5b0:	1187c83a 	sub	r3,r2,r6
   4d5b4:	4821883a 	mov	r16,r9
   4d5b8:	3825883a 	mov	r18,r7
   4d5bc:	003f2306 	br	4d24c <__alt_data_end+0xfffe7a4c>
   4d5c0:	24d0b03a 	or	r8,r4,r19
   4d5c4:	40001b1e 	bne	r8,zero,4d634 <__subdf3+0x560>
   4d5c8:	0005883a 	mov	r2,zero
   4d5cc:	0009883a 	mov	r4,zero
   4d5d0:	0021883a 	mov	r16,zero
   4d5d4:	003f4906 	br	4d2fc <__alt_data_end+0xfffe7afc>
   4d5d8:	010007c4 	movi	r4,31
   4d5dc:	20803a16 	blt	r4,r2,4d6c8 <__subdf3+0x5f4>
   4d5e0:	01000804 	movi	r4,32
   4d5e4:	2089c83a 	sub	r4,r4,r2
   4d5e8:	2912983a 	sll	r9,r5,r4
   4d5ec:	3090d83a 	srl	r8,r6,r2
   4d5f0:	3108983a 	sll	r4,r6,r4
   4d5f4:	2884d83a 	srl	r2,r5,r2
   4d5f8:	4a12b03a 	or	r9,r9,r8
   4d5fc:	2008c03a 	cmpne	r4,r4,zero
   4d600:	4912b03a 	or	r9,r9,r4
   4d604:	003f4e06 	br	4d340 <__alt_data_end+0xfffe7b40>
   4d608:	1c48b03a 	or	r4,r3,r17
   4d60c:	20003c26 	beq	r4,zero,4d700 <__subdf3+0x62c>
   4d610:	0084303a 	nor	r2,zero,r2
   4d614:	1000381e 	bne	r2,zero,4d6f8 <__subdf3+0x624>
   4d618:	3463c83a 	sub	r17,r6,r17
   4d61c:	28c5c83a 	sub	r2,r5,r3
   4d620:	344d803a 	cmpltu	r6,r6,r17
   4d624:	1187c83a 	sub	r3,r2,r6
   4d628:	4821883a 	mov	r16,r9
   4d62c:	3825883a 	mov	r18,r7
   4d630:	003f0606 	br	4d24c <__alt_data_end+0xfffe7a4c>
   4d634:	2023883a 	mov	r17,r4
   4d638:	003f0906 	br	4d260 <__alt_data_end+0xfffe7a60>
   4d63c:	0101ffc4 	movi	r4,2047
   4d640:	813f3a1e 	bne	r16,r4,4d32c <__alt_data_end+0xfffe7b2c>
   4d644:	003ec406 	br	4d158 <__alt_data_end+0xfffe7958>
   4d648:	0005883a 	mov	r2,zero
   4d64c:	003fb106 	br	4d514 <__alt_data_end+0xfffe7d14>
   4d650:	0005883a 	mov	r2,zero
   4d654:	003fbc06 	br	4d548 <__alt_data_end+0xfffe7d48>
   4d658:	1c44b03a 	or	r2,r3,r17
   4d65c:	80008e1e 	bne	r16,zero,4d898 <__subdf3+0x7c4>
   4d660:	1000c826 	beq	r2,zero,4d984 <__subdf3+0x8b0>
   4d664:	2984b03a 	or	r2,r5,r6
   4d668:	103ebb26 	beq	r2,zero,4d158 <__alt_data_end+0xfffe7958>
   4d66c:	8989883a 	add	r4,r17,r6
   4d670:	1945883a 	add	r2,r3,r5
   4d674:	2447803a 	cmpltu	r3,r4,r17
   4d678:	1887883a 	add	r3,r3,r2
   4d67c:	1880202c 	andhi	r2,r3,128
   4d680:	2023883a 	mov	r17,r4
   4d684:	103f1626 	beq	r2,zero,4d2e0 <__alt_data_end+0xfffe7ae0>
   4d688:	00bfe034 	movhi	r2,65408
   4d68c:	10bfffc4 	addi	r2,r2,-1
   4d690:	5021883a 	mov	r16,r10
   4d694:	1886703a 	and	r3,r3,r2
   4d698:	003eaf06 	br	4d158 <__alt_data_end+0xfffe7958>
   4d69c:	3825883a 	mov	r18,r7
   4d6a0:	003f0f06 	br	4d2e0 <__alt_data_end+0xfffe7ae0>
   4d6a4:	1c44b03a 	or	r2,r3,r17
   4d6a8:	8000251e 	bne	r16,zero,4d740 <__subdf3+0x66c>
   4d6ac:	1000661e 	bne	r2,zero,4d848 <__subdf3+0x774>
   4d6b0:	2990b03a 	or	r8,r5,r6
   4d6b4:	40009626 	beq	r8,zero,4d910 <__subdf3+0x83c>
   4d6b8:	2807883a 	mov	r3,r5
   4d6bc:	3023883a 	mov	r17,r6
   4d6c0:	3825883a 	mov	r18,r7
   4d6c4:	003ea406 	br	4d158 <__alt_data_end+0xfffe7958>
   4d6c8:	127ff804 	addi	r9,r2,-32
   4d6cc:	01000804 	movi	r4,32
   4d6d0:	2a52d83a 	srl	r9,r5,r9
   4d6d4:	11008c26 	beq	r2,r4,4d908 <__subdf3+0x834>
   4d6d8:	01001004 	movi	r4,64
   4d6dc:	2085c83a 	sub	r2,r4,r2
   4d6e0:	2884983a 	sll	r2,r5,r2
   4d6e4:	118cb03a 	or	r6,r2,r6
   4d6e8:	300cc03a 	cmpne	r6,r6,zero
   4d6ec:	4992b03a 	or	r9,r9,r6
   4d6f0:	0005883a 	mov	r2,zero
   4d6f4:	003f1206 	br	4d340 <__alt_data_end+0xfffe7b40>
   4d6f8:	0101ffc4 	movi	r4,2047
   4d6fc:	493f9c1e 	bne	r9,r4,4d570 <__alt_data_end+0xfffe7d70>
   4d700:	2807883a 	mov	r3,r5
   4d704:	3023883a 	mov	r17,r6
   4d708:	4821883a 	mov	r16,r9
   4d70c:	3825883a 	mov	r18,r7
   4d710:	003e9106 	br	4d158 <__alt_data_end+0xfffe7958>
   4d714:	80001f1e 	bne	r16,zero,4d794 <__subdf3+0x6c0>
   4d718:	1c48b03a 	or	r4,r3,r17
   4d71c:	20005a26 	beq	r4,zero,4d888 <__subdf3+0x7b4>
   4d720:	0084303a 	nor	r2,zero,r2
   4d724:	1000561e 	bne	r2,zero,4d880 <__subdf3+0x7ac>
   4d728:	89a3883a 	add	r17,r17,r6
   4d72c:	1945883a 	add	r2,r3,r5
   4d730:	898d803a 	cmpltu	r6,r17,r6
   4d734:	3087883a 	add	r3,r6,r2
   4d738:	4821883a 	mov	r16,r9
   4d73c:	003f0506 	br	4d354 <__alt_data_end+0xfffe7b54>
   4d740:	10002b1e 	bne	r2,zero,4d7f0 <__subdf3+0x71c>
   4d744:	2984b03a 	or	r2,r5,r6
   4d748:	10008026 	beq	r2,zero,4d94c <__subdf3+0x878>
   4d74c:	2807883a 	mov	r3,r5
   4d750:	3023883a 	mov	r17,r6
   4d754:	3825883a 	mov	r18,r7
   4d758:	0401ffc4 	movi	r16,2047
   4d75c:	003e7e06 	br	4d158 <__alt_data_end+0xfffe7958>
   4d760:	3809883a 	mov	r4,r7
   4d764:	0011883a 	mov	r8,zero
   4d768:	0005883a 	mov	r2,zero
   4d76c:	003ee306 	br	4d2fc <__alt_data_end+0xfffe7afc>
   4d770:	1c62b03a 	or	r17,r3,r17
   4d774:	8822c03a 	cmpne	r17,r17,zero
   4d778:	0005883a 	mov	r2,zero
   4d77c:	003f8906 	br	4d5a4 <__alt_data_end+0xfffe7da4>
   4d780:	3809883a 	mov	r4,r7
   4d784:	4821883a 	mov	r16,r9
   4d788:	0011883a 	mov	r8,zero
   4d78c:	0005883a 	mov	r2,zero
   4d790:	003eda06 	br	4d2fc <__alt_data_end+0xfffe7afc>
   4d794:	0101ffc4 	movi	r4,2047
   4d798:	49003b26 	beq	r9,r4,4d888 <__subdf3+0x7b4>
   4d79c:	0085c83a 	sub	r2,zero,r2
   4d7a0:	18c02034 	orhi	r3,r3,128
   4d7a4:	01000e04 	movi	r4,56
   4d7a8:	20806e16 	blt	r4,r2,4d964 <__subdf3+0x890>
   4d7ac:	010007c4 	movi	r4,31
   4d7b0:	20807716 	blt	r4,r2,4d990 <__subdf3+0x8bc>
   4d7b4:	01000804 	movi	r4,32
   4d7b8:	2089c83a 	sub	r4,r4,r2
   4d7bc:	1914983a 	sll	r10,r3,r4
   4d7c0:	8890d83a 	srl	r8,r17,r2
   4d7c4:	8908983a 	sll	r4,r17,r4
   4d7c8:	1884d83a 	srl	r2,r3,r2
   4d7cc:	5222b03a 	or	r17,r10,r8
   4d7d0:	2006c03a 	cmpne	r3,r4,zero
   4d7d4:	88e2b03a 	or	r17,r17,r3
   4d7d8:	89a3883a 	add	r17,r17,r6
   4d7dc:	1145883a 	add	r2,r2,r5
   4d7e0:	898d803a 	cmpltu	r6,r17,r6
   4d7e4:	3087883a 	add	r3,r6,r2
   4d7e8:	4821883a 	mov	r16,r9
   4d7ec:	003ed906 	br	4d354 <__alt_data_end+0xfffe7b54>
   4d7f0:	2984b03a 	or	r2,r5,r6
   4d7f4:	10004226 	beq	r2,zero,4d900 <__subdf3+0x82c>
   4d7f8:	1808d0fa 	srli	r4,r3,3
   4d7fc:	8822d0fa 	srli	r17,r17,3
   4d800:	1806977a 	slli	r3,r3,29
   4d804:	2080022c 	andhi	r2,r4,8
   4d808:	1c62b03a 	or	r17,r3,r17
   4d80c:	10000826 	beq	r2,zero,4d830 <__subdf3+0x75c>
   4d810:	2812d0fa 	srli	r9,r5,3
   4d814:	4880022c 	andhi	r2,r9,8
   4d818:	1000051e 	bne	r2,zero,4d830 <__subdf3+0x75c>
   4d81c:	300cd0fa 	srli	r6,r6,3
   4d820:	2804977a 	slli	r2,r5,29
   4d824:	4809883a 	mov	r4,r9
   4d828:	3825883a 	mov	r18,r7
   4d82c:	11a2b03a 	or	r17,r2,r6
   4d830:	8806d77a 	srli	r3,r17,29
   4d834:	200890fa 	slli	r4,r4,3
   4d838:	882290fa 	slli	r17,r17,3
   4d83c:	0401ffc4 	movi	r16,2047
   4d840:	1906b03a 	or	r3,r3,r4
   4d844:	003e4406 	br	4d158 <__alt_data_end+0xfffe7958>
   4d848:	2984b03a 	or	r2,r5,r6
   4d84c:	103e4226 	beq	r2,zero,4d158 <__alt_data_end+0xfffe7958>
   4d850:	8989c83a 	sub	r4,r17,r6
   4d854:	8911803a 	cmpltu	r8,r17,r4
   4d858:	1945c83a 	sub	r2,r3,r5
   4d85c:	1205c83a 	sub	r2,r2,r8
   4d860:	1200202c 	andhi	r8,r2,128
   4d864:	403e9a26 	beq	r8,zero,4d2d0 <__alt_data_end+0xfffe7ad0>
   4d868:	3463c83a 	sub	r17,r6,r17
   4d86c:	28c5c83a 	sub	r2,r5,r3
   4d870:	344d803a 	cmpltu	r6,r6,r17
   4d874:	1187c83a 	sub	r3,r2,r6
   4d878:	3825883a 	mov	r18,r7
   4d87c:	003e3606 	br	4d158 <__alt_data_end+0xfffe7958>
   4d880:	0101ffc4 	movi	r4,2047
   4d884:	493fc71e 	bne	r9,r4,4d7a4 <__alt_data_end+0xfffe7fa4>
   4d888:	2807883a 	mov	r3,r5
   4d88c:	3023883a 	mov	r17,r6
   4d890:	4821883a 	mov	r16,r9
   4d894:	003e3006 	br	4d158 <__alt_data_end+0xfffe7958>
   4d898:	10003626 	beq	r2,zero,4d974 <__subdf3+0x8a0>
   4d89c:	2984b03a 	or	r2,r5,r6
   4d8a0:	10001726 	beq	r2,zero,4d900 <__subdf3+0x82c>
   4d8a4:	1808d0fa 	srli	r4,r3,3
   4d8a8:	8822d0fa 	srli	r17,r17,3
   4d8ac:	1806977a 	slli	r3,r3,29
   4d8b0:	2080022c 	andhi	r2,r4,8
   4d8b4:	1c62b03a 	or	r17,r3,r17
   4d8b8:	10000726 	beq	r2,zero,4d8d8 <__subdf3+0x804>
   4d8bc:	2812d0fa 	srli	r9,r5,3
   4d8c0:	4880022c 	andhi	r2,r9,8
   4d8c4:	1000041e 	bne	r2,zero,4d8d8 <__subdf3+0x804>
   4d8c8:	300cd0fa 	srli	r6,r6,3
   4d8cc:	2804977a 	slli	r2,r5,29
   4d8d0:	4809883a 	mov	r4,r9
   4d8d4:	11a2b03a 	or	r17,r2,r6
   4d8d8:	8806d77a 	srli	r3,r17,29
   4d8dc:	200890fa 	slli	r4,r4,3
   4d8e0:	882290fa 	slli	r17,r17,3
   4d8e4:	3825883a 	mov	r18,r7
   4d8e8:	1906b03a 	or	r3,r3,r4
   4d8ec:	0401ffc4 	movi	r16,2047
   4d8f0:	003e1906 	br	4d158 <__alt_data_end+0xfffe7958>
   4d8f4:	000b883a 	mov	r5,zero
   4d8f8:	0005883a 	mov	r2,zero
   4d8fc:	003e2e06 	br	4d1b8 <__alt_data_end+0xfffe79b8>
   4d900:	0401ffc4 	movi	r16,2047
   4d904:	003e1406 	br	4d158 <__alt_data_end+0xfffe7958>
   4d908:	0005883a 	mov	r2,zero
   4d90c:	003f7506 	br	4d6e4 <__alt_data_end+0xfffe7ee4>
   4d910:	0005883a 	mov	r2,zero
   4d914:	0009883a 	mov	r4,zero
   4d918:	003e7806 	br	4d2fc <__alt_data_end+0xfffe7afc>
   4d91c:	123ff804 	addi	r8,r2,-32
   4d920:	01000804 	movi	r4,32
   4d924:	1a10d83a 	srl	r8,r3,r8
   4d928:	11002526 	beq	r2,r4,4d9c0 <__subdf3+0x8ec>
   4d92c:	01001004 	movi	r4,64
   4d930:	2085c83a 	sub	r2,r4,r2
   4d934:	1884983a 	sll	r2,r3,r2
   4d938:	1444b03a 	or	r2,r2,r17
   4d93c:	1004c03a 	cmpne	r2,r2,zero
   4d940:	40a2b03a 	or	r17,r8,r2
   4d944:	0005883a 	mov	r2,zero
   4d948:	003f1606 	br	4d5a4 <__alt_data_end+0xfffe7da4>
   4d94c:	02000434 	movhi	r8,16
   4d950:	0009883a 	mov	r4,zero
   4d954:	423fffc4 	addi	r8,r8,-1
   4d958:	00bfffc4 	movi	r2,-1
   4d95c:	0401ffc4 	movi	r16,2047
   4d960:	003e6606 	br	4d2fc <__alt_data_end+0xfffe7afc>
   4d964:	1c62b03a 	or	r17,r3,r17
   4d968:	8822c03a 	cmpne	r17,r17,zero
   4d96c:	0005883a 	mov	r2,zero
   4d970:	003f9906 	br	4d7d8 <__alt_data_end+0xfffe7fd8>
   4d974:	2807883a 	mov	r3,r5
   4d978:	3023883a 	mov	r17,r6
   4d97c:	0401ffc4 	movi	r16,2047
   4d980:	003df506 	br	4d158 <__alt_data_end+0xfffe7958>
   4d984:	2807883a 	mov	r3,r5
   4d988:	3023883a 	mov	r17,r6
   4d98c:	003df206 	br	4d158 <__alt_data_end+0xfffe7958>
   4d990:	123ff804 	addi	r8,r2,-32
   4d994:	01000804 	movi	r4,32
   4d998:	1a10d83a 	srl	r8,r3,r8
   4d99c:	11000a26 	beq	r2,r4,4d9c8 <__subdf3+0x8f4>
   4d9a0:	01001004 	movi	r4,64
   4d9a4:	2085c83a 	sub	r2,r4,r2
   4d9a8:	1884983a 	sll	r2,r3,r2
   4d9ac:	1444b03a 	or	r2,r2,r17
   4d9b0:	1004c03a 	cmpne	r2,r2,zero
   4d9b4:	40a2b03a 	or	r17,r8,r2
   4d9b8:	0005883a 	mov	r2,zero
   4d9bc:	003f8606 	br	4d7d8 <__alt_data_end+0xfffe7fd8>
   4d9c0:	0005883a 	mov	r2,zero
   4d9c4:	003fdc06 	br	4d938 <__alt_data_end+0xfffe8138>
   4d9c8:	0005883a 	mov	r2,zero
   4d9cc:	003ff706 	br	4d9ac <__alt_data_end+0xfffe81ac>

0004d9d0 <__fixdfsi>:
   4d9d0:	280cd53a 	srli	r6,r5,20
   4d9d4:	00c00434 	movhi	r3,16
   4d9d8:	18ffffc4 	addi	r3,r3,-1
   4d9dc:	3181ffcc 	andi	r6,r6,2047
   4d9e0:	01c0ff84 	movi	r7,1022
   4d9e4:	28c6703a 	and	r3,r5,r3
   4d9e8:	280ad7fa 	srli	r5,r5,31
   4d9ec:	3980120e 	bge	r7,r6,4da38 <__fixdfsi+0x68>
   4d9f0:	00810744 	movi	r2,1053
   4d9f4:	11800c16 	blt	r2,r6,4da28 <__fixdfsi+0x58>
   4d9f8:	00810cc4 	movi	r2,1075
   4d9fc:	1185c83a 	sub	r2,r2,r6
   4da00:	01c007c4 	movi	r7,31
   4da04:	18c00434 	orhi	r3,r3,16
   4da08:	38800d16 	blt	r7,r2,4da40 <__fixdfsi+0x70>
   4da0c:	31befb44 	addi	r6,r6,-1043
   4da10:	2084d83a 	srl	r2,r4,r2
   4da14:	1986983a 	sll	r3,r3,r6
   4da18:	1884b03a 	or	r2,r3,r2
   4da1c:	28000726 	beq	r5,zero,4da3c <__fixdfsi+0x6c>
   4da20:	0085c83a 	sub	r2,zero,r2
   4da24:	f800283a 	ret
   4da28:	00a00034 	movhi	r2,32768
   4da2c:	10bfffc4 	addi	r2,r2,-1
   4da30:	2885883a 	add	r2,r5,r2
   4da34:	f800283a 	ret
   4da38:	0005883a 	mov	r2,zero
   4da3c:	f800283a 	ret
   4da40:	008104c4 	movi	r2,1043
   4da44:	1185c83a 	sub	r2,r2,r6
   4da48:	1884d83a 	srl	r2,r3,r2
   4da4c:	003ff306 	br	4da1c <__alt_data_end+0xfffe821c>

0004da50 <__floatsidf>:
   4da50:	defffd04 	addi	sp,sp,-12
   4da54:	dfc00215 	stw	ra,8(sp)
   4da58:	dc400115 	stw	r17,4(sp)
   4da5c:	dc000015 	stw	r16,0(sp)
   4da60:	20002b26 	beq	r4,zero,4db10 <__floatsidf+0xc0>
   4da64:	2023883a 	mov	r17,r4
   4da68:	2020d7fa 	srli	r16,r4,31
   4da6c:	20002d16 	blt	r4,zero,4db24 <__floatsidf+0xd4>
   4da70:	8809883a 	mov	r4,r17
   4da74:	0040d900 	call	40d90 <__clzsi2>
   4da78:	01410784 	movi	r5,1054
   4da7c:	288bc83a 	sub	r5,r5,r2
   4da80:	01010cc4 	movi	r4,1075
   4da84:	2149c83a 	sub	r4,r4,r5
   4da88:	00c007c4 	movi	r3,31
   4da8c:	1900160e 	bge	r3,r4,4dae8 <__floatsidf+0x98>
   4da90:	00c104c4 	movi	r3,1043
   4da94:	1947c83a 	sub	r3,r3,r5
   4da98:	88c6983a 	sll	r3,r17,r3
   4da9c:	00800434 	movhi	r2,16
   4daa0:	10bfffc4 	addi	r2,r2,-1
   4daa4:	1886703a 	and	r3,r3,r2
   4daa8:	2941ffcc 	andi	r5,r5,2047
   4daac:	800d883a 	mov	r6,r16
   4dab0:	0005883a 	mov	r2,zero
   4dab4:	280a953a 	slli	r5,r5,20
   4dab8:	31803fcc 	andi	r6,r6,255
   4dabc:	01000434 	movhi	r4,16
   4dac0:	300c97fa 	slli	r6,r6,31
   4dac4:	213fffc4 	addi	r4,r4,-1
   4dac8:	1906703a 	and	r3,r3,r4
   4dacc:	1946b03a 	or	r3,r3,r5
   4dad0:	1986b03a 	or	r3,r3,r6
   4dad4:	dfc00217 	ldw	ra,8(sp)
   4dad8:	dc400117 	ldw	r17,4(sp)
   4dadc:	dc000017 	ldw	r16,0(sp)
   4dae0:	dec00304 	addi	sp,sp,12
   4dae4:	f800283a 	ret
   4dae8:	00c002c4 	movi	r3,11
   4daec:	1887c83a 	sub	r3,r3,r2
   4daf0:	88c6d83a 	srl	r3,r17,r3
   4daf4:	8904983a 	sll	r2,r17,r4
   4daf8:	01000434 	movhi	r4,16
   4dafc:	213fffc4 	addi	r4,r4,-1
   4db00:	2941ffcc 	andi	r5,r5,2047
   4db04:	1906703a 	and	r3,r3,r4
   4db08:	800d883a 	mov	r6,r16
   4db0c:	003fe906 	br	4dab4 <__alt_data_end+0xfffe82b4>
   4db10:	000d883a 	mov	r6,zero
   4db14:	000b883a 	mov	r5,zero
   4db18:	0007883a 	mov	r3,zero
   4db1c:	0005883a 	mov	r2,zero
   4db20:	003fe406 	br	4dab4 <__alt_data_end+0xfffe82b4>
   4db24:	0123c83a 	sub	r17,zero,r4
   4db28:	003fd106 	br	4da70 <__alt_data_end+0xfffe8270>

0004db2c <__floatunsidf>:
   4db2c:	defffe04 	addi	sp,sp,-8
   4db30:	dc000015 	stw	r16,0(sp)
   4db34:	dfc00115 	stw	ra,4(sp)
   4db38:	2021883a 	mov	r16,r4
   4db3c:	20002226 	beq	r4,zero,4dbc8 <__floatunsidf+0x9c>
   4db40:	0040d900 	call	40d90 <__clzsi2>
   4db44:	01010784 	movi	r4,1054
   4db48:	2089c83a 	sub	r4,r4,r2
   4db4c:	01810cc4 	movi	r6,1075
   4db50:	310dc83a 	sub	r6,r6,r4
   4db54:	00c007c4 	movi	r3,31
   4db58:	1980120e 	bge	r3,r6,4dba4 <__floatunsidf+0x78>
   4db5c:	00c104c4 	movi	r3,1043
   4db60:	1907c83a 	sub	r3,r3,r4
   4db64:	80ca983a 	sll	r5,r16,r3
   4db68:	00800434 	movhi	r2,16
   4db6c:	10bfffc4 	addi	r2,r2,-1
   4db70:	2101ffcc 	andi	r4,r4,2047
   4db74:	0021883a 	mov	r16,zero
   4db78:	288a703a 	and	r5,r5,r2
   4db7c:	2008953a 	slli	r4,r4,20
   4db80:	00c00434 	movhi	r3,16
   4db84:	18ffffc4 	addi	r3,r3,-1
   4db88:	28c6703a 	and	r3,r5,r3
   4db8c:	8005883a 	mov	r2,r16
   4db90:	1906b03a 	or	r3,r3,r4
   4db94:	dfc00117 	ldw	ra,4(sp)
   4db98:	dc000017 	ldw	r16,0(sp)
   4db9c:	dec00204 	addi	sp,sp,8
   4dba0:	f800283a 	ret
   4dba4:	00c002c4 	movi	r3,11
   4dba8:	188bc83a 	sub	r5,r3,r2
   4dbac:	814ad83a 	srl	r5,r16,r5
   4dbb0:	00c00434 	movhi	r3,16
   4dbb4:	18ffffc4 	addi	r3,r3,-1
   4dbb8:	81a0983a 	sll	r16,r16,r6
   4dbbc:	2101ffcc 	andi	r4,r4,2047
   4dbc0:	28ca703a 	and	r5,r5,r3
   4dbc4:	003fed06 	br	4db7c <__alt_data_end+0xfffe837c>
   4dbc8:	0009883a 	mov	r4,zero
   4dbcc:	000b883a 	mov	r5,zero
   4dbd0:	003fea06 	br	4db7c <__alt_data_end+0xfffe837c>

0004dbd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4dbd4:	defffe04 	addi	sp,sp,-8
   4dbd8:	dfc00115 	stw	ra,4(sp)
   4dbdc:	df000015 	stw	fp,0(sp)
   4dbe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4dbe4:	d0a00c17 	ldw	r2,-32720(gp)
   4dbe8:	10000326 	beq	r2,zero,4dbf8 <alt_get_errno+0x24>
   4dbec:	d0a00c17 	ldw	r2,-32720(gp)
   4dbf0:	103ee83a 	callr	r2
   4dbf4:	00000106 	br	4dbfc <alt_get_errno+0x28>
   4dbf8:	d0a71804 	addi	r2,gp,-25504
}
   4dbfc:	e037883a 	mov	sp,fp
   4dc00:	dfc00117 	ldw	ra,4(sp)
   4dc04:	df000017 	ldw	fp,0(sp)
   4dc08:	dec00204 	addi	sp,sp,8
   4dc0c:	f800283a 	ret

0004dc10 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4dc10:	defffb04 	addi	sp,sp,-20
   4dc14:	dfc00415 	stw	ra,16(sp)
   4dc18:	df000315 	stw	fp,12(sp)
   4dc1c:	df000304 	addi	fp,sp,12
   4dc20:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4dc24:	e0bfff17 	ldw	r2,-4(fp)
   4dc28:	10000816 	blt	r2,zero,4dc4c <close+0x3c>
   4dc2c:	01400304 	movi	r5,12
   4dc30:	e13fff17 	ldw	r4,-4(fp)
   4dc34:	00407040 	call	40704 <__mulsi3>
   4dc38:	1007883a 	mov	r3,r2
   4dc3c:	008001b4 	movhi	r2,6
   4dc40:	10a7c804 	addi	r2,r2,-24800
   4dc44:	1885883a 	add	r2,r3,r2
   4dc48:	00000106 	br	4dc50 <close+0x40>
   4dc4c:	0005883a 	mov	r2,zero
   4dc50:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4dc54:	e0bffd17 	ldw	r2,-12(fp)
   4dc58:	10001926 	beq	r2,zero,4dcc0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4dc5c:	e0bffd17 	ldw	r2,-12(fp)
   4dc60:	10800017 	ldw	r2,0(r2)
   4dc64:	10800417 	ldw	r2,16(r2)
   4dc68:	10000626 	beq	r2,zero,4dc84 <close+0x74>
   4dc6c:	e0bffd17 	ldw	r2,-12(fp)
   4dc70:	10800017 	ldw	r2,0(r2)
   4dc74:	10800417 	ldw	r2,16(r2)
   4dc78:	e13ffd17 	ldw	r4,-12(fp)
   4dc7c:	103ee83a 	callr	r2
   4dc80:	00000106 	br	4dc88 <close+0x78>
   4dc84:	0005883a 	mov	r2,zero
   4dc88:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4dc8c:	e13fff17 	ldw	r4,-4(fp)
   4dc90:	004e5900 	call	4e590 <alt_release_fd>
    if (rval < 0)
   4dc94:	e0bffe17 	ldw	r2,-8(fp)
   4dc98:	1000070e 	bge	r2,zero,4dcb8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   4dc9c:	004dbd40 	call	4dbd4 <alt_get_errno>
   4dca0:	1007883a 	mov	r3,r2
   4dca4:	e0bffe17 	ldw	r2,-8(fp)
   4dca8:	0085c83a 	sub	r2,zero,r2
   4dcac:	18800015 	stw	r2,0(r3)
      return -1;
   4dcb0:	00bfffc4 	movi	r2,-1
   4dcb4:	00000706 	br	4dcd4 <close+0xc4>
    }
    return 0;
   4dcb8:	0005883a 	mov	r2,zero
   4dcbc:	00000506 	br	4dcd4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4dcc0:	004dbd40 	call	4dbd4 <alt_get_errno>
   4dcc4:	1007883a 	mov	r3,r2
   4dcc8:	00801444 	movi	r2,81
   4dccc:	18800015 	stw	r2,0(r3)
    return -1;
   4dcd0:	00bfffc4 	movi	r2,-1
  }
}
   4dcd4:	e037883a 	mov	sp,fp
   4dcd8:	dfc00117 	ldw	ra,4(sp)
   4dcdc:	df000017 	ldw	fp,0(sp)
   4dce0:	dec00204 	addi	sp,sp,8
   4dce4:	f800283a 	ret

0004dce8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4dce8:	defffc04 	addi	sp,sp,-16
   4dcec:	df000315 	stw	fp,12(sp)
   4dcf0:	df000304 	addi	fp,sp,12
   4dcf4:	e13ffd15 	stw	r4,-12(fp)
   4dcf8:	e17ffe15 	stw	r5,-8(fp)
   4dcfc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4dd00:	e0bfff17 	ldw	r2,-4(fp)
}
   4dd04:	e037883a 	mov	sp,fp
   4dd08:	df000017 	ldw	fp,0(sp)
   4dd0c:	dec00104 	addi	sp,sp,4
   4dd10:	f800283a 	ret

0004dd14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4dd14:	defffe04 	addi	sp,sp,-8
   4dd18:	dfc00115 	stw	ra,4(sp)
   4dd1c:	df000015 	stw	fp,0(sp)
   4dd20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4dd24:	d0a00c17 	ldw	r2,-32720(gp)
   4dd28:	10000326 	beq	r2,zero,4dd38 <alt_get_errno+0x24>
   4dd2c:	d0a00c17 	ldw	r2,-32720(gp)
   4dd30:	103ee83a 	callr	r2
   4dd34:	00000106 	br	4dd3c <alt_get_errno+0x28>
   4dd38:	d0a71804 	addi	r2,gp,-25504
}
   4dd3c:	e037883a 	mov	sp,fp
   4dd40:	dfc00117 	ldw	ra,4(sp)
   4dd44:	df000017 	ldw	fp,0(sp)
   4dd48:	dec00204 	addi	sp,sp,8
   4dd4c:	f800283a 	ret

0004dd50 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4dd50:	defffb04 	addi	sp,sp,-20
   4dd54:	dfc00415 	stw	ra,16(sp)
   4dd58:	df000315 	stw	fp,12(sp)
   4dd5c:	df000304 	addi	fp,sp,12
   4dd60:	e13ffe15 	stw	r4,-8(fp)
   4dd64:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4dd68:	e0bffe17 	ldw	r2,-8(fp)
   4dd6c:	10000816 	blt	r2,zero,4dd90 <fstat+0x40>
   4dd70:	01400304 	movi	r5,12
   4dd74:	e13ffe17 	ldw	r4,-8(fp)
   4dd78:	00407040 	call	40704 <__mulsi3>
   4dd7c:	1007883a 	mov	r3,r2
   4dd80:	008001b4 	movhi	r2,6
   4dd84:	10a7c804 	addi	r2,r2,-24800
   4dd88:	1885883a 	add	r2,r3,r2
   4dd8c:	00000106 	br	4dd94 <fstat+0x44>
   4dd90:	0005883a 	mov	r2,zero
   4dd94:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4dd98:	e0bffd17 	ldw	r2,-12(fp)
   4dd9c:	10001026 	beq	r2,zero,4dde0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4dda0:	e0bffd17 	ldw	r2,-12(fp)
   4dda4:	10800017 	ldw	r2,0(r2)
   4dda8:	10800817 	ldw	r2,32(r2)
   4ddac:	10000726 	beq	r2,zero,4ddcc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   4ddb0:	e0bffd17 	ldw	r2,-12(fp)
   4ddb4:	10800017 	ldw	r2,0(r2)
   4ddb8:	10800817 	ldw	r2,32(r2)
   4ddbc:	e17fff17 	ldw	r5,-4(fp)
   4ddc0:	e13ffd17 	ldw	r4,-12(fp)
   4ddc4:	103ee83a 	callr	r2
   4ddc8:	00000a06 	br	4ddf4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4ddcc:	e0bfff17 	ldw	r2,-4(fp)
   4ddd0:	00c80004 	movi	r3,8192
   4ddd4:	10c00115 	stw	r3,4(r2)
      return 0;
   4ddd8:	0005883a 	mov	r2,zero
   4dddc:	00000506 	br	4ddf4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4dde0:	004dd140 	call	4dd14 <alt_get_errno>
   4dde4:	1007883a 	mov	r3,r2
   4dde8:	00801444 	movi	r2,81
   4ddec:	18800015 	stw	r2,0(r3)
    return -1;
   4ddf0:	00bfffc4 	movi	r2,-1
  }
}
   4ddf4:	e037883a 	mov	sp,fp
   4ddf8:	dfc00117 	ldw	ra,4(sp)
   4ddfc:	df000017 	ldw	fp,0(sp)
   4de00:	dec00204 	addi	sp,sp,8
   4de04:	f800283a 	ret

0004de08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4de08:	defff904 	addi	sp,sp,-28
   4de0c:	dfc00615 	stw	ra,24(sp)
   4de10:	df000515 	stw	fp,20(sp)
   4de14:	df000504 	addi	fp,sp,20
   4de18:	e13ffc15 	stw	r4,-16(fp)
   4de1c:	e17ffd15 	stw	r5,-12(fp)
   4de20:	e1bffe15 	stw	r6,-8(fp)
   4de24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4de28:	e0800217 	ldw	r2,8(fp)
   4de2c:	d8800015 	stw	r2,0(sp)
   4de30:	e1ffff17 	ldw	r7,-4(fp)
   4de34:	e1bffe17 	ldw	r6,-8(fp)
   4de38:	e17ffd17 	ldw	r5,-12(fp)
   4de3c:	e13ffc17 	ldw	r4,-16(fp)
   4de40:	004dfb80 	call	4dfb8 <alt_iic_isr_register>
}  
   4de44:	e037883a 	mov	sp,fp
   4de48:	dfc00117 	ldw	ra,4(sp)
   4de4c:	df000017 	ldw	fp,0(sp)
   4de50:	dec00204 	addi	sp,sp,8
   4de54:	f800283a 	ret

0004de58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4de58:	defff904 	addi	sp,sp,-28
   4de5c:	df000615 	stw	fp,24(sp)
   4de60:	df000604 	addi	fp,sp,24
   4de64:	e13ffe15 	stw	r4,-8(fp)
   4de68:	e17fff15 	stw	r5,-4(fp)
   4de6c:	e0bfff17 	ldw	r2,-4(fp)
   4de70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4de74:	0005303a 	rdctl	r2,status
   4de78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4de7c:	e0fffb17 	ldw	r3,-20(fp)
   4de80:	00bfff84 	movi	r2,-2
   4de84:	1884703a 	and	r2,r3,r2
   4de88:	1001703a 	wrctl	status,r2
  
  return context;
   4de8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4de90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4de94:	00c00044 	movi	r3,1
   4de98:	e0bffa17 	ldw	r2,-24(fp)
   4de9c:	1884983a 	sll	r2,r3,r2
   4dea0:	1007883a 	mov	r3,r2
   4dea4:	d0a71a17 	ldw	r2,-25496(gp)
   4dea8:	1884b03a 	or	r2,r3,r2
   4deac:	d0a71a15 	stw	r2,-25496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4deb0:	d0a71a17 	ldw	r2,-25496(gp)
   4deb4:	100170fa 	wrctl	ienable,r2
   4deb8:	e0bffc17 	ldw	r2,-16(fp)
   4debc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4dec0:	e0bffd17 	ldw	r2,-12(fp)
   4dec4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4dec8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4decc:	0001883a 	nop
}
   4ded0:	e037883a 	mov	sp,fp
   4ded4:	df000017 	ldw	fp,0(sp)
   4ded8:	dec00104 	addi	sp,sp,4
   4dedc:	f800283a 	ret

0004dee0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4dee0:	defff904 	addi	sp,sp,-28
   4dee4:	df000615 	stw	fp,24(sp)
   4dee8:	df000604 	addi	fp,sp,24
   4deec:	e13ffe15 	stw	r4,-8(fp)
   4def0:	e17fff15 	stw	r5,-4(fp)
   4def4:	e0bfff17 	ldw	r2,-4(fp)
   4def8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4defc:	0005303a 	rdctl	r2,status
   4df00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4df04:	e0fffb17 	ldw	r3,-20(fp)
   4df08:	00bfff84 	movi	r2,-2
   4df0c:	1884703a 	and	r2,r3,r2
   4df10:	1001703a 	wrctl	status,r2
  
  return context;
   4df14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4df18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4df1c:	00c00044 	movi	r3,1
   4df20:	e0bffa17 	ldw	r2,-24(fp)
   4df24:	1884983a 	sll	r2,r3,r2
   4df28:	0084303a 	nor	r2,zero,r2
   4df2c:	1007883a 	mov	r3,r2
   4df30:	d0a71a17 	ldw	r2,-25496(gp)
   4df34:	1884703a 	and	r2,r3,r2
   4df38:	d0a71a15 	stw	r2,-25496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4df3c:	d0a71a17 	ldw	r2,-25496(gp)
   4df40:	100170fa 	wrctl	ienable,r2
   4df44:	e0bffc17 	ldw	r2,-16(fp)
   4df48:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4df4c:	e0bffd17 	ldw	r2,-12(fp)
   4df50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4df54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4df58:	0001883a 	nop
}
   4df5c:	e037883a 	mov	sp,fp
   4df60:	df000017 	ldw	fp,0(sp)
   4df64:	dec00104 	addi	sp,sp,4
   4df68:	f800283a 	ret

0004df6c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4df6c:	defffc04 	addi	sp,sp,-16
   4df70:	df000315 	stw	fp,12(sp)
   4df74:	df000304 	addi	fp,sp,12
   4df78:	e13ffe15 	stw	r4,-8(fp)
   4df7c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4df80:	000530fa 	rdctl	r2,ienable
   4df84:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4df88:	00c00044 	movi	r3,1
   4df8c:	e0bfff17 	ldw	r2,-4(fp)
   4df90:	1884983a 	sll	r2,r3,r2
   4df94:	1007883a 	mov	r3,r2
   4df98:	e0bffd17 	ldw	r2,-12(fp)
   4df9c:	1884703a 	and	r2,r3,r2
   4dfa0:	1004c03a 	cmpne	r2,r2,zero
   4dfa4:	10803fcc 	andi	r2,r2,255
}
   4dfa8:	e037883a 	mov	sp,fp
   4dfac:	df000017 	ldw	fp,0(sp)
   4dfb0:	dec00104 	addi	sp,sp,4
   4dfb4:	f800283a 	ret

0004dfb8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4dfb8:	defff504 	addi	sp,sp,-44
   4dfbc:	dfc00a15 	stw	ra,40(sp)
   4dfc0:	df000915 	stw	fp,36(sp)
   4dfc4:	df000904 	addi	fp,sp,36
   4dfc8:	e13ffc15 	stw	r4,-16(fp)
   4dfcc:	e17ffd15 	stw	r5,-12(fp)
   4dfd0:	e1bffe15 	stw	r6,-8(fp)
   4dfd4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4dfd8:	00bffa84 	movi	r2,-22
   4dfdc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4dfe0:	e0bffd17 	ldw	r2,-12(fp)
   4dfe4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4dfe8:	e0bff817 	ldw	r2,-32(fp)
   4dfec:	10800808 	cmpgei	r2,r2,32
   4dff0:	1000271e 	bne	r2,zero,4e090 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dff4:	0005303a 	rdctl	r2,status
   4dff8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dffc:	e0fffb17 	ldw	r3,-20(fp)
   4e000:	00bfff84 	movi	r2,-2
   4e004:	1884703a 	and	r2,r3,r2
   4e008:	1001703a 	wrctl	status,r2
  
  return context;
   4e00c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4e010:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   4e014:	008001b4 	movhi	r2,6
   4e018:	10838604 	addi	r2,r2,3608
   4e01c:	e0fff817 	ldw	r3,-32(fp)
   4e020:	180690fa 	slli	r3,r3,3
   4e024:	10c5883a 	add	r2,r2,r3
   4e028:	e0fffe17 	ldw	r3,-8(fp)
   4e02c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4e030:	008001b4 	movhi	r2,6
   4e034:	10838604 	addi	r2,r2,3608
   4e038:	e0fff817 	ldw	r3,-32(fp)
   4e03c:	180690fa 	slli	r3,r3,3
   4e040:	10c5883a 	add	r2,r2,r3
   4e044:	10800104 	addi	r2,r2,4
   4e048:	e0ffff17 	ldw	r3,-4(fp)
   4e04c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4e050:	e0bffe17 	ldw	r2,-8(fp)
   4e054:	10000526 	beq	r2,zero,4e06c <alt_iic_isr_register+0xb4>
   4e058:	e0bff817 	ldw	r2,-32(fp)
   4e05c:	100b883a 	mov	r5,r2
   4e060:	e13ffc17 	ldw	r4,-16(fp)
   4e064:	004de580 	call	4de58 <alt_ic_irq_enable>
   4e068:	00000406 	br	4e07c <alt_iic_isr_register+0xc4>
   4e06c:	e0bff817 	ldw	r2,-32(fp)
   4e070:	100b883a 	mov	r5,r2
   4e074:	e13ffc17 	ldw	r4,-16(fp)
   4e078:	004dee00 	call	4dee0 <alt_ic_irq_disable>
   4e07c:	e0bff715 	stw	r2,-36(fp)
   4e080:	e0bffa17 	ldw	r2,-24(fp)
   4e084:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e088:	e0bff917 	ldw	r2,-28(fp)
   4e08c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4e090:	e0bff717 	ldw	r2,-36(fp)
}
   4e094:	e037883a 	mov	sp,fp
   4e098:	dfc00117 	ldw	ra,4(sp)
   4e09c:	df000017 	ldw	fp,0(sp)
   4e0a0:	dec00204 	addi	sp,sp,8
   4e0a4:	f800283a 	ret

0004e0a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e0a8:	defffe04 	addi	sp,sp,-8
   4e0ac:	dfc00115 	stw	ra,4(sp)
   4e0b0:	df000015 	stw	fp,0(sp)
   4e0b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e0b8:	d0a00c17 	ldw	r2,-32720(gp)
   4e0bc:	10000326 	beq	r2,zero,4e0cc <alt_get_errno+0x24>
   4e0c0:	d0a00c17 	ldw	r2,-32720(gp)
   4e0c4:	103ee83a 	callr	r2
   4e0c8:	00000106 	br	4e0d0 <alt_get_errno+0x28>
   4e0cc:	d0a71804 	addi	r2,gp,-25504
}
   4e0d0:	e037883a 	mov	sp,fp
   4e0d4:	dfc00117 	ldw	ra,4(sp)
   4e0d8:	df000017 	ldw	fp,0(sp)
   4e0dc:	dec00204 	addi	sp,sp,8
   4e0e0:	f800283a 	ret

0004e0e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4e0e4:	deffed04 	addi	sp,sp,-76
   4e0e8:	dfc01215 	stw	ra,72(sp)
   4e0ec:	df001115 	stw	fp,68(sp)
   4e0f0:	df001104 	addi	fp,sp,68
   4e0f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e0f8:	e0bfff17 	ldw	r2,-4(fp)
   4e0fc:	10000816 	blt	r2,zero,4e120 <isatty+0x3c>
   4e100:	01400304 	movi	r5,12
   4e104:	e13fff17 	ldw	r4,-4(fp)
   4e108:	00407040 	call	40704 <__mulsi3>
   4e10c:	1007883a 	mov	r3,r2
   4e110:	008001b4 	movhi	r2,6
   4e114:	10a7c804 	addi	r2,r2,-24800
   4e118:	1885883a 	add	r2,r3,r2
   4e11c:	00000106 	br	4e124 <isatty+0x40>
   4e120:	0005883a 	mov	r2,zero
   4e124:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4e128:	e0bfef17 	ldw	r2,-68(fp)
   4e12c:	10000e26 	beq	r2,zero,4e168 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4e130:	e0bfef17 	ldw	r2,-68(fp)
   4e134:	10800017 	ldw	r2,0(r2)
   4e138:	10800817 	ldw	r2,32(r2)
   4e13c:	1000021e 	bne	r2,zero,4e148 <isatty+0x64>
    {
      return 1;
   4e140:	00800044 	movi	r2,1
   4e144:	00000d06 	br	4e17c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4e148:	e0bff004 	addi	r2,fp,-64
   4e14c:	100b883a 	mov	r5,r2
   4e150:	e13fff17 	ldw	r4,-4(fp)
   4e154:	004dd500 	call	4dd50 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4e158:	e0bff117 	ldw	r2,-60(fp)
   4e15c:	10880020 	cmpeqi	r2,r2,8192
   4e160:	10803fcc 	andi	r2,r2,255
   4e164:	00000506 	br	4e17c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e168:	004e0a80 	call	4e0a8 <alt_get_errno>
   4e16c:	1007883a 	mov	r3,r2
   4e170:	00801444 	movi	r2,81
   4e174:	18800015 	stw	r2,0(r3)
    return 0;
   4e178:	0005883a 	mov	r2,zero
  }
}
   4e17c:	e037883a 	mov	sp,fp
   4e180:	dfc00117 	ldw	ra,4(sp)
   4e184:	df000017 	ldw	fp,0(sp)
   4e188:	dec00204 	addi	sp,sp,8
   4e18c:	f800283a 	ret

0004e190 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4e190:	defffc04 	addi	sp,sp,-16
   4e194:	df000315 	stw	fp,12(sp)
   4e198:	df000304 	addi	fp,sp,12
   4e19c:	e13ffd15 	stw	r4,-12(fp)
   4e1a0:	e17ffe15 	stw	r5,-8(fp)
   4e1a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4e1a8:	e0fffe17 	ldw	r3,-8(fp)
   4e1ac:	e0bffd17 	ldw	r2,-12(fp)
   4e1b0:	18800c26 	beq	r3,r2,4e1e4 <alt_load_section+0x54>
  {
    while( to != end )
   4e1b4:	00000806 	br	4e1d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4e1b8:	e0bffe17 	ldw	r2,-8(fp)
   4e1bc:	10c00104 	addi	r3,r2,4
   4e1c0:	e0fffe15 	stw	r3,-8(fp)
   4e1c4:	e0fffd17 	ldw	r3,-12(fp)
   4e1c8:	19000104 	addi	r4,r3,4
   4e1cc:	e13ffd15 	stw	r4,-12(fp)
   4e1d0:	18c00017 	ldw	r3,0(r3)
   4e1d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4e1d8:	e0fffe17 	ldw	r3,-8(fp)
   4e1dc:	e0bfff17 	ldw	r2,-4(fp)
   4e1e0:	18bff51e 	bne	r3,r2,4e1b8 <__alt_data_end+0xfffe89b8>
    {
      *to++ = *from++;
    }
  }
}
   4e1e4:	0001883a 	nop
   4e1e8:	e037883a 	mov	sp,fp
   4e1ec:	df000017 	ldw	fp,0(sp)
   4e1f0:	dec00104 	addi	sp,sp,4
   4e1f4:	f800283a 	ret

0004e1f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4e1f8:	defffe04 	addi	sp,sp,-8
   4e1fc:	dfc00115 	stw	ra,4(sp)
   4e200:	df000015 	stw	fp,0(sp)
   4e204:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4e208:	018001b4 	movhi	r6,6
   4e20c:	31ac7304 	addi	r6,r6,-20020
   4e210:	014001b4 	movhi	r5,6
   4e214:	29659504 	addi	r5,r5,-27052
   4e218:	010001b4 	movhi	r4,6
   4e21c:	212c7304 	addi	r4,r4,-20020
   4e220:	004e1900 	call	4e190 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4e224:	01800134 	movhi	r6,4
   4e228:	31808c04 	addi	r6,r6,560
   4e22c:	01400134 	movhi	r5,4
   4e230:	29400804 	addi	r5,r5,32
   4e234:	01000134 	movhi	r4,4
   4e238:	21000804 	addi	r4,r4,32
   4e23c:	004e1900 	call	4e190 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4e240:	018001b4 	movhi	r6,6
   4e244:	31a59504 	addi	r6,r6,-27052
   4e248:	014001b4 	movhi	r5,6
   4e24c:	29648004 	addi	r5,r5,-28160
   4e250:	010001b4 	movhi	r4,6
   4e254:	21248004 	addi	r4,r4,-28160
   4e258:	004e1900 	call	4e190 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4e25c:	00580600 	call	58060 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4e260:	00582200 	call	58220 <alt_icache_flush_all>
}
   4e264:	0001883a 	nop
   4e268:	e037883a 	mov	sp,fp
   4e26c:	dfc00117 	ldw	ra,4(sp)
   4e270:	df000017 	ldw	fp,0(sp)
   4e274:	dec00204 	addi	sp,sp,8
   4e278:	f800283a 	ret

0004e27c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e27c:	defffe04 	addi	sp,sp,-8
   4e280:	dfc00115 	stw	ra,4(sp)
   4e284:	df000015 	stw	fp,0(sp)
   4e288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e28c:	d0a00c17 	ldw	r2,-32720(gp)
   4e290:	10000326 	beq	r2,zero,4e2a0 <alt_get_errno+0x24>
   4e294:	d0a00c17 	ldw	r2,-32720(gp)
   4e298:	103ee83a 	callr	r2
   4e29c:	00000106 	br	4e2a4 <alt_get_errno+0x28>
   4e2a0:	d0a71804 	addi	r2,gp,-25504
}
   4e2a4:	e037883a 	mov	sp,fp
   4e2a8:	dfc00117 	ldw	ra,4(sp)
   4e2ac:	df000017 	ldw	fp,0(sp)
   4e2b0:	dec00204 	addi	sp,sp,8
   4e2b4:	f800283a 	ret

0004e2b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4e2b8:	defff904 	addi	sp,sp,-28
   4e2bc:	dfc00615 	stw	ra,24(sp)
   4e2c0:	df000515 	stw	fp,20(sp)
   4e2c4:	df000504 	addi	fp,sp,20
   4e2c8:	e13ffd15 	stw	r4,-12(fp)
   4e2cc:	e17ffe15 	stw	r5,-8(fp)
   4e2d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4e2d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e2d8:	e0bffd17 	ldw	r2,-12(fp)
   4e2dc:	10000816 	blt	r2,zero,4e300 <lseek+0x48>
   4e2e0:	01400304 	movi	r5,12
   4e2e4:	e13ffd17 	ldw	r4,-12(fp)
   4e2e8:	00407040 	call	40704 <__mulsi3>
   4e2ec:	1007883a 	mov	r3,r2
   4e2f0:	008001b4 	movhi	r2,6
   4e2f4:	10a7c804 	addi	r2,r2,-24800
   4e2f8:	1885883a 	add	r2,r3,r2
   4e2fc:	00000106 	br	4e304 <lseek+0x4c>
   4e300:	0005883a 	mov	r2,zero
   4e304:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4e308:	e0bffc17 	ldw	r2,-16(fp)
   4e30c:	10001026 	beq	r2,zero,4e350 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4e310:	e0bffc17 	ldw	r2,-16(fp)
   4e314:	10800017 	ldw	r2,0(r2)
   4e318:	10800717 	ldw	r2,28(r2)
   4e31c:	10000926 	beq	r2,zero,4e344 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4e320:	e0bffc17 	ldw	r2,-16(fp)
   4e324:	10800017 	ldw	r2,0(r2)
   4e328:	10800717 	ldw	r2,28(r2)
   4e32c:	e1bfff17 	ldw	r6,-4(fp)
   4e330:	e17ffe17 	ldw	r5,-8(fp)
   4e334:	e13ffc17 	ldw	r4,-16(fp)
   4e338:	103ee83a 	callr	r2
   4e33c:	e0bffb15 	stw	r2,-20(fp)
   4e340:	00000506 	br	4e358 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4e344:	00bfde84 	movi	r2,-134
   4e348:	e0bffb15 	stw	r2,-20(fp)
   4e34c:	00000206 	br	4e358 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4e350:	00bfebc4 	movi	r2,-81
   4e354:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4e358:	e0bffb17 	ldw	r2,-20(fp)
   4e35c:	1000070e 	bge	r2,zero,4e37c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   4e360:	004e27c0 	call	4e27c <alt_get_errno>
   4e364:	1007883a 	mov	r3,r2
   4e368:	e0bffb17 	ldw	r2,-20(fp)
   4e36c:	0085c83a 	sub	r2,zero,r2
   4e370:	18800015 	stw	r2,0(r3)
    rc = -1;
   4e374:	00bfffc4 	movi	r2,-1
   4e378:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4e37c:	e0bffb17 	ldw	r2,-20(fp)
}
   4e380:	e037883a 	mov	sp,fp
   4e384:	dfc00117 	ldw	ra,4(sp)
   4e388:	df000017 	ldw	fp,0(sp)
   4e38c:	dec00204 	addi	sp,sp,8
   4e390:	f800283a 	ret

0004e394 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4e394:	defff904 	addi	sp,sp,-28
   4e398:	dfc00615 	stw	ra,24(sp)
   4e39c:	df000515 	stw	fp,20(sp)
   4e3a0:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4e3a4:	0009883a 	mov	r4,zero
   4e3a8:	0056e040 	call	56e04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4e3ac:	004f3800 	call	4f380 <OSInit>
   4e3b0:	01000044 	movi	r4,1
   4e3b4:	00547a40 	call	547a4 <OSSemCreate>
   4e3b8:	d0a71f15 	stw	r2,-25476(gp)
   4e3bc:	01000044 	movi	r4,1
   4e3c0:	00547a40 	call	547a4 <OSSemCreate>
   4e3c4:	d0a72115 	stw	r2,-25468(gp)
   4e3c8:	d0a71904 	addi	r2,gp,-25500
   4e3cc:	e0bffc15 	stw	r2,-16(fp)
   4e3d0:	00800044 	movi	r2,1
   4e3d4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   4e3d8:	e0bffd0b 	ldhu	r2,-12(fp)
   4e3dc:	1009883a 	mov	r4,r2
   4e3e0:	00547a40 	call	547a4 <OSSemCreate>
   4e3e4:	1007883a 	mov	r3,r2
   4e3e8:	e0bffc17 	ldw	r2,-16(fp)
   4e3ec:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4e3f0:	0056e3c0 	call	56e3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4e3f4:	018001b4 	movhi	r6,6
   4e3f8:	31a54404 	addi	r6,r6,-27376
   4e3fc:	014001b4 	movhi	r5,6
   4e400:	29654404 	addi	r5,r5,-27376
   4e404:	010001b4 	movhi	r4,6
   4e408:	21254404 	addi	r4,r4,-27376
   4e40c:	00583c00 	call	583c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4e410:	00581600 	call	58160 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4e414:	010001b4 	movhi	r4,6
   4e418:	21207004 	addi	r4,r4,-32320
   4e41c:	0058e6c0 	call	58e6c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4e420:	d0a71b17 	ldw	r2,-25492(gp)
   4e424:	d0e71c17 	ldw	r3,-25488(gp)
   4e428:	d1271d17 	ldw	r4,-25484(gp)
   4e42c:	200d883a 	mov	r6,r4
   4e430:	180b883a 	mov	r5,r3
   4e434:	1009883a 	mov	r4,r2
   4e438:	00406300 	call	40630 <main>
   4e43c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   4e440:	01000044 	movi	r4,1
   4e444:	004dc100 	call	4dc10 <close>
  exit (result);
   4e448:	e13ffb17 	ldw	r4,-20(fp)
   4e44c:	0058e800 	call	58e80 <exit>

0004e450 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e450:	defffe04 	addi	sp,sp,-8
   4e454:	dfc00115 	stw	ra,4(sp)
   4e458:	df000015 	stw	fp,0(sp)
   4e45c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e460:	d0a00c17 	ldw	r2,-32720(gp)
   4e464:	10000326 	beq	r2,zero,4e474 <alt_get_errno+0x24>
   4e468:	d0a00c17 	ldw	r2,-32720(gp)
   4e46c:	103ee83a 	callr	r2
   4e470:	00000106 	br	4e478 <alt_get_errno+0x28>
   4e474:	d0a71804 	addi	r2,gp,-25504
}
   4e478:	e037883a 	mov	sp,fp
   4e47c:	dfc00117 	ldw	ra,4(sp)
   4e480:	df000017 	ldw	fp,0(sp)
   4e484:	dec00204 	addi	sp,sp,8
   4e488:	f800283a 	ret

0004e48c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4e48c:	defff904 	addi	sp,sp,-28
   4e490:	dfc00615 	stw	ra,24(sp)
   4e494:	df000515 	stw	fp,20(sp)
   4e498:	df000504 	addi	fp,sp,20
   4e49c:	e13ffd15 	stw	r4,-12(fp)
   4e4a0:	e17ffe15 	stw	r5,-8(fp)
   4e4a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e4a8:	e0bffd17 	ldw	r2,-12(fp)
   4e4ac:	10000816 	blt	r2,zero,4e4d0 <read+0x44>
   4e4b0:	01400304 	movi	r5,12
   4e4b4:	e13ffd17 	ldw	r4,-12(fp)
   4e4b8:	00407040 	call	40704 <__mulsi3>
   4e4bc:	1007883a 	mov	r3,r2
   4e4c0:	008001b4 	movhi	r2,6
   4e4c4:	10a7c804 	addi	r2,r2,-24800
   4e4c8:	1885883a 	add	r2,r3,r2
   4e4cc:	00000106 	br	4e4d4 <read+0x48>
   4e4d0:	0005883a 	mov	r2,zero
   4e4d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4e4d8:	e0bffb17 	ldw	r2,-20(fp)
   4e4dc:	10002226 	beq	r2,zero,4e568 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4e4e0:	e0bffb17 	ldw	r2,-20(fp)
   4e4e4:	10800217 	ldw	r2,8(r2)
   4e4e8:	108000cc 	andi	r2,r2,3
   4e4ec:	10800060 	cmpeqi	r2,r2,1
   4e4f0:	1000181e 	bne	r2,zero,4e554 <read+0xc8>
        (fd->dev->read))
   4e4f4:	e0bffb17 	ldw	r2,-20(fp)
   4e4f8:	10800017 	ldw	r2,0(r2)
   4e4fc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4e500:	10001426 	beq	r2,zero,4e554 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4e504:	e0bffb17 	ldw	r2,-20(fp)
   4e508:	10800017 	ldw	r2,0(r2)
   4e50c:	10800517 	ldw	r2,20(r2)
   4e510:	e0ffff17 	ldw	r3,-4(fp)
   4e514:	180d883a 	mov	r6,r3
   4e518:	e17ffe17 	ldw	r5,-8(fp)
   4e51c:	e13ffb17 	ldw	r4,-20(fp)
   4e520:	103ee83a 	callr	r2
   4e524:	e0bffc15 	stw	r2,-16(fp)
   4e528:	e0bffc17 	ldw	r2,-16(fp)
   4e52c:	1000070e 	bge	r2,zero,4e54c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   4e530:	004e4500 	call	4e450 <alt_get_errno>
   4e534:	1007883a 	mov	r3,r2
   4e538:	e0bffc17 	ldw	r2,-16(fp)
   4e53c:	0085c83a 	sub	r2,zero,r2
   4e540:	18800015 	stw	r2,0(r3)
          return -1;
   4e544:	00bfffc4 	movi	r2,-1
   4e548:	00000c06 	br	4e57c <read+0xf0>
        }
        return rval;
   4e54c:	e0bffc17 	ldw	r2,-16(fp)
   4e550:	00000a06 	br	4e57c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4e554:	004e4500 	call	4e450 <alt_get_errno>
   4e558:	1007883a 	mov	r3,r2
   4e55c:	00800344 	movi	r2,13
   4e560:	18800015 	stw	r2,0(r3)
   4e564:	00000406 	br	4e578 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4e568:	004e4500 	call	4e450 <alt_get_errno>
   4e56c:	1007883a 	mov	r3,r2
   4e570:	00801444 	movi	r2,81
   4e574:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4e578:	00bfffc4 	movi	r2,-1
}
   4e57c:	e037883a 	mov	sp,fp
   4e580:	dfc00117 	ldw	ra,4(sp)
   4e584:	df000017 	ldw	fp,0(sp)
   4e588:	dec00204 	addi	sp,sp,8
   4e58c:	f800283a 	ret

0004e590 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4e590:	defffc04 	addi	sp,sp,-16
   4e594:	dfc00315 	stw	ra,12(sp)
   4e598:	df000215 	stw	fp,8(sp)
   4e59c:	dc000115 	stw	r16,4(sp)
   4e5a0:	df000204 	addi	fp,sp,8
   4e5a4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   4e5a8:	e0bffe17 	ldw	r2,-8(fp)
   4e5ac:	108000d0 	cmplti	r2,r2,3
   4e5b0:	1000111e 	bne	r2,zero,4e5f8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4e5b4:	040001b4 	movhi	r16,6
   4e5b8:	8427c804 	addi	r16,r16,-24800
   4e5bc:	e0bffe17 	ldw	r2,-8(fp)
   4e5c0:	01400304 	movi	r5,12
   4e5c4:	1009883a 	mov	r4,r2
   4e5c8:	00407040 	call	40704 <__mulsi3>
   4e5cc:	8085883a 	add	r2,r16,r2
   4e5d0:	10800204 	addi	r2,r2,8
   4e5d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4e5d8:	040001b4 	movhi	r16,6
   4e5dc:	8427c804 	addi	r16,r16,-24800
   4e5e0:	e0bffe17 	ldw	r2,-8(fp)
   4e5e4:	01400304 	movi	r5,12
   4e5e8:	1009883a 	mov	r4,r2
   4e5ec:	00407040 	call	40704 <__mulsi3>
   4e5f0:	8085883a 	add	r2,r16,r2
   4e5f4:	10000015 	stw	zero,0(r2)
  }
}
   4e5f8:	0001883a 	nop
   4e5fc:	e6ffff04 	addi	sp,fp,-4
   4e600:	dfc00217 	ldw	ra,8(sp)
   4e604:	df000117 	ldw	fp,4(sp)
   4e608:	dc000017 	ldw	r16,0(sp)
   4e60c:	dec00304 	addi	sp,sp,12
   4e610:	f800283a 	ret

0004e614 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4e614:	defff904 	addi	sp,sp,-28
   4e618:	df000615 	stw	fp,24(sp)
   4e61c:	df000604 	addi	fp,sp,24
   4e620:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e624:	0005303a 	rdctl	r2,status
   4e628:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e62c:	e0fffe17 	ldw	r3,-8(fp)
   4e630:	00bfff84 	movi	r2,-2
   4e634:	1884703a 	and	r2,r3,r2
   4e638:	1001703a 	wrctl	status,r2
  
  return context;
   4e63c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4e640:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4e644:	d0a00e17 	ldw	r2,-32712(gp)
   4e648:	10c000c4 	addi	r3,r2,3
   4e64c:	00bfff04 	movi	r2,-4
   4e650:	1884703a 	and	r2,r3,r2
   4e654:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4e658:	d0e00e17 	ldw	r3,-32712(gp)
   4e65c:	e0bfff17 	ldw	r2,-4(fp)
   4e660:	1887883a 	add	r3,r3,r2
   4e664:	008001b4 	movhi	r2,6
   4e668:	10960004 	addi	r2,r2,22528
   4e66c:	10c0062e 	bgeu	r2,r3,4e688 <sbrk+0x74>
   4e670:	e0bffb17 	ldw	r2,-20(fp)
   4e674:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e678:	e0bffa17 	ldw	r2,-24(fp)
   4e67c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4e680:	00bfffc4 	movi	r2,-1
   4e684:	00000b06 	br	4e6b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4e688:	d0a00e17 	ldw	r2,-32712(gp)
   4e68c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4e690:	d0e00e17 	ldw	r3,-32712(gp)
   4e694:	e0bfff17 	ldw	r2,-4(fp)
   4e698:	1885883a 	add	r2,r3,r2
   4e69c:	d0a00e15 	stw	r2,-32712(gp)
   4e6a0:	e0bffb17 	ldw	r2,-20(fp)
   4e6a4:	e0bffc15 	stw	r2,-16(fp)
   4e6a8:	e0bffc17 	ldw	r2,-16(fp)
   4e6ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4e6b0:	e0bffd17 	ldw	r2,-12(fp)
} 
   4e6b4:	e037883a 	mov	sp,fp
   4e6b8:	df000017 	ldw	fp,0(sp)
   4e6bc:	dec00104 	addi	sp,sp,4
   4e6c0:	f800283a 	ret

0004e6c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e6c4:	defffe04 	addi	sp,sp,-8
   4e6c8:	dfc00115 	stw	ra,4(sp)
   4e6cc:	df000015 	stw	fp,0(sp)
   4e6d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e6d4:	d0a00c17 	ldw	r2,-32720(gp)
   4e6d8:	10000326 	beq	r2,zero,4e6e8 <alt_get_errno+0x24>
   4e6dc:	d0a00c17 	ldw	r2,-32720(gp)
   4e6e0:	103ee83a 	callr	r2
   4e6e4:	00000106 	br	4e6ec <alt_get_errno+0x28>
   4e6e8:	d0a71804 	addi	r2,gp,-25504
}
   4e6ec:	e037883a 	mov	sp,fp
   4e6f0:	dfc00117 	ldw	ra,4(sp)
   4e6f4:	df000017 	ldw	fp,0(sp)
   4e6f8:	dec00204 	addi	sp,sp,8
   4e6fc:	f800283a 	ret

0004e700 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4e700:	defff904 	addi	sp,sp,-28
   4e704:	dfc00615 	stw	ra,24(sp)
   4e708:	df000515 	stw	fp,20(sp)
   4e70c:	df000504 	addi	fp,sp,20
   4e710:	e13ffd15 	stw	r4,-12(fp)
   4e714:	e17ffe15 	stw	r5,-8(fp)
   4e718:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e71c:	e0bffd17 	ldw	r2,-12(fp)
   4e720:	10000816 	blt	r2,zero,4e744 <write+0x44>
   4e724:	01400304 	movi	r5,12
   4e728:	e13ffd17 	ldw	r4,-12(fp)
   4e72c:	00407040 	call	40704 <__mulsi3>
   4e730:	1007883a 	mov	r3,r2
   4e734:	008001b4 	movhi	r2,6
   4e738:	10a7c804 	addi	r2,r2,-24800
   4e73c:	1885883a 	add	r2,r3,r2
   4e740:	00000106 	br	4e748 <write+0x48>
   4e744:	0005883a 	mov	r2,zero
   4e748:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4e74c:	e0bffb17 	ldw	r2,-20(fp)
   4e750:	10002126 	beq	r2,zero,4e7d8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4e754:	e0bffb17 	ldw	r2,-20(fp)
   4e758:	10800217 	ldw	r2,8(r2)
   4e75c:	108000cc 	andi	r2,r2,3
   4e760:	10001826 	beq	r2,zero,4e7c4 <write+0xc4>
   4e764:	e0bffb17 	ldw	r2,-20(fp)
   4e768:	10800017 	ldw	r2,0(r2)
   4e76c:	10800617 	ldw	r2,24(r2)
   4e770:	10001426 	beq	r2,zero,4e7c4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4e774:	e0bffb17 	ldw	r2,-20(fp)
   4e778:	10800017 	ldw	r2,0(r2)
   4e77c:	10800617 	ldw	r2,24(r2)
   4e780:	e0ffff17 	ldw	r3,-4(fp)
   4e784:	180d883a 	mov	r6,r3
   4e788:	e17ffe17 	ldw	r5,-8(fp)
   4e78c:	e13ffb17 	ldw	r4,-20(fp)
   4e790:	103ee83a 	callr	r2
   4e794:	e0bffc15 	stw	r2,-16(fp)
   4e798:	e0bffc17 	ldw	r2,-16(fp)
   4e79c:	1000070e 	bge	r2,zero,4e7bc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   4e7a0:	004e6c40 	call	4e6c4 <alt_get_errno>
   4e7a4:	1007883a 	mov	r3,r2
   4e7a8:	e0bffc17 	ldw	r2,-16(fp)
   4e7ac:	0085c83a 	sub	r2,zero,r2
   4e7b0:	18800015 	stw	r2,0(r3)
        return -1;
   4e7b4:	00bfffc4 	movi	r2,-1
   4e7b8:	00000c06 	br	4e7ec <write+0xec>
      }
      return rval;
   4e7bc:	e0bffc17 	ldw	r2,-16(fp)
   4e7c0:	00000a06 	br	4e7ec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4e7c4:	004e6c40 	call	4e6c4 <alt_get_errno>
   4e7c8:	1007883a 	mov	r3,r2
   4e7cc:	00800344 	movi	r2,13
   4e7d0:	18800015 	stw	r2,0(r3)
   4e7d4:	00000406 	br	4e7e8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4e7d8:	004e6c40 	call	4e6c4 <alt_get_errno>
   4e7dc:	1007883a 	mov	r3,r2
   4e7e0:	00801444 	movi	r2,81
   4e7e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4e7e8:	00bfffc4 	movi	r2,-1
}
   4e7ec:	e037883a 	mov	sp,fp
   4e7f0:	dfc00117 	ldw	ra,4(sp)
   4e7f4:	df000017 	ldw	fp,0(sp)
   4e7f8:	dec00204 	addi	sp,sp,8
   4e7fc:	f800283a 	ret

0004e800 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   4e800:	deffdf04 	addi	sp,sp,-132
   4e804:	dfc02015 	stw	ra,128(sp)
   4e808:	df001f15 	stw	fp,124(sp)
   4e80c:	df001f04 	addi	fp,sp,124
   4e810:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   4e814:	e0bfe204 	addi	r2,fp,-120
   4e818:	100b883a 	mov	r5,r2
   4e81c:	01003fc4 	movi	r4,255
   4e820:	005672c0 	call	5672c <OSTaskQuery>
   4e824:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   4e828:	e0bffe83 	ldbu	r2,-6(fp)
   4e82c:	10803fcc 	andi	r2,r2,255
   4e830:	10001e1e 	bne	r2,zero,4e8ac <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   4e834:	e0bfee83 	ldbu	r2,-70(fp)
   4e838:	10803fcc 	andi	r2,r2,255
   4e83c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   4e840:	d0a71f17 	ldw	r2,-25476(gp)
   4e844:	e0fffd04 	addi	r3,fp,-12
   4e848:	180b883a 	mov	r5,r3
   4e84c:	1009883a 	mov	r4,r2
   4e850:	0054f440 	call	54f44 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   4e854:	e0bffe43 	ldbu	r2,-7(fp)
   4e858:	10803fcc 	andi	r2,r2,255
   4e85c:	10000726 	beq	r2,zero,4e87c <__env_lock+0x7c>
   4e860:	d0a00f17 	ldw	r2,-32708(gp)
   4e864:	e0ffe117 	ldw	r3,-124(fp)
   4e868:	1880041e 	bne	r3,r2,4e87c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   4e86c:	d0a71e17 	ldw	r2,-25480(gp)
   4e870:	10800044 	addi	r2,r2,1
   4e874:	d0a71e15 	stw	r2,-25480(gp)
   4e878:	00000a06 	br	4e8a4 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   4e87c:	d0a71f17 	ldw	r2,-25476(gp)
   4e880:	e0fffe84 	addi	r3,fp,-6
   4e884:	180d883a 	mov	r6,r3
   4e888:	000b883a 	mov	r5,zero
   4e88c:	1009883a 	mov	r4,r2
   4e890:	0054abc0 	call	54abc <OSSemPend>
    locks  = 1;
   4e894:	00800044 	movi	r2,1
   4e898:	d0a71e15 	stw	r2,-25480(gp)
    lockid = id;
   4e89c:	e0bfe117 	ldw	r2,-124(fp)
   4e8a0:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   4e8a4:	0001883a 	nop
   4e8a8:	00000106 	br	4e8b0 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   4e8ac:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   4e8b0:	e037883a 	mov	sp,fp
   4e8b4:	dfc00117 	ldw	ra,4(sp)
   4e8b8:	df000017 	ldw	fp,0(sp)
   4e8bc:	dec00204 	addi	sp,sp,8
   4e8c0:	f800283a 	ret

0004e8c4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   4e8c4:	defffd04 	addi	sp,sp,-12
   4e8c8:	dfc00215 	stw	ra,8(sp)
   4e8cc:	df000115 	stw	fp,4(sp)
   4e8d0:	df000104 	addi	fp,sp,4
   4e8d4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   4e8d8:	d0a71e17 	ldw	r2,-25480(gp)
   4e8dc:	10000b26 	beq	r2,zero,4e90c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   4e8e0:	d0a71e17 	ldw	r2,-25480(gp)
   4e8e4:	10bfffc4 	addi	r2,r2,-1
   4e8e8:	d0a71e15 	stw	r2,-25480(gp)
   4e8ec:	d0a71e17 	ldw	r2,-25480(gp)
   4e8f0:	1000071e 	bne	r2,zero,4e910 <__env_unlock+0x4c>
  {
    lockid = -1;
   4e8f4:	00bfffc4 	movi	r2,-1
   4e8f8:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
   4e8fc:	d0a71f17 	ldw	r2,-25476(gp)
   4e900:	1009883a 	mov	r4,r2
   4e904:	0054e340 	call	54e34 <OSSemPost>
   4e908:	00000106 	br	4e910 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   4e90c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   4e910:	e037883a 	mov	sp,fp
   4e914:	dfc00117 	ldw	ra,4(sp)
   4e918:	df000017 	ldw	fp,0(sp)
   4e91c:	dec00204 	addi	sp,sp,8
   4e920:	f800283a 	ret

0004e924 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   4e924:	deffdb04 	addi	sp,sp,-148
   4e928:	dfc02415 	stw	ra,144(sp)
   4e92c:	df002315 	stw	fp,140(sp)
   4e930:	df002304 	addi	fp,sp,140
   4e934:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4e938:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   4e93c:	d0a72243 	ldbu	r2,-25463(gp)
   4e940:	10803fcc 	andi	r2,r2,255
   4e944:	10800060 	cmpeqi	r2,r2,1
   4e948:	10003626 	beq	r2,zero,4ea24 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   4e94c:	e0bfe204 	addi	r2,fp,-120
   4e950:	100b883a 	mov	r5,r2
   4e954:	01003fc4 	movi	r4,255
   4e958:	005672c0 	call	5672c <OSTaskQuery>
   4e95c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   4e960:	e0bffe83 	ldbu	r2,-6(fp)
   4e964:	10803fcc 	andi	r2,r2,255
   4e968:	1000301e 	bne	r2,zero,4ea2c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   4e96c:	e0bfee83 	ldbu	r2,-70(fp)
   4e970:	10803fcc 	andi	r2,r2,255
   4e974:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   4e978:	d0a72117 	ldw	r2,-25468(gp)
   4e97c:	e0fffd04 	addi	r3,fp,-12
   4e980:	180b883a 	mov	r5,r3
   4e984:	1009883a 	mov	r4,r2
   4e988:	0054f440 	call	54f44 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e98c:	0005303a 	rdctl	r2,status
   4e990:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e994:	e0ffe117 	ldw	r3,-124(fp)
   4e998:	00bfff84 	movi	r2,-2
   4e99c:	1884703a 	and	r2,r3,r2
   4e9a0:	1001703a 	wrctl	status,r2
  
  return context;
   4e9a4:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   4e9a8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   4e9ac:	e0bffd0b 	ldhu	r2,-12(fp)
   4e9b0:	10bfffcc 	andi	r2,r2,65535
   4e9b4:	10000b1e 	bne	r2,zero,4e9e4 <__malloc_lock+0xc0>
   4e9b8:	d0a01017 	ldw	r2,-32704(gp)
   4e9bc:	e0ffde17 	ldw	r3,-136(fp)
   4e9c0:	1880081e 	bne	r3,r2,4e9e4 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   4e9c4:	d0a72017 	ldw	r2,-25472(gp)
   4e9c8:	10800044 	addi	r2,r2,1
   4e9cc:	d0a72015 	stw	r2,-25472(gp)
   4e9d0:	e0bfdd17 	ldw	r2,-140(fp)
   4e9d4:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e9d8:	e0bfdf17 	ldw	r2,-132(fp)
   4e9dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   4e9e0:	00000e06 	br	4ea1c <__malloc_lock+0xf8>
   4e9e4:	e0bfdd17 	ldw	r2,-140(fp)
   4e9e8:	e0bfe015 	stw	r2,-128(fp)
   4e9ec:	e0bfe017 	ldw	r2,-128(fp)
   4e9f0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   4e9f4:	d0a72117 	ldw	r2,-25468(gp)
   4e9f8:	e0fffe84 	addi	r3,fp,-6
   4e9fc:	180d883a 	mov	r6,r3
   4ea00:	000b883a 	mov	r5,zero
   4ea04:	1009883a 	mov	r4,r2
   4ea08:	0054abc0 	call	54abc <OSSemPend>
    locks  = 1;
   4ea0c:	00800044 	movi	r2,1
   4ea10:	d0a72015 	stw	r2,-25472(gp)
    lockid = id;
   4ea14:	e0bfde17 	ldw	r2,-136(fp)
   4ea18:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   4ea1c:	0001883a 	nop
   4ea20:	00000306 	br	4ea30 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   4ea24:	0001883a 	nop
   4ea28:	00000106 	br	4ea30 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   4ea2c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   4ea30:	e037883a 	mov	sp,fp
   4ea34:	dfc00117 	ldw	ra,4(sp)
   4ea38:	df000017 	ldw	fp,0(sp)
   4ea3c:	dec00204 	addi	sp,sp,8
   4ea40:	f800283a 	ret

0004ea44 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4ea44:	defff804 	addi	sp,sp,-32
   4ea48:	dfc00715 	stw	ra,28(sp)
   4ea4c:	df000615 	stw	fp,24(sp)
   4ea50:	df000604 	addi	fp,sp,24
   4ea54:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4ea58:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   4ea5c:	d0a72243 	ldbu	r2,-25463(gp)
   4ea60:	10803fcc 	andi	r2,r2,255
   4ea64:	10800060 	cmpeqi	r2,r2,1
   4ea68:	10002326 	beq	r2,zero,4eaf8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ea6c:	0005303a 	rdctl	r2,status
   4ea70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ea74:	e0fffe17 	ldw	r3,-8(fp)
   4ea78:	00bfff84 	movi	r2,-2
   4ea7c:	1884703a 	and	r2,r3,r2
   4ea80:	1001703a 	wrctl	status,r2
  
  return context;
   4ea84:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   4ea88:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   4ea8c:	d0a72017 	ldw	r2,-25472(gp)
   4ea90:	1000051e 	bne	r2,zero,4eaa8 <__malloc_unlock+0x64>
   4ea94:	e0bffa17 	ldw	r2,-24(fp)
   4ea98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ea9c:	e0bffb17 	ldw	r2,-20(fp)
   4eaa0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   4eaa4:	00001506 	br	4eafc <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   4eaa8:	d0a72017 	ldw	r2,-25472(gp)
   4eaac:	10bfffc4 	addi	r2,r2,-1
   4eab0:	d0a72015 	stw	r2,-25472(gp)
   4eab4:	d0a72017 	ldw	r2,-25472(gp)
   4eab8:	10000a1e 	bne	r2,zero,4eae4 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   4eabc:	00bfffc4 	movi	r2,-1
   4eac0:	d0a01015 	stw	r2,-32704(gp)
   4eac4:	e0bffa17 	ldw	r2,-24(fp)
   4eac8:	e0bffc15 	stw	r2,-16(fp)
   4eacc:	e0bffc17 	ldw	r2,-16(fp)
   4ead0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   4ead4:	d0a72117 	ldw	r2,-25468(gp)
   4ead8:	1009883a 	mov	r4,r2
   4eadc:	0054e340 	call	54e34 <OSSemPost>
   4eae0:	00000606 	br	4eafc <__malloc_unlock+0xb8>
   4eae4:	e0bffa17 	ldw	r2,-24(fp)
   4eae8:	e0bffd15 	stw	r2,-12(fp)
   4eaec:	e0bffd17 	ldw	r2,-12(fp)
   4eaf0:	1001703a 	wrctl	status,r2
   4eaf4:	00000106 	br	4eafc <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   4eaf8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   4eafc:	e037883a 	mov	sp,fp
   4eb00:	dfc00117 	ldw	ra,4(sp)
   4eb04:	df000017 	ldw	fp,0(sp)
   4eb08:	dec00204 	addi	sp,sp,8
   4eb0c:	f800283a 	ret

0004eb10 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   4eb10:	defff704 	addi	sp,sp,-36
   4eb14:	dfc00815 	stw	ra,32(sp)
   4eb18:	df000715 	stw	fp,28(sp)
   4eb1c:	df000704 	addi	fp,sp,28
   4eb20:	e13ffd15 	stw	r4,-12(fp)
   4eb24:	e17ffe15 	stw	r5,-8(fp)
   4eb28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4eb2c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   4eb30:	e0bfff17 	ldw	r2,-4(fp)
   4eb34:	1000021e 	bne	r2,zero,4eb40 <OSEventNameGet+0x30>
        return (0);
   4eb38:	0005883a 	mov	r2,zero
   4eb3c:	00003706 	br	4ec1c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   4eb40:	e0bffd17 	ldw	r2,-12(fp)
   4eb44:	1000051e 	bne	r2,zero,4eb5c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   4eb48:	e0bfff17 	ldw	r2,-4(fp)
   4eb4c:	00c00104 	movi	r3,4
   4eb50:	10c00005 	stb	r3,0(r2)
        return (0);
   4eb54:	0005883a 	mov	r2,zero
   4eb58:	00003006 	br	4ec1c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   4eb5c:	e0bffe17 	ldw	r2,-8(fp)
   4eb60:	1000051e 	bne	r2,zero,4eb78 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   4eb64:	e0bfff17 	ldw	r2,-4(fp)
   4eb68:	00c00304 	movi	r3,12
   4eb6c:	10c00005 	stb	r3,0(r2)
        return (0);
   4eb70:	0005883a 	mov	r2,zero
   4eb74:	00002906 	br	4ec1c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   4eb78:	d0a73003 	ldbu	r2,-25408(gp)
   4eb7c:	10803fcc 	andi	r2,r2,255
   4eb80:	10000526 	beq	r2,zero,4eb98 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   4eb84:	e0bfff17 	ldw	r2,-4(fp)
   4eb88:	00c00444 	movi	r3,17
   4eb8c:	10c00005 	stb	r3,0(r2)
        return (0);
   4eb90:	0005883a 	mov	r2,zero
   4eb94:	00002106 	br	4ec1c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   4eb98:	e0bffd17 	ldw	r2,-12(fp)
   4eb9c:	10800003 	ldbu	r2,0(r2)
   4eba0:	10803fcc 	andi	r2,r2,255
   4eba4:	10bfffc4 	addi	r2,r2,-1
   4eba8:	10800128 	cmpgeui	r2,r2,4
   4ebac:	10000526 	beq	r2,zero,4ebc4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   4ebb0:	e0bfff17 	ldw	r2,-4(fp)
   4ebb4:	00c00044 	movi	r3,1
   4ebb8:	10c00005 	stb	r3,0(r2)
             return (0);
   4ebbc:	0005883a 	mov	r2,zero
   4ebc0:	00001606 	br	4ec1c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   4ebc4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ebc8:	0005303a 	rdctl	r2,status
   4ebcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ebd0:	e0fffb17 	ldw	r3,-20(fp)
   4ebd4:	00bfff84 	movi	r2,-2
   4ebd8:	1884703a 	and	r2,r3,r2
   4ebdc:	1001703a 	wrctl	status,r2
  
  return context;
   4ebe0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   4ebe4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   4ebe8:	e0bffd17 	ldw	r2,-12(fp)
   4ebec:	10800384 	addi	r2,r2,14
   4ebf0:	100b883a 	mov	r5,r2
   4ebf4:	e13ffe17 	ldw	r4,-8(fp)
   4ebf8:	00505940 	call	50594 <OS_StrCopy>
   4ebfc:	e0bffa05 	stb	r2,-24(fp)
   4ec00:	e0bff917 	ldw	r2,-28(fp)
   4ec04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ec08:	e0bffc17 	ldw	r2,-16(fp)
   4ec0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4ec10:	e0bfff17 	ldw	r2,-4(fp)
   4ec14:	10000005 	stb	zero,0(r2)
    return (len);
   4ec18:	e0bffa03 	ldbu	r2,-24(fp)
}
   4ec1c:	e037883a 	mov	sp,fp
   4ec20:	dfc00117 	ldw	ra,4(sp)
   4ec24:	df000017 	ldw	fp,0(sp)
   4ec28:	dec00204 	addi	sp,sp,8
   4ec2c:	f800283a 	ret

0004ec30 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   4ec30:	defff604 	addi	sp,sp,-40
   4ec34:	dfc00915 	stw	ra,36(sp)
   4ec38:	df000815 	stw	fp,32(sp)
   4ec3c:	df000804 	addi	fp,sp,32
   4ec40:	e13ffd15 	stw	r4,-12(fp)
   4ec44:	e17ffe15 	stw	r5,-8(fp)
   4ec48:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4ec4c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   4ec50:	e0bfff17 	ldw	r2,-4(fp)
   4ec54:	10004026 	beq	r2,zero,4ed58 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   4ec58:	e0bffd17 	ldw	r2,-12(fp)
   4ec5c:	1000041e 	bne	r2,zero,4ec70 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   4ec60:	e0bfff17 	ldw	r2,-4(fp)
   4ec64:	00c00104 	movi	r3,4
   4ec68:	10c00005 	stb	r3,0(r2)
        return;
   4ec6c:	00003b06 	br	4ed5c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   4ec70:	e0bffe17 	ldw	r2,-8(fp)
   4ec74:	1000041e 	bne	r2,zero,4ec88 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   4ec78:	e0bfff17 	ldw	r2,-4(fp)
   4ec7c:	00c00304 	movi	r3,12
   4ec80:	10c00005 	stb	r3,0(r2)
        return;
   4ec84:	00003506 	br	4ed5c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   4ec88:	d0a73003 	ldbu	r2,-25408(gp)
   4ec8c:	10803fcc 	andi	r2,r2,255
   4ec90:	10000426 	beq	r2,zero,4eca4 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   4ec94:	e0bfff17 	ldw	r2,-4(fp)
   4ec98:	00c00484 	movi	r3,18
   4ec9c:	10c00005 	stb	r3,0(r2)
        return;
   4eca0:	00002e06 	br	4ed5c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   4eca4:	e0bffd17 	ldw	r2,-12(fp)
   4eca8:	10800003 	ldbu	r2,0(r2)
   4ecac:	10803fcc 	andi	r2,r2,255
   4ecb0:	10bfffc4 	addi	r2,r2,-1
   4ecb4:	10800128 	cmpgeui	r2,r2,4
   4ecb8:	10000426 	beq	r2,zero,4eccc <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   4ecbc:	e0bfff17 	ldw	r2,-4(fp)
   4ecc0:	00c00044 	movi	r3,1
   4ecc4:	10c00005 	stb	r3,0(r2)
             return;
   4ecc8:	00002406 	br	4ed5c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   4eccc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ecd0:	0005303a 	rdctl	r2,status
   4ecd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ecd8:	e0fffc17 	ldw	r3,-16(fp)
   4ecdc:	00bfff84 	movi	r2,-2
   4ece0:	1884703a 	and	r2,r3,r2
   4ece4:	1001703a 	wrctl	status,r2
  
  return context;
   4ece8:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   4ecec:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   4ecf0:	e13ffe17 	ldw	r4,-8(fp)
   4ecf4:	00506080 	call	50608 <OS_StrLen>
   4ecf8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   4ecfc:	e0bffa03 	ldbu	r2,-24(fp)
   4ed00:	10800830 	cmpltui	r2,r2,32
   4ed04:	1000081e 	bne	r2,zero,4ed28 <OSEventNameSet+0xf8>
   4ed08:	e0bff817 	ldw	r2,-32(fp)
   4ed0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ed10:	e0bff917 	ldw	r2,-28(fp)
   4ed14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   4ed18:	e0bfff17 	ldw	r2,-4(fp)
   4ed1c:	00c002c4 	movi	r3,11
   4ed20:	10c00005 	stb	r3,0(r2)
        return;
   4ed24:	00000d06 	br	4ed5c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   4ed28:	e0bffd17 	ldw	r2,-12(fp)
   4ed2c:	10800384 	addi	r2,r2,14
   4ed30:	e17ffe17 	ldw	r5,-8(fp)
   4ed34:	1009883a 	mov	r4,r2
   4ed38:	00505940 	call	50594 <OS_StrCopy>
   4ed3c:	e0bff817 	ldw	r2,-32(fp)
   4ed40:	e0bffb15 	stw	r2,-20(fp)
   4ed44:	e0bffb17 	ldw	r2,-20(fp)
   4ed48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4ed4c:	e0bfff17 	ldw	r2,-4(fp)
   4ed50:	10000005 	stb	zero,0(r2)
   4ed54:	00000106 	br	4ed5c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   4ed58:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   4ed5c:	e037883a 	mov	sp,fp
   4ed60:	dfc00117 	ldw	ra,4(sp)
   4ed64:	df000017 	ldw	fp,0(sp)
   4ed68:	dec00204 	addi	sp,sp,8
   4ed6c:	f800283a 	ret

0004ed70 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   4ed70:	deffed04 	addi	sp,sp,-76
   4ed74:	dfc01215 	stw	ra,72(sp)
   4ed78:	df001115 	stw	fp,68(sp)
   4ed7c:	df001104 	addi	fp,sp,68
   4ed80:	e13ffc15 	stw	r4,-16(fp)
   4ed84:	e17ffd15 	stw	r5,-12(fp)
   4ed88:	e1bffe15 	stw	r6,-8(fp)
   4ed8c:	3805883a 	mov	r2,r7
   4ed90:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   4ed94:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   4ed98:	e0800217 	ldw	r2,8(fp)
   4ed9c:	1000021e 	bne	r2,zero,4eda8 <OSEventPendMulti+0x38>
        return (0);
   4eda0:	0005883a 	mov	r2,zero
   4eda4:	00017106 	br	4f36c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   4eda8:	e0bffc17 	ldw	r2,-16(fp)
   4edac:	1000051e 	bne	r2,zero,4edc4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   4edb0:	e0800217 	ldw	r2,8(fp)
   4edb4:	00c00104 	movi	r3,4
   4edb8:	10c00005 	stb	r3,0(r2)
        return (0);
   4edbc:	0005883a 	mov	r2,zero
   4edc0:	00016a06 	br	4f36c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   4edc4:	e0bffd17 	ldw	r2,-12(fp)
   4edc8:	1000051e 	bne	r2,zero,4ede0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   4edcc:	e0800217 	ldw	r2,8(fp)
   4edd0:	00c00104 	movi	r3,4
   4edd4:	10c00005 	stb	r3,0(r2)
        return (0);
   4edd8:	0005883a 	mov	r2,zero
   4eddc:	00016306 	br	4f36c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   4ede0:	e0bffe17 	ldw	r2,-8(fp)
   4ede4:	1000051e 	bne	r2,zero,4edfc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   4ede8:	e0800217 	ldw	r2,8(fp)
   4edec:	00c00104 	movi	r3,4
   4edf0:	10c00005 	stb	r3,0(r2)
        return (0);
   4edf4:	0005883a 	mov	r2,zero
   4edf8:	00015c06 	br	4f36c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   4edfc:	e0bffd17 	ldw	r2,-12(fp)
   4ee00:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   4ee04:	e0bffc17 	ldw	r2,-16(fp)
   4ee08:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   4ee0c:	e0bfef17 	ldw	r2,-68(fp)
   4ee10:	10800017 	ldw	r2,0(r2)
   4ee14:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   4ee18:	00001906 	br	4ee80 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   4ee1c:	e0bff017 	ldw	r2,-64(fp)
   4ee20:	10800003 	ldbu	r2,0(r2)
   4ee24:	10803fcc 	andi	r2,r2,255
   4ee28:	10c000a0 	cmpeqi	r3,r2,2
   4ee2c:	1800091e 	bne	r3,zero,4ee54 <OSEventPendMulti+0xe4>
   4ee30:	10c000e0 	cmpeqi	r3,r2,3
   4ee34:	1800091e 	bne	r3,zero,4ee5c <OSEventPendMulti+0xec>
   4ee38:	10800060 	cmpeqi	r2,r2,1
   4ee3c:	1000091e 	bne	r2,zero,4ee64 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   4ee40:	e0800217 	ldw	r2,8(fp)
   4ee44:	00c00044 	movi	r3,1
   4ee48:	10c00005 	stb	r3,0(r2)
                 return (0);
   4ee4c:	0005883a 	mov	r2,zero
   4ee50:	00014606 	br	4f36c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   4ee54:	0001883a 	nop
   4ee58:	00000306 	br	4ee68 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   4ee5c:	0001883a 	nop
   4ee60:	00000106 	br	4ee68 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   4ee64:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   4ee68:	e0bfef17 	ldw	r2,-68(fp)
   4ee6c:	10800104 	addi	r2,r2,4
   4ee70:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   4ee74:	e0bfef17 	ldw	r2,-68(fp)
   4ee78:	10800017 	ldw	r2,0(r2)
   4ee7c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   4ee80:	e0bff017 	ldw	r2,-64(fp)
   4ee84:	103fe51e 	bne	r2,zero,4ee1c <__alt_data_end+0xfffe961c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   4ee88:	d0a73003 	ldbu	r2,-25408(gp)
   4ee8c:	10803fcc 	andi	r2,r2,255
   4ee90:	10000526 	beq	r2,zero,4eea8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   4ee94:	e0800217 	ldw	r2,8(fp)
   4ee98:	00c00084 	movi	r3,2
   4ee9c:	10c00005 	stb	r3,0(r2)
        return (0);
   4eea0:	0005883a 	mov	r2,zero
   4eea4:	00013106 	br	4f36c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   4eea8:	d0a72203 	ldbu	r2,-25464(gp)
   4eeac:	10803fcc 	andi	r2,r2,255
   4eeb0:	10000526 	beq	r2,zero,4eec8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   4eeb4:	e0800217 	ldw	r2,8(fp)
   4eeb8:	00c00344 	movi	r3,13
   4eebc:	10c00005 	stb	r3,0(r2)
        return (0);
   4eec0:	0005883a 	mov	r2,zero
   4eec4:	00012906 	br	4f36c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4eec8:	0005303a 	rdctl	r2,status
   4eecc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4eed0:	e0fffb17 	ldw	r3,-20(fp)
   4eed4:	00bfff84 	movi	r2,-2
   4eed8:	1884703a 	and	r2,r3,r2
   4eedc:	1001703a 	wrctl	status,r2
  
  return context;
   4eee0:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   4eee4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   4eee8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   4eeec:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   4eef0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   4eef4:	e0bffc17 	ldw	r2,-16(fp)
   4eef8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   4eefc:	e0bfef17 	ldw	r2,-68(fp)
   4ef00:	10800017 	ldw	r2,0(r2)
   4ef04:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   4ef08:	00008106 	br	4f110 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   4ef0c:	e0bff017 	ldw	r2,-64(fp)
   4ef10:	10800003 	ldbu	r2,0(r2)
   4ef14:	10803fcc 	andi	r2,r2,255
   4ef18:	10c000a0 	cmpeqi	r3,r2,2
   4ef1c:	18003c1e 	bne	r3,zero,4f010 <OSEventPendMulti+0x2a0>
   4ef20:	10c000e0 	cmpeqi	r3,r2,3
   4ef24:	1800031e 	bne	r3,zero,4ef34 <OSEventPendMulti+0x1c4>
   4ef28:	10800060 	cmpeqi	r2,r2,1
   4ef2c:	10001e1e 	bne	r2,zero,4efa8 <OSEventPendMulti+0x238>
   4ef30:	00006606 	br	4f0cc <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   4ef34:	e0bff017 	ldw	r2,-64(fp)
   4ef38:	1080020b 	ldhu	r2,8(r2)
   4ef3c:	10bfffcc 	andi	r2,r2,65535
   4ef40:	10001526 	beq	r2,zero,4ef98 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   4ef44:	e0bff017 	ldw	r2,-64(fp)
   4ef48:	1080020b 	ldhu	r2,8(r2)
   4ef4c:	10bfffc4 	addi	r2,r2,-1
   4ef50:	1007883a 	mov	r3,r2
   4ef54:	e0bff017 	ldw	r2,-64(fp)
   4ef58:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   4ef5c:	e0bffd17 	ldw	r2,-12(fp)
   4ef60:	10c00104 	addi	r3,r2,4
   4ef64:	e0fffd15 	stw	r3,-12(fp)
   4ef68:	e0fff017 	ldw	r3,-64(fp)
   4ef6c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   4ef70:	00800044 	movi	r2,1
   4ef74:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   4ef78:	e0bffe17 	ldw	r2,-8(fp)
   4ef7c:	10c00104 	addi	r3,r2,4
   4ef80:	e0fffe15 	stw	r3,-8(fp)
   4ef84:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   4ef88:	e0bff18b 	ldhu	r2,-58(fp)
   4ef8c:	10800044 	addi	r2,r2,1
   4ef90:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   4ef94:	00005806 	br	4f0f8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   4ef98:	e0bff203 	ldbu	r2,-56(fp)
   4ef9c:	10800054 	ori	r2,r2,1
   4efa0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   4efa4:	00005406 	br	4f0f8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   4efa8:	e0bff017 	ldw	r2,-64(fp)
   4efac:	10800117 	ldw	r2,4(r2)
   4efb0:	10001326 	beq	r2,zero,4f000 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   4efb4:	e0bffe17 	ldw	r2,-8(fp)
   4efb8:	10c00104 	addi	r3,r2,4
   4efbc:	e0fffe15 	stw	r3,-8(fp)
   4efc0:	e0fff017 	ldw	r3,-64(fp)
   4efc4:	18c00117 	ldw	r3,4(r3)
   4efc8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   4efcc:	e0bff017 	ldw	r2,-64(fp)
   4efd0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   4efd4:	e0bffd17 	ldw	r2,-12(fp)
   4efd8:	10c00104 	addi	r3,r2,4
   4efdc:	e0fffd15 	stw	r3,-12(fp)
   4efe0:	e0fff017 	ldw	r3,-64(fp)
   4efe4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   4efe8:	00800044 	movi	r2,1
   4efec:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   4eff0:	e0bff18b 	ldhu	r2,-58(fp)
   4eff4:	10800044 	addi	r2,r2,1
   4eff8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   4effc:	00003e06 	br	4f0f8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   4f000:	e0bff203 	ldbu	r2,-56(fp)
   4f004:	10800094 	ori	r2,r2,2
   4f008:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   4f00c:	00003a06 	br	4f0f8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   4f010:	e0bff017 	ldw	r2,-64(fp)
   4f014:	10800117 	ldw	r2,4(r2)
   4f018:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   4f01c:	e0bff517 	ldw	r2,-44(fp)
   4f020:	1080058b 	ldhu	r2,22(r2)
   4f024:	10bfffcc 	andi	r2,r2,65535
   4f028:	10002426 	beq	r2,zero,4f0bc <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   4f02c:	e0bffe17 	ldw	r2,-8(fp)
   4f030:	10c00104 	addi	r3,r2,4
   4f034:	e0fffe15 	stw	r3,-8(fp)
   4f038:	e0fff517 	ldw	r3,-44(fp)
   4f03c:	18c00417 	ldw	r3,16(r3)
   4f040:	19400104 	addi	r5,r3,4
   4f044:	e13ff517 	ldw	r4,-44(fp)
   4f048:	21400415 	stw	r5,16(r4)
   4f04c:	18c00017 	ldw	r3,0(r3)
   4f050:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   4f054:	e0bff517 	ldw	r2,-44(fp)
   4f058:	10c00417 	ldw	r3,16(r2)
   4f05c:	e0bff517 	ldw	r2,-44(fp)
   4f060:	10800217 	ldw	r2,8(r2)
   4f064:	1880041e 	bne	r3,r2,4f078 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   4f068:	e0bff517 	ldw	r2,-44(fp)
   4f06c:	10c00117 	ldw	r3,4(r2)
   4f070:	e0bff517 	ldw	r2,-44(fp)
   4f074:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   4f078:	e0bff517 	ldw	r2,-44(fp)
   4f07c:	1080058b 	ldhu	r2,22(r2)
   4f080:	10bfffc4 	addi	r2,r2,-1
   4f084:	1007883a 	mov	r3,r2
   4f088:	e0bff517 	ldw	r2,-44(fp)
   4f08c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   4f090:	e0bffd17 	ldw	r2,-12(fp)
   4f094:	10c00104 	addi	r3,r2,4
   4f098:	e0fffd15 	stw	r3,-12(fp)
   4f09c:	e0fff017 	ldw	r3,-64(fp)
   4f0a0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   4f0a4:	00800044 	movi	r2,1
   4f0a8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   4f0ac:	e0bff18b 	ldhu	r2,-58(fp)
   4f0b0:	10800044 	addi	r2,r2,1
   4f0b4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   4f0b8:	00000f06 	br	4f0f8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   4f0bc:	e0bff203 	ldbu	r2,-56(fp)
   4f0c0:	10800114 	ori	r2,r2,4
   4f0c4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   4f0c8:	00000b06 	br	4f0f8 <OSEventPendMulti+0x388>
   4f0cc:	e0bff317 	ldw	r2,-52(fp)
   4f0d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f0d4:	e0bff417 	ldw	r2,-48(fp)
   4f0d8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   4f0dc:	e0bffd17 	ldw	r2,-12(fp)
   4f0e0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   4f0e4:	e0800217 	ldw	r2,8(fp)
   4f0e8:	00c00044 	movi	r3,1
   4f0ec:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   4f0f0:	e0bff18b 	ldhu	r2,-58(fp)
   4f0f4:	00009d06 	br	4f36c <OSEventPendMulti+0x5fc>
        }
        pevents++;
   4f0f8:	e0bfef17 	ldw	r2,-68(fp)
   4f0fc:	10800104 	addi	r2,r2,4
   4f100:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   4f104:	e0bfef17 	ldw	r2,-68(fp)
   4f108:	10800017 	ldw	r2,0(r2)
   4f10c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   4f110:	e0bff017 	ldw	r2,-64(fp)
   4f114:	103f7d1e 	bne	r2,zero,4ef0c <__alt_data_end+0xfffe970c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   4f118:	e0bff103 	ldbu	r2,-60(fp)
   4f11c:	10800058 	cmpnei	r2,r2,1
   4f120:	10000a1e 	bne	r2,zero,4f14c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   4f124:	e0bffd17 	ldw	r2,-12(fp)
   4f128:	10000015 	stw	zero,0(r2)
   4f12c:	e0bff317 	ldw	r2,-52(fp)
   4f130:	e0bff615 	stw	r2,-40(fp)
   4f134:	e0bff617 	ldw	r2,-40(fp)
   4f138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   4f13c:	e0800217 	ldw	r2,8(fp)
   4f140:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   4f144:	e0bff18b 	ldhu	r2,-58(fp)
   4f148:	00008806 	br	4f36c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   4f14c:	d0a73117 	ldw	r2,-25404(gp)
   4f150:	d0e73117 	ldw	r3,-25404(gp)
   4f154:	19000c03 	ldbu	r4,48(r3)
   4f158:	e0fff203 	ldbu	r3,-56(fp)
   4f15c:	20c6b03a 	or	r3,r4,r3
   4f160:	1809883a 	mov	r4,r3
   4f164:	00ffe004 	movi	r3,-128
   4f168:	20c6b03a 	or	r3,r4,r3
   4f16c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   4f170:	d0a73117 	ldw	r2,-25404(gp)
   4f174:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   4f178:	d0a73117 	ldw	r2,-25404(gp)
   4f17c:	e0ffff0b 	ldhu	r3,-4(fp)
   4f180:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   4f184:	e13ffc17 	ldw	r4,-16(fp)
   4f188:	004fcac0 	call	4fcac <OS_EventTaskWaitMulti>
   4f18c:	e0bff317 	ldw	r2,-52(fp)
   4f190:	e0bff915 	stw	r2,-28(fp)
   4f194:	e0bff917 	ldw	r2,-28(fp)
   4f198:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   4f19c:	00504500 	call	50450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f1a0:	0005303a 	rdctl	r2,status
   4f1a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f1a8:	e0fff717 	ldw	r3,-36(fp)
   4f1ac:	00bfff84 	movi	r2,-2
   4f1b0:	1884703a 	and	r2,r3,r2
   4f1b4:	1001703a 	wrctl	status,r2
  
  return context;
   4f1b8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   4f1bc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   4f1c0:	d0a73117 	ldw	r2,-25404(gp)
   4f1c4:	10800c43 	ldbu	r2,49(r2)
   4f1c8:	10803fcc 	andi	r2,r2,255
   4f1cc:	10000226 	beq	r2,zero,4f1d8 <OSEventPendMulti+0x468>
   4f1d0:	108000a0 	cmpeqi	r2,r2,2
   4f1d4:	10001826 	beq	r2,zero,4f238 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   4f1d8:	d0a73117 	ldw	r2,-25404(gp)
   4f1dc:	10800717 	ldw	r2,28(r2)
   4f1e0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   4f1e4:	e0bff017 	ldw	r2,-64(fp)
   4f1e8:	10000b26 	beq	r2,zero,4f218 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   4f1ec:	e0bffd17 	ldw	r2,-12(fp)
   4f1f0:	10c00104 	addi	r3,r2,4
   4f1f4:	e0fffd15 	stw	r3,-12(fp)
   4f1f8:	e0fff017 	ldw	r3,-64(fp)
   4f1fc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   4f200:	e0bffd17 	ldw	r2,-12(fp)
   4f204:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   4f208:	e0bff18b 	ldhu	r2,-58(fp)
   4f20c:	10800044 	addi	r2,r2,1
   4f210:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   4f214:	00000d06 	br	4f24c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   4f218:	d0a73117 	ldw	r2,-25404(gp)
   4f21c:	00c00044 	movi	r3,1
   4f220:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   4f224:	d0a73117 	ldw	r2,-25404(gp)
   4f228:	e17ffc17 	ldw	r5,-16(fp)
   4f22c:	1009883a 	mov	r4,r2
   4f230:	004feb40 	call	4feb4 <OS_EventTaskRemoveMulti>
             }
			 break;
   4f234:	00000506 	br	4f24c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   4f238:	d0a73117 	ldw	r2,-25404(gp)
   4f23c:	e17ffc17 	ldw	r5,-16(fp)
   4f240:	1009883a 	mov	r4,r2
   4f244:	004feb40 	call	4feb4 <OS_EventTaskRemoveMulti>
             break;
   4f248:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   4f24c:	d0a73117 	ldw	r2,-25404(gp)
   4f250:	10800c43 	ldbu	r2,49(r2)
   4f254:	10803fcc 	andi	r2,r2,255
   4f258:	10000326 	beq	r2,zero,4f268 <OSEventPendMulti+0x4f8>
   4f25c:	108000a0 	cmpeqi	r2,r2,2
   4f260:	1000231e 	bne	r2,zero,4f2f0 <OSEventPendMulti+0x580>
   4f264:	00002a06 	br	4f310 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   4f268:	e0bff017 	ldw	r2,-64(fp)
   4f26c:	10800003 	ldbu	r2,0(r2)
   4f270:	10803fcc 	andi	r2,r2,255
   4f274:	0080100e 	bge	zero,r2,4f2b8 <OSEventPendMulti+0x548>
   4f278:	10c000d0 	cmplti	r3,r2,3
   4f27c:	1800071e 	bne	r3,zero,4f29c <OSEventPendMulti+0x52c>
   4f280:	108000e0 	cmpeqi	r2,r2,3
   4f284:	10000c26 	beq	r2,zero,4f2b8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   4f288:	e0bffe17 	ldw	r2,-8(fp)
   4f28c:	10c00104 	addi	r3,r2,4
   4f290:	e0fffe15 	stw	r3,-8(fp)
   4f294:	10000015 	stw	zero,0(r2)
                      break;
   4f298:	00001206 	br	4f2e4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   4f29c:	e0bffe17 	ldw	r2,-8(fp)
   4f2a0:	10c00104 	addi	r3,r2,4
   4f2a4:	e0fffe15 	stw	r3,-8(fp)
   4f2a8:	d0e73117 	ldw	r3,-25404(gp)
   4f2ac:	18c00917 	ldw	r3,36(r3)
   4f2b0:	10c00015 	stw	r3,0(r2)
                      break;
   4f2b4:	00000b06 	br	4f2e4 <OSEventPendMulti+0x574>
   4f2b8:	e0bff317 	ldw	r2,-52(fp)
   4f2bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f2c0:	e0bff817 	ldw	r2,-32(fp)
   4f2c4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   4f2c8:	e0bffd17 	ldw	r2,-12(fp)
   4f2cc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   4f2d0:	e0800217 	ldw	r2,8(fp)
   4f2d4:	00c00044 	movi	r3,1
   4f2d8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   4f2dc:	e0bff18b 	ldhu	r2,-58(fp)
   4f2e0:	00002206 	br	4f36c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   4f2e4:	e0800217 	ldw	r2,8(fp)
   4f2e8:	10000005 	stb	zero,0(r2)
             break;
   4f2ec:	00001006 	br	4f330 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   4f2f0:	e0bffe17 	ldw	r2,-8(fp)
   4f2f4:	10c00104 	addi	r3,r2,4
   4f2f8:	e0fffe15 	stw	r3,-8(fp)
   4f2fc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   4f300:	e0800217 	ldw	r2,8(fp)
   4f304:	00c00384 	movi	r3,14
   4f308:	10c00005 	stb	r3,0(r2)
             break;
   4f30c:	00000806 	br	4f330 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   4f310:	e0bffe17 	ldw	r2,-8(fp)
   4f314:	10c00104 	addi	r3,r2,4
   4f318:	e0fffe15 	stw	r3,-8(fp)
   4f31c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   4f320:	e0800217 	ldw	r2,8(fp)
   4f324:	00c00284 	movi	r3,10
   4f328:	10c00005 	stb	r3,0(r2)
             break;
   4f32c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   4f330:	d0a73117 	ldw	r2,-25404(gp)
   4f334:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   4f338:	d0a73117 	ldw	r2,-25404(gp)
   4f33c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   4f340:	d0a73117 	ldw	r2,-25404(gp)
   4f344:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   4f348:	d0a73117 	ldw	r2,-25404(gp)
   4f34c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   4f350:	d0a73117 	ldw	r2,-25404(gp)
   4f354:	10000915 	stw	zero,36(r2)
   4f358:	e0bff317 	ldw	r2,-52(fp)
   4f35c:	e0bffa15 	stw	r2,-24(fp)
   4f360:	e0bffa17 	ldw	r2,-24(fp)
   4f364:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   4f368:	e0bff18b 	ldhu	r2,-58(fp)
}
   4f36c:	e037883a 	mov	sp,fp
   4f370:	dfc00117 	ldw	ra,4(sp)
   4f374:	df000017 	ldw	fp,0(sp)
   4f378:	dec00204 	addi	sp,sp,8
   4f37c:	f800283a 	ret

0004f380 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   4f380:	defffe04 	addi	sp,sp,-8
   4f384:	dfc00115 	stw	ra,4(sp)
   4f388:	df000015 	stw	fp,0(sp)
   4f38c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   4f390:	0058b5c0 	call	58b5c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   4f394:	00500fc0 	call	500fc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   4f398:	00501440 	call	50144 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   4f39c:	00502b00 	call	502b0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   4f3a0:	005001c0 	call	5001c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   4f3a4:	00521500 	call	52150 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   4f3a8:	00535180 	call	53518 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   4f3ac:	005464c0 	call	5464c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   4f3b0:	00501b00 	call	501b0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   4f3b4:	00502300 	call	50230 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   4f3b8:	0058b7c0 	call	58b7c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   4f3bc:	0050b240 	call	50b24 <OSDebugInit>
#endif
}
   4f3c0:	0001883a 	nop
   4f3c4:	e037883a 	mov	sp,fp
   4f3c8:	dfc00117 	ldw	ra,4(sp)
   4f3cc:	df000017 	ldw	fp,0(sp)
   4f3d0:	dec00204 	addi	sp,sp,8
   4f3d4:	f800283a 	ret

0004f3d8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   4f3d8:	deffff04 	addi	sp,sp,-4
   4f3dc:	df000015 	stw	fp,0(sp)
   4f3e0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   4f3e4:	d0a72243 	ldbu	r2,-25463(gp)
   4f3e8:	10803fcc 	andi	r2,r2,255
   4f3ec:	10800058 	cmpnei	r2,r2,1
   4f3f0:	1000071e 	bne	r2,zero,4f410 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   4f3f4:	d0a73003 	ldbu	r2,-25408(gp)
   4f3f8:	10803fcc 	andi	r2,r2,255
   4f3fc:	10803fe0 	cmpeqi	r2,r2,255
   4f400:	1000031e 	bne	r2,zero,4f410 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   4f404:	d0a73003 	ldbu	r2,-25408(gp)
   4f408:	10800044 	addi	r2,r2,1
   4f40c:	d0a73005 	stb	r2,-25408(gp)
        }
    }
}
   4f410:	0001883a 	nop
   4f414:	e037883a 	mov	sp,fp
   4f418:	df000017 	ldw	fp,0(sp)
   4f41c:	dec00104 	addi	sp,sp,4
   4f420:	f800283a 	ret

0004f424 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   4f424:	defffb04 	addi	sp,sp,-20
   4f428:	dfc00415 	stw	ra,16(sp)
   4f42c:	df000315 	stw	fp,12(sp)
   4f430:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4f434:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   4f438:	d0a72243 	ldbu	r2,-25463(gp)
   4f43c:	10803fcc 	andi	r2,r2,255
   4f440:	10800058 	cmpnei	r2,r2,1
   4f444:	10002f1e 	bne	r2,zero,4f504 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f448:	0005303a 	rdctl	r2,status
   4f44c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f450:	e0ffff17 	ldw	r3,-4(fp)
   4f454:	00bfff84 	movi	r2,-2
   4f458:	1884703a 	and	r2,r3,r2
   4f45c:	1001703a 	wrctl	status,r2
  
  return context;
   4f460:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   4f464:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   4f468:	d0a73003 	ldbu	r2,-25408(gp)
   4f46c:	10803fcc 	andi	r2,r2,255
   4f470:	10000326 	beq	r2,zero,4f480 <OSIntExit+0x5c>
            OSIntNesting--;
   4f474:	d0a73003 	ldbu	r2,-25408(gp)
   4f478:	10bfffc4 	addi	r2,r2,-1
   4f47c:	d0a73005 	stb	r2,-25408(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   4f480:	d0a73003 	ldbu	r2,-25408(gp)
   4f484:	10803fcc 	andi	r2,r2,255
   4f488:	10001a1e 	bne	r2,zero,4f4f4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   4f48c:	d0a72203 	ldbu	r2,-25464(gp)
   4f490:	10803fcc 	andi	r2,r2,255
   4f494:	1000171e 	bne	r2,zero,4f4f4 <OSIntExit+0xd0>
                OS_SchedNew();
   4f498:	00505200 	call	50520 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   4f49c:	d0e72403 	ldbu	r3,-25456(gp)
   4f4a0:	d0a72443 	ldbu	r2,-25455(gp)
   4f4a4:	18c03fcc 	andi	r3,r3,255
   4f4a8:	10803fcc 	andi	r2,r2,255
   4f4ac:	18801126 	beq	r3,r2,4f4f4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   4f4b0:	d0a72403 	ldbu	r2,-25456(gp)
   4f4b4:	10c03fcc 	andi	r3,r2,255
   4f4b8:	008001b4 	movhi	r2,6
   4f4bc:	10903a04 	addi	r2,r2,16616
   4f4c0:	18c7883a 	add	r3,r3,r3
   4f4c4:	18c7883a 	add	r3,r3,r3
   4f4c8:	10c5883a 	add	r2,r2,r3
   4f4cc:	10800017 	ldw	r2,0(r2)
   4f4d0:	d0a72c15 	stw	r2,-25424(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   4f4d4:	d0a72c17 	ldw	r2,-25424(gp)
   4f4d8:	10c00e17 	ldw	r3,56(r2)
   4f4dc:	18c00044 	addi	r3,r3,1
   4f4e0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   4f4e4:	d0a72717 	ldw	r2,-25444(gp)
   4f4e8:	10800044 	addi	r2,r2,1
   4f4ec:	d0a72715 	stw	r2,-25444(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   4f4f0:	00588880 	call	58888 <OSCtxSw>
   4f4f4:	e0bffd17 	ldw	r2,-12(fp)
   4f4f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f4fc:	e0bffe17 	ldw	r2,-8(fp)
   4f500:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   4f504:	0001883a 	nop
   4f508:	e037883a 	mov	sp,fp
   4f50c:	dfc00117 	ldw	ra,4(sp)
   4f510:	df000017 	ldw	fp,0(sp)
   4f514:	dec00204 	addi	sp,sp,8
   4f518:	f800283a 	ret

0004f51c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   4f51c:	defffc04 	addi	sp,sp,-16
   4f520:	df000315 	stw	fp,12(sp)
   4f524:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4f528:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   4f52c:	d0a72243 	ldbu	r2,-25463(gp)
   4f530:	10803fcc 	andi	r2,r2,255
   4f534:	10800058 	cmpnei	r2,r2,1
   4f538:	1000161e 	bne	r2,zero,4f594 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f53c:	0005303a 	rdctl	r2,status
   4f540:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f544:	e0ffff17 	ldw	r3,-4(fp)
   4f548:	00bfff84 	movi	r2,-2
   4f54c:	1884703a 	and	r2,r3,r2
   4f550:	1001703a 	wrctl	status,r2
  
  return context;
   4f554:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   4f558:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   4f55c:	d0a73003 	ldbu	r2,-25408(gp)
   4f560:	10803fcc 	andi	r2,r2,255
   4f564:	1000071e 	bne	r2,zero,4f584 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   4f568:	d0a72203 	ldbu	r2,-25464(gp)
   4f56c:	10803fcc 	andi	r2,r2,255
   4f570:	10803fe0 	cmpeqi	r2,r2,255
   4f574:	1000031e 	bne	r2,zero,4f584 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   4f578:	d0a72203 	ldbu	r2,-25464(gp)
   4f57c:	10800044 	addi	r2,r2,1
   4f580:	d0a72205 	stb	r2,-25464(gp)
   4f584:	e0bffd17 	ldw	r2,-12(fp)
   4f588:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f58c:	e0bffe17 	ldw	r2,-8(fp)
   4f590:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   4f594:	0001883a 	nop
   4f598:	e037883a 	mov	sp,fp
   4f59c:	df000017 	ldw	fp,0(sp)
   4f5a0:	dec00104 	addi	sp,sp,4
   4f5a4:	f800283a 	ret

0004f5a8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   4f5a8:	defff804 	addi	sp,sp,-32
   4f5ac:	dfc00715 	stw	ra,28(sp)
   4f5b0:	df000615 	stw	fp,24(sp)
   4f5b4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4f5b8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   4f5bc:	d0a72243 	ldbu	r2,-25463(gp)
   4f5c0:	10803fcc 	andi	r2,r2,255
   4f5c4:	10800058 	cmpnei	r2,r2,1
   4f5c8:	1000281e 	bne	r2,zero,4f66c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f5cc:	0005303a 	rdctl	r2,status
   4f5d0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f5d4:	e0ffff17 	ldw	r3,-4(fp)
   4f5d8:	00bfff84 	movi	r2,-2
   4f5dc:	1884703a 	and	r2,r3,r2
   4f5e0:	1001703a 	wrctl	status,r2
  
  return context;
   4f5e4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   4f5e8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   4f5ec:	d0a72203 	ldbu	r2,-25464(gp)
   4f5f0:	10803fcc 	andi	r2,r2,255
   4f5f4:	10001926 	beq	r2,zero,4f65c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   4f5f8:	d0a72203 	ldbu	r2,-25464(gp)
   4f5fc:	10bfffc4 	addi	r2,r2,-1
   4f600:	d0a72205 	stb	r2,-25464(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   4f604:	d0a72203 	ldbu	r2,-25464(gp)
   4f608:	10803fcc 	andi	r2,r2,255
   4f60c:	10000e1e 	bne	r2,zero,4f648 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   4f610:	d0a73003 	ldbu	r2,-25408(gp)
   4f614:	10803fcc 	andi	r2,r2,255
   4f618:	1000061e 	bne	r2,zero,4f634 <OSSchedUnlock+0x8c>
   4f61c:	e0bffa17 	ldw	r2,-24(fp)
   4f620:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f624:	e0bffb17 	ldw	r2,-20(fp)
   4f628:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   4f62c:	00504500 	call	50450 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   4f630:	00000e06 	br	4f66c <OSSchedUnlock+0xc4>
   4f634:	e0bffa17 	ldw	r2,-24(fp)
   4f638:	e0bffc15 	stw	r2,-16(fp)
   4f63c:	e0bffc17 	ldw	r2,-16(fp)
   4f640:	1001703a 	wrctl	status,r2
   4f644:	00000906 	br	4f66c <OSSchedUnlock+0xc4>
   4f648:	e0bffa17 	ldw	r2,-24(fp)
   4f64c:	e0bffd15 	stw	r2,-12(fp)
   4f650:	e0bffd17 	ldw	r2,-12(fp)
   4f654:	1001703a 	wrctl	status,r2
   4f658:	00000406 	br	4f66c <OSSchedUnlock+0xc4>
   4f65c:	e0bffa17 	ldw	r2,-24(fp)
   4f660:	e0bffe15 	stw	r2,-8(fp)
   4f664:	e0bffe17 	ldw	r2,-8(fp)
   4f668:	1001703a 	wrctl	status,r2
   4f66c:	0001883a 	nop
   4f670:	e037883a 	mov	sp,fp
   4f674:	dfc00117 	ldw	ra,4(sp)
   4f678:	df000017 	ldw	fp,0(sp)
   4f67c:	dec00204 	addi	sp,sp,8
   4f680:	f800283a 	ret

0004f684 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   4f684:	defffe04 	addi	sp,sp,-8
   4f688:	dfc00115 	stw	ra,4(sp)
   4f68c:	df000015 	stw	fp,0(sp)
   4f690:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   4f694:	d0a72243 	ldbu	r2,-25463(gp)
   4f698:	10803fcc 	andi	r2,r2,255
   4f69c:	10000f1e 	bne	r2,zero,4f6dc <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   4f6a0:	00505200 	call	50520 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   4f6a4:	d0a72403 	ldbu	r2,-25456(gp)
   4f6a8:	d0a72445 	stb	r2,-25455(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   4f6ac:	d0a72403 	ldbu	r2,-25456(gp)
   4f6b0:	10c03fcc 	andi	r3,r2,255
   4f6b4:	008001b4 	movhi	r2,6
   4f6b8:	10903a04 	addi	r2,r2,16616
   4f6bc:	18c7883a 	add	r3,r3,r3
   4f6c0:	18c7883a 	add	r3,r3,r3
   4f6c4:	10c5883a 	add	r2,r2,r3
   4f6c8:	10800017 	ldw	r2,0(r2)
   4f6cc:	d0a72c15 	stw	r2,-25424(gp)
        OSTCBCur      = OSTCBHighRdy;
   4f6d0:	d0a72c17 	ldw	r2,-25424(gp)
   4f6d4:	d0a73115 	stw	r2,-25404(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   4f6d8:	00589140 	call	58914 <OSStartHighRdy>
    }
}
   4f6dc:	0001883a 	nop
   4f6e0:	e037883a 	mov	sp,fp
   4f6e4:	dfc00117 	ldw	ra,4(sp)
   4f6e8:	df000017 	ldw	fp,0(sp)
   4f6ec:	dec00204 	addi	sp,sp,8
   4f6f0:	f800283a 	ret

0004f6f4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   4f6f4:	defff904 	addi	sp,sp,-28
   4f6f8:	dfc00615 	stw	ra,24(sp)
   4f6fc:	df000515 	stw	fp,20(sp)
   4f700:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4f704:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   4f708:	01000084 	movi	r4,2
   4f70c:	00568c00 	call	568c0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f710:	0005303a 	rdctl	r2,status
   4f714:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f718:	e0fffc17 	ldw	r3,-16(fp)
   4f71c:	00bfff84 	movi	r2,-2
   4f720:	1884703a 	and	r2,r3,r2
   4f724:	1001703a 	wrctl	status,r2
  
  return context;
   4f728:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   4f72c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   4f730:	d0272315 	stw	zero,-25460(gp)
   4f734:	e0bffb17 	ldw	r2,-20(fp)
   4f738:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f73c:	e0bffd17 	ldw	r2,-12(fp)
   4f740:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   4f744:	01001904 	movi	r4,100
   4f748:	00568c00 	call	568c0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f74c:	0005303a 	rdctl	r2,status
   4f750:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f754:	e0fffe17 	ldw	r3,-8(fp)
   4f758:	00bfff84 	movi	r2,-2
   4f75c:	1884703a 	and	r2,r3,r2
   4f760:	1001703a 	wrctl	status,r2
  
  return context;
   4f764:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   4f768:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   4f76c:	d0a72317 	ldw	r2,-25460(gp)
   4f770:	d0a72815 	stw	r2,-25440(gp)
    OSStatRdy    = OS_TRUE;
   4f774:	00800044 	movi	r2,1
   4f778:	d0a73405 	stb	r2,-25392(gp)
   4f77c:	e0bffb17 	ldw	r2,-20(fp)
   4f780:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f784:	e0bfff17 	ldw	r2,-4(fp)
   4f788:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   4f78c:	0001883a 	nop
   4f790:	e037883a 	mov	sp,fp
   4f794:	dfc00117 	ldw	ra,4(sp)
   4f798:	df000017 	ldw	fp,0(sp)
   4f79c:	dec00204 	addi	sp,sp,8
   4f7a0:	f800283a 	ret

0004f7a4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   4f7a4:	defff704 	addi	sp,sp,-36
   4f7a8:	dfc00815 	stw	ra,32(sp)
   4f7ac:	df000715 	stw	fp,28(sp)
   4f7b0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   4f7b4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   4f7b8:	0058b3c0 	call	58b3c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f7bc:	0005303a 	rdctl	r2,status
   4f7c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f7c4:	e0fffd17 	ldw	r3,-12(fp)
   4f7c8:	00bfff84 	movi	r2,-2
   4f7cc:	1884703a 	and	r2,r3,r2
   4f7d0:	1001703a 	wrctl	status,r2
  
  return context;
   4f7d4:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   4f7d8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   4f7dc:	d0a73217 	ldw	r2,-25400(gp)
   4f7e0:	10800044 	addi	r2,r2,1
   4f7e4:	d0a73215 	stw	r2,-25400(gp)
   4f7e8:	e0bffb17 	ldw	r2,-20(fp)
   4f7ec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f7f0:	e0bfff17 	ldw	r2,-4(fp)
   4f7f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   4f7f8:	d0a72243 	ldbu	r2,-25463(gp)
   4f7fc:	10803fcc 	andi	r2,r2,255
   4f800:	10800058 	cmpnei	r2,r2,1
   4f804:	10006a1e 	bne	r2,zero,4f9b0 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   4f808:	d0a72603 	ldbu	r2,-25448(gp)
   4f80c:	10803fcc 	andi	r2,r2,255
   4f810:	10c00060 	cmpeqi	r3,r2,1
   4f814:	1800061e 	bne	r3,zero,4f830 <OSTimeTick+0x8c>
   4f818:	10c000a0 	cmpeqi	r3,r2,2
   4f81c:	1800061e 	bne	r3,zero,4f838 <OSTimeTick+0x94>
   4f820:	10000a1e 	bne	r2,zero,4f84c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   4f824:	00800044 	movi	r2,1
   4f828:	e0bffa05 	stb	r2,-24(fp)
                 break;
   4f82c:	00000b06 	br	4f85c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   4f830:	e03ffa05 	stb	zero,-24(fp)
                 break;
   4f834:	00000906 	br	4f85c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   4f838:	00800044 	movi	r2,1
   4f83c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   4f840:	00800044 	movi	r2,1
   4f844:	d0a72605 	stb	r2,-25448(gp)
                 break;
   4f848:	00000406 	br	4f85c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   4f84c:	00800044 	movi	r2,1
   4f850:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   4f854:	d0272605 	stb	zero,-25448(gp)
                 break;
   4f858:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   4f85c:	e0bffa03 	ldbu	r2,-24(fp)
   4f860:	10005226 	beq	r2,zero,4f9ac <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   4f864:	d0a72517 	ldw	r2,-25452(gp)
   4f868:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   4f86c:	00004906 	br	4f994 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f870:	0005303a 	rdctl	r2,status
   4f874:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f878:	e0fffc17 	ldw	r3,-16(fp)
   4f87c:	00bfff84 	movi	r2,-2
   4f880:	1884703a 	and	r2,r3,r2
   4f884:	1001703a 	wrctl	status,r2
  
  return context;
   4f888:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   4f88c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   4f890:	e0bff917 	ldw	r2,-28(fp)
   4f894:	10800b8b 	ldhu	r2,46(r2)
   4f898:	10bfffcc 	andi	r2,r2,65535
   4f89c:	10003626 	beq	r2,zero,4f978 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   4f8a0:	e0bff917 	ldw	r2,-28(fp)
   4f8a4:	10800b8b 	ldhu	r2,46(r2)
   4f8a8:	10bfffc4 	addi	r2,r2,-1
   4f8ac:	1007883a 	mov	r3,r2
   4f8b0:	e0bff917 	ldw	r2,-28(fp)
   4f8b4:	10c00b8d 	sth	r3,46(r2)
   4f8b8:	e0bff917 	ldw	r2,-28(fp)
   4f8bc:	10800b8b 	ldhu	r2,46(r2)
   4f8c0:	10bfffcc 	andi	r2,r2,65535
   4f8c4:	10002c1e 	bne	r2,zero,4f978 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   4f8c8:	e0bff917 	ldw	r2,-28(fp)
   4f8cc:	10800c03 	ldbu	r2,48(r2)
   4f8d0:	10803fcc 	andi	r2,r2,255
   4f8d4:	10800dcc 	andi	r2,r2,55
   4f8d8:	10000b26 	beq	r2,zero,4f908 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   4f8dc:	e0bff917 	ldw	r2,-28(fp)
   4f8e0:	10c00c03 	ldbu	r3,48(r2)
   4f8e4:	00bff204 	movi	r2,-56
   4f8e8:	1884703a 	and	r2,r3,r2
   4f8ec:	1007883a 	mov	r3,r2
   4f8f0:	e0bff917 	ldw	r2,-28(fp)
   4f8f4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   4f8f8:	e0bff917 	ldw	r2,-28(fp)
   4f8fc:	00c00044 	movi	r3,1
   4f900:	10c00c45 	stb	r3,49(r2)
   4f904:	00000206 	br	4f910 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   4f908:	e0bff917 	ldw	r2,-28(fp)
   4f90c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   4f910:	e0bff917 	ldw	r2,-28(fp)
   4f914:	10800c03 	ldbu	r2,48(r2)
   4f918:	10803fcc 	andi	r2,r2,255
   4f91c:	1080020c 	andi	r2,r2,8
   4f920:	1000151e 	bne	r2,zero,4f978 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   4f924:	e0bff917 	ldw	r2,-28(fp)
   4f928:	10c00d83 	ldbu	r3,54(r2)
   4f92c:	d0a72e03 	ldbu	r2,-25416(gp)
   4f930:	1884b03a 	or	r2,r3,r2
   4f934:	d0a72e05 	stb	r2,-25416(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   4f938:	e0bff917 	ldw	r2,-28(fp)
   4f93c:	10800d03 	ldbu	r2,52(r2)
   4f940:	10c03fcc 	andi	r3,r2,255
   4f944:	e0bff917 	ldw	r2,-28(fp)
   4f948:	10800d03 	ldbu	r2,52(r2)
   4f94c:	11003fcc 	andi	r4,r2,255
   4f950:	d0a72e44 	addi	r2,gp,-25415
   4f954:	2085883a 	add	r2,r4,r2
   4f958:	11000003 	ldbu	r4,0(r2)
   4f95c:	e0bff917 	ldw	r2,-28(fp)
   4f960:	10800d43 	ldbu	r2,53(r2)
   4f964:	2084b03a 	or	r2,r4,r2
   4f968:	1009883a 	mov	r4,r2
   4f96c:	d0a72e44 	addi	r2,gp,-25415
   4f970:	1885883a 	add	r2,r3,r2
   4f974:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   4f978:	e0bff917 	ldw	r2,-28(fp)
   4f97c:	10800517 	ldw	r2,20(r2)
   4f980:	e0bff915 	stw	r2,-28(fp)
   4f984:	e0bffb17 	ldw	r2,-20(fp)
   4f988:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f98c:	e0bffe17 	ldw	r2,-8(fp)
   4f990:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   4f994:	e0bff917 	ldw	r2,-28(fp)
   4f998:	10800c83 	ldbu	r2,50(r2)
   4f99c:	10803fcc 	andi	r2,r2,255
   4f9a0:	10800518 	cmpnei	r2,r2,20
   4f9a4:	103fb21e 	bne	r2,zero,4f870 <__alt_data_end+0xfffea070>
   4f9a8:	00000106 	br	4f9b0 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   4f9ac:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   4f9b0:	e037883a 	mov	sp,fp
   4f9b4:	dfc00117 	ldw	ra,4(sp)
   4f9b8:	df000017 	ldw	fp,0(sp)
   4f9bc:	dec00204 	addi	sp,sp,8
   4f9c0:	f800283a 	ret

0004f9c4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   4f9c4:	deffff04 	addi	sp,sp,-4
   4f9c8:	df000015 	stw	fp,0(sp)
   4f9cc:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   4f9d0:	00804784 	movi	r2,286
}
   4f9d4:	e037883a 	mov	sp,fp
   4f9d8:	df000017 	ldw	fp,0(sp)
   4f9dc:	dec00104 	addi	sp,sp,4
   4f9e0:	f800283a 	ret

0004f9e4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   4f9e4:	deffff04 	addi	sp,sp,-4
   4f9e8:	df000015 	stw	fp,0(sp)
   4f9ec:	d839883a 	mov	fp,sp
}
   4f9f0:	0001883a 	nop
   4f9f4:	e037883a 	mov	sp,fp
   4f9f8:	df000017 	ldw	fp,0(sp)
   4f9fc:	dec00104 	addi	sp,sp,4
   4fa00:	f800283a 	ret

0004fa04 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   4fa04:	defff804 	addi	sp,sp,-32
   4fa08:	dfc00715 	stw	ra,28(sp)
   4fa0c:	df000615 	stw	fp,24(sp)
   4fa10:	df000604 	addi	fp,sp,24
   4fa14:	e13ffc15 	stw	r4,-16(fp)
   4fa18:	e17ffd15 	stw	r5,-12(fp)
   4fa1c:	3007883a 	mov	r3,r6
   4fa20:	3805883a 	mov	r2,r7
   4fa24:	e0fffe05 	stb	r3,-8(fp)
   4fa28:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   4fa2c:	e0bffc17 	ldw	r2,-16(fp)
   4fa30:	10800283 	ldbu	r2,10(r2)
   4fa34:	10c03fcc 	andi	r3,r2,255
   4fa38:	008001b4 	movhi	r2,6
   4fa3c:	10a54804 	addi	r2,r2,-27360
   4fa40:	10c5883a 	add	r2,r2,r3
   4fa44:	10800003 	ldbu	r2,0(r2)
   4fa48:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   4fa4c:	e0bffa03 	ldbu	r2,-24(fp)
   4fa50:	e0fffc17 	ldw	r3,-16(fp)
   4fa54:	1885883a 	add	r2,r3,r2
   4fa58:	108002c4 	addi	r2,r2,11
   4fa5c:	10800003 	ldbu	r2,0(r2)
   4fa60:	10c03fcc 	andi	r3,r2,255
   4fa64:	008001b4 	movhi	r2,6
   4fa68:	10a54804 	addi	r2,r2,-27360
   4fa6c:	10c5883a 	add	r2,r2,r3
   4fa70:	10800003 	ldbu	r2,0(r2)
   4fa74:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   4fa78:	e0bffa03 	ldbu	r2,-24(fp)
   4fa7c:	100490fa 	slli	r2,r2,3
   4fa80:	1007883a 	mov	r3,r2
   4fa84:	e0bffa43 	ldbu	r2,-23(fp)
   4fa88:	1885883a 	add	r2,r3,r2
   4fa8c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   4fa90:	e0fffa83 	ldbu	r3,-22(fp)
   4fa94:	008001b4 	movhi	r2,6
   4fa98:	10903a04 	addi	r2,r2,16616
   4fa9c:	18c7883a 	add	r3,r3,r3
   4faa0:	18c7883a 	add	r3,r3,r3
   4faa4:	10c5883a 	add	r2,r2,r3
   4faa8:	10800017 	ldw	r2,0(r2)
   4faac:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   4fab0:	e0bffb17 	ldw	r2,-20(fp)
   4fab4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   4fab8:	e0bffb17 	ldw	r2,-20(fp)
   4fabc:	e0fffd17 	ldw	r3,-12(fp)
   4fac0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   4fac4:	e0bffb17 	ldw	r2,-20(fp)
   4fac8:	10800c03 	ldbu	r2,48(r2)
   4facc:	1007883a 	mov	r3,r2
   4fad0:	e0bffe03 	ldbu	r2,-8(fp)
   4fad4:	0084303a 	nor	r2,zero,r2
   4fad8:	1884703a 	and	r2,r3,r2
   4fadc:	1007883a 	mov	r3,r2
   4fae0:	e0bffb17 	ldw	r2,-20(fp)
   4fae4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   4fae8:	e0bffb17 	ldw	r2,-20(fp)
   4faec:	e0ffff03 	ldbu	r3,-4(fp)
   4faf0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   4faf4:	e0bffb17 	ldw	r2,-20(fp)
   4faf8:	10800c03 	ldbu	r2,48(r2)
   4fafc:	10803fcc 	andi	r2,r2,255
   4fb00:	1080020c 	andi	r2,r2,8
   4fb04:	1000111e 	bne	r2,zero,4fb4c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   4fb08:	e0bffb17 	ldw	r2,-20(fp)
   4fb0c:	10c00d83 	ldbu	r3,54(r2)
   4fb10:	d0a72e03 	ldbu	r2,-25416(gp)
   4fb14:	1884b03a 	or	r2,r3,r2
   4fb18:	d0a72e05 	stb	r2,-25416(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   4fb1c:	e0fffa03 	ldbu	r3,-24(fp)
   4fb20:	e13ffa03 	ldbu	r4,-24(fp)
   4fb24:	d0a72e44 	addi	r2,gp,-25415
   4fb28:	2085883a 	add	r2,r4,r2
   4fb2c:	11000003 	ldbu	r4,0(r2)
   4fb30:	e0bffb17 	ldw	r2,-20(fp)
   4fb34:	10800d43 	ldbu	r2,53(r2)
   4fb38:	2084b03a 	or	r2,r4,r2
   4fb3c:	1009883a 	mov	r4,r2
   4fb40:	d0a72e44 	addi	r2,gp,-25415
   4fb44:	1885883a 	add	r2,r3,r2
   4fb48:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   4fb4c:	e17ffc17 	ldw	r5,-16(fp)
   4fb50:	e13ffb17 	ldw	r4,-20(fp)
   4fb54:	004fdfc0 	call	4fdfc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   4fb58:	e0bffb17 	ldw	r2,-20(fp)
   4fb5c:	10800817 	ldw	r2,32(r2)
   4fb60:	10000826 	beq	r2,zero,4fb84 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   4fb64:	e0bffb17 	ldw	r2,-20(fp)
   4fb68:	10800817 	ldw	r2,32(r2)
   4fb6c:	100b883a 	mov	r5,r2
   4fb70:	e13ffb17 	ldw	r4,-20(fp)
   4fb74:	004feb40 	call	4feb4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   4fb78:	e0bffb17 	ldw	r2,-20(fp)
   4fb7c:	e0fffc17 	ldw	r3,-16(fp)
   4fb80:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   4fb84:	e0bffa83 	ldbu	r2,-22(fp)
}
   4fb88:	e037883a 	mov	sp,fp
   4fb8c:	dfc00117 	ldw	ra,4(sp)
   4fb90:	df000017 	ldw	fp,0(sp)
   4fb94:	dec00204 	addi	sp,sp,8
   4fb98:	f800283a 	ret

0004fb9c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   4fb9c:	defffd04 	addi	sp,sp,-12
   4fba0:	df000215 	stw	fp,8(sp)
   4fba4:	df000204 	addi	fp,sp,8
   4fba8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   4fbac:	d0a73117 	ldw	r2,-25404(gp)
   4fbb0:	e0ffff17 	ldw	r3,-4(fp)
   4fbb4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   4fbb8:	d0a73117 	ldw	r2,-25404(gp)
   4fbbc:	10800d03 	ldbu	r2,52(r2)
   4fbc0:	10803fcc 	andi	r2,r2,255
   4fbc4:	d0e73117 	ldw	r3,-25404(gp)
   4fbc8:	18c00d03 	ldbu	r3,52(r3)
   4fbcc:	18c03fcc 	andi	r3,r3,255
   4fbd0:	e13fff17 	ldw	r4,-4(fp)
   4fbd4:	20c7883a 	add	r3,r4,r3
   4fbd8:	18c002c4 	addi	r3,r3,11
   4fbdc:	19000003 	ldbu	r4,0(r3)
   4fbe0:	d0e73117 	ldw	r3,-25404(gp)
   4fbe4:	18c00d43 	ldbu	r3,53(r3)
   4fbe8:	20c6b03a 	or	r3,r4,r3
   4fbec:	1809883a 	mov	r4,r3
   4fbf0:	e0ffff17 	ldw	r3,-4(fp)
   4fbf4:	1885883a 	add	r2,r3,r2
   4fbf8:	108002c4 	addi	r2,r2,11
   4fbfc:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   4fc00:	e0bfff17 	ldw	r2,-4(fp)
   4fc04:	10c00283 	ldbu	r3,10(r2)
   4fc08:	d0a73117 	ldw	r2,-25404(gp)
   4fc0c:	10800d83 	ldbu	r2,54(r2)
   4fc10:	1884b03a 	or	r2,r3,r2
   4fc14:	1007883a 	mov	r3,r2
   4fc18:	e0bfff17 	ldw	r2,-4(fp)
   4fc1c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   4fc20:	d0a73117 	ldw	r2,-25404(gp)
   4fc24:	10800d03 	ldbu	r2,52(r2)
   4fc28:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   4fc2c:	e0fffe03 	ldbu	r3,-8(fp)
   4fc30:	e13ffe03 	ldbu	r4,-8(fp)
   4fc34:	d0a72e44 	addi	r2,gp,-25415
   4fc38:	2085883a 	add	r2,r4,r2
   4fc3c:	10800003 	ldbu	r2,0(r2)
   4fc40:	1009883a 	mov	r4,r2
   4fc44:	d0a73117 	ldw	r2,-25404(gp)
   4fc48:	10800d43 	ldbu	r2,53(r2)
   4fc4c:	0084303a 	nor	r2,zero,r2
   4fc50:	2084703a 	and	r2,r4,r2
   4fc54:	1009883a 	mov	r4,r2
   4fc58:	d0a72e44 	addi	r2,gp,-25415
   4fc5c:	1885883a 	add	r2,r3,r2
   4fc60:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   4fc64:	e0fffe03 	ldbu	r3,-8(fp)
   4fc68:	d0a72e44 	addi	r2,gp,-25415
   4fc6c:	1885883a 	add	r2,r3,r2
   4fc70:	10800003 	ldbu	r2,0(r2)
   4fc74:	10803fcc 	andi	r2,r2,255
   4fc78:	1000071e 	bne	r2,zero,4fc98 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   4fc7c:	d0a73117 	ldw	r2,-25404(gp)
   4fc80:	10800d83 	ldbu	r2,54(r2)
   4fc84:	0084303a 	nor	r2,zero,r2
   4fc88:	1007883a 	mov	r3,r2
   4fc8c:	d0a72e03 	ldbu	r2,-25416(gp)
   4fc90:	1884703a 	and	r2,r3,r2
   4fc94:	d0a72e05 	stb	r2,-25416(gp)
    }
}
   4fc98:	0001883a 	nop
   4fc9c:	e037883a 	mov	sp,fp
   4fca0:	df000017 	ldw	fp,0(sp)
   4fca4:	dec00104 	addi	sp,sp,4
   4fca8:	f800283a 	ret

0004fcac <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   4fcac:	defffb04 	addi	sp,sp,-20
   4fcb0:	df000415 	stw	fp,16(sp)
   4fcb4:	df000404 	addi	fp,sp,16
   4fcb8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   4fcbc:	d0a73117 	ldw	r2,-25404(gp)
   4fcc0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   4fcc4:	d0a73117 	ldw	r2,-25404(gp)
   4fcc8:	e0ffff17 	ldw	r3,-4(fp)
   4fccc:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   4fcd0:	e0bfff17 	ldw	r2,-4(fp)
   4fcd4:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   4fcd8:	e0bffc17 	ldw	r2,-16(fp)
   4fcdc:	10800017 	ldw	r2,0(r2)
   4fce0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   4fce4:	00002006 	br	4fd68 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   4fce8:	d0a73117 	ldw	r2,-25404(gp)
   4fcec:	10800d03 	ldbu	r2,52(r2)
   4fcf0:	10803fcc 	andi	r2,r2,255
   4fcf4:	d0e73117 	ldw	r3,-25404(gp)
   4fcf8:	18c00d03 	ldbu	r3,52(r3)
   4fcfc:	18c03fcc 	andi	r3,r3,255
   4fd00:	e13ffd17 	ldw	r4,-12(fp)
   4fd04:	20c7883a 	add	r3,r4,r3
   4fd08:	18c002c4 	addi	r3,r3,11
   4fd0c:	19000003 	ldbu	r4,0(r3)
   4fd10:	d0e73117 	ldw	r3,-25404(gp)
   4fd14:	18c00d43 	ldbu	r3,53(r3)
   4fd18:	20c6b03a 	or	r3,r4,r3
   4fd1c:	1809883a 	mov	r4,r3
   4fd20:	e0fffd17 	ldw	r3,-12(fp)
   4fd24:	1885883a 	add	r2,r3,r2
   4fd28:	108002c4 	addi	r2,r2,11
   4fd2c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   4fd30:	e0bffd17 	ldw	r2,-12(fp)
   4fd34:	10c00283 	ldbu	r3,10(r2)
   4fd38:	d0a73117 	ldw	r2,-25404(gp)
   4fd3c:	10800d83 	ldbu	r2,54(r2)
   4fd40:	1884b03a 	or	r2,r3,r2
   4fd44:	1007883a 	mov	r3,r2
   4fd48:	e0bffd17 	ldw	r2,-12(fp)
   4fd4c:	10c00285 	stb	r3,10(r2)
        pevents++;
   4fd50:	e0bffc17 	ldw	r2,-16(fp)
   4fd54:	10800104 	addi	r2,r2,4
   4fd58:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   4fd5c:	e0bffc17 	ldw	r2,-16(fp)
   4fd60:	10800017 	ldw	r2,0(r2)
   4fd64:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   4fd68:	e0bffd17 	ldw	r2,-12(fp)
   4fd6c:	103fde1e 	bne	r2,zero,4fce8 <__alt_data_end+0xfffea4e8>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   4fd70:	d0a73117 	ldw	r2,-25404(gp)
   4fd74:	10800d03 	ldbu	r2,52(r2)
   4fd78:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   4fd7c:	e0fffe03 	ldbu	r3,-8(fp)
   4fd80:	e13ffe03 	ldbu	r4,-8(fp)
   4fd84:	d0a72e44 	addi	r2,gp,-25415
   4fd88:	2085883a 	add	r2,r4,r2
   4fd8c:	10800003 	ldbu	r2,0(r2)
   4fd90:	1009883a 	mov	r4,r2
   4fd94:	d0a73117 	ldw	r2,-25404(gp)
   4fd98:	10800d43 	ldbu	r2,53(r2)
   4fd9c:	0084303a 	nor	r2,zero,r2
   4fda0:	2084703a 	and	r2,r4,r2
   4fda4:	1009883a 	mov	r4,r2
   4fda8:	d0a72e44 	addi	r2,gp,-25415
   4fdac:	1885883a 	add	r2,r3,r2
   4fdb0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   4fdb4:	e0fffe03 	ldbu	r3,-8(fp)
   4fdb8:	d0a72e44 	addi	r2,gp,-25415
   4fdbc:	1885883a 	add	r2,r3,r2
   4fdc0:	10800003 	ldbu	r2,0(r2)
   4fdc4:	10803fcc 	andi	r2,r2,255
   4fdc8:	1000071e 	bne	r2,zero,4fde8 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   4fdcc:	d0a73117 	ldw	r2,-25404(gp)
   4fdd0:	10800d83 	ldbu	r2,54(r2)
   4fdd4:	0084303a 	nor	r2,zero,r2
   4fdd8:	1007883a 	mov	r3,r2
   4fddc:	d0a72e03 	ldbu	r2,-25416(gp)
   4fde0:	1884703a 	and	r2,r3,r2
   4fde4:	d0a72e05 	stb	r2,-25416(gp)
    }
}
   4fde8:	0001883a 	nop
   4fdec:	e037883a 	mov	sp,fp
   4fdf0:	df000017 	ldw	fp,0(sp)
   4fdf4:	dec00104 	addi	sp,sp,4
   4fdf8:	f800283a 	ret

0004fdfc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   4fdfc:	defffc04 	addi	sp,sp,-16
   4fe00:	df000315 	stw	fp,12(sp)
   4fe04:	df000304 	addi	fp,sp,12
   4fe08:	e13ffe15 	stw	r4,-8(fp)
   4fe0c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   4fe10:	e0bffe17 	ldw	r2,-8(fp)
   4fe14:	10800d03 	ldbu	r2,52(r2)
   4fe18:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   4fe1c:	e0bffd03 	ldbu	r2,-12(fp)
   4fe20:	e0fffd03 	ldbu	r3,-12(fp)
   4fe24:	e13fff17 	ldw	r4,-4(fp)
   4fe28:	20c7883a 	add	r3,r4,r3
   4fe2c:	18c002c4 	addi	r3,r3,11
   4fe30:	18c00003 	ldbu	r3,0(r3)
   4fe34:	1809883a 	mov	r4,r3
   4fe38:	e0fffe17 	ldw	r3,-8(fp)
   4fe3c:	18c00d43 	ldbu	r3,53(r3)
   4fe40:	00c6303a 	nor	r3,zero,r3
   4fe44:	20c6703a 	and	r3,r4,r3
   4fe48:	1809883a 	mov	r4,r3
   4fe4c:	e0ffff17 	ldw	r3,-4(fp)
   4fe50:	1885883a 	add	r2,r3,r2
   4fe54:	108002c4 	addi	r2,r2,11
   4fe58:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   4fe5c:	e0bffd03 	ldbu	r2,-12(fp)
   4fe60:	e0ffff17 	ldw	r3,-4(fp)
   4fe64:	1885883a 	add	r2,r3,r2
   4fe68:	108002c4 	addi	r2,r2,11
   4fe6c:	10800003 	ldbu	r2,0(r2)
   4fe70:	10803fcc 	andi	r2,r2,255
   4fe74:	10000a1e 	bne	r2,zero,4fea0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   4fe78:	e0bfff17 	ldw	r2,-4(fp)
   4fe7c:	10800283 	ldbu	r2,10(r2)
   4fe80:	1007883a 	mov	r3,r2
   4fe84:	e0bffe17 	ldw	r2,-8(fp)
   4fe88:	10800d83 	ldbu	r2,54(r2)
   4fe8c:	0084303a 	nor	r2,zero,r2
   4fe90:	1884703a 	and	r2,r3,r2
   4fe94:	1007883a 	mov	r3,r2
   4fe98:	e0bfff17 	ldw	r2,-4(fp)
   4fe9c:	10c00285 	stb	r3,10(r2)
    }
}
   4fea0:	0001883a 	nop
   4fea4:	e037883a 	mov	sp,fp
   4fea8:	df000017 	ldw	fp,0(sp)
   4feac:	dec00104 	addi	sp,sp,4
   4feb0:	f800283a 	ret

0004feb4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   4feb4:	defffa04 	addi	sp,sp,-24
   4feb8:	df000515 	stw	fp,20(sp)
   4febc:	df000504 	addi	fp,sp,20
   4fec0:	e13ffe15 	stw	r4,-8(fp)
   4fec4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   4fec8:	e0bffe17 	ldw	r2,-8(fp)
   4fecc:	10800d03 	ldbu	r2,52(r2)
   4fed0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   4fed4:	e0bffe17 	ldw	r2,-8(fp)
   4fed8:	10800d83 	ldbu	r2,54(r2)
   4fedc:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   4fee0:	e0bffe17 	ldw	r2,-8(fp)
   4fee4:	10800d43 	ldbu	r2,53(r2)
   4fee8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   4feec:	e0bfff17 	ldw	r2,-4(fp)
   4fef0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   4fef4:	e0bffb17 	ldw	r2,-20(fp)
   4fef8:	10800017 	ldw	r2,0(r2)
   4fefc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   4ff00:	00002506 	br	4ff98 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   4ff04:	e0bffd03 	ldbu	r2,-12(fp)
   4ff08:	e0fffd03 	ldbu	r3,-12(fp)
   4ff0c:	e13ffc17 	ldw	r4,-16(fp)
   4ff10:	20c7883a 	add	r3,r4,r3
   4ff14:	18c002c4 	addi	r3,r3,11
   4ff18:	18c00003 	ldbu	r3,0(r3)
   4ff1c:	1809883a 	mov	r4,r3
   4ff20:	e0fffd83 	ldbu	r3,-10(fp)
   4ff24:	00c6303a 	nor	r3,zero,r3
   4ff28:	20c6703a 	and	r3,r4,r3
   4ff2c:	1809883a 	mov	r4,r3
   4ff30:	e0fffc17 	ldw	r3,-16(fp)
   4ff34:	1885883a 	add	r2,r3,r2
   4ff38:	108002c4 	addi	r2,r2,11
   4ff3c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   4ff40:	e0bffd03 	ldbu	r2,-12(fp)
   4ff44:	e0fffc17 	ldw	r3,-16(fp)
   4ff48:	1885883a 	add	r2,r3,r2
   4ff4c:	108002c4 	addi	r2,r2,11
   4ff50:	10800003 	ldbu	r2,0(r2)
   4ff54:	10803fcc 	andi	r2,r2,255
   4ff58:	1000091e 	bne	r2,zero,4ff80 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   4ff5c:	e0bffc17 	ldw	r2,-16(fp)
   4ff60:	10800283 	ldbu	r2,10(r2)
   4ff64:	1007883a 	mov	r3,r2
   4ff68:	e0bffd43 	ldbu	r2,-11(fp)
   4ff6c:	0084303a 	nor	r2,zero,r2
   4ff70:	1884703a 	and	r2,r3,r2
   4ff74:	1007883a 	mov	r3,r2
   4ff78:	e0bffc17 	ldw	r2,-16(fp)
   4ff7c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   4ff80:	e0bffb17 	ldw	r2,-20(fp)
   4ff84:	10800104 	addi	r2,r2,4
   4ff88:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   4ff8c:	e0bffb17 	ldw	r2,-20(fp)
   4ff90:	10800017 	ldw	r2,0(r2)
   4ff94:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   4ff98:	e0bffc17 	ldw	r2,-16(fp)
   4ff9c:	103fd91e 	bne	r2,zero,4ff04 <__alt_data_end+0xfffea704>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   4ffa0:	0001883a 	nop
   4ffa4:	e037883a 	mov	sp,fp
   4ffa8:	df000017 	ldw	fp,0(sp)
   4ffac:	dec00104 	addi	sp,sp,4
   4ffb0:	f800283a 	ret

0004ffb4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   4ffb4:	defffc04 	addi	sp,sp,-16
   4ffb8:	df000315 	stw	fp,12(sp)
   4ffbc:	df000304 	addi	fp,sp,12
   4ffc0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   4ffc4:	e0bfff17 	ldw	r2,-4(fp)
   4ffc8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   4ffcc:	e0bfff17 	ldw	r2,-4(fp)
   4ffd0:	108002c4 	addi	r2,r2,11
   4ffd4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   4ffd8:	e03ffe05 	stb	zero,-8(fp)
   4ffdc:	00000706 	br	4fffc <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   4ffe0:	e0bffd17 	ldw	r2,-12(fp)
   4ffe4:	10c00044 	addi	r3,r2,1
   4ffe8:	e0fffd15 	stw	r3,-12(fp)
   4ffec:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   4fff0:	e0bffe03 	ldbu	r2,-8(fp)
   4fff4:	10800044 	addi	r2,r2,1
   4fff8:	e0bffe05 	stb	r2,-8(fp)
   4fffc:	e0bffe03 	ldbu	r2,-8(fp)
   50000:	108000f0 	cmpltui	r2,r2,3
   50004:	103ff61e 	bne	r2,zero,4ffe0 <__alt_data_end+0xfffea7e0>
        *ptbl++ = 0;
    }
}
   50008:	0001883a 	nop
   5000c:	e037883a 	mov	sp,fp
   50010:	df000017 	ldw	fp,0(sp)
   50014:	dec00104 	addi	sp,sp,4
   50018:	f800283a 	ret

0005001c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   5001c:	defffb04 	addi	sp,sp,-20
   50020:	dfc00415 	stw	ra,16(sp)
   50024:	df000315 	stw	fp,12(sp)
   50028:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   5002c:	0142d004 	movi	r5,2880
   50030:	010001b4 	movhi	r4,6
   50034:	210c2604 	addi	r4,r4,12440
   50038:	00503940 	call	50394 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   5003c:	008001b4 	movhi	r2,6
   50040:	108c2604 	addi	r2,r2,12440
   50044:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   50048:	008001b4 	movhi	r2,6
   5004c:	108c3204 	addi	r2,r2,12488
   50050:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   50054:	e03ffd0d 	sth	zero,-12(fp)
   50058:	00001306 	br	500a8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   5005c:	e0bffe17 	ldw	r2,-8(fp)
   50060:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   50064:	e0bffe17 	ldw	r2,-8(fp)
   50068:	e0ffff17 	ldw	r3,-4(fp)
   5006c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   50070:	e0bffe17 	ldw	r2,-8(fp)
   50074:	00c00fc4 	movi	r3,63
   50078:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   5007c:	e0bffe17 	ldw	r2,-8(fp)
   50080:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   50084:	e0bffe17 	ldw	r2,-8(fp)
   50088:	10800c04 	addi	r2,r2,48
   5008c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   50090:	e0bfff17 	ldw	r2,-4(fp)
   50094:	10800c04 	addi	r2,r2,48
   50098:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   5009c:	e0bffd0b 	ldhu	r2,-12(fp)
   500a0:	10800044 	addi	r2,r2,1
   500a4:	e0bffd0d 	sth	r2,-12(fp)
   500a8:	e0bffd0b 	ldhu	r2,-12(fp)
   500ac:	10800ef0 	cmpltui	r2,r2,59
   500b0:	103fea1e 	bne	r2,zero,5005c <__alt_data_end+0xfffea85c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   500b4:	e0bffe17 	ldw	r2,-8(fp)
   500b8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   500bc:	e0bffe17 	ldw	r2,-8(fp)
   500c0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   500c4:	e0bffe17 	ldw	r2,-8(fp)
   500c8:	00c00fc4 	movi	r3,63
   500cc:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   500d0:	e0bffe17 	ldw	r2,-8(fp)
   500d4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   500d8:	008001b4 	movhi	r2,6
   500dc:	108c2604 	addi	r2,r2,12440
   500e0:	d0a72f15 	stw	r2,-25412(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   500e4:	0001883a 	nop
   500e8:	e037883a 	mov	sp,fp
   500ec:	dfc00117 	ldw	ra,4(sp)
   500f0:	df000017 	ldw	fp,0(sp)
   500f4:	dec00204 	addi	sp,sp,8
   500f8:	f800283a 	ret

000500fc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   500fc:	deffff04 	addi	sp,sp,-4
   50100:	df000015 	stw	fp,0(sp)
   50104:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   50108:	d0273215 	stw	zero,-25400(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   5010c:	d0273005 	stb	zero,-25408(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   50110:	d0272205 	stb	zero,-25464(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   50114:	d0272a45 	stb	zero,-25431(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   50118:	d0272245 	stb	zero,-25463(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   5011c:	d0272715 	stw	zero,-25444(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   50120:	d0272315 	stw	zero,-25460(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   50124:	d0273515 	stw	zero,-25388(gp)
    OSIdleCtrMax  = 0L;
   50128:	d0272815 	stw	zero,-25440(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   5012c:	d0273405 	stb	zero,-25392(gp)
#endif
}
   50130:	0001883a 	nop
   50134:	e037883a 	mov	sp,fp
   50138:	df000017 	ldw	fp,0(sp)
   5013c:	dec00104 	addi	sp,sp,4
   50140:	f800283a 	ret

00050144 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   50144:	defffd04 	addi	sp,sp,-12
   50148:	df000215 	stw	fp,8(sp)
   5014c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   50150:	d0272e05 	stb	zero,-25416(gp)
    prdytbl       = &OSRdyTbl[0];
   50154:	d0a72e44 	addi	r2,gp,-25415
   50158:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   5015c:	e03ffe05 	stb	zero,-8(fp)
   50160:	00000706 	br	50180 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   50164:	e0bfff17 	ldw	r2,-4(fp)
   50168:	10c00044 	addi	r3,r2,1
   5016c:	e0ffff15 	stw	r3,-4(fp)
   50170:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   50174:	e0bffe03 	ldbu	r2,-8(fp)
   50178:	10800044 	addi	r2,r2,1
   5017c:	e0bffe05 	stb	r2,-8(fp)
   50180:	e0bffe03 	ldbu	r2,-8(fp)
   50184:	108000f0 	cmpltui	r2,r2,3
   50188:	103ff61e 	bne	r2,zero,50164 <__alt_data_end+0xfffea964>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   5018c:	d0272445 	stb	zero,-25455(gp)
    OSPrioHighRdy = 0;
   50190:	d0272405 	stb	zero,-25456(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   50194:	d0272c15 	stw	zero,-25424(gp)
    OSTCBCur      = (OS_TCB *)0;
   50198:	d0273115 	stw	zero,-25404(gp)
}
   5019c:	0001883a 	nop
   501a0:	e037883a 	mov	sp,fp
   501a4:	df000017 	ldw	fp,0(sp)
   501a8:	dec00104 	addi	sp,sp,4
   501ac:	f800283a 	ret

000501b0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   501b0:	defff804 	addi	sp,sp,-32
   501b4:	dfc00715 	stw	ra,28(sp)
   501b8:	df000615 	stw	fp,24(sp)
   501bc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   501c0:	008000c4 	movi	r2,3
   501c4:	d8800415 	stw	r2,16(sp)
   501c8:	d8000315 	stw	zero,12(sp)
   501cc:	00808004 	movi	r2,512
   501d0:	d8800215 	stw	r2,8(sp)
   501d4:	008001b4 	movhi	r2,6
   501d8:	108a2604 	addi	r2,r2,10392
   501dc:	d8800115 	stw	r2,4(sp)
   501e0:	00bfffd4 	movui	r2,65535
   501e4:	d8800015 	stw	r2,0(sp)
   501e8:	01c00504 	movi	r7,20
   501ec:	018001b4 	movhi	r6,6
   501f0:	318c2504 	addi	r6,r6,12436
   501f4:	000b883a 	mov	r5,zero
   501f8:	01000174 	movhi	r4,5
   501fc:	21019704 	addi	r4,r4,1628
   50200:	00557f00 	call	557f0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   50204:	e1bfff04 	addi	r6,fp,-4
   50208:	014001b4 	movhi	r5,6
   5020c:	29658804 	addi	r5,r5,-27104
   50210:	01000504 	movi	r4,20
   50214:	00560000 	call	56000 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   50218:	0001883a 	nop
   5021c:	e037883a 	mov	sp,fp
   50220:	dfc00117 	ldw	ra,4(sp)
   50224:	df000017 	ldw	fp,0(sp)
   50228:	dec00204 	addi	sp,sp,8
   5022c:	f800283a 	ret

00050230 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   50230:	defff804 	addi	sp,sp,-32
   50234:	dfc00715 	stw	ra,28(sp)
   50238:	df000615 	stw	fp,24(sp)
   5023c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   50240:	008000c4 	movi	r2,3
   50244:	d8800415 	stw	r2,16(sp)
   50248:	d8000315 	stw	zero,12(sp)
   5024c:	00808004 	movi	r2,512
   50250:	d8800215 	stw	r2,8(sp)
   50254:	008001b4 	movhi	r2,6
   50258:	1087ae04 	addi	r2,r2,7864
   5025c:	d8800115 	stw	r2,4(sp)
   50260:	00bfff94 	movui	r2,65534
   50264:	d8800015 	stw	r2,0(sp)
   50268:	01c004c4 	movi	r7,19
   5026c:	018001b4 	movhi	r6,6
   50270:	3189ad04 	addi	r6,r6,9908
   50274:	000b883a 	mov	r5,zero
   50278:	01000174 	movhi	r4,5
   5027c:	2101ae04 	addi	r4,r4,1720
   50280:	00557f00 	call	557f0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   50284:	e1bfff04 	addi	r6,fp,-4
   50288:	014001b4 	movhi	r5,6
   5028c:	29658c04 	addi	r5,r5,-27088
   50290:	010004c4 	movi	r4,19
   50294:	00560000 	call	56000 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   50298:	0001883a 	nop
   5029c:	e037883a 	mov	sp,fp
   502a0:	dfc00117 	ldw	ra,4(sp)
   502a4:	df000017 	ldw	fp,0(sp)
   502a8:	dec00204 	addi	sp,sp,8
   502ac:	f800283a 	ret

000502b0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   502b0:	defffb04 	addi	sp,sp,-20
   502b4:	dfc00415 	stw	ra,16(sp)
   502b8:	df000315 	stw	fp,12(sp)
   502bc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   502c0:	01414404 	movi	r5,1296
   502c4:	010001b4 	movhi	r4,6
   502c8:	210ef604 	addi	r4,r4,15320
   502cc:	00503940 	call	50394 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   502d0:	01401504 	movi	r5,84
   502d4:	010001b4 	movhi	r4,6
   502d8:	21103a04 	addi	r4,r4,16616
   502dc:	00503940 	call	50394 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   502e0:	008001b4 	movhi	r2,6
   502e4:	108ef604 	addi	r2,r2,15320
   502e8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   502ec:	008001b4 	movhi	r2,6
   502f0:	108f1104 	addi	r2,r2,15428
   502f4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   502f8:	e03ffd05 	stb	zero,-12(fp)
   502fc:	00001106 	br	50344 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   50300:	e0bffe17 	ldw	r2,-8(fp)
   50304:	e0ffff17 	ldw	r3,-4(fp)
   50308:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   5030c:	e0bffe17 	ldw	r2,-8(fp)
   50310:	00c00fc4 	movi	r3,63
   50314:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   50318:	e0bffe17 	ldw	r2,-8(fp)
   5031c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   50320:	e0bffe17 	ldw	r2,-8(fp)
   50324:	10801b04 	addi	r2,r2,108
   50328:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   5032c:	e0bfff17 	ldw	r2,-4(fp)
   50330:	10801b04 	addi	r2,r2,108
   50334:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   50338:	e0bffd03 	ldbu	r2,-12(fp)
   5033c:	10800044 	addi	r2,r2,1
   50340:	e0bffd05 	stb	r2,-12(fp)
   50344:	e0bffd03 	ldbu	r2,-12(fp)
   50348:	108002f0 	cmpltui	r2,r2,11
   5034c:	103fec1e 	bne	r2,zero,50300 <__alt_data_end+0xfffeab00>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   50350:	e0bffe17 	ldw	r2,-8(fp)
   50354:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   50358:	e0bffe17 	ldw	r2,-8(fp)
   5035c:	00c00fc4 	movi	r3,63
   50360:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   50364:	e0bffe17 	ldw	r2,-8(fp)
   50368:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   5036c:	d0272515 	stw	zero,-25452(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   50370:	008001b4 	movhi	r2,6
   50374:	108ef604 	addi	r2,r2,15320
   50378:	d0a72915 	stw	r2,-25436(gp)
}
   5037c:	0001883a 	nop
   50380:	e037883a 	mov	sp,fp
   50384:	dfc00117 	ldw	ra,4(sp)
   50388:	df000017 	ldw	fp,0(sp)
   5038c:	dec00204 	addi	sp,sp,8
   50390:	f800283a 	ret

00050394 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   50394:	defffd04 	addi	sp,sp,-12
   50398:	df000215 	stw	fp,8(sp)
   5039c:	df000204 	addi	fp,sp,8
   503a0:	e13ffe15 	stw	r4,-8(fp)
   503a4:	2805883a 	mov	r2,r5
   503a8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   503ac:	00000706 	br	503cc <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   503b0:	e0bffe17 	ldw	r2,-8(fp)
   503b4:	10c00044 	addi	r3,r2,1
   503b8:	e0fffe15 	stw	r3,-8(fp)
   503bc:	10000005 	stb	zero,0(r2)
        size--;
   503c0:	e0bfff0b 	ldhu	r2,-4(fp)
   503c4:	10bfffc4 	addi	r2,r2,-1
   503c8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   503cc:	e0bfff0b 	ldhu	r2,-4(fp)
   503d0:	103ff71e 	bne	r2,zero,503b0 <__alt_data_end+0xfffeabb0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   503d4:	0001883a 	nop
   503d8:	e037883a 	mov	sp,fp
   503dc:	df000017 	ldw	fp,0(sp)
   503e0:	dec00104 	addi	sp,sp,4
   503e4:	f800283a 	ret

000503e8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   503e8:	defffc04 	addi	sp,sp,-16
   503ec:	df000315 	stw	fp,12(sp)
   503f0:	df000304 	addi	fp,sp,12
   503f4:	e13ffd15 	stw	r4,-12(fp)
   503f8:	e17ffe15 	stw	r5,-8(fp)
   503fc:	3005883a 	mov	r2,r6
   50400:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   50404:	00000b06 	br	50434 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   50408:	e0bffd17 	ldw	r2,-12(fp)
   5040c:	10c00044 	addi	r3,r2,1
   50410:	e0fffd15 	stw	r3,-12(fp)
   50414:	e0fffe17 	ldw	r3,-8(fp)
   50418:	19000044 	addi	r4,r3,1
   5041c:	e13ffe15 	stw	r4,-8(fp)
   50420:	18c00003 	ldbu	r3,0(r3)
   50424:	10c00005 	stb	r3,0(r2)
        size--;
   50428:	e0bfff0b 	ldhu	r2,-4(fp)
   5042c:	10bfffc4 	addi	r2,r2,-1
   50430:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   50434:	e0bfff0b 	ldhu	r2,-4(fp)
   50438:	103ff31e 	bne	r2,zero,50408 <__alt_data_end+0xfffeac08>
        *pdest++ = *psrc++;
        size--;
    }
}
   5043c:	0001883a 	nop
   50440:	e037883a 	mov	sp,fp
   50444:	df000017 	ldw	fp,0(sp)
   50448:	dec00104 	addi	sp,sp,4
   5044c:	f800283a 	ret

00050450 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   50450:	defffb04 	addi	sp,sp,-20
   50454:	dfc00415 	stw	ra,16(sp)
   50458:	df000315 	stw	fp,12(sp)
   5045c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   50460:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50464:	0005303a 	rdctl	r2,status
   50468:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5046c:	e0ffff17 	ldw	r3,-4(fp)
   50470:	00bfff84 	movi	r2,-2
   50474:	1884703a 	and	r2,r3,r2
   50478:	1001703a 	wrctl	status,r2
  
  return context;
   5047c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   50480:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   50484:	d0a73003 	ldbu	r2,-25408(gp)
   50488:	10803fcc 	andi	r2,r2,255
   5048c:	10001a1e 	bne	r2,zero,504f8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   50490:	d0a72203 	ldbu	r2,-25464(gp)
   50494:	10803fcc 	andi	r2,r2,255
   50498:	1000171e 	bne	r2,zero,504f8 <OS_Sched+0xa8>
            OS_SchedNew();
   5049c:	00505200 	call	50520 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   504a0:	d0e72403 	ldbu	r3,-25456(gp)
   504a4:	d0a72443 	ldbu	r2,-25455(gp)
   504a8:	18c03fcc 	andi	r3,r3,255
   504ac:	10803fcc 	andi	r2,r2,255
   504b0:	18801126 	beq	r3,r2,504f8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   504b4:	d0a72403 	ldbu	r2,-25456(gp)
   504b8:	10c03fcc 	andi	r3,r2,255
   504bc:	008001b4 	movhi	r2,6
   504c0:	10903a04 	addi	r2,r2,16616
   504c4:	18c7883a 	add	r3,r3,r3
   504c8:	18c7883a 	add	r3,r3,r3
   504cc:	10c5883a 	add	r2,r2,r3
   504d0:	10800017 	ldw	r2,0(r2)
   504d4:	d0a72c15 	stw	r2,-25424(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   504d8:	d0a72c17 	ldw	r2,-25424(gp)
   504dc:	10c00e17 	ldw	r3,56(r2)
   504e0:	18c00044 	addi	r3,r3,1
   504e4:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   504e8:	d0a72717 	ldw	r2,-25444(gp)
   504ec:	10800044 	addi	r2,r2,1
   504f0:	d0a72715 	stw	r2,-25444(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   504f4:	00588880 	call	58888 <OSCtxSw>
   504f8:	e0bffd17 	ldw	r2,-12(fp)
   504fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50500:	e0bffe17 	ldw	r2,-8(fp)
   50504:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   50508:	0001883a 	nop
   5050c:	e037883a 	mov	sp,fp
   50510:	dfc00117 	ldw	ra,4(sp)
   50514:	df000017 	ldw	fp,0(sp)
   50518:	dec00204 	addi	sp,sp,8
   5051c:	f800283a 	ret

00050520 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   50520:	defffe04 	addi	sp,sp,-8
   50524:	df000115 	stw	fp,4(sp)
   50528:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   5052c:	d0a72e03 	ldbu	r2,-25416(gp)
   50530:	10c03fcc 	andi	r3,r2,255
   50534:	008001b4 	movhi	r2,6
   50538:	10a54804 	addi	r2,r2,-27360
   5053c:	10c5883a 	add	r2,r2,r3
   50540:	10800003 	ldbu	r2,0(r2)
   50544:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   50548:	e0bfff03 	ldbu	r2,-4(fp)
   5054c:	100490fa 	slli	r2,r2,3
   50550:	1009883a 	mov	r4,r2
   50554:	e0ffff03 	ldbu	r3,-4(fp)
   50558:	d0a72e44 	addi	r2,gp,-25415
   5055c:	1885883a 	add	r2,r3,r2
   50560:	10800003 	ldbu	r2,0(r2)
   50564:	10c03fcc 	andi	r3,r2,255
   50568:	008001b4 	movhi	r2,6
   5056c:	10a54804 	addi	r2,r2,-27360
   50570:	10c5883a 	add	r2,r2,r3
   50574:	10800003 	ldbu	r2,0(r2)
   50578:	2085883a 	add	r2,r4,r2
   5057c:	d0a72405 	stb	r2,-25456(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   50580:	0001883a 	nop
   50584:	e037883a 	mov	sp,fp
   50588:	df000017 	ldw	fp,0(sp)
   5058c:	dec00104 	addi	sp,sp,4
   50590:	f800283a 	ret

00050594 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   50594:	defffc04 	addi	sp,sp,-16
   50598:	df000315 	stw	fp,12(sp)
   5059c:	df000304 	addi	fp,sp,12
   505a0:	e13ffe15 	stw	r4,-8(fp)
   505a4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   505a8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   505ac:	00000b06 	br	505dc <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   505b0:	e0bffe17 	ldw	r2,-8(fp)
   505b4:	10c00044 	addi	r3,r2,1
   505b8:	e0fffe15 	stw	r3,-8(fp)
   505bc:	e0ffff17 	ldw	r3,-4(fp)
   505c0:	19000044 	addi	r4,r3,1
   505c4:	e13fff15 	stw	r4,-4(fp)
   505c8:	18c00003 	ldbu	r3,0(r3)
   505cc:	10c00005 	stb	r3,0(r2)
        len++;
   505d0:	e0bffd03 	ldbu	r2,-12(fp)
   505d4:	10800044 	addi	r2,r2,1
   505d8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   505dc:	e0bfff17 	ldw	r2,-4(fp)
   505e0:	10800003 	ldbu	r2,0(r2)
   505e4:	10803fcc 	andi	r2,r2,255
   505e8:	103ff11e 	bne	r2,zero,505b0 <__alt_data_end+0xfffeadb0>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   505ec:	e0bffe17 	ldw	r2,-8(fp)
   505f0:	10000005 	stb	zero,0(r2)
    return (len);
   505f4:	e0bffd03 	ldbu	r2,-12(fp)
}
   505f8:	e037883a 	mov	sp,fp
   505fc:	df000017 	ldw	fp,0(sp)
   50600:	dec00104 	addi	sp,sp,4
   50604:	f800283a 	ret

00050608 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   50608:	defffd04 	addi	sp,sp,-12
   5060c:	df000215 	stw	fp,8(sp)
   50610:	df000204 	addi	fp,sp,8
   50614:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   50618:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   5061c:	00000606 	br	50638 <OS_StrLen+0x30>
        psrc++;
   50620:	e0bfff17 	ldw	r2,-4(fp)
   50624:	10800044 	addi	r2,r2,1
   50628:	e0bfff15 	stw	r2,-4(fp)
        len++;
   5062c:	e0bffe03 	ldbu	r2,-8(fp)
   50630:	10800044 	addi	r2,r2,1
   50634:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   50638:	e0bfff17 	ldw	r2,-4(fp)
   5063c:	10800003 	ldbu	r2,0(r2)
   50640:	10803fcc 	andi	r2,r2,255
   50644:	103ff61e 	bne	r2,zero,50620 <__alt_data_end+0xfffeae20>
        psrc++;
        len++;
    }
    return (len);
   50648:	e0bffe03 	ldbu	r2,-8(fp)
}
   5064c:	e037883a 	mov	sp,fp
   50650:	df000017 	ldw	fp,0(sp)
   50654:	dec00104 	addi	sp,sp,4
   50658:	f800283a 	ret

0005065c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   5065c:	defffa04 	addi	sp,sp,-24
   50660:	dfc00515 	stw	ra,20(sp)
   50664:	df000415 	stw	fp,16(sp)
   50668:	df000404 	addi	fp,sp,16
   5066c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   50670:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50674:	0005303a 	rdctl	r2,status
   50678:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5067c:	e0fffd17 	ldw	r3,-12(fp)
   50680:	00bfff84 	movi	r2,-2
   50684:	1884703a 	and	r2,r3,r2
   50688:	1001703a 	wrctl	status,r2
  
  return context;
   5068c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   50690:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   50694:	d0a72317 	ldw	r2,-25460(gp)
   50698:	10800044 	addi	r2,r2,1
   5069c:	d0a72315 	stw	r2,-25460(gp)
   506a0:	e0bffc17 	ldw	r2,-16(fp)
   506a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   506a8:	e0bffe17 	ldw	r2,-8(fp)
   506ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   506b0:	0058b9c0 	call	58b9c <OSTaskIdleHook>
    }
   506b4:	003fef06 	br	50674 <__alt_data_end+0xfffeae74>

000506b8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   506b8:	defffa04 	addi	sp,sp,-24
   506bc:	dfc00515 	stw	ra,20(sp)
   506c0:	df000415 	stw	fp,16(sp)
   506c4:	df000404 	addi	fp,sp,16
   506c8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   506cc:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   506d0:	00000206 	br	506dc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   506d4:	01003204 	movi	r4,200
   506d8:	00568c00 	call	568c0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   506dc:	d0a73403 	ldbu	r2,-25392(gp)
   506e0:	10803fcc 	andi	r2,r2,255
   506e4:	103ffb26 	beq	r2,zero,506d4 <__alt_data_end+0xfffeaed4>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   506e8:	d0a72817 	ldw	r2,-25440(gp)
   506ec:	01401904 	movi	r5,100
   506f0:	1009883a 	mov	r4,r2
   506f4:	004b2d80 	call	4b2d8 <__udivsi3>
   506f8:	d0a72815 	stw	r2,-25440(gp)
    if (OSIdleCtrMax == 0L) {
   506fc:	d0a72817 	ldw	r2,-25440(gp)
   50700:	1000031e 	bne	r2,zero,50710 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   50704:	d0272a05 	stb	zero,-25432(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   50708:	01003fc4 	movi	r4,255
   5070c:	00565480 	call	56548 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50710:	0005303a 	rdctl	r2,status
   50714:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50718:	e0fffd17 	ldw	r3,-12(fp)
   5071c:	00bfff84 	movi	r2,-2
   50720:	1884703a 	and	r2,r3,r2
   50724:	1001703a 	wrctl	status,r2
  
  return context;
   50728:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   5072c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   50730:	d0a72317 	ldw	r2,-25460(gp)
   50734:	d0a73515 	stw	r2,-25388(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   50738:	d0272315 	stw	zero,-25460(gp)
   5073c:	e0bffc17 	ldw	r2,-16(fp)
   50740:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50744:	e0bffe17 	ldw	r2,-8(fp)
   50748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   5074c:	d0a73517 	ldw	r2,-25388(gp)
   50750:	d0e72817 	ldw	r3,-25440(gp)
   50754:	180b883a 	mov	r5,r3
   50758:	1009883a 	mov	r4,r2
   5075c:	004b2d80 	call	4b2d8 <__udivsi3>
   50760:	1007883a 	mov	r3,r2
   50764:	00801904 	movi	r2,100
   50768:	10c5c83a 	sub	r2,r2,r3
   5076c:	d0a72a05 	stb	r2,-25432(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   50770:	0058b1c0 	call	58b1c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   50774:	00507840 	call	50784 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   50778:	01001904 	movi	r4,100
   5077c:	00568c00 	call	568c0 <OSTimeDly>
    }
   50780:	003fe306 	br	50710 <__alt_data_end+0xfffeaf10>

00050784 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   50784:	defffa04 	addi	sp,sp,-24
   50788:	dfc00515 	stw	ra,20(sp)
   5078c:	df000415 	stw	fp,16(sp)
   50790:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   50794:	e03ffc05 	stb	zero,-16(fp)
   50798:	00002406 	br	5082c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   5079c:	e0bffc03 	ldbu	r2,-16(fp)
   507a0:	e0fffe04 	addi	r3,fp,-8
   507a4:	180b883a 	mov	r5,r3
   507a8:	1009883a 	mov	r4,r2
   507ac:	00563880 	call	56388 <OSTaskStkChk>
   507b0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   507b4:	e0bffc43 	ldbu	r2,-15(fp)
   507b8:	1000191e 	bne	r2,zero,50820 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   507bc:	e0fffc03 	ldbu	r3,-16(fp)
   507c0:	008001b4 	movhi	r2,6
   507c4:	10903a04 	addi	r2,r2,16616
   507c8:	18c7883a 	add	r3,r3,r3
   507cc:	18c7883a 	add	r3,r3,r3
   507d0:	10c5883a 	add	r2,r2,r3
   507d4:	10800017 	ldw	r2,0(r2)
   507d8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   507dc:	e0bffd17 	ldw	r2,-12(fp)
   507e0:	10000f26 	beq	r2,zero,50820 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   507e4:	e0bffd17 	ldw	r2,-12(fp)
   507e8:	10800060 	cmpeqi	r2,r2,1
   507ec:	10000c1e 	bne	r2,zero,50820 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   507f0:	e0bffd17 	ldw	r2,-12(fp)
   507f4:	10c00217 	ldw	r3,8(r2)
   507f8:	e0bffd17 	ldw	r2,-12(fp)
   507fc:	10800317 	ldw	r2,12(r2)
   50800:	1085883a 	add	r2,r2,r2
   50804:	1085883a 	add	r2,r2,r2
   50808:	1887883a 	add	r3,r3,r2
   5080c:	e0bffd17 	ldw	r2,-12(fp)
   50810:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   50814:	e0ffff17 	ldw	r3,-4(fp)
   50818:	e0bffd17 	ldw	r2,-12(fp)
   5081c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   50820:	e0bffc03 	ldbu	r2,-16(fp)
   50824:	10800044 	addi	r2,r2,1
   50828:	e0bffc05 	stb	r2,-16(fp)
   5082c:	e0bffc03 	ldbu	r2,-16(fp)
   50830:	10800570 	cmpltui	r2,r2,21
   50834:	103fd91e 	bne	r2,zero,5079c <__alt_data_end+0xfffeaf9c>
#endif
                }
            }
        }
    }
}
   50838:	0001883a 	nop
   5083c:	e037883a 	mov	sp,fp
   50840:	dfc00117 	ldw	ra,4(sp)
   50844:	df000017 	ldw	fp,0(sp)
   50848:	dec00204 	addi	sp,sp,8
   5084c:	f800283a 	ret

00050850 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   50850:	defff204 	addi	sp,sp,-56
   50854:	dfc00d15 	stw	ra,52(sp)
   50858:	df000c15 	stw	fp,48(sp)
   5085c:	df000c04 	addi	fp,sp,48
   50860:	e17ffc15 	stw	r5,-16(fp)
   50864:	e1bffd15 	stw	r6,-12(fp)
   50868:	3807883a 	mov	r3,r7
   5086c:	e0800417 	ldw	r2,16(fp)
   50870:	e13ffb05 	stb	r4,-20(fp)
   50874:	e0fffe0d 	sth	r3,-8(fp)
   50878:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   5087c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50880:	0005303a 	rdctl	r2,status
   50884:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50888:	e0fffa17 	ldw	r3,-24(fp)
   5088c:	00bfff84 	movi	r2,-2
   50890:	1884703a 	and	r2,r3,r2
   50894:	1001703a 	wrctl	status,r2
  
  return context;
   50898:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   5089c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   508a0:	d0a72917 	ldw	r2,-25436(gp)
   508a4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   508a8:	e0bff617 	ldw	r2,-40(fp)
   508ac:	10009326 	beq	r2,zero,50afc <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   508b0:	e0bff617 	ldw	r2,-40(fp)
   508b4:	10800517 	ldw	r2,20(r2)
   508b8:	d0a72915 	stw	r2,-25436(gp)
   508bc:	e0bff417 	ldw	r2,-48(fp)
   508c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   508c4:	e0bff817 	ldw	r2,-32(fp)
   508c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   508cc:	e0bff617 	ldw	r2,-40(fp)
   508d0:	e0fffc17 	ldw	r3,-16(fp)
   508d4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   508d8:	e0bff617 	ldw	r2,-40(fp)
   508dc:	e0fffb03 	ldbu	r3,-20(fp)
   508e0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   508e4:	e0bff617 	ldw	r2,-40(fp)
   508e8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   508ec:	e0bff617 	ldw	r2,-40(fp)
   508f0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   508f4:	e0bff617 	ldw	r2,-40(fp)
   508f8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   508fc:	e0bff617 	ldw	r2,-40(fp)
   50900:	e0c00317 	ldw	r3,12(fp)
   50904:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   50908:	e0bff617 	ldw	r2,-40(fp)
   5090c:	e0c00217 	ldw	r3,8(fp)
   50910:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   50914:	e0bff617 	ldw	r2,-40(fp)
   50918:	e0fffd17 	ldw	r3,-12(fp)
   5091c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   50920:	e0bff617 	ldw	r2,-40(fp)
   50924:	e0ffff0b 	ldhu	r3,-4(fp)
   50928:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   5092c:	e0bff617 	ldw	r2,-40(fp)
   50930:	e0fffe0b 	ldhu	r3,-8(fp)
   50934:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   50938:	e0bff617 	ldw	r2,-40(fp)
   5093c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   50940:	e0bffb03 	ldbu	r2,-20(fp)
   50944:	1004d0fa 	srli	r2,r2,3
   50948:	1007883a 	mov	r3,r2
   5094c:	e0bff617 	ldw	r2,-40(fp)
   50950:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   50954:	e0bffb03 	ldbu	r2,-20(fp)
   50958:	108001cc 	andi	r2,r2,7
   5095c:	1007883a 	mov	r3,r2
   50960:	e0bff617 	ldw	r2,-40(fp)
   50964:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   50968:	e0bff617 	ldw	r2,-40(fp)
   5096c:	10800d03 	ldbu	r2,52(r2)
   50970:	10803fcc 	andi	r2,r2,255
   50974:	00c00044 	movi	r3,1
   50978:	1884983a 	sll	r2,r3,r2
   5097c:	1007883a 	mov	r3,r2
   50980:	e0bff617 	ldw	r2,-40(fp)
   50984:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   50988:	e0bff617 	ldw	r2,-40(fp)
   5098c:	10800cc3 	ldbu	r2,51(r2)
   50990:	10803fcc 	andi	r2,r2,255
   50994:	00c00044 	movi	r3,1
   50998:	1884983a 	sll	r2,r3,r2
   5099c:	1007883a 	mov	r3,r2
   509a0:	e0bff617 	ldw	r2,-40(fp)
   509a4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   509a8:	e0bff617 	ldw	r2,-40(fp)
   509ac:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   509b0:	e0bff617 	ldw	r2,-40(fp)
   509b4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   509b8:	e0bff617 	ldw	r2,-40(fp)
   509bc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   509c0:	e0bff617 	ldw	r2,-40(fp)
   509c4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   509c8:	e0bff617 	ldw	r2,-40(fp)
   509cc:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   509d0:	e0bff617 	ldw	r2,-40(fp)
   509d4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   509d8:	e0bff617 	ldw	r2,-40(fp)
   509dc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   509e0:	e0bff617 	ldw	r2,-40(fp)
   509e4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   509e8:	e0bff617 	ldw	r2,-40(fp)
   509ec:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   509f0:	e0bff617 	ldw	r2,-40(fp)
   509f4:	00c00fc4 	movi	r3,63
   509f8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   509fc:	e0bff617 	ldw	r2,-40(fp)
   50a00:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   50a04:	e13ff617 	ldw	r4,-40(fp)
   50a08:	0058bbc0 	call	58bbc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   50a0c:	e13ff617 	ldw	r4,-40(fp)
   50a10:	0058ab40 	call	58ab4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50a14:	0005303a 	rdctl	r2,status
   50a18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50a1c:	e0fff517 	ldw	r3,-44(fp)
   50a20:	00bfff84 	movi	r2,-2
   50a24:	1884703a 	and	r2,r3,r2
   50a28:	1001703a 	wrctl	status,r2
  
  return context;
   50a2c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   50a30:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   50a34:	e0fffb03 	ldbu	r3,-20(fp)
   50a38:	008001b4 	movhi	r2,6
   50a3c:	10903a04 	addi	r2,r2,16616
   50a40:	18c7883a 	add	r3,r3,r3
   50a44:	18c7883a 	add	r3,r3,r3
   50a48:	10c5883a 	add	r2,r2,r3
   50a4c:	e0fff617 	ldw	r3,-40(fp)
   50a50:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   50a54:	d0e72517 	ldw	r3,-25452(gp)
   50a58:	e0bff617 	ldw	r2,-40(fp)
   50a5c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   50a60:	e0bff617 	ldw	r2,-40(fp)
   50a64:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   50a68:	d0a72517 	ldw	r2,-25452(gp)
   50a6c:	10000326 	beq	r2,zero,50a7c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   50a70:	d0a72517 	ldw	r2,-25452(gp)
   50a74:	e0fff617 	ldw	r3,-40(fp)
   50a78:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   50a7c:	e0bff617 	ldw	r2,-40(fp)
   50a80:	d0a72515 	stw	r2,-25452(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   50a84:	e0bff617 	ldw	r2,-40(fp)
   50a88:	10c00d83 	ldbu	r3,54(r2)
   50a8c:	d0a72e03 	ldbu	r2,-25416(gp)
   50a90:	1884b03a 	or	r2,r3,r2
   50a94:	d0a72e05 	stb	r2,-25416(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   50a98:	e0bff617 	ldw	r2,-40(fp)
   50a9c:	10800d03 	ldbu	r2,52(r2)
   50aa0:	10c03fcc 	andi	r3,r2,255
   50aa4:	e0bff617 	ldw	r2,-40(fp)
   50aa8:	10800d03 	ldbu	r2,52(r2)
   50aac:	11003fcc 	andi	r4,r2,255
   50ab0:	d0a72e44 	addi	r2,gp,-25415
   50ab4:	2085883a 	add	r2,r4,r2
   50ab8:	11000003 	ldbu	r4,0(r2)
   50abc:	e0bff617 	ldw	r2,-40(fp)
   50ac0:	10800d43 	ldbu	r2,53(r2)
   50ac4:	2084b03a 	or	r2,r4,r2
   50ac8:	1009883a 	mov	r4,r2
   50acc:	d0a72e44 	addi	r2,gp,-25415
   50ad0:	1885883a 	add	r2,r3,r2
   50ad4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   50ad8:	d0a72a43 	ldbu	r2,-25431(gp)
   50adc:	10800044 	addi	r2,r2,1
   50ae0:	d0a72a45 	stb	r2,-25431(gp)
   50ae4:	e0bff417 	ldw	r2,-48(fp)
   50ae8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50aec:	e0bff717 	ldw	r2,-36(fp)
   50af0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   50af4:	0005883a 	mov	r2,zero
   50af8:	00000506 	br	50b10 <OS_TCBInit+0x2c0>
   50afc:	e0bff417 	ldw	r2,-48(fp)
   50b00:	e0bff915 	stw	r2,-28(fp)
   50b04:	e0bff917 	ldw	r2,-28(fp)
   50b08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   50b0c:	00801084 	movi	r2,66
}
   50b10:	e037883a 	mov	sp,fp
   50b14:	dfc00117 	ldw	ra,4(sp)
   50b18:	df000017 	ldw	fp,0(sp)
   50b1c:	dec00204 	addi	sp,sp,8
   50b20:	f800283a 	ret

00050b24 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   50b24:	defffe04 	addi	sp,sp,-8
   50b28:	df000115 	stw	fp,4(sp)
   50b2c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   50b30:	d0a01104 	addi	r2,gp,-32700
   50b34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   50b38:	d0a01204 	addi	r2,gp,-32696
   50b3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   50b40:	d0a01384 	addi	r2,gp,-32690
   50b44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   50b48:	d0a01404 	addi	r2,gp,-32688
   50b4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   50b50:	d0a01304 	addi	r2,gp,-32692
   50b54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   50b58:	d0a01484 	addi	r2,gp,-32686
   50b5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   50b60:	d0a01504 	addi	r2,gp,-32684
   50b64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   50b68:	d0a01584 	addi	r2,gp,-32682
   50b6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   50b70:	d0a01604 	addi	r2,gp,-32680
   50b74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   50b78:	d0a01684 	addi	r2,gp,-32678
   50b7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   50b80:	d0a01704 	addi	r2,gp,-32676
   50b84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   50b88:	d0a01784 	addi	r2,gp,-32674
   50b8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   50b90:	d0a01804 	addi	r2,gp,-32672
   50b94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   50b98:	d0a01884 	addi	r2,gp,-32670
   50b9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   50ba0:	d0a01904 	addi	r2,gp,-32668
   50ba4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   50ba8:	d0a01984 	addi	r2,gp,-32666
   50bac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   50bb0:	d0a01a04 	addi	r2,gp,-32664
   50bb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   50bb8:	d0a01a84 	addi	r2,gp,-32662
   50bbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   50bc0:	d0a01b04 	addi	r2,gp,-32660
   50bc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   50bc8:	d0a01b84 	addi	r2,gp,-32658
   50bcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   50bd0:	d0a01c04 	addi	r2,gp,-32656
   50bd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   50bd8:	d0a01c84 	addi	r2,gp,-32654
   50bdc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   50be0:	d0a01d04 	addi	r2,gp,-32652
   50be4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   50be8:	d0a01d84 	addi	r2,gp,-32650
   50bec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   50bf0:	d0a01e04 	addi	r2,gp,-32648
   50bf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   50bf8:	d0a01e84 	addi	r2,gp,-32646
   50bfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   50c00:	d0a01f04 	addi	r2,gp,-32644
   50c04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   50c08:	d0a01f84 	addi	r2,gp,-32642
   50c0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   50c10:	d0a02004 	addi	r2,gp,-32640
   50c14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   50c18:	d0a02084 	addi	r2,gp,-32638
   50c1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   50c20:	d0a02104 	addi	r2,gp,-32636
   50c24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   50c28:	d0a02184 	addi	r2,gp,-32634
   50c2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   50c30:	d0a02204 	addi	r2,gp,-32632
   50c34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   50c38:	d0a02284 	addi	r2,gp,-32630
   50c3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   50c40:	d0a02304 	addi	r2,gp,-32628
   50c44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   50c48:	d0a02384 	addi	r2,gp,-32626
   50c4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   50c50:	d0a02404 	addi	r2,gp,-32624
   50c54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   50c58:	d0a02484 	addi	r2,gp,-32622
   50c5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   50c60:	d0a02504 	addi	r2,gp,-32620
   50c64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   50c68:	d0a02584 	addi	r2,gp,-32618
   50c6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   50c70:	d0a02604 	addi	r2,gp,-32616
   50c74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   50c78:	d0a02684 	addi	r2,gp,-32614
   50c7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   50c80:	d0a02704 	addi	r2,gp,-32612
   50c84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   50c88:	d0a02784 	addi	r2,gp,-32610
   50c8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   50c90:	d0a02804 	addi	r2,gp,-32608
   50c94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   50c98:	d0a02d04 	addi	r2,gp,-32588
   50c9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   50ca0:	0001883a 	nop
   50ca4:	e037883a 	mov	sp,fp
   50ca8:	df000017 	ldw	fp,0(sp)
   50cac:	dec00104 	addi	sp,sp,4
   50cb0:	f800283a 	ret

00050cb4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   50cb4:	defff204 	addi	sp,sp,-56
   50cb8:	df000d15 	stw	fp,52(sp)
   50cbc:	df000d04 	addi	fp,sp,52
   50cc0:	e13ffc15 	stw	r4,-16(fp)
   50cc4:	2807883a 	mov	r3,r5
   50cc8:	3005883a 	mov	r2,r6
   50ccc:	e1ffff15 	stw	r7,-4(fp)
   50cd0:	e0fffd0d 	sth	r3,-12(fp)
   50cd4:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   50cd8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   50cdc:	e0bfff17 	ldw	r2,-4(fp)
   50ce0:	1000021e 	bne	r2,zero,50cec <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   50ce4:	0005883a 	mov	r2,zero
   50ce8:	0000b006 	br	50fac <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   50cec:	e0bffc17 	ldw	r2,-16(fp)
   50cf0:	1000051e 	bne	r2,zero,50d08 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   50cf4:	e0bfff17 	ldw	r2,-4(fp)
   50cf8:	00c01b84 	movi	r3,110
   50cfc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50d00:	0005883a 	mov	r2,zero
   50d04:	0000a906 	br	50fac <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   50d08:	e0bffc17 	ldw	r2,-16(fp)
   50d0c:	10800003 	ldbu	r2,0(r2)
   50d10:	10803fcc 	andi	r2,r2,255
   50d14:	10800160 	cmpeqi	r2,r2,5
   50d18:	1000051e 	bne	r2,zero,50d30 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   50d1c:	e0bfff17 	ldw	r2,-4(fp)
   50d20:	00c00044 	movi	r3,1
   50d24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50d28:	0005883a 	mov	r2,zero
   50d2c:	00009f06 	br	50fac <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   50d30:	e0fffe03 	ldbu	r3,-8(fp)
   50d34:	00bfe004 	movi	r2,-128
   50d38:	1884703a 	and	r2,r3,r2
   50d3c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   50d40:	e0bff503 	ldbu	r2,-44(fp)
   50d44:	10000626 	beq	r2,zero,50d60 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   50d48:	e0bffe03 	ldbu	r2,-8(fp)
   50d4c:	10801fcc 	andi	r2,r2,127
   50d50:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   50d54:	00800044 	movi	r2,1
   50d58:	e0bff385 	stb	r2,-50(fp)
   50d5c:	00000106 	br	50d64 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   50d60:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   50d64:	e0bfff17 	ldw	r2,-4(fp)
   50d68:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50d6c:	0005303a 	rdctl	r2,status
   50d70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50d74:	e0fffb17 	ldw	r3,-20(fp)
   50d78:	00bfff84 	movi	r2,-2
   50d7c:	1884703a 	and	r2,r3,r2
   50d80:	1001703a 	wrctl	status,r2
  
  return context;
   50d84:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   50d88:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   50d8c:	e0bffe03 	ldbu	r2,-8(fp)
   50d90:	10c00060 	cmpeqi	r3,r2,1
   50d94:	18005f1e 	bne	r3,zero,50f14 <OSFlagAccept+0x260>
   50d98:	10c00088 	cmpgei	r3,r2,2
   50d9c:	1800021e 	bne	r3,zero,50da8 <OSFlagAccept+0xf4>
   50da0:	10003f26 	beq	r2,zero,50ea0 <OSFlagAccept+0x1ec>
   50da4:	00007706 	br	50f84 <OSFlagAccept+0x2d0>
   50da8:	10c000a0 	cmpeqi	r3,r2,2
   50dac:	1800031e 	bne	r3,zero,50dbc <OSFlagAccept+0x108>
   50db0:	108000e0 	cmpeqi	r2,r2,3
   50db4:	10001e1e 	bne	r2,zero,50e30 <OSFlagAccept+0x17c>
   50db8:	00007206 	br	50f84 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   50dbc:	e0bffc17 	ldw	r2,-16(fp)
   50dc0:	10c0020b 	ldhu	r3,8(r2)
   50dc4:	e0bffd0b 	ldhu	r2,-12(fp)
   50dc8:	1884703a 	and	r2,r3,r2
   50dcc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   50dd0:	e0fff30b 	ldhu	r3,-52(fp)
   50dd4:	e0bffd0b 	ldhu	r2,-12(fp)
   50dd8:	18800d1e 	bne	r3,r2,50e10 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50ddc:	e0bff383 	ldbu	r2,-50(fp)
   50de0:	10800058 	cmpnei	r2,r2,1
   50de4:	10000d1e 	bne	r2,zero,50e1c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   50de8:	e0bffc17 	ldw	r2,-16(fp)
   50dec:	1080020b 	ldhu	r2,8(r2)
   50df0:	1007883a 	mov	r3,r2
   50df4:	e0bff30b 	ldhu	r2,-52(fp)
   50df8:	0084303a 	nor	r2,zero,r2
   50dfc:	1884703a 	and	r2,r3,r2
   50e00:	1007883a 	mov	r3,r2
   50e04:	e0bffc17 	ldw	r2,-16(fp)
   50e08:	10c0020d 	sth	r3,8(r2)
   50e0c:	00000306 	br	50e1c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   50e10:	e0bfff17 	ldw	r2,-4(fp)
   50e14:	00c01c04 	movi	r3,112
   50e18:	10c00005 	stb	r3,0(r2)
   50e1c:	e0bff417 	ldw	r2,-48(fp)
   50e20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50e24:	e0bff617 	ldw	r2,-40(fp)
   50e28:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   50e2c:	00005e06 	br	50fa8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   50e30:	e0bffc17 	ldw	r2,-16(fp)
   50e34:	10c0020b 	ldhu	r3,8(r2)
   50e38:	e0bffd0b 	ldhu	r2,-12(fp)
   50e3c:	1884703a 	and	r2,r3,r2
   50e40:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   50e44:	e0bff30b 	ldhu	r2,-52(fp)
   50e48:	10000d26 	beq	r2,zero,50e80 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50e4c:	e0bff383 	ldbu	r2,-50(fp)
   50e50:	10800058 	cmpnei	r2,r2,1
   50e54:	10000d1e 	bne	r2,zero,50e8c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   50e58:	e0bffc17 	ldw	r2,-16(fp)
   50e5c:	1080020b 	ldhu	r2,8(r2)
   50e60:	1007883a 	mov	r3,r2
   50e64:	e0bff30b 	ldhu	r2,-52(fp)
   50e68:	0084303a 	nor	r2,zero,r2
   50e6c:	1884703a 	and	r2,r3,r2
   50e70:	1007883a 	mov	r3,r2
   50e74:	e0bffc17 	ldw	r2,-16(fp)
   50e78:	10c0020d 	sth	r3,8(r2)
   50e7c:	00000306 	br	50e8c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   50e80:	e0bfff17 	ldw	r2,-4(fp)
   50e84:	00c01c04 	movi	r3,112
   50e88:	10c00005 	stb	r3,0(r2)
   50e8c:	e0bff417 	ldw	r2,-48(fp)
   50e90:	e0bff715 	stw	r2,-36(fp)
   50e94:	e0bff717 	ldw	r2,-36(fp)
   50e98:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   50e9c:	00004206 	br	50fa8 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   50ea0:	e0bffc17 	ldw	r2,-16(fp)
   50ea4:	1080020b 	ldhu	r2,8(r2)
   50ea8:	0084303a 	nor	r2,zero,r2
   50eac:	1007883a 	mov	r3,r2
   50eb0:	e0bffd0b 	ldhu	r2,-12(fp)
   50eb4:	1884703a 	and	r2,r3,r2
   50eb8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   50ebc:	e0fff30b 	ldhu	r3,-52(fp)
   50ec0:	e0bffd0b 	ldhu	r2,-12(fp)
   50ec4:	18800b1e 	bne	r3,r2,50ef4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50ec8:	e0bff383 	ldbu	r2,-50(fp)
   50ecc:	10800058 	cmpnei	r2,r2,1
   50ed0:	10000b1e 	bne	r2,zero,50f00 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   50ed4:	e0bffc17 	ldw	r2,-16(fp)
   50ed8:	10c0020b 	ldhu	r3,8(r2)
   50edc:	e0bff30b 	ldhu	r2,-52(fp)
   50ee0:	1884b03a 	or	r2,r3,r2
   50ee4:	1007883a 	mov	r3,r2
   50ee8:	e0bffc17 	ldw	r2,-16(fp)
   50eec:	10c0020d 	sth	r3,8(r2)
   50ef0:	00000306 	br	50f00 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   50ef4:	e0bfff17 	ldw	r2,-4(fp)
   50ef8:	00c01c04 	movi	r3,112
   50efc:	10c00005 	stb	r3,0(r2)
   50f00:	e0bff417 	ldw	r2,-48(fp)
   50f04:	e0bff815 	stw	r2,-32(fp)
   50f08:	e0bff817 	ldw	r2,-32(fp)
   50f0c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   50f10:	00002506 	br	50fa8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   50f14:	e0bffc17 	ldw	r2,-16(fp)
   50f18:	1080020b 	ldhu	r2,8(r2)
   50f1c:	0084303a 	nor	r2,zero,r2
   50f20:	1007883a 	mov	r3,r2
   50f24:	e0bffd0b 	ldhu	r2,-12(fp)
   50f28:	1884703a 	and	r2,r3,r2
   50f2c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   50f30:	e0bff30b 	ldhu	r2,-52(fp)
   50f34:	10000b26 	beq	r2,zero,50f64 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50f38:	e0bff383 	ldbu	r2,-50(fp)
   50f3c:	10800058 	cmpnei	r2,r2,1
   50f40:	10000b1e 	bne	r2,zero,50f70 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   50f44:	e0bffc17 	ldw	r2,-16(fp)
   50f48:	10c0020b 	ldhu	r3,8(r2)
   50f4c:	e0bff30b 	ldhu	r2,-52(fp)
   50f50:	1884b03a 	or	r2,r3,r2
   50f54:	1007883a 	mov	r3,r2
   50f58:	e0bffc17 	ldw	r2,-16(fp)
   50f5c:	10c0020d 	sth	r3,8(r2)
   50f60:	00000306 	br	50f70 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   50f64:	e0bfff17 	ldw	r2,-4(fp)
   50f68:	00c01c04 	movi	r3,112
   50f6c:	10c00005 	stb	r3,0(r2)
   50f70:	e0bff417 	ldw	r2,-48(fp)
   50f74:	e0bff915 	stw	r2,-28(fp)
   50f78:	e0bff917 	ldw	r2,-28(fp)
   50f7c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   50f80:	00000906 	br	50fa8 <OSFlagAccept+0x2f4>
   50f84:	e0bff417 	ldw	r2,-48(fp)
   50f88:	e0bffa15 	stw	r2,-24(fp)
   50f8c:	e0bffa17 	ldw	r2,-24(fp)
   50f90:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   50f94:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   50f98:	e0bfff17 	ldw	r2,-4(fp)
   50f9c:	00c01bc4 	movi	r3,111
   50fa0:	10c00005 	stb	r3,0(r2)
             break;
   50fa4:	0001883a 	nop
    }
    return (flags_rdy);
   50fa8:	e0bff30b 	ldhu	r2,-52(fp)
}
   50fac:	e037883a 	mov	sp,fp
   50fb0:	df000017 	ldw	fp,0(sp)
   50fb4:	dec00104 	addi	sp,sp,4
   50fb8:	f800283a 	ret

00050fbc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   50fbc:	defff804 	addi	sp,sp,-32
   50fc0:	df000715 	stw	fp,28(sp)
   50fc4:	df000704 	addi	fp,sp,28
   50fc8:	2005883a 	mov	r2,r4
   50fcc:	e17fff15 	stw	r5,-4(fp)
   50fd0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   50fd4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   50fd8:	e0bfff17 	ldw	r2,-4(fp)
   50fdc:	1000021e 	bne	r2,zero,50fe8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   50fe0:	0005883a 	mov	r2,zero
   50fe4:	00003306 	br	510b4 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   50fe8:	d0a73003 	ldbu	r2,-25408(gp)
   50fec:	10803fcc 	andi	r2,r2,255
   50ff0:	10000526 	beq	r2,zero,51008 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   50ff4:	e0bfff17 	ldw	r2,-4(fp)
   50ff8:	00c00404 	movi	r3,16
   50ffc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   51000:	0005883a 	mov	r2,zero
   51004:	00002b06 	br	510b4 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51008:	0005303a 	rdctl	r2,status
   5100c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51010:	e0fffd17 	ldw	r3,-12(fp)
   51014:	00bfff84 	movi	r2,-2
   51018:	1884703a 	and	r2,r3,r2
   5101c:	1001703a 	wrctl	status,r2
  
  return context;
   51020:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   51024:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   51028:	d0a73317 	ldw	r2,-25396(gp)
   5102c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   51030:	e0bffb17 	ldw	r2,-20(fp)
   51034:	10001726 	beq	r2,zero,51094 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   51038:	d0a73317 	ldw	r2,-25396(gp)
   5103c:	10800117 	ldw	r2,4(r2)
   51040:	d0a73315 	stw	r2,-25396(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   51044:	e0bffb17 	ldw	r2,-20(fp)
   51048:	00c00144 	movi	r3,5
   5104c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   51050:	e0bffb17 	ldw	r2,-20(fp)
   51054:	e0fffe0b 	ldhu	r3,-8(fp)
   51058:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   5105c:	e0bffb17 	ldw	r2,-20(fp)
   51060:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   51064:	e0bffb17 	ldw	r2,-20(fp)
   51068:	00c00fc4 	movi	r3,63
   5106c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   51070:	e0bffb17 	ldw	r2,-20(fp)
   51074:	100002c5 	stb	zero,11(r2)
   51078:	e0bff917 	ldw	r2,-28(fp)
   5107c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51080:	e0bffa17 	ldw	r2,-24(fp)
   51084:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   51088:	e0bfff17 	ldw	r2,-4(fp)
   5108c:	10000005 	stb	zero,0(r2)
   51090:	00000706 	br	510b0 <OSFlagCreate+0xf4>
   51094:	e0bff917 	ldw	r2,-28(fp)
   51098:	e0bffc15 	stw	r2,-16(fp)
   5109c:	e0bffc17 	ldw	r2,-16(fp)
   510a0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   510a4:	e0bfff17 	ldw	r2,-4(fp)
   510a8:	00c01c84 	movi	r3,114
   510ac:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   510b0:	e0bffb17 	ldw	r2,-20(fp)
}
   510b4:	e037883a 	mov	sp,fp
   510b8:	df000017 	ldw	fp,0(sp)
   510bc:	dec00104 	addi	sp,sp,4
   510c0:	f800283a 	ret

000510c4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   510c4:	defff204 	addi	sp,sp,-56
   510c8:	dfc00d15 	stw	ra,52(sp)
   510cc:	df000c15 	stw	fp,48(sp)
   510d0:	df000c04 	addi	fp,sp,48
   510d4:	e13ffd15 	stw	r4,-12(fp)
   510d8:	2805883a 	mov	r2,r5
   510dc:	e1bfff15 	stw	r6,-4(fp)
   510e0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   510e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   510e8:	e0bfff17 	ldw	r2,-4(fp)
   510ec:	1000021e 	bne	r2,zero,510f8 <OSFlagDel+0x34>
        return (pgrp);
   510f0:	e0bffd17 	ldw	r2,-12(fp)
   510f4:	00008006 	br	512f8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   510f8:	e0bffd17 	ldw	r2,-12(fp)
   510fc:	1000051e 	bne	r2,zero,51114 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   51100:	e0bfff17 	ldw	r2,-4(fp)
   51104:	00c01b84 	movi	r3,110
   51108:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   5110c:	e0bffd17 	ldw	r2,-12(fp)
   51110:	00007906 	br	512f8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   51114:	d0a73003 	ldbu	r2,-25408(gp)
   51118:	10803fcc 	andi	r2,r2,255
   5111c:	10000526 	beq	r2,zero,51134 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   51120:	e0bfff17 	ldw	r2,-4(fp)
   51124:	00c003c4 	movi	r3,15
   51128:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   5112c:	e0bffd17 	ldw	r2,-12(fp)
   51130:	00007106 	br	512f8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   51134:	e0bffd17 	ldw	r2,-12(fp)
   51138:	10800003 	ldbu	r2,0(r2)
   5113c:	10803fcc 	andi	r2,r2,255
   51140:	10800160 	cmpeqi	r2,r2,5
   51144:	1000051e 	bne	r2,zero,5115c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   51148:	e0bfff17 	ldw	r2,-4(fp)
   5114c:	00c00044 	movi	r3,1
   51150:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   51154:	e0bffd17 	ldw	r2,-12(fp)
   51158:	00006706 	br	512f8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5115c:	0005303a 	rdctl	r2,status
   51160:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51164:	e0fffc17 	ldw	r3,-16(fp)
   51168:	00bfff84 	movi	r2,-2
   5116c:	1884703a 	and	r2,r3,r2
   51170:	1001703a 	wrctl	status,r2
  
  return context;
   51174:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   51178:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   5117c:	e0bffd17 	ldw	r2,-12(fp)
   51180:	10800117 	ldw	r2,4(r2)
   51184:	10000326 	beq	r2,zero,51194 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   51188:	00800044 	movi	r2,1
   5118c:	e0bff405 	stb	r2,-48(fp)
   51190:	00000106 	br	51198 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   51194:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   51198:	e0bffe03 	ldbu	r2,-8(fp)
   5119c:	10000326 	beq	r2,zero,511ac <OSFlagDel+0xe8>
   511a0:	10800060 	cmpeqi	r2,r2,1
   511a4:	1000231e 	bne	r2,zero,51234 <OSFlagDel+0x170>
   511a8:	00004806 	br	512cc <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   511ac:	e0bff403 	ldbu	r2,-48(fp)
   511b0:	1000161e 	bne	r2,zero,5120c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   511b4:	e0bffd17 	ldw	r2,-12(fp)
   511b8:	00c00fc4 	movi	r3,63
   511bc:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   511c0:	e0bffd17 	ldw	r2,-12(fp)
   511c4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   511c8:	e0bffd17 	ldw	r2,-12(fp)
   511cc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   511d0:	d0e73317 	ldw	r3,-25396(gp)
   511d4:	e0bffd17 	ldw	r2,-12(fp)
   511d8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   511dc:	e0bffd17 	ldw	r2,-12(fp)
   511e0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   511e4:	e0bffd17 	ldw	r2,-12(fp)
   511e8:	d0a73315 	stw	r2,-25396(gp)
   511ec:	e0bff717 	ldw	r2,-36(fp)
   511f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   511f4:	e0bff817 	ldw	r2,-32(fp)
   511f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   511fc:	e0bfff17 	ldw	r2,-4(fp)
   51200:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   51204:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   51208:	00003a06 	br	512f4 <OSFlagDel+0x230>
   5120c:	e0bff717 	ldw	r2,-36(fp)
   51210:	e0bff915 	stw	r2,-28(fp)
   51214:	e0bff917 	ldw	r2,-28(fp)
   51218:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   5121c:	e0bfff17 	ldw	r2,-4(fp)
   51220:	00c01244 	movi	r3,73
   51224:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   51228:	e0bffd17 	ldw	r2,-12(fp)
   5122c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   51230:	00003006 	br	512f4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   51234:	e0bffd17 	ldw	r2,-12(fp)
   51238:	10800117 	ldw	r2,4(r2)
   5123c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   51240:	00000606 	br	5125c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   51244:	000b883a 	mov	r5,zero
   51248:	e13ff517 	ldw	r4,-44(fp)
   5124c:	00522300 	call	52230 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   51250:	e0bff517 	ldw	r2,-44(fp)
   51254:	10800017 	ldw	r2,0(r2)
   51258:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   5125c:	e0bff517 	ldw	r2,-44(fp)
   51260:	103ff81e 	bne	r2,zero,51244 <__alt_data_end+0xfffeba44>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   51264:	e0bffd17 	ldw	r2,-12(fp)
   51268:	00c00fc4 	movi	r3,63
   5126c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   51270:	e0bffd17 	ldw	r2,-12(fp)
   51274:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   51278:	e0bffd17 	ldw	r2,-12(fp)
   5127c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   51280:	d0e73317 	ldw	r3,-25396(gp)
   51284:	e0bffd17 	ldw	r2,-12(fp)
   51288:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   5128c:	e0bffd17 	ldw	r2,-12(fp)
   51290:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   51294:	e0bffd17 	ldw	r2,-12(fp)
   51298:	d0a73315 	stw	r2,-25396(gp)
   5129c:	e0bff717 	ldw	r2,-36(fp)
   512a0:	e0bffa15 	stw	r2,-24(fp)
   512a4:	e0bffa17 	ldw	r2,-24(fp)
   512a8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   512ac:	e0bff403 	ldbu	r2,-48(fp)
   512b0:	10800058 	cmpnei	r2,r2,1
   512b4:	1000011e 	bne	r2,zero,512bc <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   512b8:	00504500 	call	50450 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   512bc:	e0bfff17 	ldw	r2,-4(fp)
   512c0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   512c4:	e03ff615 	stw	zero,-40(fp)
             break;
   512c8:	00000a06 	br	512f4 <OSFlagDel+0x230>
   512cc:	e0bff717 	ldw	r2,-36(fp)
   512d0:	e0bffb15 	stw	r2,-20(fp)
   512d4:	e0bffb17 	ldw	r2,-20(fp)
   512d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   512dc:	e0bfff17 	ldw	r2,-4(fp)
   512e0:	00c001c4 	movi	r3,7
   512e4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   512e8:	e0bffd17 	ldw	r2,-12(fp)
   512ec:	e0bff615 	stw	r2,-40(fp)
             break;
   512f0:	0001883a 	nop
    }
    return (pgrp_return);
   512f4:	e0bff617 	ldw	r2,-40(fp)
}
   512f8:	e037883a 	mov	sp,fp
   512fc:	dfc00117 	ldw	ra,4(sp)
   51300:	df000017 	ldw	fp,0(sp)
   51304:	dec00204 	addi	sp,sp,8
   51308:	f800283a 	ret

0005130c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   5130c:	defff604 	addi	sp,sp,-40
   51310:	dfc00915 	stw	ra,36(sp)
   51314:	df000815 	stw	fp,32(sp)
   51318:	df000804 	addi	fp,sp,32
   5131c:	e13ffd15 	stw	r4,-12(fp)
   51320:	e17ffe15 	stw	r5,-8(fp)
   51324:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   51328:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   5132c:	e0bfff17 	ldw	r2,-4(fp)
   51330:	1000021e 	bne	r2,zero,5133c <OSFlagNameGet+0x30>
        return (0);
   51334:	0005883a 	mov	r2,zero
   51338:	00003906 	br	51420 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   5133c:	e0bffd17 	ldw	r2,-12(fp)
   51340:	1000051e 	bne	r2,zero,51358 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   51344:	e0bfff17 	ldw	r2,-4(fp)
   51348:	00c01b84 	movi	r3,110
   5134c:	10c00005 	stb	r3,0(r2)
        return (0);
   51350:	0005883a 	mov	r2,zero
   51354:	00003206 	br	51420 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   51358:	e0bffe17 	ldw	r2,-8(fp)
   5135c:	1000051e 	bne	r2,zero,51374 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   51360:	e0bfff17 	ldw	r2,-4(fp)
   51364:	00c00304 	movi	r3,12
   51368:	10c00005 	stb	r3,0(r2)
        return (0);
   5136c:	0005883a 	mov	r2,zero
   51370:	00002b06 	br	51420 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   51374:	d0a73003 	ldbu	r2,-25408(gp)
   51378:	10803fcc 	andi	r2,r2,255
   5137c:	10000526 	beq	r2,zero,51394 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   51380:	e0bfff17 	ldw	r2,-4(fp)
   51384:	00c00444 	movi	r3,17
   51388:	10c00005 	stb	r3,0(r2)
        return (0);
   5138c:	0005883a 	mov	r2,zero
   51390:	00002306 	br	51420 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51394:	0005303a 	rdctl	r2,status
   51398:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5139c:	e0fffc17 	ldw	r3,-16(fp)
   513a0:	00bfff84 	movi	r2,-2
   513a4:	1884703a 	and	r2,r3,r2
   513a8:	1001703a 	wrctl	status,r2
  
  return context;
   513ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   513b0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   513b4:	e0bffd17 	ldw	r2,-12(fp)
   513b8:	10800003 	ldbu	r2,0(r2)
   513bc:	10803fcc 	andi	r2,r2,255
   513c0:	10800160 	cmpeqi	r2,r2,5
   513c4:	1000091e 	bne	r2,zero,513ec <OSFlagNameGet+0xe0>
   513c8:	e0bff817 	ldw	r2,-32(fp)
   513cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   513d0:	e0bff917 	ldw	r2,-28(fp)
   513d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   513d8:	e0bfff17 	ldw	r2,-4(fp)
   513dc:	00c00044 	movi	r3,1
   513e0:	10c00005 	stb	r3,0(r2)
        return (0);
   513e4:	0005883a 	mov	r2,zero
   513e8:	00000d06 	br	51420 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   513ec:	e0bffd17 	ldw	r2,-12(fp)
   513f0:	10800284 	addi	r2,r2,10
   513f4:	100b883a 	mov	r5,r2
   513f8:	e13ffe17 	ldw	r4,-8(fp)
   513fc:	00505940 	call	50594 <OS_StrCopy>
   51400:	e0bffb05 	stb	r2,-20(fp)
   51404:	e0bff817 	ldw	r2,-32(fp)
   51408:	e0bffa15 	stw	r2,-24(fp)
   5140c:	e0bffa17 	ldw	r2,-24(fp)
   51410:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   51414:	e0bfff17 	ldw	r2,-4(fp)
   51418:	10000005 	stb	zero,0(r2)
    return (len);
   5141c:	e0bffb03 	ldbu	r2,-20(fp)
}
   51420:	e037883a 	mov	sp,fp
   51424:	dfc00117 	ldw	ra,4(sp)
   51428:	df000017 	ldw	fp,0(sp)
   5142c:	dec00204 	addi	sp,sp,8
   51430:	f800283a 	ret

00051434 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   51434:	defff504 	addi	sp,sp,-44
   51438:	dfc00a15 	stw	ra,40(sp)
   5143c:	df000915 	stw	fp,36(sp)
   51440:	df000904 	addi	fp,sp,36
   51444:	e13ffd15 	stw	r4,-12(fp)
   51448:	e17ffe15 	stw	r5,-8(fp)
   5144c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   51450:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   51454:	e0bfff17 	ldw	r2,-4(fp)
   51458:	10004326 	beq	r2,zero,51568 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   5145c:	e0bffd17 	ldw	r2,-12(fp)
   51460:	1000041e 	bne	r2,zero,51474 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   51464:	e0bfff17 	ldw	r2,-4(fp)
   51468:	00c01b84 	movi	r3,110
   5146c:	10c00005 	stb	r3,0(r2)
        return;
   51470:	00003e06 	br	5156c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   51474:	e0bffe17 	ldw	r2,-8(fp)
   51478:	1000041e 	bne	r2,zero,5148c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   5147c:	e0bfff17 	ldw	r2,-4(fp)
   51480:	00c00304 	movi	r3,12
   51484:	10c00005 	stb	r3,0(r2)
        return;
   51488:	00003806 	br	5156c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   5148c:	d0a73003 	ldbu	r2,-25408(gp)
   51490:	10803fcc 	andi	r2,r2,255
   51494:	10000426 	beq	r2,zero,514a8 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   51498:	e0bfff17 	ldw	r2,-4(fp)
   5149c:	00c00484 	movi	r3,18
   514a0:	10c00005 	stb	r3,0(r2)
        return;
   514a4:	00003106 	br	5156c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   514a8:	0005303a 	rdctl	r2,status
   514ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   514b0:	e0fffc17 	ldw	r3,-16(fp)
   514b4:	00bfff84 	movi	r2,-2
   514b8:	1884703a 	and	r2,r3,r2
   514bc:	1001703a 	wrctl	status,r2
  
  return context;
   514c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   514c4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   514c8:	e0bffd17 	ldw	r2,-12(fp)
   514cc:	10800003 	ldbu	r2,0(r2)
   514d0:	10803fcc 	andi	r2,r2,255
   514d4:	10800160 	cmpeqi	r2,r2,5
   514d8:	1000081e 	bne	r2,zero,514fc <OSFlagNameSet+0xc8>
   514dc:	e0bff717 	ldw	r2,-36(fp)
   514e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   514e4:	e0bff817 	ldw	r2,-32(fp)
   514e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   514ec:	e0bfff17 	ldw	r2,-4(fp)
   514f0:	00c00044 	movi	r3,1
   514f4:	10c00005 	stb	r3,0(r2)
        return;
   514f8:	00001c06 	br	5156c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   514fc:	e13ffe17 	ldw	r4,-8(fp)
   51500:	00506080 	call	50608 <OS_StrLen>
   51504:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   51508:	e0bffa03 	ldbu	r2,-24(fp)
   5150c:	10800830 	cmpltui	r2,r2,32
   51510:	1000081e 	bne	r2,zero,51534 <OSFlagNameSet+0x100>
   51514:	e0bff717 	ldw	r2,-36(fp)
   51518:	e0bff915 	stw	r2,-28(fp)
   5151c:	e0bff917 	ldw	r2,-28(fp)
   51520:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   51524:	e0bfff17 	ldw	r2,-4(fp)
   51528:	00c01cc4 	movi	r3,115
   5152c:	10c00005 	stb	r3,0(r2)
        return;
   51530:	00000e06 	br	5156c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   51534:	e0bffd17 	ldw	r2,-12(fp)
   51538:	10800284 	addi	r2,r2,10
   5153c:	e17ffe17 	ldw	r5,-8(fp)
   51540:	1009883a 	mov	r4,r2
   51544:	00505940 	call	50594 <OS_StrCopy>
   51548:	e0bff717 	ldw	r2,-36(fp)
   5154c:	e0bffb15 	stw	r2,-20(fp)
   51550:	e0bffb17 	ldw	r2,-20(fp)
   51554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   51558:	e0bfff17 	ldw	r2,-4(fp)
   5155c:	10000005 	stb	zero,0(r2)
    return;
   51560:	0001883a 	nop
   51564:	00000106 	br	5156c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   51568:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   5156c:	e037883a 	mov	sp,fp
   51570:	dfc00117 	ldw	ra,4(sp)
   51574:	df000017 	ldw	fp,0(sp)
   51578:	dec00204 	addi	sp,sp,8
   5157c:	f800283a 	ret

00051580 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   51580:	deffe104 	addi	sp,sp,-124
   51584:	dfc01e15 	stw	ra,120(sp)
   51588:	df001d15 	stw	fp,116(sp)
   5158c:	df001d04 	addi	fp,sp,116
   51590:	e13ffc15 	stw	r4,-16(fp)
   51594:	2809883a 	mov	r4,r5
   51598:	3007883a 	mov	r3,r6
   5159c:	3805883a 	mov	r2,r7
   515a0:	e13ffd0d 	sth	r4,-12(fp)
   515a4:	e0fffe05 	stb	r3,-8(fp)
   515a8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   515ac:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   515b0:	e0800217 	ldw	r2,8(fp)
   515b4:	1000021e 	bne	r2,zero,515c0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   515b8:	0005883a 	mov	r2,zero
   515bc:	00015906 	br	51b24 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   515c0:	e0bffc17 	ldw	r2,-16(fp)
   515c4:	1000051e 	bne	r2,zero,515dc <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   515c8:	e0800217 	ldw	r2,8(fp)
   515cc:	00c01b84 	movi	r3,110
   515d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   515d4:	0005883a 	mov	r2,zero
   515d8:	00015206 	br	51b24 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   515dc:	d0a73003 	ldbu	r2,-25408(gp)
   515e0:	10803fcc 	andi	r2,r2,255
   515e4:	10000526 	beq	r2,zero,515fc <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   515e8:	e0800217 	ldw	r2,8(fp)
   515ec:	00c00084 	movi	r3,2
   515f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   515f4:	0005883a 	mov	r2,zero
   515f8:	00014a06 	br	51b24 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   515fc:	d0a72203 	ldbu	r2,-25464(gp)
   51600:	10803fcc 	andi	r2,r2,255
   51604:	10000526 	beq	r2,zero,5161c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   51608:	e0800217 	ldw	r2,8(fp)
   5160c:	00c00344 	movi	r3,13
   51610:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   51614:	0005883a 	mov	r2,zero
   51618:	00014206 	br	51b24 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   5161c:	e0bffc17 	ldw	r2,-16(fp)
   51620:	10800003 	ldbu	r2,0(r2)
   51624:	10803fcc 	andi	r2,r2,255
   51628:	10800160 	cmpeqi	r2,r2,5
   5162c:	1000051e 	bne	r2,zero,51644 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   51630:	e0800217 	ldw	r2,8(fp)
   51634:	00c00044 	movi	r3,1
   51638:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   5163c:	0005883a 	mov	r2,zero
   51640:	00013806 	br	51b24 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   51644:	e0fffe03 	ldbu	r3,-8(fp)
   51648:	00bfe004 	movi	r2,-128
   5164c:	1884703a 	and	r2,r3,r2
   51650:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   51654:	e0bfe603 	ldbu	r2,-104(fp)
   51658:	10000626 	beq	r2,zero,51674 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   5165c:	e0bffe03 	ldbu	r2,-8(fp)
   51660:	10801fcc 	andi	r2,r2,127
   51664:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   51668:	00800044 	movi	r2,1
   5166c:	e0bfe405 	stb	r2,-112(fp)
   51670:	00000106 	br	51678 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   51674:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51678:	0005303a 	rdctl	r2,status
   5167c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51680:	e0fff617 	ldw	r3,-40(fp)
   51684:	00bfff84 	movi	r2,-2
   51688:	1884703a 	and	r2,r3,r2
   5168c:	1001703a 	wrctl	status,r2
  
  return context;
   51690:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   51694:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   51698:	e0bffe03 	ldbu	r2,-8(fp)
   5169c:	10c00060 	cmpeqi	r3,r2,1
   516a0:	1800921e 	bne	r3,zero,518ec <OSFlagPend+0x36c>
   516a4:	10c00088 	cmpgei	r3,r2,2
   516a8:	1800021e 	bne	r3,zero,516b4 <OSFlagPend+0x134>
   516ac:	10006126 	beq	r2,zero,51834 <OSFlagPend+0x2b4>
   516b0:	0000bb06 	br	519a0 <OSFlagPend+0x420>
   516b4:	10c000a0 	cmpeqi	r3,r2,2
   516b8:	1800031e 	bne	r3,zero,516c8 <OSFlagPend+0x148>
   516bc:	108000e0 	cmpeqi	r2,r2,3
   516c0:	10002f1e 	bne	r2,zero,51780 <OSFlagPend+0x200>
   516c4:	0000b606 	br	519a0 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   516c8:	e0bffc17 	ldw	r2,-16(fp)
   516cc:	10c0020b 	ldhu	r3,8(r2)
   516d0:	e0bffd0b 	ldhu	r2,-12(fp)
   516d4:	1884703a 	and	r2,r3,r2
   516d8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   516dc:	e0ffe80b 	ldhu	r3,-96(fp)
   516e0:	e0bffd0b 	ldhu	r2,-12(fp)
   516e4:	1880171e 	bne	r3,r2,51744 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   516e8:	e0bfe403 	ldbu	r2,-112(fp)
   516ec:	10800058 	cmpnei	r2,r2,1
   516f0:	1000091e 	bne	r2,zero,51718 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   516f4:	e0bffc17 	ldw	r2,-16(fp)
   516f8:	1080020b 	ldhu	r2,8(r2)
   516fc:	1007883a 	mov	r3,r2
   51700:	e0bfe80b 	ldhu	r2,-96(fp)
   51704:	0084303a 	nor	r2,zero,r2
   51708:	1884703a 	and	r2,r3,r2
   5170c:	1007883a 	mov	r3,r2
   51710:	e0bffc17 	ldw	r2,-16(fp)
   51714:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   51718:	d0a73117 	ldw	r2,-25404(gp)
   5171c:	e0ffe80b 	ldhu	r3,-96(fp)
   51720:	10c00b0d 	sth	r3,44(r2)
   51724:	e0bfe517 	ldw	r2,-108(fp)
   51728:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5172c:	e0bfe717 	ldw	r2,-100(fp)
   51730:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   51734:	e0800217 	ldw	r2,8(fp)
   51738:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   5173c:	e0bfe80b 	ldhu	r2,-96(fp)
   51740:	0000f806 	br	51b24 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   51744:	e13ffd0b 	ldhu	r4,-12(fp)
   51748:	e17ffe03 	ldbu	r5,-8(fp)
   5174c:	e0bfff0b 	ldhu	r2,-4(fp)
   51750:	e0fff704 	addi	r3,fp,-36
   51754:	d8800015 	stw	r2,0(sp)
   51758:	280f883a 	mov	r7,r5
   5175c:	200d883a 	mov	r6,r4
   51760:	180b883a 	mov	r5,r3
   51764:	e13ffc17 	ldw	r4,-16(fp)
   51768:	0051ff00 	call	51ff0 <OS_FlagBlock>
   5176c:	e0bfe517 	ldw	r2,-108(fp)
   51770:	e0bfe915 	stw	r2,-92(fp)
   51774:	e0bfe917 	ldw	r2,-92(fp)
   51778:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   5177c:	00009206 	br	519c8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   51780:	e0bffc17 	ldw	r2,-16(fp)
   51784:	10c0020b 	ldhu	r3,8(r2)
   51788:	e0bffd0b 	ldhu	r2,-12(fp)
   5178c:	1884703a 	and	r2,r3,r2
   51790:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   51794:	e0bfe80b 	ldhu	r2,-96(fp)
   51798:	10001726 	beq	r2,zero,517f8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   5179c:	e0bfe403 	ldbu	r2,-112(fp)
   517a0:	10800058 	cmpnei	r2,r2,1
   517a4:	1000091e 	bne	r2,zero,517cc <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   517a8:	e0bffc17 	ldw	r2,-16(fp)
   517ac:	1080020b 	ldhu	r2,8(r2)
   517b0:	1007883a 	mov	r3,r2
   517b4:	e0bfe80b 	ldhu	r2,-96(fp)
   517b8:	0084303a 	nor	r2,zero,r2
   517bc:	1884703a 	and	r2,r3,r2
   517c0:	1007883a 	mov	r3,r2
   517c4:	e0bffc17 	ldw	r2,-16(fp)
   517c8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   517cc:	d0a73117 	ldw	r2,-25404(gp)
   517d0:	e0ffe80b 	ldhu	r3,-96(fp)
   517d4:	10c00b0d 	sth	r3,44(r2)
   517d8:	e0bfe517 	ldw	r2,-108(fp)
   517dc:	e0bfea15 	stw	r2,-88(fp)
   517e0:	e0bfea17 	ldw	r2,-88(fp)
   517e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   517e8:	e0800217 	ldw	r2,8(fp)
   517ec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   517f0:	e0bfe80b 	ldhu	r2,-96(fp)
   517f4:	0000cb06 	br	51b24 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   517f8:	e13ffd0b 	ldhu	r4,-12(fp)
   517fc:	e17ffe03 	ldbu	r5,-8(fp)
   51800:	e0bfff0b 	ldhu	r2,-4(fp)
   51804:	e0fff704 	addi	r3,fp,-36
   51808:	d8800015 	stw	r2,0(sp)
   5180c:	280f883a 	mov	r7,r5
   51810:	200d883a 	mov	r6,r4
   51814:	180b883a 	mov	r5,r3
   51818:	e13ffc17 	ldw	r4,-16(fp)
   5181c:	0051ff00 	call	51ff0 <OS_FlagBlock>
   51820:	e0bfe517 	ldw	r2,-108(fp)
   51824:	e0bfeb15 	stw	r2,-84(fp)
   51828:	e0bfeb17 	ldw	r2,-84(fp)
   5182c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   51830:	00006506 	br	519c8 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   51834:	e0bffc17 	ldw	r2,-16(fp)
   51838:	1080020b 	ldhu	r2,8(r2)
   5183c:	0084303a 	nor	r2,zero,r2
   51840:	1007883a 	mov	r3,r2
   51844:	e0bffd0b 	ldhu	r2,-12(fp)
   51848:	1884703a 	and	r2,r3,r2
   5184c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   51850:	e0ffe80b 	ldhu	r3,-96(fp)
   51854:	e0bffd0b 	ldhu	r2,-12(fp)
   51858:	1880151e 	bne	r3,r2,518b0 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   5185c:	e0bfe403 	ldbu	r2,-112(fp)
   51860:	10800058 	cmpnei	r2,r2,1
   51864:	1000071e 	bne	r2,zero,51884 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   51868:	e0bffc17 	ldw	r2,-16(fp)
   5186c:	10c0020b 	ldhu	r3,8(r2)
   51870:	e0bfe80b 	ldhu	r2,-96(fp)
   51874:	1884b03a 	or	r2,r3,r2
   51878:	1007883a 	mov	r3,r2
   5187c:	e0bffc17 	ldw	r2,-16(fp)
   51880:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   51884:	d0a73117 	ldw	r2,-25404(gp)
   51888:	e0ffe80b 	ldhu	r3,-96(fp)
   5188c:	10c00b0d 	sth	r3,44(r2)
   51890:	e0bfe517 	ldw	r2,-108(fp)
   51894:	e0bfec15 	stw	r2,-80(fp)
   51898:	e0bfec17 	ldw	r2,-80(fp)
   5189c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   518a0:	e0800217 	ldw	r2,8(fp)
   518a4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   518a8:	e0bfe80b 	ldhu	r2,-96(fp)
   518ac:	00009d06 	br	51b24 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   518b0:	e13ffd0b 	ldhu	r4,-12(fp)
   518b4:	e17ffe03 	ldbu	r5,-8(fp)
   518b8:	e0bfff0b 	ldhu	r2,-4(fp)
   518bc:	e0fff704 	addi	r3,fp,-36
   518c0:	d8800015 	stw	r2,0(sp)
   518c4:	280f883a 	mov	r7,r5
   518c8:	200d883a 	mov	r6,r4
   518cc:	180b883a 	mov	r5,r3
   518d0:	e13ffc17 	ldw	r4,-16(fp)
   518d4:	0051ff00 	call	51ff0 <OS_FlagBlock>
   518d8:	e0bfe517 	ldw	r2,-108(fp)
   518dc:	e0bfed15 	stw	r2,-76(fp)
   518e0:	e0bfed17 	ldw	r2,-76(fp)
   518e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   518e8:	00003706 	br	519c8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   518ec:	e0bffc17 	ldw	r2,-16(fp)
   518f0:	1080020b 	ldhu	r2,8(r2)
   518f4:	0084303a 	nor	r2,zero,r2
   518f8:	1007883a 	mov	r3,r2
   518fc:	e0bffd0b 	ldhu	r2,-12(fp)
   51900:	1884703a 	and	r2,r3,r2
   51904:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   51908:	e0bfe80b 	ldhu	r2,-96(fp)
   5190c:	10001526 	beq	r2,zero,51964 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   51910:	e0bfe403 	ldbu	r2,-112(fp)
   51914:	10800058 	cmpnei	r2,r2,1
   51918:	1000071e 	bne	r2,zero,51938 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   5191c:	e0bffc17 	ldw	r2,-16(fp)
   51920:	10c0020b 	ldhu	r3,8(r2)
   51924:	e0bfe80b 	ldhu	r2,-96(fp)
   51928:	1884b03a 	or	r2,r3,r2
   5192c:	1007883a 	mov	r3,r2
   51930:	e0bffc17 	ldw	r2,-16(fp)
   51934:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   51938:	d0a73117 	ldw	r2,-25404(gp)
   5193c:	e0ffe80b 	ldhu	r3,-96(fp)
   51940:	10c00b0d 	sth	r3,44(r2)
   51944:	e0bfe517 	ldw	r2,-108(fp)
   51948:	e0bfee15 	stw	r2,-72(fp)
   5194c:	e0bfee17 	ldw	r2,-72(fp)
   51950:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   51954:	e0800217 	ldw	r2,8(fp)
   51958:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   5195c:	e0bfe80b 	ldhu	r2,-96(fp)
   51960:	00007006 	br	51b24 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   51964:	e13ffd0b 	ldhu	r4,-12(fp)
   51968:	e17ffe03 	ldbu	r5,-8(fp)
   5196c:	e0bfff0b 	ldhu	r2,-4(fp)
   51970:	e0fff704 	addi	r3,fp,-36
   51974:	d8800015 	stw	r2,0(sp)
   51978:	280f883a 	mov	r7,r5
   5197c:	200d883a 	mov	r6,r4
   51980:	180b883a 	mov	r5,r3
   51984:	e13ffc17 	ldw	r4,-16(fp)
   51988:	0051ff00 	call	51ff0 <OS_FlagBlock>
   5198c:	e0bfe517 	ldw	r2,-108(fp)
   51990:	e0bfef15 	stw	r2,-68(fp)
   51994:	e0bfef17 	ldw	r2,-68(fp)
   51998:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   5199c:	00000a06 	br	519c8 <OSFlagPend+0x448>
   519a0:	e0bfe517 	ldw	r2,-108(fp)
   519a4:	e0bff015 	stw	r2,-64(fp)
   519a8:	e0bff017 	ldw	r2,-64(fp)
   519ac:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   519b0:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   519b4:	e0800217 	ldw	r2,8(fp)
   519b8:	00c01bc4 	movi	r3,111
   519bc:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   519c0:	e0bfe80b 	ldhu	r2,-96(fp)
   519c4:	00005706 	br	51b24 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   519c8:	00504500 	call	50450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   519cc:	0005303a 	rdctl	r2,status
   519d0:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   519d4:	e0fff117 	ldw	r3,-60(fp)
   519d8:	00bfff84 	movi	r2,-2
   519dc:	1884703a 	and	r2,r3,r2
   519e0:	1001703a 	wrctl	status,r2
  
  return context;
   519e4:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   519e8:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   519ec:	d0a73117 	ldw	r2,-25404(gp)
   519f0:	10800c43 	ldbu	r2,49(r2)
   519f4:	10803fcc 	andi	r2,r2,255
   519f8:	10001c26 	beq	r2,zero,51a6c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   519fc:	d0a73117 	ldw	r2,-25404(gp)
   51a00:	10800c43 	ldbu	r2,49(r2)
   51a04:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   51a08:	d0a73117 	ldw	r2,-25404(gp)
   51a0c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   51a10:	e0bff704 	addi	r2,fp,-36
   51a14:	1009883a 	mov	r4,r2
   51a18:	00523240 	call	52324 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   51a1c:	d0a73117 	ldw	r2,-25404(gp)
   51a20:	10000c05 	stb	zero,48(r2)
   51a24:	e0bfe517 	ldw	r2,-108(fp)
   51a28:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51a2c:	e0bff217 	ldw	r2,-56(fp)
   51a30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   51a34:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   51a38:	e0bff303 	ldbu	r2,-52(fp)
   51a3c:	108000a0 	cmpeqi	r2,r2,2
   51a40:	10000426 	beq	r2,zero,51a54 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   51a44:	e0800217 	ldw	r2,8(fp)
   51a48:	00c00384 	movi	r3,14
   51a4c:	10c00005 	stb	r3,0(r2)
                 break;
   51a50:	00000406 	br	51a64 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   51a54:	e0800217 	ldw	r2,8(fp)
   51a58:	00c00284 	movi	r3,10
   51a5c:	10c00005 	stb	r3,0(r2)
                 break;
   51a60:	0001883a 	nop
        }
        return (flags_rdy);
   51a64:	e0bfe80b 	ldhu	r2,-96(fp)
   51a68:	00002e06 	br	51b24 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   51a6c:	d0a73117 	ldw	r2,-25404(gp)
   51a70:	10800b0b 	ldhu	r2,44(r2)
   51a74:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   51a78:	e0bfe403 	ldbu	r2,-112(fp)
   51a7c:	10800058 	cmpnei	r2,r2,1
   51a80:	1000211e 	bne	r2,zero,51b08 <OSFlagPend+0x588>
        switch (wait_type) {
   51a84:	e0bffe03 	ldbu	r2,-8(fp)
   51a88:	10001616 	blt	r2,zero,51ae4 <OSFlagPend+0x564>
   51a8c:	10c00090 	cmplti	r3,r2,2
   51a90:	18000c1e 	bne	r3,zero,51ac4 <OSFlagPend+0x544>
   51a94:	10800108 	cmpgei	r2,r2,4
   51a98:	1000121e 	bne	r2,zero,51ae4 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   51a9c:	e0bffc17 	ldw	r2,-16(fp)
   51aa0:	1080020b 	ldhu	r2,8(r2)
   51aa4:	1007883a 	mov	r3,r2
   51aa8:	e0bfe80b 	ldhu	r2,-96(fp)
   51aac:	0084303a 	nor	r2,zero,r2
   51ab0:	1884703a 	and	r2,r3,r2
   51ab4:	1007883a 	mov	r3,r2
   51ab8:	e0bffc17 	ldw	r2,-16(fp)
   51abc:	10c0020d 	sth	r3,8(r2)
                 break;
   51ac0:	00001106 	br	51b08 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   51ac4:	e0bffc17 	ldw	r2,-16(fp)
   51ac8:	10c0020b 	ldhu	r3,8(r2)
   51acc:	e0bfe80b 	ldhu	r2,-96(fp)
   51ad0:	1884b03a 	or	r2,r3,r2
   51ad4:	1007883a 	mov	r3,r2
   51ad8:	e0bffc17 	ldw	r2,-16(fp)
   51adc:	10c0020d 	sth	r3,8(r2)
                 break;
   51ae0:	00000906 	br	51b08 <OSFlagPend+0x588>
   51ae4:	e0bfe517 	ldw	r2,-108(fp)
   51ae8:	e0bff415 	stw	r2,-48(fp)
   51aec:	e0bff417 	ldw	r2,-48(fp)
   51af0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   51af4:	e0800217 	ldw	r2,8(fp)
   51af8:	00c01bc4 	movi	r3,111
   51afc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   51b00:	0005883a 	mov	r2,zero
   51b04:	00000706 	br	51b24 <OSFlagPend+0x5a4>
   51b08:	e0bfe517 	ldw	r2,-108(fp)
   51b0c:	e0bff515 	stw	r2,-44(fp)
   51b10:	e0bff517 	ldw	r2,-44(fp)
   51b14:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   51b18:	e0800217 	ldw	r2,8(fp)
   51b1c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   51b20:	e0bfe80b 	ldhu	r2,-96(fp)
}
   51b24:	e037883a 	mov	sp,fp
   51b28:	dfc00117 	ldw	ra,4(sp)
   51b2c:	df000017 	ldw	fp,0(sp)
   51b30:	dec00204 	addi	sp,sp,8
   51b34:	f800283a 	ret

00051b38 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   51b38:	defffb04 	addi	sp,sp,-20
   51b3c:	df000415 	stw	fp,16(sp)
   51b40:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   51b44:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51b48:	0005303a 	rdctl	r2,status
   51b4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51b50:	e0fffe17 	ldw	r3,-8(fp)
   51b54:	00bfff84 	movi	r2,-2
   51b58:	1884703a 	and	r2,r3,r2
   51b5c:	1001703a 	wrctl	status,r2
  
  return context;
   51b60:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   51b64:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   51b68:	d0a73117 	ldw	r2,-25404(gp)
   51b6c:	10800b0b 	ldhu	r2,44(r2)
   51b70:	e0bffd0d 	sth	r2,-12(fp)
   51b74:	e0bffc17 	ldw	r2,-16(fp)
   51b78:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51b7c:	e0bfff17 	ldw	r2,-4(fp)
   51b80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   51b84:	e0bffd0b 	ldhu	r2,-12(fp)
}
   51b88:	e037883a 	mov	sp,fp
   51b8c:	df000017 	ldw	fp,0(sp)
   51b90:	dec00104 	addi	sp,sp,4
   51b94:	f800283a 	ret

00051b98 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   51b98:	deffef04 	addi	sp,sp,-68
   51b9c:	dfc01015 	stw	ra,64(sp)
   51ba0:	df000f15 	stw	fp,60(sp)
   51ba4:	df000f04 	addi	fp,sp,60
   51ba8:	e13ffc15 	stw	r4,-16(fp)
   51bac:	2807883a 	mov	r3,r5
   51bb0:	3005883a 	mov	r2,r6
   51bb4:	e1ffff15 	stw	r7,-4(fp)
   51bb8:	e0fffd0d 	sth	r3,-12(fp)
   51bbc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   51bc0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   51bc4:	e0bfff17 	ldw	r2,-4(fp)
   51bc8:	1000021e 	bne	r2,zero,51bd4 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   51bcc:	0005883a 	mov	r2,zero
   51bd0:	0000d106 	br	51f18 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   51bd4:	e0bffc17 	ldw	r2,-16(fp)
   51bd8:	1000051e 	bne	r2,zero,51bf0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   51bdc:	e0bfff17 	ldw	r2,-4(fp)
   51be0:	00c01b84 	movi	r3,110
   51be4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   51be8:	0005883a 	mov	r2,zero
   51bec:	0000ca06 	br	51f18 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   51bf0:	e0bffc17 	ldw	r2,-16(fp)
   51bf4:	10800003 	ldbu	r2,0(r2)
   51bf8:	10803fcc 	andi	r2,r2,255
   51bfc:	10800160 	cmpeqi	r2,r2,5
   51c00:	1000051e 	bne	r2,zero,51c18 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   51c04:	e0bfff17 	ldw	r2,-4(fp)
   51c08:	00c00044 	movi	r3,1
   51c0c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   51c10:	0005883a 	mov	r2,zero
   51c14:	0000c006 	br	51f18 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51c18:	0005303a 	rdctl	r2,status
   51c1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51c20:	e0fffb17 	ldw	r3,-20(fp)
   51c24:	00bfff84 	movi	r2,-2
   51c28:	1884703a 	and	r2,r3,r2
   51c2c:	1001703a 	wrctl	status,r2
  
  return context;
   51c30:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   51c34:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   51c38:	e0bffe03 	ldbu	r2,-8(fp)
   51c3c:	10000326 	beq	r2,zero,51c4c <OSFlagPost+0xb4>
   51c40:	10800060 	cmpeqi	r2,r2,1
   51c44:	10000b1e 	bne	r2,zero,51c74 <OSFlagPost+0xdc>
   51c48:	00001206 	br	51c94 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   51c4c:	e0bffc17 	ldw	r2,-16(fp)
   51c50:	1080020b 	ldhu	r2,8(r2)
   51c54:	1007883a 	mov	r3,r2
   51c58:	e0bffd0b 	ldhu	r2,-12(fp)
   51c5c:	0084303a 	nor	r2,zero,r2
   51c60:	1884703a 	and	r2,r3,r2
   51c64:	1007883a 	mov	r3,r2
   51c68:	e0bffc17 	ldw	r2,-16(fp)
   51c6c:	10c0020d 	sth	r3,8(r2)
             break;
   51c70:	00001106 	br	51cb8 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   51c74:	e0bffc17 	ldw	r2,-16(fp)
   51c78:	10c0020b 	ldhu	r3,8(r2)
   51c7c:	e0bffd0b 	ldhu	r2,-12(fp)
   51c80:	1884b03a 	or	r2,r3,r2
   51c84:	1007883a 	mov	r3,r2
   51c88:	e0bffc17 	ldw	r2,-16(fp)
   51c8c:	10c0020d 	sth	r3,8(r2)
             break;
   51c90:	00000906 	br	51cb8 <OSFlagPost+0x120>
   51c94:	e0bff317 	ldw	r2,-52(fp)
   51c98:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51c9c:	e0bff417 	ldw	r2,-48(fp)
   51ca0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   51ca4:	e0bfff17 	ldw	r2,-4(fp)
   51ca8:	00c01c44 	movi	r3,113
   51cac:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   51cb0:	0005883a 	mov	r2,zero
   51cb4:	00009806 	br	51f18 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   51cb8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   51cbc:	e0bffc17 	ldw	r2,-16(fp)
   51cc0:	10800117 	ldw	r2,4(r2)
   51cc4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   51cc8:	00007706 	br	51ea8 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   51ccc:	e0bff117 	ldw	r2,-60(fp)
   51cd0:	10800483 	ldbu	r2,18(r2)
   51cd4:	10803fcc 	andi	r2,r2,255
   51cd8:	10c00060 	cmpeqi	r3,r2,1
   51cdc:	18004a1e 	bne	r3,zero,51e08 <OSFlagPost+0x270>
   51ce0:	10c00088 	cmpgei	r3,r2,2
   51ce4:	1800021e 	bne	r3,zero,51cf0 <OSFlagPost+0x158>
   51ce8:	10002f26 	beq	r2,zero,51da8 <OSFlagPost+0x210>
   51cec:	00005b06 	br	51e5c <OSFlagPost+0x2c4>
   51cf0:	10c000a0 	cmpeqi	r3,r2,2
   51cf4:	1800031e 	bne	r3,zero,51d04 <OSFlagPost+0x16c>
   51cf8:	108000e0 	cmpeqi	r2,r2,3
   51cfc:	1000171e 	bne	r2,zero,51d5c <OSFlagPost+0x1c4>
   51d00:	00005606 	br	51e5c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   51d04:	e0bffc17 	ldw	r2,-16(fp)
   51d08:	10c0020b 	ldhu	r3,8(r2)
   51d0c:	e0bff117 	ldw	r2,-60(fp)
   51d10:	1080040b 	ldhu	r2,16(r2)
   51d14:	1884703a 	and	r2,r3,r2
   51d18:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   51d1c:	e0bff117 	ldw	r2,-60(fp)
   51d20:	1080040b 	ldhu	r2,16(r2)
   51d24:	10ffffcc 	andi	r3,r2,65535
   51d28:	e0bff60b 	ldhu	r2,-40(fp)
   51d2c:	1880541e 	bne	r3,r2,51e80 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   51d30:	e0bff60b 	ldhu	r2,-40(fp)
   51d34:	100b883a 	mov	r5,r2
   51d38:	e13ff117 	ldw	r4,-60(fp)
   51d3c:	00522300 	call	52230 <OS_FlagTaskRdy>
   51d40:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   51d44:	e0bff683 	ldbu	r2,-38(fp)
   51d48:	10800058 	cmpnei	r2,r2,1
   51d4c:	10004c1e 	bne	r2,zero,51e80 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   51d50:	00800044 	movi	r2,1
   51d54:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   51d58:	00004906 	br	51e80 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   51d5c:	e0bffc17 	ldw	r2,-16(fp)
   51d60:	10c0020b 	ldhu	r3,8(r2)
   51d64:	e0bff117 	ldw	r2,-60(fp)
   51d68:	1080040b 	ldhu	r2,16(r2)
   51d6c:	1884703a 	and	r2,r3,r2
   51d70:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   51d74:	e0bff60b 	ldhu	r2,-40(fp)
   51d78:	10004326 	beq	r2,zero,51e88 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   51d7c:	e0bff60b 	ldhu	r2,-40(fp)
   51d80:	100b883a 	mov	r5,r2
   51d84:	e13ff117 	ldw	r4,-60(fp)
   51d88:	00522300 	call	52230 <OS_FlagTaskRdy>
   51d8c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   51d90:	e0bff683 	ldbu	r2,-38(fp)
   51d94:	10800058 	cmpnei	r2,r2,1
   51d98:	10003b1e 	bne	r2,zero,51e88 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   51d9c:	00800044 	movi	r2,1
   51da0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   51da4:	00003806 	br	51e88 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   51da8:	e0bffc17 	ldw	r2,-16(fp)
   51dac:	1080020b 	ldhu	r2,8(r2)
   51db0:	0084303a 	nor	r2,zero,r2
   51db4:	1007883a 	mov	r3,r2
   51db8:	e0bff117 	ldw	r2,-60(fp)
   51dbc:	1080040b 	ldhu	r2,16(r2)
   51dc0:	1884703a 	and	r2,r3,r2
   51dc4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   51dc8:	e0bff117 	ldw	r2,-60(fp)
   51dcc:	1080040b 	ldhu	r2,16(r2)
   51dd0:	10ffffcc 	andi	r3,r2,65535
   51dd4:	e0bff60b 	ldhu	r2,-40(fp)
   51dd8:	18802d1e 	bne	r3,r2,51e90 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   51ddc:	e0bff60b 	ldhu	r2,-40(fp)
   51de0:	100b883a 	mov	r5,r2
   51de4:	e13ff117 	ldw	r4,-60(fp)
   51de8:	00522300 	call	52230 <OS_FlagTaskRdy>
   51dec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   51df0:	e0bff683 	ldbu	r2,-38(fp)
   51df4:	10800058 	cmpnei	r2,r2,1
   51df8:	1000251e 	bne	r2,zero,51e90 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   51dfc:	00800044 	movi	r2,1
   51e00:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   51e04:	00002206 	br	51e90 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   51e08:	e0bffc17 	ldw	r2,-16(fp)
   51e0c:	1080020b 	ldhu	r2,8(r2)
   51e10:	0084303a 	nor	r2,zero,r2
   51e14:	1007883a 	mov	r3,r2
   51e18:	e0bff117 	ldw	r2,-60(fp)
   51e1c:	1080040b 	ldhu	r2,16(r2)
   51e20:	1884703a 	and	r2,r3,r2
   51e24:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   51e28:	e0bff60b 	ldhu	r2,-40(fp)
   51e2c:	10001a26 	beq	r2,zero,51e98 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   51e30:	e0bff60b 	ldhu	r2,-40(fp)
   51e34:	100b883a 	mov	r5,r2
   51e38:	e13ff117 	ldw	r4,-60(fp)
   51e3c:	00522300 	call	52230 <OS_FlagTaskRdy>
   51e40:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   51e44:	e0bff683 	ldbu	r2,-38(fp)
   51e48:	10800058 	cmpnei	r2,r2,1
   51e4c:	1000121e 	bne	r2,zero,51e98 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   51e50:	00800044 	movi	r2,1
   51e54:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   51e58:	00000f06 	br	51e98 <OSFlagPost+0x300>
   51e5c:	e0bff317 	ldw	r2,-52(fp)
   51e60:	e0bff515 	stw	r2,-44(fp)
   51e64:	e0bff517 	ldw	r2,-44(fp)
   51e68:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   51e6c:	e0bfff17 	ldw	r2,-4(fp)
   51e70:	00c01bc4 	movi	r3,111
   51e74:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   51e78:	0005883a 	mov	r2,zero
   51e7c:	00002606 	br	51f18 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   51e80:	0001883a 	nop
   51e84:	00000506 	br	51e9c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   51e88:	0001883a 	nop
   51e8c:	00000306 	br	51e9c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   51e90:	0001883a 	nop
   51e94:	00000106 	br	51e9c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   51e98:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   51e9c:	e0bff117 	ldw	r2,-60(fp)
   51ea0:	10800017 	ldw	r2,0(r2)
   51ea4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   51ea8:	e0bff117 	ldw	r2,-60(fp)
   51eac:	103f871e 	bne	r2,zero,51ccc <__alt_data_end+0xfffec4cc>
   51eb0:	e0bff317 	ldw	r2,-52(fp)
   51eb4:	e0bff715 	stw	r2,-36(fp)
   51eb8:	e0bff717 	ldw	r2,-36(fp)
   51ebc:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   51ec0:	e0bff203 	ldbu	r2,-56(fp)
   51ec4:	10800058 	cmpnei	r2,r2,1
   51ec8:	1000011e 	bne	r2,zero,51ed0 <OSFlagPost+0x338>
        OS_Sched();
   51ecc:	00504500 	call	50450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51ed0:	0005303a 	rdctl	r2,status
   51ed4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51ed8:	e0fffa17 	ldw	r3,-24(fp)
   51edc:	00bfff84 	movi	r2,-2
   51ee0:	1884703a 	and	r2,r3,r2
   51ee4:	1001703a 	wrctl	status,r2
  
  return context;
   51ee8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   51eec:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   51ef0:	e0bffc17 	ldw	r2,-16(fp)
   51ef4:	1080020b 	ldhu	r2,8(r2)
   51ef8:	e0bff90d 	sth	r2,-28(fp)
   51efc:	e0bff317 	ldw	r2,-52(fp)
   51f00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51f04:	e0bff817 	ldw	r2,-32(fp)
   51f08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   51f0c:	e0bfff17 	ldw	r2,-4(fp)
   51f10:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   51f14:	e0bff90b 	ldhu	r2,-28(fp)
}
   51f18:	e037883a 	mov	sp,fp
   51f1c:	dfc00117 	ldw	ra,4(sp)
   51f20:	df000017 	ldw	fp,0(sp)
   51f24:	dec00204 	addi	sp,sp,8
   51f28:	f800283a 	ret

00051f2c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   51f2c:	defff904 	addi	sp,sp,-28
   51f30:	df000615 	stw	fp,24(sp)
   51f34:	df000604 	addi	fp,sp,24
   51f38:	e13ffe15 	stw	r4,-8(fp)
   51f3c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   51f40:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   51f44:	e0bfff17 	ldw	r2,-4(fp)
   51f48:	1000021e 	bne	r2,zero,51f54 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   51f4c:	0005883a 	mov	r2,zero
   51f50:	00002306 	br	51fe0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   51f54:	e0bffe17 	ldw	r2,-8(fp)
   51f58:	1000051e 	bne	r2,zero,51f70 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   51f5c:	e0bfff17 	ldw	r2,-4(fp)
   51f60:	00c01b84 	movi	r3,110
   51f64:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   51f68:	0005883a 	mov	r2,zero
   51f6c:	00001c06 	br	51fe0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   51f70:	e0bffe17 	ldw	r2,-8(fp)
   51f74:	10800003 	ldbu	r2,0(r2)
   51f78:	10803fcc 	andi	r2,r2,255
   51f7c:	10800160 	cmpeqi	r2,r2,5
   51f80:	1000051e 	bne	r2,zero,51f98 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   51f84:	e0bfff17 	ldw	r2,-4(fp)
   51f88:	00c00044 	movi	r3,1
   51f8c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   51f90:	0005883a 	mov	r2,zero
   51f94:	00001206 	br	51fe0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51f98:	0005303a 	rdctl	r2,status
   51f9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51fa0:	e0fffc17 	ldw	r3,-16(fp)
   51fa4:	00bfff84 	movi	r2,-2
   51fa8:	1884703a 	and	r2,r3,r2
   51fac:	1001703a 	wrctl	status,r2
  
  return context;
   51fb0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   51fb4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   51fb8:	e0bffe17 	ldw	r2,-8(fp)
   51fbc:	1080020b 	ldhu	r2,8(r2)
   51fc0:	e0bffb0d 	sth	r2,-20(fp)
   51fc4:	e0bffa17 	ldw	r2,-24(fp)
   51fc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51fcc:	e0bffd17 	ldw	r2,-12(fp)
   51fd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   51fd4:	e0bfff17 	ldw	r2,-4(fp)
   51fd8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   51fdc:	e0bffb0b 	ldhu	r2,-20(fp)
}
   51fe0:	e037883a 	mov	sp,fp
   51fe4:	df000017 	ldw	fp,0(sp)
   51fe8:	dec00104 	addi	sp,sp,4
   51fec:	f800283a 	ret

00051ff0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   51ff0:	defff804 	addi	sp,sp,-32
   51ff4:	df000715 	stw	fp,28(sp)
   51ff8:	df000704 	addi	fp,sp,28
   51ffc:	e13ffb15 	stw	r4,-20(fp)
   52000:	e17ffc15 	stw	r5,-16(fp)
   52004:	3009883a 	mov	r4,r6
   52008:	3807883a 	mov	r3,r7
   5200c:	e0800117 	ldw	r2,4(fp)
   52010:	e13ffd0d 	sth	r4,-12(fp)
   52014:	e0fffe05 	stb	r3,-8(fp)
   52018:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   5201c:	d0a73117 	ldw	r2,-25404(gp)
   52020:	d0e73117 	ldw	r3,-25404(gp)
   52024:	18c00c03 	ldbu	r3,48(r3)
   52028:	18c00814 	ori	r3,r3,32
   5202c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   52030:	d0a73117 	ldw	r2,-25404(gp)
   52034:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   52038:	d0a73117 	ldw	r2,-25404(gp)
   5203c:	e0ffff0b 	ldhu	r3,-4(fp)
   52040:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   52044:	d0a73117 	ldw	r2,-25404(gp)
   52048:	e0fffc17 	ldw	r3,-16(fp)
   5204c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   52050:	e0bffc17 	ldw	r2,-16(fp)
   52054:	e0fffd0b 	ldhu	r3,-12(fp)
   52058:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   5205c:	e0bffc17 	ldw	r2,-16(fp)
   52060:	e0fffe03 	ldbu	r3,-8(fp)
   52064:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   52068:	d0e73117 	ldw	r3,-25404(gp)
   5206c:	e0bffc17 	ldw	r2,-16(fp)
   52070:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   52074:	e0bffb17 	ldw	r2,-20(fp)
   52078:	10c00117 	ldw	r3,4(r2)
   5207c:	e0bffc17 	ldw	r2,-16(fp)
   52080:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   52084:	e0bffc17 	ldw	r2,-16(fp)
   52088:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   5208c:	e0bffc17 	ldw	r2,-16(fp)
   52090:	e0fffb17 	ldw	r3,-20(fp)
   52094:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   52098:	e0bffb17 	ldw	r2,-20(fp)
   5209c:	10800117 	ldw	r2,4(r2)
   520a0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   520a4:	e0bff917 	ldw	r2,-28(fp)
   520a8:	10000326 	beq	r2,zero,520b8 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   520ac:	e0bff917 	ldw	r2,-28(fp)
   520b0:	e0fffc17 	ldw	r3,-16(fp)
   520b4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   520b8:	e0bffb17 	ldw	r2,-20(fp)
   520bc:	e0fffc17 	ldw	r3,-16(fp)
   520c0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   520c4:	d0a73117 	ldw	r2,-25404(gp)
   520c8:	10800d03 	ldbu	r2,52(r2)
   520cc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   520d0:	e0fffa03 	ldbu	r3,-24(fp)
   520d4:	e13ffa03 	ldbu	r4,-24(fp)
   520d8:	d0a72e44 	addi	r2,gp,-25415
   520dc:	2085883a 	add	r2,r4,r2
   520e0:	10800003 	ldbu	r2,0(r2)
   520e4:	1009883a 	mov	r4,r2
   520e8:	d0a73117 	ldw	r2,-25404(gp)
   520ec:	10800d43 	ldbu	r2,53(r2)
   520f0:	0084303a 	nor	r2,zero,r2
   520f4:	2084703a 	and	r2,r4,r2
   520f8:	1009883a 	mov	r4,r2
   520fc:	d0a72e44 	addi	r2,gp,-25415
   52100:	1885883a 	add	r2,r3,r2
   52104:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   52108:	e0fffa03 	ldbu	r3,-24(fp)
   5210c:	d0a72e44 	addi	r2,gp,-25415
   52110:	1885883a 	add	r2,r3,r2
   52114:	10800003 	ldbu	r2,0(r2)
   52118:	10803fcc 	andi	r2,r2,255
   5211c:	1000071e 	bne	r2,zero,5213c <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   52120:	d0a73117 	ldw	r2,-25404(gp)
   52124:	10800d83 	ldbu	r2,54(r2)
   52128:	0084303a 	nor	r2,zero,r2
   5212c:	1007883a 	mov	r3,r2
   52130:	d0a72e03 	ldbu	r2,-25416(gp)
   52134:	1884703a 	and	r2,r3,r2
   52138:	d0a72e05 	stb	r2,-25416(gp)
    }
}
   5213c:	0001883a 	nop
   52140:	e037883a 	mov	sp,fp
   52144:	df000017 	ldw	fp,0(sp)
   52148:	dec00104 	addi	sp,sp,4
   5214c:	f800283a 	ret

00052150 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   52150:	defffb04 	addi	sp,sp,-20
   52154:	dfc00415 	stw	ra,16(sp)
   52158:	df000315 	stw	fp,12(sp)
   5215c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   52160:	0140dc04 	movi	r5,880
   52164:	010001b4 	movhi	r4,6
   52168:	2103c604 	addi	r4,r4,3864
   5216c:	00503940 	call	50394 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   52170:	008001b4 	movhi	r2,6
   52174:	1083c604 	addi	r2,r2,3864
   52178:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   5217c:	008001b4 	movhi	r2,6
   52180:	1083d104 	addi	r2,r2,3908
   52184:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   52188:	e03ffd0d 	sth	zero,-12(fp)
   5218c:	00001306 	br	521dc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   52190:	e0bffe17 	ldw	r2,-8(fp)
   52194:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   52198:	e0bffe17 	ldw	r2,-8(fp)
   5219c:	e0ffff17 	ldw	r3,-4(fp)
   521a0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   521a4:	e0bffe17 	ldw	r2,-8(fp)
   521a8:	00c00fc4 	movi	r3,63
   521ac:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   521b0:	e0bffe17 	ldw	r2,-8(fp)
   521b4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   521b8:	e0bffe17 	ldw	r2,-8(fp)
   521bc:	10800b04 	addi	r2,r2,44
   521c0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   521c4:	e0bfff17 	ldw	r2,-4(fp)
   521c8:	10800b04 	addi	r2,r2,44
   521cc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   521d0:	e0bffd0b 	ldhu	r2,-12(fp)
   521d4:	10800044 	addi	r2,r2,1
   521d8:	e0bffd0d 	sth	r2,-12(fp)
   521dc:	e0bffd0b 	ldhu	r2,-12(fp)
   521e0:	108004f0 	cmpltui	r2,r2,19
   521e4:	103fea1e 	bne	r2,zero,52190 <__alt_data_end+0xfffec990>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   521e8:	e0bffe17 	ldw	r2,-8(fp)
   521ec:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   521f0:	e0bffe17 	ldw	r2,-8(fp)
   521f4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   521f8:	e0bffe17 	ldw	r2,-8(fp)
   521fc:	00c00fc4 	movi	r3,63
   52200:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   52204:	e0bffe17 	ldw	r2,-8(fp)
   52208:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   5220c:	008001b4 	movhi	r2,6
   52210:	1083c604 	addi	r2,r2,3864
   52214:	d0a73315 	stw	r2,-25396(gp)
#endif
}
   52218:	0001883a 	nop
   5221c:	e037883a 	mov	sp,fp
   52220:	dfc00117 	ldw	ra,4(sp)
   52224:	df000017 	ldw	fp,0(sp)
   52228:	dec00204 	addi	sp,sp,8
   5222c:	f800283a 	ret

00052230 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   52230:	defffa04 	addi	sp,sp,-24
   52234:	dfc00515 	stw	ra,20(sp)
   52238:	df000415 	stw	fp,16(sp)
   5223c:	df000404 	addi	fp,sp,16
   52240:	e13ffe15 	stw	r4,-8(fp)
   52244:	2805883a 	mov	r2,r5
   52248:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   5224c:	e0bffe17 	ldw	r2,-8(fp)
   52250:	10800217 	ldw	r2,8(r2)
   52254:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   52258:	e0bffd17 	ldw	r2,-12(fp)
   5225c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   52260:	e0bffd17 	ldw	r2,-12(fp)
   52264:	e0ffff0b 	ldhu	r3,-4(fp)
   52268:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   5226c:	e0bffd17 	ldw	r2,-12(fp)
   52270:	10c00c03 	ldbu	r3,48(r2)
   52274:	00bff7c4 	movi	r2,-33
   52278:	1884703a 	and	r2,r3,r2
   5227c:	1007883a 	mov	r3,r2
   52280:	e0bffd17 	ldw	r2,-12(fp)
   52284:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   52288:	e0bffd17 	ldw	r2,-12(fp)
   5228c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   52290:	e0bffd17 	ldw	r2,-12(fp)
   52294:	10800c03 	ldbu	r2,48(r2)
   52298:	10803fcc 	andi	r2,r2,255
   5229c:	1000181e 	bne	r2,zero,52300 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   522a0:	e0bffd17 	ldw	r2,-12(fp)
   522a4:	10c00d83 	ldbu	r3,54(r2)
   522a8:	d0a72e03 	ldbu	r2,-25416(gp)
   522ac:	1884b03a 	or	r2,r3,r2
   522b0:	d0a72e05 	stb	r2,-25416(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   522b4:	e0bffd17 	ldw	r2,-12(fp)
   522b8:	10800d03 	ldbu	r2,52(r2)
   522bc:	10c03fcc 	andi	r3,r2,255
   522c0:	e0bffd17 	ldw	r2,-12(fp)
   522c4:	10800d03 	ldbu	r2,52(r2)
   522c8:	11003fcc 	andi	r4,r2,255
   522cc:	d0a72e44 	addi	r2,gp,-25415
   522d0:	2085883a 	add	r2,r4,r2
   522d4:	11000003 	ldbu	r4,0(r2)
   522d8:	e0bffd17 	ldw	r2,-12(fp)
   522dc:	10800d43 	ldbu	r2,53(r2)
   522e0:	2084b03a 	or	r2,r4,r2
   522e4:	1009883a 	mov	r4,r2
   522e8:	d0a72e44 	addi	r2,gp,-25415
   522ec:	1885883a 	add	r2,r3,r2
   522f0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   522f4:	00800044 	movi	r2,1
   522f8:	e0bffc05 	stb	r2,-16(fp)
   522fc:	00000106 	br	52304 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   52300:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   52304:	e13ffe17 	ldw	r4,-8(fp)
   52308:	00523240 	call	52324 <OS_FlagUnlink>
    return (sched);
   5230c:	e0bffc03 	ldbu	r2,-16(fp)
}
   52310:	e037883a 	mov	sp,fp
   52314:	dfc00117 	ldw	ra,4(sp)
   52318:	df000017 	ldw	fp,0(sp)
   5231c:	dec00204 	addi	sp,sp,8
   52320:	f800283a 	ret

00052324 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   52324:	defffa04 	addi	sp,sp,-24
   52328:	df000515 	stw	fp,20(sp)
   5232c:	df000504 	addi	fp,sp,20
   52330:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   52334:	e0bfff17 	ldw	r2,-4(fp)
   52338:	10800117 	ldw	r2,4(r2)
   5233c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   52340:	e0bfff17 	ldw	r2,-4(fp)
   52344:	10800017 	ldw	r2,0(r2)
   52348:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   5234c:	e0bffb17 	ldw	r2,-20(fp)
   52350:	10000b1e 	bne	r2,zero,52380 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   52354:	e0bfff17 	ldw	r2,-4(fp)
   52358:	10800317 	ldw	r2,12(r2)
   5235c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   52360:	e0bffd17 	ldw	r2,-12(fp)
   52364:	e0fffc17 	ldw	r3,-16(fp)
   52368:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   5236c:	e0bffc17 	ldw	r2,-16(fp)
   52370:	10000b26 	beq	r2,zero,523a0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   52374:	e0bffc17 	ldw	r2,-16(fp)
   52378:	10000115 	stw	zero,4(r2)
   5237c:	00000806 	br	523a0 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   52380:	e0bffb17 	ldw	r2,-20(fp)
   52384:	e0fffc17 	ldw	r3,-16(fp)
   52388:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   5238c:	e0bffc17 	ldw	r2,-16(fp)
   52390:	10000326 	beq	r2,zero,523a0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   52394:	e0bffc17 	ldw	r2,-16(fp)
   52398:	e0fffb17 	ldw	r3,-20(fp)
   5239c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   523a0:	e0bfff17 	ldw	r2,-4(fp)
   523a4:	10800217 	ldw	r2,8(r2)
   523a8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   523ac:	e0bffe17 	ldw	r2,-8(fp)
   523b0:	10000a15 	stw	zero,40(r2)
#endif
}
   523b4:	0001883a 	nop
   523b8:	e037883a 	mov	sp,fp
   523bc:	df000017 	ldw	fp,0(sp)
   523c0:	dec00104 	addi	sp,sp,4
   523c4:	f800283a 	ret

000523c8 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   523c8:	defffa04 	addi	sp,sp,-24
   523cc:	df000515 	stw	fp,20(sp)
   523d0:	df000504 	addi	fp,sp,20
   523d4:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   523d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   523dc:	e0bfff17 	ldw	r2,-4(fp)
   523e0:	1000021e 	bne	r2,zero,523ec <OSMboxAccept+0x24>
        return ((void *)0);
   523e4:	0005883a 	mov	r2,zero
   523e8:	00001906 	br	52450 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   523ec:	e0bfff17 	ldw	r2,-4(fp)
   523f0:	10800003 	ldbu	r2,0(r2)
   523f4:	10803fcc 	andi	r2,r2,255
   523f8:	10800060 	cmpeqi	r2,r2,1
   523fc:	1000021e 	bne	r2,zero,52408 <OSMboxAccept+0x40>
        return ((void *)0);
   52400:	0005883a 	mov	r2,zero
   52404:	00001206 	br	52450 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52408:	0005303a 	rdctl	r2,status
   5240c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52410:	e0fffd17 	ldw	r3,-12(fp)
   52414:	00bfff84 	movi	r2,-2
   52418:	1884703a 	and	r2,r3,r2
   5241c:	1001703a 	wrctl	status,r2
  
  return context;
   52420:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   52424:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   52428:	e0bfff17 	ldw	r2,-4(fp)
   5242c:	10800117 	ldw	r2,4(r2)
   52430:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   52434:	e0bfff17 	ldw	r2,-4(fp)
   52438:	10000115 	stw	zero,4(r2)
   5243c:	e0bffb17 	ldw	r2,-20(fp)
   52440:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52444:	e0bffe17 	ldw	r2,-8(fp)
   52448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   5244c:	e0bffc17 	ldw	r2,-16(fp)
}
   52450:	e037883a 	mov	sp,fp
   52454:	df000017 	ldw	fp,0(sp)
   52458:	dec00104 	addi	sp,sp,4
   5245c:	f800283a 	ret

00052460 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   52460:	defff904 	addi	sp,sp,-28
   52464:	dfc00615 	stw	ra,24(sp)
   52468:	df000515 	stw	fp,20(sp)
   5246c:	df000504 	addi	fp,sp,20
   52470:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   52474:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   52478:	d0a73003 	ldbu	r2,-25408(gp)
   5247c:	10803fcc 	andi	r2,r2,255
   52480:	10000226 	beq	r2,zero,5248c <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   52484:	0005883a 	mov	r2,zero
   52488:	00002506 	br	52520 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5248c:	0005303a 	rdctl	r2,status
   52490:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52494:	e0fffe17 	ldw	r3,-8(fp)
   52498:	00bfff84 	movi	r2,-2
   5249c:	1884703a 	and	r2,r3,r2
   524a0:	1001703a 	wrctl	status,r2
  
  return context;
   524a4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   524a8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   524ac:	d0a72f17 	ldw	r2,-25412(gp)
   524b0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   524b4:	d0a72f17 	ldw	r2,-25412(gp)
   524b8:	10000326 	beq	r2,zero,524c8 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   524bc:	d0a72f17 	ldw	r2,-25412(gp)
   524c0:	10800117 	ldw	r2,4(r2)
   524c4:	d0a72f15 	stw	r2,-25412(gp)
   524c8:	e0bffb17 	ldw	r2,-20(fp)
   524cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   524d0:	e0bffc17 	ldw	r2,-16(fp)
   524d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   524d8:	e0bffd17 	ldw	r2,-12(fp)
   524dc:	10000f26 	beq	r2,zero,5251c <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   524e0:	e0bffd17 	ldw	r2,-12(fp)
   524e4:	00c00044 	movi	r3,1
   524e8:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   524ec:	e0bffd17 	ldw	r2,-12(fp)
   524f0:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   524f4:	e0bffd17 	ldw	r2,-12(fp)
   524f8:	e0ffff17 	ldw	r3,-4(fp)
   524fc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   52500:	e0bffd17 	ldw	r2,-12(fp)
   52504:	00c00fc4 	movi	r3,63
   52508:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   5250c:	e0bffd17 	ldw	r2,-12(fp)
   52510:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   52514:	e13ffd17 	ldw	r4,-12(fp)
   52518:	004ffb40 	call	4ffb4 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   5251c:	e0bffd17 	ldw	r2,-12(fp)
}
   52520:	e037883a 	mov	sp,fp
   52524:	dfc00117 	ldw	ra,4(sp)
   52528:	df000017 	ldw	fp,0(sp)
   5252c:	dec00204 	addi	sp,sp,8
   52530:	f800283a 	ret

00052534 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   52534:	defff304 	addi	sp,sp,-52
   52538:	dfc00c15 	stw	ra,48(sp)
   5253c:	df000b15 	stw	fp,44(sp)
   52540:	df000b04 	addi	fp,sp,44
   52544:	e13ffd15 	stw	r4,-12(fp)
   52548:	2805883a 	mov	r2,r5
   5254c:	e1bfff15 	stw	r6,-4(fp)
   52550:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   52554:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   52558:	e0bfff17 	ldw	r2,-4(fp)
   5255c:	1000021e 	bne	r2,zero,52568 <OSMboxDel+0x34>
        return (pevent);
   52560:	e0bffd17 	ldw	r2,-12(fp)
   52564:	00007e06 	br	52760 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   52568:	e0bffd17 	ldw	r2,-12(fp)
   5256c:	1000051e 	bne	r2,zero,52584 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   52570:	e0bfff17 	ldw	r2,-4(fp)
   52574:	00c00104 	movi	r3,4
   52578:	10c00005 	stb	r3,0(r2)
        return (pevent);
   5257c:	e0bffd17 	ldw	r2,-12(fp)
   52580:	00007706 	br	52760 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   52584:	e0bffd17 	ldw	r2,-12(fp)
   52588:	10800003 	ldbu	r2,0(r2)
   5258c:	10803fcc 	andi	r2,r2,255
   52590:	10800060 	cmpeqi	r2,r2,1
   52594:	1000051e 	bne	r2,zero,525ac <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   52598:	e0bfff17 	ldw	r2,-4(fp)
   5259c:	00c00044 	movi	r3,1
   525a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   525a4:	e0bffd17 	ldw	r2,-12(fp)
   525a8:	00006d06 	br	52760 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   525ac:	d0a73003 	ldbu	r2,-25408(gp)
   525b0:	10803fcc 	andi	r2,r2,255
   525b4:	10000526 	beq	r2,zero,525cc <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   525b8:	e0bfff17 	ldw	r2,-4(fp)
   525bc:	00c003c4 	movi	r3,15
   525c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   525c4:	e0bffd17 	ldw	r2,-12(fp)
   525c8:	00006506 	br	52760 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   525cc:	0005303a 	rdctl	r2,status
   525d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   525d4:	e0fffc17 	ldw	r3,-16(fp)
   525d8:	00bfff84 	movi	r2,-2
   525dc:	1884703a 	and	r2,r3,r2
   525e0:	1001703a 	wrctl	status,r2
  
  return context;
   525e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   525e8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   525ec:	e0bffd17 	ldw	r2,-12(fp)
   525f0:	10800283 	ldbu	r2,10(r2)
   525f4:	10803fcc 	andi	r2,r2,255
   525f8:	10000326 	beq	r2,zero,52608 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   525fc:	00800044 	movi	r2,1
   52600:	e0bff505 	stb	r2,-44(fp)
   52604:	00000106 	br	5260c <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   52608:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   5260c:	e0bffe03 	ldbu	r2,-8(fp)
   52610:	10000326 	beq	r2,zero,52620 <OSMboxDel+0xec>
   52614:	10800060 	cmpeqi	r2,r2,1
   52618:	1000281e 	bne	r2,zero,526bc <OSMboxDel+0x188>
   5261c:	00004506 	br	52734 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   52620:	e0bff503 	ldbu	r2,-44(fp)
   52624:	1000161e 	bne	r2,zero,52680 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   52628:	e0bffd17 	ldw	r2,-12(fp)
   5262c:	00c00fc4 	movi	r3,63
   52630:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   52634:	e0bffd17 	ldw	r2,-12(fp)
   52638:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   5263c:	e0bffd17 	ldw	r2,-12(fp)
   52640:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   52644:	d0e72f17 	ldw	r3,-25412(gp)
   52648:	e0bffd17 	ldw	r2,-12(fp)
   5264c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   52650:	e0bffd17 	ldw	r2,-12(fp)
   52654:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   52658:	e0bffd17 	ldw	r2,-12(fp)
   5265c:	d0a72f15 	stw	r2,-25412(gp)
   52660:	e0bff717 	ldw	r2,-36(fp)
   52664:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52668:	e0bff817 	ldw	r2,-32(fp)
   5266c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   52670:	e0bfff17 	ldw	r2,-4(fp)
   52674:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   52678:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   5267c:	00003706 	br	5275c <OSMboxDel+0x228>
   52680:	e0bff717 	ldw	r2,-36(fp)
   52684:	e0bff915 	stw	r2,-28(fp)
   52688:	e0bff917 	ldw	r2,-28(fp)
   5268c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   52690:	e0bfff17 	ldw	r2,-4(fp)
   52694:	00c01244 	movi	r3,73
   52698:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   5269c:	e0bffd17 	ldw	r2,-12(fp)
   526a0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   526a4:	00002d06 	br	5275c <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   526a8:	000f883a 	mov	r7,zero
   526ac:	01800084 	movi	r6,2
   526b0:	000b883a 	mov	r5,zero
   526b4:	e13ffd17 	ldw	r4,-12(fp)
   526b8:	004fa040 	call	4fa04 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   526bc:	e0bffd17 	ldw	r2,-12(fp)
   526c0:	10800283 	ldbu	r2,10(r2)
   526c4:	10803fcc 	andi	r2,r2,255
   526c8:	103ff71e 	bne	r2,zero,526a8 <__alt_data_end+0xfffecea8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   526cc:	e0bffd17 	ldw	r2,-12(fp)
   526d0:	00c00fc4 	movi	r3,63
   526d4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   526d8:	e0bffd17 	ldw	r2,-12(fp)
   526dc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   526e0:	e0bffd17 	ldw	r2,-12(fp)
   526e4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   526e8:	d0e72f17 	ldw	r3,-25412(gp)
   526ec:	e0bffd17 	ldw	r2,-12(fp)
   526f0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   526f4:	e0bffd17 	ldw	r2,-12(fp)
   526f8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   526fc:	e0bffd17 	ldw	r2,-12(fp)
   52700:	d0a72f15 	stw	r2,-25412(gp)
   52704:	e0bff717 	ldw	r2,-36(fp)
   52708:	e0bffa15 	stw	r2,-24(fp)
   5270c:	e0bffa17 	ldw	r2,-24(fp)
   52710:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   52714:	e0bff503 	ldbu	r2,-44(fp)
   52718:	10800058 	cmpnei	r2,r2,1
   5271c:	1000011e 	bne	r2,zero,52724 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   52720:	00504500 	call	50450 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   52724:	e0bfff17 	ldw	r2,-4(fp)
   52728:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   5272c:	e03ff615 	stw	zero,-40(fp)
             break;
   52730:	00000a06 	br	5275c <OSMboxDel+0x228>
   52734:	e0bff717 	ldw	r2,-36(fp)
   52738:	e0bffb15 	stw	r2,-20(fp)
   5273c:	e0bffb17 	ldw	r2,-20(fp)
   52740:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   52744:	e0bfff17 	ldw	r2,-4(fp)
   52748:	00c001c4 	movi	r3,7
   5274c:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   52750:	e0bffd17 	ldw	r2,-12(fp)
   52754:	e0bff615 	stw	r2,-40(fp)
             break;
   52758:	0001883a 	nop
    }
    return (pevent_return);
   5275c:	e0bff617 	ldw	r2,-40(fp)
}
   52760:	e037883a 	mov	sp,fp
   52764:	dfc00117 	ldw	ra,4(sp)
   52768:	df000017 	ldw	fp,0(sp)
   5276c:	dec00204 	addi	sp,sp,8
   52770:	f800283a 	ret

00052774 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   52774:	defff404 	addi	sp,sp,-48
   52778:	dfc00b15 	stw	ra,44(sp)
   5277c:	df000a15 	stw	fp,40(sp)
   52780:	df000a04 	addi	fp,sp,40
   52784:	e13ffd15 	stw	r4,-12(fp)
   52788:	2805883a 	mov	r2,r5
   5278c:	e1bfff15 	stw	r6,-4(fp)
   52790:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   52794:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   52798:	e0bfff17 	ldw	r2,-4(fp)
   5279c:	1000021e 	bne	r2,zero,527a8 <OSMboxPend+0x34>
        return ((void *)0);
   527a0:	0005883a 	mov	r2,zero
   527a4:	00007b06 	br	52994 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   527a8:	e0bffd17 	ldw	r2,-12(fp)
   527ac:	1000051e 	bne	r2,zero,527c4 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   527b0:	e0bfff17 	ldw	r2,-4(fp)
   527b4:	00c00104 	movi	r3,4
   527b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   527bc:	0005883a 	mov	r2,zero
   527c0:	00007406 	br	52994 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   527c4:	e0bffd17 	ldw	r2,-12(fp)
   527c8:	10800003 	ldbu	r2,0(r2)
   527cc:	10803fcc 	andi	r2,r2,255
   527d0:	10800060 	cmpeqi	r2,r2,1
   527d4:	1000051e 	bne	r2,zero,527ec <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   527d8:	e0bfff17 	ldw	r2,-4(fp)
   527dc:	00c00044 	movi	r3,1
   527e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   527e4:	0005883a 	mov	r2,zero
   527e8:	00006a06 	br	52994 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   527ec:	d0a73003 	ldbu	r2,-25408(gp)
   527f0:	10803fcc 	andi	r2,r2,255
   527f4:	10000526 	beq	r2,zero,5280c <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   527f8:	e0bfff17 	ldw	r2,-4(fp)
   527fc:	00c00084 	movi	r3,2
   52800:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   52804:	0005883a 	mov	r2,zero
   52808:	00006206 	br	52994 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   5280c:	d0a72203 	ldbu	r2,-25464(gp)
   52810:	10803fcc 	andi	r2,r2,255
   52814:	10000526 	beq	r2,zero,5282c <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   52818:	e0bfff17 	ldw	r2,-4(fp)
   5281c:	00c00344 	movi	r3,13
   52820:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   52824:	0005883a 	mov	r2,zero
   52828:	00005a06 	br	52994 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5282c:	0005303a 	rdctl	r2,status
   52830:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52834:	e0fffc17 	ldw	r3,-16(fp)
   52838:	00bfff84 	movi	r2,-2
   5283c:	1884703a 	and	r2,r3,r2
   52840:	1001703a 	wrctl	status,r2
  
  return context;
   52844:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   52848:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   5284c:	e0bffd17 	ldw	r2,-12(fp)
   52850:	10800117 	ldw	r2,4(r2)
   52854:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   52858:	e0bff617 	ldw	r2,-40(fp)
   5285c:	10000a26 	beq	r2,zero,52888 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   52860:	e0bffd17 	ldw	r2,-12(fp)
   52864:	10000115 	stw	zero,4(r2)
   52868:	e0bff717 	ldw	r2,-36(fp)
   5286c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52870:	e0bff817 	ldw	r2,-32(fp)
   52874:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   52878:	e0bfff17 	ldw	r2,-4(fp)
   5287c:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   52880:	e0bff617 	ldw	r2,-40(fp)
   52884:	00004306 	br	52994 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   52888:	d0a73117 	ldw	r2,-25404(gp)
   5288c:	d0e73117 	ldw	r3,-25404(gp)
   52890:	18c00c03 	ldbu	r3,48(r3)
   52894:	18c00094 	ori	r3,r3,2
   52898:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   5289c:	d0a73117 	ldw	r2,-25404(gp)
   528a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   528a4:	d0a73117 	ldw	r2,-25404(gp)
   528a8:	e0fffe0b 	ldhu	r3,-8(fp)
   528ac:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   528b0:	e13ffd17 	ldw	r4,-12(fp)
   528b4:	004fb9c0 	call	4fb9c <OS_EventTaskWait>
   528b8:	e0bff717 	ldw	r2,-36(fp)
   528bc:	e0bffb15 	stw	r2,-20(fp)
   528c0:	e0bffb17 	ldw	r2,-20(fp)
   528c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   528c8:	00504500 	call	50450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   528cc:	0005303a 	rdctl	r2,status
   528d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   528d4:	e0fff917 	ldw	r3,-28(fp)
   528d8:	00bfff84 	movi	r2,-2
   528dc:	1884703a 	and	r2,r3,r2
   528e0:	1001703a 	wrctl	status,r2
  
  return context;
   528e4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   528e8:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   528ec:	d0a73117 	ldw	r2,-25404(gp)
   528f0:	10800c43 	ldbu	r2,49(r2)
   528f4:	10803fcc 	andi	r2,r2,255
   528f8:	10000326 	beq	r2,zero,52908 <OSMboxPend+0x194>
   528fc:	108000a0 	cmpeqi	r2,r2,2
   52900:	1000071e 	bne	r2,zero,52920 <OSMboxPend+0x1ac>
   52904:	00000b06 	br	52934 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   52908:	d0a73117 	ldw	r2,-25404(gp)
   5290c:	10800917 	ldw	r2,36(r2)
   52910:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   52914:	e0bfff17 	ldw	r2,-4(fp)
   52918:	10000005 	stb	zero,0(r2)
             break;
   5291c:	00000e06 	br	52958 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   52920:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   52924:	e0bfff17 	ldw	r2,-4(fp)
   52928:	00c00384 	movi	r3,14
   5292c:	10c00005 	stb	r3,0(r2)
             break;
   52930:	00000906 	br	52958 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   52934:	d0a73117 	ldw	r2,-25404(gp)
   52938:	e17ffd17 	ldw	r5,-12(fp)
   5293c:	1009883a 	mov	r4,r2
   52940:	004fdfc0 	call	4fdfc <OS_EventTaskRemove>
             pmsg = (void *)0;
   52944:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   52948:	e0bfff17 	ldw	r2,-4(fp)
   5294c:	00c00284 	movi	r3,10
   52950:	10c00005 	stb	r3,0(r2)
             break;
   52954:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   52958:	d0a73117 	ldw	r2,-25404(gp)
   5295c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   52960:	d0a73117 	ldw	r2,-25404(gp)
   52964:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   52968:	d0a73117 	ldw	r2,-25404(gp)
   5296c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   52970:	d0a73117 	ldw	r2,-25404(gp)
   52974:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   52978:	d0a73117 	ldw	r2,-25404(gp)
   5297c:	10000915 	stw	zero,36(r2)
   52980:	e0bff717 	ldw	r2,-36(fp)
   52984:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52988:	e0bffa17 	ldw	r2,-24(fp)
   5298c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   52990:	e0bff617 	ldw	r2,-40(fp)
}
   52994:	e037883a 	mov	sp,fp
   52998:	dfc00117 	ldw	ra,4(sp)
   5299c:	df000017 	ldw	fp,0(sp)
   529a0:	dec00204 	addi	sp,sp,8
   529a4:	f800283a 	ret

000529a8 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   529a8:	defff604 	addi	sp,sp,-40
   529ac:	dfc00915 	stw	ra,36(sp)
   529b0:	df000815 	stw	fp,32(sp)
   529b4:	df000804 	addi	fp,sp,32
   529b8:	e13ffd15 	stw	r4,-12(fp)
   529bc:	2805883a 	mov	r2,r5
   529c0:	e1bfff15 	stw	r6,-4(fp)
   529c4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   529c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   529cc:	e0bfff17 	ldw	r2,-4(fp)
   529d0:	1000021e 	bne	r2,zero,529dc <OSMboxPendAbort+0x34>
        return (0);
   529d4:	0005883a 	mov	r2,zero
   529d8:	00004906 	br	52b00 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   529dc:	e0bffd17 	ldw	r2,-12(fp)
   529e0:	1000051e 	bne	r2,zero,529f8 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   529e4:	e0bfff17 	ldw	r2,-4(fp)
   529e8:	00c00104 	movi	r3,4
   529ec:	10c00005 	stb	r3,0(r2)
        return (0);
   529f0:	0005883a 	mov	r2,zero
   529f4:	00004206 	br	52b00 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   529f8:	e0bffd17 	ldw	r2,-12(fp)
   529fc:	10800003 	ldbu	r2,0(r2)
   52a00:	10803fcc 	andi	r2,r2,255
   52a04:	10800060 	cmpeqi	r2,r2,1
   52a08:	1000051e 	bne	r2,zero,52a20 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   52a0c:	e0bfff17 	ldw	r2,-4(fp)
   52a10:	00c00044 	movi	r3,1
   52a14:	10c00005 	stb	r3,0(r2)
        return (0);
   52a18:	0005883a 	mov	r2,zero
   52a1c:	00003806 	br	52b00 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52a20:	0005303a 	rdctl	r2,status
   52a24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52a28:	e0fffc17 	ldw	r3,-16(fp)
   52a2c:	00bfff84 	movi	r2,-2
   52a30:	1884703a 	and	r2,r3,r2
   52a34:	1001703a 	wrctl	status,r2
  
  return context;
   52a38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   52a3c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   52a40:	e0bffd17 	ldw	r2,-12(fp)
   52a44:	10800283 	ldbu	r2,10(r2)
   52a48:	10803fcc 	andi	r2,r2,255
   52a4c:	10002526 	beq	r2,zero,52ae4 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   52a50:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   52a54:	e0bffe03 	ldbu	r2,-8(fp)
   52a58:	10800060 	cmpeqi	r2,r2,1
   52a5c:	10000e26 	beq	r2,zero,52a98 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   52a60:	00000806 	br	52a84 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   52a64:	01c00084 	movi	r7,2
   52a68:	01800084 	movi	r6,2
   52a6c:	000b883a 	mov	r5,zero
   52a70:	e13ffd17 	ldw	r4,-12(fp)
   52a74:	004fa040 	call	4fa04 <OS_EventTaskRdy>
                     nbr_tasks++;
   52a78:	e0bff803 	ldbu	r2,-32(fp)
   52a7c:	10800044 	addi	r2,r2,1
   52a80:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   52a84:	e0bffd17 	ldw	r2,-12(fp)
   52a88:	10800283 	ldbu	r2,10(r2)
   52a8c:	10803fcc 	andi	r2,r2,255
   52a90:	103ff41e 	bne	r2,zero,52a64 <__alt_data_end+0xfffed264>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   52a94:	00000906 	br	52abc <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   52a98:	01c00084 	movi	r7,2
   52a9c:	01800084 	movi	r6,2
   52aa0:	000b883a 	mov	r5,zero
   52aa4:	e13ffd17 	ldw	r4,-12(fp)
   52aa8:	004fa040 	call	4fa04 <OS_EventTaskRdy>
                 nbr_tasks++;
   52aac:	e0bff803 	ldbu	r2,-32(fp)
   52ab0:	10800044 	addi	r2,r2,1
   52ab4:	e0bff805 	stb	r2,-32(fp)
                 break;
   52ab8:	0001883a 	nop
   52abc:	e0bff917 	ldw	r2,-28(fp)
   52ac0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52ac4:	e0bffa17 	ldw	r2,-24(fp)
   52ac8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   52acc:	00504500 	call	50450 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   52ad0:	e0bfff17 	ldw	r2,-4(fp)
   52ad4:	00c00384 	movi	r3,14
   52ad8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   52adc:	e0bff803 	ldbu	r2,-32(fp)
   52ae0:	00000706 	br	52b00 <OSMboxPendAbort+0x158>
   52ae4:	e0bff917 	ldw	r2,-28(fp)
   52ae8:	e0bffb15 	stw	r2,-20(fp)
   52aec:	e0bffb17 	ldw	r2,-20(fp)
   52af0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   52af4:	e0bfff17 	ldw	r2,-4(fp)
   52af8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   52afc:	0005883a 	mov	r2,zero
}
   52b00:	e037883a 	mov	sp,fp
   52b04:	dfc00117 	ldw	ra,4(sp)
   52b08:	df000017 	ldw	fp,0(sp)
   52b0c:	dec00204 	addi	sp,sp,8
   52b10:	f800283a 	ret

00052b14 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   52b14:	defff704 	addi	sp,sp,-36
   52b18:	dfc00815 	stw	ra,32(sp)
   52b1c:	df000715 	stw	fp,28(sp)
   52b20:	df000704 	addi	fp,sp,28
   52b24:	e13ffe15 	stw	r4,-8(fp)
   52b28:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   52b2c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   52b30:	e0bffe17 	ldw	r2,-8(fp)
   52b34:	1000021e 	bne	r2,zero,52b40 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   52b38:	00800104 	movi	r2,4
   52b3c:	00003406 	br	52c10 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   52b40:	e0bfff17 	ldw	r2,-4(fp)
   52b44:	1000021e 	bne	r2,zero,52b50 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   52b48:	008000c4 	movi	r2,3
   52b4c:	00003006 	br	52c10 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   52b50:	e0bffe17 	ldw	r2,-8(fp)
   52b54:	10800003 	ldbu	r2,0(r2)
   52b58:	10803fcc 	andi	r2,r2,255
   52b5c:	10800060 	cmpeqi	r2,r2,1
   52b60:	1000021e 	bne	r2,zero,52b6c <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   52b64:	00800044 	movi	r2,1
   52b68:	00002906 	br	52c10 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52b6c:	0005303a 	rdctl	r2,status
   52b70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52b74:	e0fffd17 	ldw	r3,-12(fp)
   52b78:	00bfff84 	movi	r2,-2
   52b7c:	1884703a 	and	r2,r3,r2
   52b80:	1001703a 	wrctl	status,r2
  
  return context;
   52b84:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   52b88:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   52b8c:	e0bffe17 	ldw	r2,-8(fp)
   52b90:	10800283 	ldbu	r2,10(r2)
   52b94:	10803fcc 	andi	r2,r2,255
   52b98:	10000c26 	beq	r2,zero,52bcc <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   52b9c:	000f883a 	mov	r7,zero
   52ba0:	01800084 	movi	r6,2
   52ba4:	e17fff17 	ldw	r5,-4(fp)
   52ba8:	e13ffe17 	ldw	r4,-8(fp)
   52bac:	004fa040 	call	4fa04 <OS_EventTaskRdy>
   52bb0:	e0bff917 	ldw	r2,-28(fp)
   52bb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52bb8:	e0bffa17 	ldw	r2,-24(fp)
   52bbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   52bc0:	00504500 	call	50450 <OS_Sched>
        return (OS_ERR_NONE);
   52bc4:	0005883a 	mov	r2,zero
   52bc8:	00001106 	br	52c10 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   52bcc:	e0bffe17 	ldw	r2,-8(fp)
   52bd0:	10800117 	ldw	r2,4(r2)
   52bd4:	10000626 	beq	r2,zero,52bf0 <OSMboxPost+0xdc>
   52bd8:	e0bff917 	ldw	r2,-28(fp)
   52bdc:	e0bffb15 	stw	r2,-20(fp)
   52be0:	e0bffb17 	ldw	r2,-20(fp)
   52be4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   52be8:	00800504 	movi	r2,20
   52bec:	00000806 	br	52c10 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   52bf0:	e0bffe17 	ldw	r2,-8(fp)
   52bf4:	e0ffff17 	ldw	r3,-4(fp)
   52bf8:	10c00115 	stw	r3,4(r2)
   52bfc:	e0bff917 	ldw	r2,-28(fp)
   52c00:	e0bffc15 	stw	r2,-16(fp)
   52c04:	e0bffc17 	ldw	r2,-16(fp)
   52c08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   52c0c:	0005883a 	mov	r2,zero
}
   52c10:	e037883a 	mov	sp,fp
   52c14:	dfc00117 	ldw	ra,4(sp)
   52c18:	df000017 	ldw	fp,0(sp)
   52c1c:	dec00204 	addi	sp,sp,8
   52c20:	f800283a 	ret

00052c24 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   52c24:	defff604 	addi	sp,sp,-40
   52c28:	dfc00915 	stw	ra,36(sp)
   52c2c:	df000815 	stw	fp,32(sp)
   52c30:	df000804 	addi	fp,sp,32
   52c34:	e13ffd15 	stw	r4,-12(fp)
   52c38:	e17ffe15 	stw	r5,-8(fp)
   52c3c:	3005883a 	mov	r2,r6
   52c40:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   52c44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   52c48:	e0bffd17 	ldw	r2,-12(fp)
   52c4c:	1000021e 	bne	r2,zero,52c58 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   52c50:	00800104 	movi	r2,4
   52c54:	00004506 	br	52d6c <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   52c58:	e0bffe17 	ldw	r2,-8(fp)
   52c5c:	1000021e 	bne	r2,zero,52c68 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   52c60:	008000c4 	movi	r2,3
   52c64:	00004106 	br	52d6c <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   52c68:	e0bffd17 	ldw	r2,-12(fp)
   52c6c:	10800003 	ldbu	r2,0(r2)
   52c70:	10803fcc 	andi	r2,r2,255
   52c74:	10800060 	cmpeqi	r2,r2,1
   52c78:	1000021e 	bne	r2,zero,52c84 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   52c7c:	00800044 	movi	r2,1
   52c80:	00003a06 	br	52d6c <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52c84:	0005303a 	rdctl	r2,status
   52c88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52c8c:	e0fffc17 	ldw	r3,-16(fp)
   52c90:	00bfff84 	movi	r2,-2
   52c94:	1884703a 	and	r2,r3,r2
   52c98:	1001703a 	wrctl	status,r2
  
  return context;
   52c9c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   52ca0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   52ca4:	e0bffd17 	ldw	r2,-12(fp)
   52ca8:	10800283 	ldbu	r2,10(r2)
   52cac:	10803fcc 	andi	r2,r2,255
   52cb0:	10001d26 	beq	r2,zero,52d28 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   52cb4:	e0bfff03 	ldbu	r2,-4(fp)
   52cb8:	1080004c 	andi	r2,r2,1
   52cbc:	10000b26 	beq	r2,zero,52cec <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   52cc0:	00000506 	br	52cd8 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   52cc4:	000f883a 	mov	r7,zero
   52cc8:	01800084 	movi	r6,2
   52ccc:	e17ffe17 	ldw	r5,-8(fp)
   52cd0:	e13ffd17 	ldw	r4,-12(fp)
   52cd4:	004fa040 	call	4fa04 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   52cd8:	e0bffd17 	ldw	r2,-12(fp)
   52cdc:	10800283 	ldbu	r2,10(r2)
   52ce0:	10803fcc 	andi	r2,r2,255
   52ce4:	103ff71e 	bne	r2,zero,52cc4 <__alt_data_end+0xfffed4c4>
   52ce8:	00000506 	br	52d00 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   52cec:	000f883a 	mov	r7,zero
   52cf0:	01800084 	movi	r6,2
   52cf4:	e17ffe17 	ldw	r5,-8(fp)
   52cf8:	e13ffd17 	ldw	r4,-12(fp)
   52cfc:	004fa040 	call	4fa04 <OS_EventTaskRdy>
   52d00:	e0bff817 	ldw	r2,-32(fp)
   52d04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52d08:	e0bff917 	ldw	r2,-28(fp)
   52d0c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   52d10:	e0bfff03 	ldbu	r2,-4(fp)
   52d14:	1080010c 	andi	r2,r2,4
   52d18:	1000011e 	bne	r2,zero,52d20 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   52d1c:	00504500 	call	50450 <OS_Sched>
        }
        return (OS_ERR_NONE);
   52d20:	0005883a 	mov	r2,zero
   52d24:	00001106 	br	52d6c <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   52d28:	e0bffd17 	ldw	r2,-12(fp)
   52d2c:	10800117 	ldw	r2,4(r2)
   52d30:	10000626 	beq	r2,zero,52d4c <OSMboxPostOpt+0x128>
   52d34:	e0bff817 	ldw	r2,-32(fp)
   52d38:	e0bffa15 	stw	r2,-24(fp)
   52d3c:	e0bffa17 	ldw	r2,-24(fp)
   52d40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   52d44:	00800504 	movi	r2,20
   52d48:	00000806 	br	52d6c <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   52d4c:	e0bffd17 	ldw	r2,-12(fp)
   52d50:	e0fffe17 	ldw	r3,-8(fp)
   52d54:	10c00115 	stw	r3,4(r2)
   52d58:	e0bff817 	ldw	r2,-32(fp)
   52d5c:	e0bffb15 	stw	r2,-20(fp)
   52d60:	e0bffb17 	ldw	r2,-20(fp)
   52d64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   52d68:	0005883a 	mov	r2,zero
}
   52d6c:	e037883a 	mov	sp,fp
   52d70:	dfc00117 	ldw	ra,4(sp)
   52d74:	df000017 	ldw	fp,0(sp)
   52d78:	dec00204 	addi	sp,sp,8
   52d7c:	f800283a 	ret

00052d80 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   52d80:	defff704 	addi	sp,sp,-36
   52d84:	df000815 	stw	fp,32(sp)
   52d88:	df000804 	addi	fp,sp,32
   52d8c:	e13ffe15 	stw	r4,-8(fp)
   52d90:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   52d94:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   52d98:	e0bffe17 	ldw	r2,-8(fp)
   52d9c:	1000021e 	bne	r2,zero,52da8 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   52da0:	00800104 	movi	r2,4
   52da4:	00003606 	br	52e80 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   52da8:	e0bfff17 	ldw	r2,-4(fp)
   52dac:	1000021e 	bne	r2,zero,52db8 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   52db0:	00800244 	movi	r2,9
   52db4:	00003206 	br	52e80 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   52db8:	e0bffe17 	ldw	r2,-8(fp)
   52dbc:	10800003 	ldbu	r2,0(r2)
   52dc0:	10803fcc 	andi	r2,r2,255
   52dc4:	10800060 	cmpeqi	r2,r2,1
   52dc8:	1000021e 	bne	r2,zero,52dd4 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   52dcc:	00800044 	movi	r2,1
   52dd0:	00002b06 	br	52e80 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52dd4:	0005303a 	rdctl	r2,status
   52dd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52ddc:	e0fffd17 	ldw	r3,-12(fp)
   52de0:	00bfff84 	movi	r2,-2
   52de4:	1884703a 	and	r2,r3,r2
   52de8:	1001703a 	wrctl	status,r2
  
  return context;
   52dec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   52df0:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   52df4:	e0bffe17 	ldw	r2,-8(fp)
   52df8:	10c00283 	ldbu	r3,10(r2)
   52dfc:	e0bfff17 	ldw	r2,-4(fp)
   52e00:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   52e04:	e0bffe17 	ldw	r2,-8(fp)
   52e08:	108002c4 	addi	r2,r2,11
   52e0c:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   52e10:	e0bfff17 	ldw	r2,-4(fp)
   52e14:	10800104 	addi	r2,r2,4
   52e18:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   52e1c:	e03ff805 	stb	zero,-32(fp)
   52e20:	00000b06 	br	52e50 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   52e24:	e0bffa17 	ldw	r2,-24(fp)
   52e28:	10c00044 	addi	r3,r2,1
   52e2c:	e0fffa15 	stw	r3,-24(fp)
   52e30:	e0fff917 	ldw	r3,-28(fp)
   52e34:	19000044 	addi	r4,r3,1
   52e38:	e13ff915 	stw	r4,-28(fp)
   52e3c:	18c00003 	ldbu	r3,0(r3)
   52e40:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   52e44:	e0bff803 	ldbu	r2,-32(fp)
   52e48:	10800044 	addi	r2,r2,1
   52e4c:	e0bff805 	stb	r2,-32(fp)
   52e50:	e0bff803 	ldbu	r2,-32(fp)
   52e54:	108000f0 	cmpltui	r2,r2,3
   52e58:	103ff21e 	bne	r2,zero,52e24 <__alt_data_end+0xfffed624>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   52e5c:	e0bffe17 	ldw	r2,-8(fp)
   52e60:	10c00117 	ldw	r3,4(r2)
   52e64:	e0bfff17 	ldw	r2,-4(fp)
   52e68:	10c00015 	stw	r3,0(r2)
   52e6c:	e0bffb17 	ldw	r2,-20(fp)
   52e70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52e74:	e0bffc17 	ldw	r2,-16(fp)
   52e78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   52e7c:	0005883a 	mov	r2,zero
}
   52e80:	e037883a 	mov	sp,fp
   52e84:	df000017 	ldw	fp,0(sp)
   52e88:	dec00104 	addi	sp,sp,4
   52e8c:	f800283a 	ret

00052e90 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   52e90:	defff404 	addi	sp,sp,-48
   52e94:	df000b15 	stw	fp,44(sp)
   52e98:	df000b04 	addi	fp,sp,44
   52e9c:	e13ffc15 	stw	r4,-16(fp)
   52ea0:	e17ffd15 	stw	r5,-12(fp)
   52ea4:	e1bffe15 	stw	r6,-8(fp)
   52ea8:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   52eac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   52eb0:	e0bfff17 	ldw	r2,-4(fp)
   52eb4:	1000021e 	bne	r2,zero,52ec0 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   52eb8:	0005883a 	mov	r2,zero
   52ebc:	00006506 	br	53054 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   52ec0:	e0bffc17 	ldw	r2,-16(fp)
   52ec4:	1000051e 	bne	r2,zero,52edc <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   52ec8:	e0bfff17 	ldw	r2,-4(fp)
   52ecc:	00c01884 	movi	r3,98
   52ed0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   52ed4:	0005883a 	mov	r2,zero
   52ed8:	00005e06 	br	53054 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   52edc:	e0bffc17 	ldw	r2,-16(fp)
   52ee0:	108000cc 	andi	r2,r2,3
   52ee4:	10000526 	beq	r2,zero,52efc <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   52ee8:	e0bfff17 	ldw	r2,-4(fp)
   52eec:	00c01884 	movi	r3,98
   52ef0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   52ef4:	0005883a 	mov	r2,zero
   52ef8:	00005606 	br	53054 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   52efc:	e0bffd17 	ldw	r2,-12(fp)
   52f00:	108000a8 	cmpgeui	r2,r2,2
   52f04:	1000051e 	bne	r2,zero,52f1c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   52f08:	e0bfff17 	ldw	r2,-4(fp)
   52f0c:	00c016c4 	movi	r3,91
   52f10:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   52f14:	0005883a 	mov	r2,zero
   52f18:	00004e06 	br	53054 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   52f1c:	e0bffe17 	ldw	r2,-8(fp)
   52f20:	10800128 	cmpgeui	r2,r2,4
   52f24:	1000051e 	bne	r2,zero,52f3c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   52f28:	e0bfff17 	ldw	r2,-4(fp)
   52f2c:	00c01704 	movi	r3,92
   52f30:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   52f34:	0005883a 	mov	r2,zero
   52f38:	00004606 	br	53054 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52f3c:	0005303a 	rdctl	r2,status
   52f40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52f44:	e0fffb17 	ldw	r3,-20(fp)
   52f48:	00bfff84 	movi	r2,-2
   52f4c:	1884703a 	and	r2,r3,r2
   52f50:	1001703a 	wrctl	status,r2
  
  return context;
   52f54:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   52f58:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   52f5c:	d0a72b17 	ldw	r2,-25428(gp)
   52f60:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   52f64:	d0a72b17 	ldw	r2,-25428(gp)
   52f68:	10000326 	beq	r2,zero,52f78 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   52f6c:	d0a72b17 	ldw	r2,-25428(gp)
   52f70:	10800117 	ldw	r2,4(r2)
   52f74:	d0a72b15 	stw	r2,-25428(gp)
   52f78:	e0bff817 	ldw	r2,-32(fp)
   52f7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52f80:	e0bff917 	ldw	r2,-28(fp)
   52f84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   52f88:	e0bffa17 	ldw	r2,-24(fp)
   52f8c:	1000051e 	bne	r2,zero,52fa4 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   52f90:	e0bfff17 	ldw	r2,-4(fp)
   52f94:	00c01684 	movi	r3,90
   52f98:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   52f9c:	0005883a 	mov	r2,zero
   52fa0:	00002c06 	br	53054 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   52fa4:	e0bffc17 	ldw	r2,-16(fp)
   52fa8:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   52fac:	e0fffc17 	ldw	r3,-16(fp)
   52fb0:	e0bffe17 	ldw	r2,-8(fp)
   52fb4:	1885883a 	add	r2,r3,r2
   52fb8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   52fbc:	e03ff715 	stw	zero,-36(fp)
   52fc0:	00000c06 	br	52ff4 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   52fc4:	e0bff617 	ldw	r2,-40(fp)
   52fc8:	e0fff517 	ldw	r3,-44(fp)
   52fcc:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   52fd0:	e0bff517 	ldw	r2,-44(fp)
   52fd4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   52fd8:	e0fff517 	ldw	r3,-44(fp)
   52fdc:	e0bffe17 	ldw	r2,-8(fp)
   52fe0:	1885883a 	add	r2,r3,r2
   52fe4:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   52fe8:	e0bff717 	ldw	r2,-36(fp)
   52fec:	10800044 	addi	r2,r2,1
   52ff0:	e0bff715 	stw	r2,-36(fp)
   52ff4:	e0bffd17 	ldw	r2,-12(fp)
   52ff8:	10bfffc4 	addi	r2,r2,-1
   52ffc:	e0fff717 	ldw	r3,-36(fp)
   53000:	18bff036 	bltu	r3,r2,52fc4 <__alt_data_end+0xfffed7c4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   53004:	e0bff617 	ldw	r2,-40(fp)
   53008:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   5300c:	e0bffa17 	ldw	r2,-24(fp)
   53010:	e0fffc17 	ldw	r3,-16(fp)
   53014:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   53018:	e0bffa17 	ldw	r2,-24(fp)
   5301c:	e0fffc17 	ldw	r3,-16(fp)
   53020:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   53024:	e0bffa17 	ldw	r2,-24(fp)
   53028:	e0fffd17 	ldw	r3,-12(fp)
   5302c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   53030:	e0bffa17 	ldw	r2,-24(fp)
   53034:	e0fffd17 	ldw	r3,-12(fp)
   53038:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   5303c:	e0bffa17 	ldw	r2,-24(fp)
   53040:	e0fffe17 	ldw	r3,-8(fp)
   53044:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   53048:	e0bfff17 	ldw	r2,-4(fp)
   5304c:	10000005 	stb	zero,0(r2)
    return (pmem);
   53050:	e0bffa17 	ldw	r2,-24(fp)
}
   53054:	e037883a 	mov	sp,fp
   53058:	df000017 	ldw	fp,0(sp)
   5305c:	dec00104 	addi	sp,sp,4
   53060:	f800283a 	ret

00053064 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   53064:	defff804 	addi	sp,sp,-32
   53068:	df000715 	stw	fp,28(sp)
   5306c:	df000704 	addi	fp,sp,28
   53070:	e13ffe15 	stw	r4,-8(fp)
   53074:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   53078:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   5307c:	e0bfff17 	ldw	r2,-4(fp)
   53080:	1000021e 	bne	r2,zero,5308c <OSMemGet+0x28>
        return ((void *)0);
   53084:	0005883a 	mov	r2,zero
   53088:	00002e06 	br	53144 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   5308c:	e0bffe17 	ldw	r2,-8(fp)
   53090:	1000051e 	bne	r2,zero,530a8 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   53094:	e0bfff17 	ldw	r2,-4(fp)
   53098:	00c01804 	movi	r3,96
   5309c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   530a0:	0005883a 	mov	r2,zero
   530a4:	00002706 	br	53144 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   530a8:	0005303a 	rdctl	r2,status
   530ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   530b0:	e0fffd17 	ldw	r3,-12(fp)
   530b4:	00bfff84 	movi	r2,-2
   530b8:	1884703a 	and	r2,r3,r2
   530bc:	1001703a 	wrctl	status,r2
  
  return context;
   530c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   530c4:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   530c8:	e0bffe17 	ldw	r2,-8(fp)
   530cc:	10800417 	ldw	r2,16(r2)
   530d0:	10001426 	beq	r2,zero,53124 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   530d4:	e0bffe17 	ldw	r2,-8(fp)
   530d8:	10800117 	ldw	r2,4(r2)
   530dc:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   530e0:	e0bffb17 	ldw	r2,-20(fp)
   530e4:	10c00017 	ldw	r3,0(r2)
   530e8:	e0bffe17 	ldw	r2,-8(fp)
   530ec:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   530f0:	e0bffe17 	ldw	r2,-8(fp)
   530f4:	10800417 	ldw	r2,16(r2)
   530f8:	10ffffc4 	addi	r3,r2,-1
   530fc:	e0bffe17 	ldw	r2,-8(fp)
   53100:	10c00415 	stw	r3,16(r2)
   53104:	e0bff917 	ldw	r2,-28(fp)
   53108:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5310c:	e0bffa17 	ldw	r2,-24(fp)
   53110:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   53114:	e0bfff17 	ldw	r2,-4(fp)
   53118:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   5311c:	e0bffb17 	ldw	r2,-20(fp)
   53120:	00000806 	br	53144 <OSMemGet+0xe0>
   53124:	e0bff917 	ldw	r2,-28(fp)
   53128:	e0bffc15 	stw	r2,-16(fp)
   5312c:	e0bffc17 	ldw	r2,-16(fp)
   53130:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   53134:	e0bfff17 	ldw	r2,-4(fp)
   53138:	00c01744 	movi	r3,93
   5313c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   53140:	0005883a 	mov	r2,zero
}
   53144:	e037883a 	mov	sp,fp
   53148:	df000017 	ldw	fp,0(sp)
   5314c:	dec00104 	addi	sp,sp,4
   53150:	f800283a 	ret

00053154 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   53154:	defff704 	addi	sp,sp,-36
   53158:	dfc00815 	stw	ra,32(sp)
   5315c:	df000715 	stw	fp,28(sp)
   53160:	df000704 	addi	fp,sp,28
   53164:	e13ffd15 	stw	r4,-12(fp)
   53168:	e17ffe15 	stw	r5,-8(fp)
   5316c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   53170:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   53174:	e0bfff17 	ldw	r2,-4(fp)
   53178:	1000021e 	bne	r2,zero,53184 <OSMemNameGet+0x30>
        return (0);
   5317c:	0005883a 	mov	r2,zero
   53180:	00002b06 	br	53230 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   53184:	e0bffd17 	ldw	r2,-12(fp)
   53188:	1000051e 	bne	r2,zero,531a0 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   5318c:	e0bfff17 	ldw	r2,-4(fp)
   53190:	00c01804 	movi	r3,96
   53194:	10c00005 	stb	r3,0(r2)
        return (0);
   53198:	0005883a 	mov	r2,zero
   5319c:	00002406 	br	53230 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   531a0:	e0bffe17 	ldw	r2,-8(fp)
   531a4:	1000051e 	bne	r2,zero,531bc <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   531a8:	e0bfff17 	ldw	r2,-4(fp)
   531ac:	00c00304 	movi	r3,12
   531b0:	10c00005 	stb	r3,0(r2)
        return (0);
   531b4:	0005883a 	mov	r2,zero
   531b8:	00001d06 	br	53230 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   531bc:	d0a73003 	ldbu	r2,-25408(gp)
   531c0:	10803fcc 	andi	r2,r2,255
   531c4:	10000526 	beq	r2,zero,531dc <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   531c8:	e0bfff17 	ldw	r2,-4(fp)
   531cc:	00c00444 	movi	r3,17
   531d0:	10c00005 	stb	r3,0(r2)
        return (0);
   531d4:	0005883a 	mov	r2,zero
   531d8:	00001506 	br	53230 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   531dc:	0005303a 	rdctl	r2,status
   531e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   531e4:	e0fffb17 	ldw	r3,-20(fp)
   531e8:	00bfff84 	movi	r2,-2
   531ec:	1884703a 	and	r2,r3,r2
   531f0:	1001703a 	wrctl	status,r2
  
  return context;
   531f4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   531f8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   531fc:	e0bffd17 	ldw	r2,-12(fp)
   53200:	10800504 	addi	r2,r2,20
   53204:	100b883a 	mov	r5,r2
   53208:	e13ffe17 	ldw	r4,-8(fp)
   5320c:	00505940 	call	50594 <OS_StrCopy>
   53210:	e0bffa05 	stb	r2,-24(fp)
   53214:	e0bff917 	ldw	r2,-28(fp)
   53218:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5321c:	e0bffc17 	ldw	r2,-16(fp)
   53220:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   53224:	e0bfff17 	ldw	r2,-4(fp)
   53228:	10000005 	stb	zero,0(r2)
    return (len);
   5322c:	e0bffa03 	ldbu	r2,-24(fp)
}
   53230:	e037883a 	mov	sp,fp
   53234:	dfc00117 	ldw	ra,4(sp)
   53238:	df000017 	ldw	fp,0(sp)
   5323c:	dec00204 	addi	sp,sp,8
   53240:	f800283a 	ret

00053244 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   53244:	defff604 	addi	sp,sp,-40
   53248:	dfc00915 	stw	ra,36(sp)
   5324c:	df000815 	stw	fp,32(sp)
   53250:	df000804 	addi	fp,sp,32
   53254:	e13ffd15 	stw	r4,-12(fp)
   53258:	e17ffe15 	stw	r5,-8(fp)
   5325c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   53260:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   53264:	e0bfff17 	ldw	r2,-4(fp)
   53268:	10003526 	beq	r2,zero,53340 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   5326c:	e0bffd17 	ldw	r2,-12(fp)
   53270:	1000041e 	bne	r2,zero,53284 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   53274:	e0bfff17 	ldw	r2,-4(fp)
   53278:	00c01804 	movi	r3,96
   5327c:	10c00005 	stb	r3,0(r2)
        return;
   53280:	00003006 	br	53344 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   53284:	e0bffe17 	ldw	r2,-8(fp)
   53288:	1000041e 	bne	r2,zero,5329c <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   5328c:	e0bfff17 	ldw	r2,-4(fp)
   53290:	00c00304 	movi	r3,12
   53294:	10c00005 	stb	r3,0(r2)
        return;
   53298:	00002a06 	br	53344 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   5329c:	d0a73003 	ldbu	r2,-25408(gp)
   532a0:	10803fcc 	andi	r2,r2,255
   532a4:	10000426 	beq	r2,zero,532b8 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   532a8:	e0bfff17 	ldw	r2,-4(fp)
   532ac:	00c00484 	movi	r3,18
   532b0:	10c00005 	stb	r3,0(r2)
        return;
   532b4:	00002306 	br	53344 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   532b8:	0005303a 	rdctl	r2,status
   532bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   532c0:	e0fffc17 	ldw	r3,-16(fp)
   532c4:	00bfff84 	movi	r2,-2
   532c8:	1884703a 	and	r2,r3,r2
   532cc:	1001703a 	wrctl	status,r2
  
  return context;
   532d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   532d4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   532d8:	e13ffe17 	ldw	r4,-8(fp)
   532dc:	00506080 	call	50608 <OS_StrLen>
   532e0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   532e4:	e0bffa03 	ldbu	r2,-24(fp)
   532e8:	10800830 	cmpltui	r2,r2,32
   532ec:	1000081e 	bne	r2,zero,53310 <OSMemNameSet+0xcc>
   532f0:	e0bff817 	ldw	r2,-32(fp)
   532f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   532f8:	e0bff917 	ldw	r2,-28(fp)
   532fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   53300:	e0bfff17 	ldw	r2,-4(fp)
   53304:	00c018c4 	movi	r3,99
   53308:	10c00005 	stb	r3,0(r2)
        return;
   5330c:	00000d06 	br	53344 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   53310:	e0bffd17 	ldw	r2,-12(fp)
   53314:	10800504 	addi	r2,r2,20
   53318:	e17ffe17 	ldw	r5,-8(fp)
   5331c:	1009883a 	mov	r4,r2
   53320:	00505940 	call	50594 <OS_StrCopy>
   53324:	e0bff817 	ldw	r2,-32(fp)
   53328:	e0bffb15 	stw	r2,-20(fp)
   5332c:	e0bffb17 	ldw	r2,-20(fp)
   53330:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   53334:	e0bfff17 	ldw	r2,-4(fp)
   53338:	10000005 	stb	zero,0(r2)
   5333c:	00000106 	br	53344 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   53340:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   53344:	e037883a 	mov	sp,fp
   53348:	dfc00117 	ldw	ra,4(sp)
   5334c:	df000017 	ldw	fp,0(sp)
   53350:	dec00204 	addi	sp,sp,8
   53354:	f800283a 	ret

00053358 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   53358:	defff904 	addi	sp,sp,-28
   5335c:	df000615 	stw	fp,24(sp)
   53360:	df000604 	addi	fp,sp,24
   53364:	e13ffe15 	stw	r4,-8(fp)
   53368:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   5336c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   53370:	e0bffe17 	ldw	r2,-8(fp)
   53374:	1000021e 	bne	r2,zero,53380 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   53378:	00801804 	movi	r2,96
   5337c:	00002806 	br	53420 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   53380:	e0bfff17 	ldw	r2,-4(fp)
   53384:	1000021e 	bne	r2,zero,53390 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   53388:	008017c4 	movi	r2,95
   5338c:	00002406 	br	53420 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53390:	0005303a 	rdctl	r2,status
   53394:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53398:	e0fffd17 	ldw	r3,-12(fp)
   5339c:	00bfff84 	movi	r2,-2
   533a0:	1884703a 	and	r2,r3,r2
   533a4:	1001703a 	wrctl	status,r2
  
  return context;
   533a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   533ac:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   533b0:	e0bffe17 	ldw	r2,-8(fp)
   533b4:	10c00417 	ldw	r3,16(r2)
   533b8:	e0bffe17 	ldw	r2,-8(fp)
   533bc:	10800317 	ldw	r2,12(r2)
   533c0:	18800636 	bltu	r3,r2,533dc <OSMemPut+0x84>
   533c4:	e0bffa17 	ldw	r2,-24(fp)
   533c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   533cc:	e0bffb17 	ldw	r2,-20(fp)
   533d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   533d4:	00801784 	movi	r2,94
   533d8:	00001106 	br	53420 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   533dc:	e0bffe17 	ldw	r2,-8(fp)
   533e0:	10c00117 	ldw	r3,4(r2)
   533e4:	e0bfff17 	ldw	r2,-4(fp)
   533e8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   533ec:	e0bffe17 	ldw	r2,-8(fp)
   533f0:	e0ffff17 	ldw	r3,-4(fp)
   533f4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   533f8:	e0bffe17 	ldw	r2,-8(fp)
   533fc:	10800417 	ldw	r2,16(r2)
   53400:	10c00044 	addi	r3,r2,1
   53404:	e0bffe17 	ldw	r2,-8(fp)
   53408:	10c00415 	stw	r3,16(r2)
   5340c:	e0bffa17 	ldw	r2,-24(fp)
   53410:	e0bffc15 	stw	r2,-16(fp)
   53414:	e0bffc17 	ldw	r2,-16(fp)
   53418:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   5341c:	0005883a 	mov	r2,zero
}
   53420:	e037883a 	mov	sp,fp
   53424:	df000017 	ldw	fp,0(sp)
   53428:	dec00104 	addi	sp,sp,4
   5342c:	f800283a 	ret

00053430 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   53430:	defffa04 	addi	sp,sp,-24
   53434:	df000515 	stw	fp,20(sp)
   53438:	df000504 	addi	fp,sp,20
   5343c:	e13ffe15 	stw	r4,-8(fp)
   53440:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   53444:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   53448:	e0bffe17 	ldw	r2,-8(fp)
   5344c:	1000021e 	bne	r2,zero,53458 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   53450:	00801804 	movi	r2,96
   53454:	00002c06 	br	53508 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   53458:	e0bfff17 	ldw	r2,-4(fp)
   5345c:	1000021e 	bne	r2,zero,53468 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   53460:	00801844 	movi	r2,97
   53464:	00002806 	br	53508 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53468:	0005303a 	rdctl	r2,status
   5346c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53470:	e0fffc17 	ldw	r3,-16(fp)
   53474:	00bfff84 	movi	r2,-2
   53478:	1884703a 	and	r2,r3,r2
   5347c:	1001703a 	wrctl	status,r2
  
  return context;
   53480:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   53484:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   53488:	e0bffe17 	ldw	r2,-8(fp)
   5348c:	10c00017 	ldw	r3,0(r2)
   53490:	e0bfff17 	ldw	r2,-4(fp)
   53494:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   53498:	e0bffe17 	ldw	r2,-8(fp)
   5349c:	10c00117 	ldw	r3,4(r2)
   534a0:	e0bfff17 	ldw	r2,-4(fp)
   534a4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   534a8:	e0bffe17 	ldw	r2,-8(fp)
   534ac:	10c00217 	ldw	r3,8(r2)
   534b0:	e0bfff17 	ldw	r2,-4(fp)
   534b4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   534b8:	e0bffe17 	ldw	r2,-8(fp)
   534bc:	10c00317 	ldw	r3,12(r2)
   534c0:	e0bfff17 	ldw	r2,-4(fp)
   534c4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   534c8:	e0bffe17 	ldw	r2,-8(fp)
   534cc:	10c00417 	ldw	r3,16(r2)
   534d0:	e0bfff17 	ldw	r2,-4(fp)
   534d4:	10c00415 	stw	r3,16(r2)
   534d8:	e0bffb17 	ldw	r2,-20(fp)
   534dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   534e0:	e0bffd17 	ldw	r2,-12(fp)
   534e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   534e8:	e0bfff17 	ldw	r2,-4(fp)
   534ec:	10c00317 	ldw	r3,12(r2)
   534f0:	e0bfff17 	ldw	r2,-4(fp)
   534f4:	10800417 	ldw	r2,16(r2)
   534f8:	1887c83a 	sub	r3,r3,r2
   534fc:	e0bfff17 	ldw	r2,-4(fp)
   53500:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   53504:	0005883a 	mov	r2,zero
}
   53508:	e037883a 	mov	sp,fp
   5350c:	df000017 	ldw	fp,0(sp)
   53510:	dec00104 	addi	sp,sp,4
   53514:	f800283a 	ret

00053518 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   53518:	defffc04 	addi	sp,sp,-16
   5351c:	dfc00315 	stw	ra,12(sp)
   53520:	df000215 	stw	fp,8(sp)
   53524:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   53528:	01430c04 	movi	r5,3120
   5352c:	010001b4 	movhi	r4,6
   53530:	2104a204 	addi	r4,r4,4744
   53534:	00503940 	call	50394 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   53538:	008001b4 	movhi	r2,6
   5353c:	1084a204 	addi	r2,r2,4744
   53540:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   53544:	e03fff0d 	sth	zero,-4(fp)
   53548:	00001606 	br	535a4 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   5354c:	e0bfff0b 	ldhu	r2,-4(fp)
   53550:	10800044 	addi	r2,r2,1
   53554:	01400d04 	movi	r5,52
   53558:	1009883a 	mov	r4,r2
   5355c:	00407040 	call	40704 <__mulsi3>
   53560:	1007883a 	mov	r3,r2
   53564:	008001b4 	movhi	r2,6
   53568:	1084a204 	addi	r2,r2,4744
   5356c:	1887883a 	add	r3,r3,r2
   53570:	e0bffe17 	ldw	r2,-8(fp)
   53574:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   53578:	e0bffe17 	ldw	r2,-8(fp)
   5357c:	00c00fc4 	movi	r3,63
   53580:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   53584:	e0bffe17 	ldw	r2,-8(fp)
   53588:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   5358c:	e0bffe17 	ldw	r2,-8(fp)
   53590:	10800d04 	addi	r2,r2,52
   53594:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   53598:	e0bfff0b 	ldhu	r2,-4(fp)
   5359c:	10800044 	addi	r2,r2,1
   535a0:	e0bfff0d 	sth	r2,-4(fp)
   535a4:	e0bfff0b 	ldhu	r2,-4(fp)
   535a8:	10800ef0 	cmpltui	r2,r2,59
   535ac:	103fe71e 	bne	r2,zero,5354c <__alt_data_end+0xfffedd4c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   535b0:	e0bffe17 	ldw	r2,-8(fp)
   535b4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   535b8:	e0bffe17 	ldw	r2,-8(fp)
   535bc:	00c00fc4 	movi	r3,63
   535c0:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   535c4:	e0bffe17 	ldw	r2,-8(fp)
   535c8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   535cc:	008001b4 	movhi	r2,6
   535d0:	1084a204 	addi	r2,r2,4744
   535d4:	d0a72b15 	stw	r2,-25428(gp)
#endif
}
   535d8:	0001883a 	nop
   535dc:	e037883a 	mov	sp,fp
   535e0:	dfc00117 	ldw	ra,4(sp)
   535e4:	df000017 	ldw	fp,0(sp)
   535e8:	dec00204 	addi	sp,sp,8
   535ec:	f800283a 	ret

000535f0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   535f0:	defff804 	addi	sp,sp,-32
   535f4:	df000715 	stw	fp,28(sp)
   535f8:	df000704 	addi	fp,sp,28
   535fc:	e13ffe15 	stw	r4,-8(fp)
   53600:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   53604:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   53608:	e0bfff17 	ldw	r2,-4(fp)
   5360c:	1000021e 	bne	r2,zero,53618 <OSQAccept+0x28>
        return ((void *)0);
   53610:	0005883a 	mov	r2,zero
   53614:	00004206 	br	53720 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   53618:	e0bffe17 	ldw	r2,-8(fp)
   5361c:	1000051e 	bne	r2,zero,53634 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   53620:	e0bfff17 	ldw	r2,-4(fp)
   53624:	00c00104 	movi	r3,4
   53628:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   5362c:	0005883a 	mov	r2,zero
   53630:	00003b06 	br	53720 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   53634:	e0bffe17 	ldw	r2,-8(fp)
   53638:	10800003 	ldbu	r2,0(r2)
   5363c:	10803fcc 	andi	r2,r2,255
   53640:	108000a0 	cmpeqi	r2,r2,2
   53644:	1000051e 	bne	r2,zero,5365c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   53648:	e0bfff17 	ldw	r2,-4(fp)
   5364c:	00c00044 	movi	r3,1
   53650:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   53654:	0005883a 	mov	r2,zero
   53658:	00003106 	br	53720 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5365c:	0005303a 	rdctl	r2,status
   53660:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53664:	e0fffd17 	ldw	r3,-12(fp)
   53668:	00bfff84 	movi	r2,-2
   5366c:	1884703a 	and	r2,r3,r2
   53670:	1001703a 	wrctl	status,r2
  
  return context;
   53674:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   53678:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   5367c:	e0bffe17 	ldw	r2,-8(fp)
   53680:	10800117 	ldw	r2,4(r2)
   53684:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   53688:	e0bffc17 	ldw	r2,-16(fp)
   5368c:	1080058b 	ldhu	r2,22(r2)
   53690:	10bfffcc 	andi	r2,r2,65535
   53694:	10001926 	beq	r2,zero,536fc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   53698:	e0bffc17 	ldw	r2,-16(fp)
   5369c:	10800417 	ldw	r2,16(r2)
   536a0:	11000104 	addi	r4,r2,4
   536a4:	e0fffc17 	ldw	r3,-16(fp)
   536a8:	19000415 	stw	r4,16(r3)
   536ac:	10800017 	ldw	r2,0(r2)
   536b0:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   536b4:	e0bffc17 	ldw	r2,-16(fp)
   536b8:	1080058b 	ldhu	r2,22(r2)
   536bc:	10bfffc4 	addi	r2,r2,-1
   536c0:	1007883a 	mov	r3,r2
   536c4:	e0bffc17 	ldw	r2,-16(fp)
   536c8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   536cc:	e0bffc17 	ldw	r2,-16(fp)
   536d0:	10c00417 	ldw	r3,16(r2)
   536d4:	e0bffc17 	ldw	r2,-16(fp)
   536d8:	10800217 	ldw	r2,8(r2)
   536dc:	1880041e 	bne	r3,r2,536f0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   536e0:	e0bffc17 	ldw	r2,-16(fp)
   536e4:	10c00117 	ldw	r3,4(r2)
   536e8:	e0bffc17 	ldw	r2,-16(fp)
   536ec:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   536f0:	e0bfff17 	ldw	r2,-4(fp)
   536f4:	10000005 	stb	zero,0(r2)
   536f8:	00000406 	br	5370c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   536fc:	e0bfff17 	ldw	r2,-4(fp)
   53700:	00c007c4 	movi	r3,31
   53704:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   53708:	e03ff915 	stw	zero,-28(fp)
   5370c:	e0bffa17 	ldw	r2,-24(fp)
   53710:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53714:	e0bffb17 	ldw	r2,-20(fp)
   53718:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   5371c:	e0bff917 	ldw	r2,-28(fp)
}
   53720:	e037883a 	mov	sp,fp
   53724:	df000017 	ldw	fp,0(sp)
   53728:	dec00104 	addi	sp,sp,4
   5372c:	f800283a 	ret

00053730 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   53730:	defff404 	addi	sp,sp,-48
   53734:	dfc00b15 	stw	ra,44(sp)
   53738:	df000a15 	stw	fp,40(sp)
   5373c:	df000a04 	addi	fp,sp,40
   53740:	e13ffe15 	stw	r4,-8(fp)
   53744:	2805883a 	mov	r2,r5
   53748:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   5374c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   53750:	d0a73003 	ldbu	r2,-25408(gp)
   53754:	10803fcc 	andi	r2,r2,255
   53758:	10000226 	beq	r2,zero,53764 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   5375c:	0005883a 	mov	r2,zero
   53760:	00005906 	br	538c8 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53764:	0005303a 	rdctl	r2,status
   53768:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5376c:	e0fffd17 	ldw	r3,-12(fp)
   53770:	00bfff84 	movi	r2,-2
   53774:	1884703a 	and	r2,r3,r2
   53778:	1001703a 	wrctl	status,r2
  
  return context;
   5377c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   53780:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   53784:	d0a72f17 	ldw	r2,-25412(gp)
   53788:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   5378c:	d0a72f17 	ldw	r2,-25412(gp)
   53790:	10000326 	beq	r2,zero,537a0 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   53794:	d0a72f17 	ldw	r2,-25412(gp)
   53798:	10800117 	ldw	r2,4(r2)
   5379c:	d0a72f15 	stw	r2,-25412(gp)
   537a0:	e0bff717 	ldw	r2,-36(fp)
   537a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   537a8:	e0bff817 	ldw	r2,-32(fp)
   537ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   537b0:	e0bff617 	ldw	r2,-40(fp)
   537b4:	10004326 	beq	r2,zero,538c4 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   537b8:	0005303a 	rdctl	r2,status
   537bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   537c0:	e0fff917 	ldw	r3,-28(fp)
   537c4:	00bfff84 	movi	r2,-2
   537c8:	1884703a 	and	r2,r3,r2
   537cc:	1001703a 	wrctl	status,r2
  
  return context;
   537d0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   537d4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   537d8:	d0a72d17 	ldw	r2,-25420(gp)
   537dc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   537e0:	e0bffb17 	ldw	r2,-20(fp)
   537e4:	10002d26 	beq	r2,zero,5389c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   537e8:	d0a72d17 	ldw	r2,-25420(gp)
   537ec:	10800017 	ldw	r2,0(r2)
   537f0:	d0a72d15 	stw	r2,-25420(gp)
   537f4:	e0bff717 	ldw	r2,-36(fp)
   537f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   537fc:	e0bffa17 	ldw	r2,-24(fp)
   53800:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   53804:	e0bffb17 	ldw	r2,-20(fp)
   53808:	e0fffe17 	ldw	r3,-8(fp)
   5380c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   53810:	e0bfff0b 	ldhu	r2,-4(fp)
   53814:	1085883a 	add	r2,r2,r2
   53818:	1085883a 	add	r2,r2,r2
   5381c:	1007883a 	mov	r3,r2
   53820:	e0bffe17 	ldw	r2,-8(fp)
   53824:	10c7883a 	add	r3,r2,r3
   53828:	e0bffb17 	ldw	r2,-20(fp)
   5382c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   53830:	e0bffb17 	ldw	r2,-20(fp)
   53834:	e0fffe17 	ldw	r3,-8(fp)
   53838:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   5383c:	e0bffb17 	ldw	r2,-20(fp)
   53840:	e0fffe17 	ldw	r3,-8(fp)
   53844:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   53848:	e0bffb17 	ldw	r2,-20(fp)
   5384c:	e0ffff0b 	ldhu	r3,-4(fp)
   53850:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   53854:	e0bffb17 	ldw	r2,-20(fp)
   53858:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   5385c:	e0bff617 	ldw	r2,-40(fp)
   53860:	00c00084 	movi	r3,2
   53864:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   53868:	e0bff617 	ldw	r2,-40(fp)
   5386c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   53870:	e0bff617 	ldw	r2,-40(fp)
   53874:	e0fffb17 	ldw	r3,-20(fp)
   53878:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   5387c:	e0bff617 	ldw	r2,-40(fp)
   53880:	00c00fc4 	movi	r3,63
   53884:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   53888:	e0bff617 	ldw	r2,-40(fp)
   5388c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   53890:	e13ff617 	ldw	r4,-40(fp)
   53894:	004ffb40 	call	4ffb4 <OS_EventWaitListInit>
   53898:	00000a06 	br	538c4 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   5389c:	d0e72f17 	ldw	r3,-25412(gp)
   538a0:	e0bff617 	ldw	r2,-40(fp)
   538a4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   538a8:	e0bff617 	ldw	r2,-40(fp)
   538ac:	d0a72f15 	stw	r2,-25412(gp)
   538b0:	e0bff717 	ldw	r2,-36(fp)
   538b4:	e0bffc15 	stw	r2,-16(fp)
   538b8:	e0bffc17 	ldw	r2,-16(fp)
   538bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   538c0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   538c4:	e0bff617 	ldw	r2,-40(fp)
}
   538c8:	e037883a 	mov	sp,fp
   538cc:	dfc00117 	ldw	ra,4(sp)
   538d0:	df000017 	ldw	fp,0(sp)
   538d4:	dec00204 	addi	sp,sp,8
   538d8:	f800283a 	ret

000538dc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   538dc:	defff204 	addi	sp,sp,-56
   538e0:	dfc00d15 	stw	ra,52(sp)
   538e4:	df000c15 	stw	fp,48(sp)
   538e8:	df000c04 	addi	fp,sp,48
   538ec:	e13ffd15 	stw	r4,-12(fp)
   538f0:	2805883a 	mov	r2,r5
   538f4:	e1bfff15 	stw	r6,-4(fp)
   538f8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   538fc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   53900:	e0bfff17 	ldw	r2,-4(fp)
   53904:	1000021e 	bne	r2,zero,53910 <OSQDel+0x34>
        return (pevent);
   53908:	e0bffd17 	ldw	r2,-12(fp)
   5390c:	00008e06 	br	53b48 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   53910:	e0bffd17 	ldw	r2,-12(fp)
   53914:	1000051e 	bne	r2,zero,5392c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   53918:	e0bfff17 	ldw	r2,-4(fp)
   5391c:	00c00104 	movi	r3,4
   53920:	10c00005 	stb	r3,0(r2)
        return (pevent);
   53924:	e0bffd17 	ldw	r2,-12(fp)
   53928:	00008706 	br	53b48 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   5392c:	e0bffd17 	ldw	r2,-12(fp)
   53930:	10800003 	ldbu	r2,0(r2)
   53934:	10803fcc 	andi	r2,r2,255
   53938:	108000a0 	cmpeqi	r2,r2,2
   5393c:	1000051e 	bne	r2,zero,53954 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   53940:	e0bfff17 	ldw	r2,-4(fp)
   53944:	00c00044 	movi	r3,1
   53948:	10c00005 	stb	r3,0(r2)
        return (pevent);
   5394c:	e0bffd17 	ldw	r2,-12(fp)
   53950:	00007d06 	br	53b48 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   53954:	d0a73003 	ldbu	r2,-25408(gp)
   53958:	10803fcc 	andi	r2,r2,255
   5395c:	10000526 	beq	r2,zero,53974 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   53960:	e0bfff17 	ldw	r2,-4(fp)
   53964:	00c003c4 	movi	r3,15
   53968:	10c00005 	stb	r3,0(r2)
        return (pevent);
   5396c:	e0bffd17 	ldw	r2,-12(fp)
   53970:	00007506 	br	53b48 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53974:	0005303a 	rdctl	r2,status
   53978:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5397c:	e0fffc17 	ldw	r3,-16(fp)
   53980:	00bfff84 	movi	r2,-2
   53984:	1884703a 	and	r2,r3,r2
   53988:	1001703a 	wrctl	status,r2
  
  return context;
   5398c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   53990:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   53994:	e0bffd17 	ldw	r2,-12(fp)
   53998:	10800283 	ldbu	r2,10(r2)
   5399c:	10803fcc 	andi	r2,r2,255
   539a0:	10000326 	beq	r2,zero,539b0 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   539a4:	00800044 	movi	r2,1
   539a8:	e0bff405 	stb	r2,-48(fp)
   539ac:	00000106 	br	539b4 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   539b0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   539b4:	e0bffe03 	ldbu	r2,-8(fp)
   539b8:	10000326 	beq	r2,zero,539c8 <OSQDel+0xec>
   539bc:	10800060 	cmpeqi	r2,r2,1
   539c0:	1000301e 	bne	r2,zero,53a84 <OSQDel+0x1a8>
   539c4:	00005506 	br	53b1c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   539c8:	e0bff403 	ldbu	r2,-48(fp)
   539cc:	10001e1e 	bne	r2,zero,53a48 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   539d0:	e0bffd17 	ldw	r2,-12(fp)
   539d4:	00c00fc4 	movi	r3,63
   539d8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   539dc:	e0bffd17 	ldw	r2,-12(fp)
   539e0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   539e4:	e0bffd17 	ldw	r2,-12(fp)
   539e8:	10800117 	ldw	r2,4(r2)
   539ec:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   539f0:	d0e72d17 	ldw	r3,-25420(gp)
   539f4:	e0bff817 	ldw	r2,-32(fp)
   539f8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   539fc:	e0bff817 	ldw	r2,-32(fp)
   53a00:	d0a72d15 	stw	r2,-25420(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   53a04:	e0bffd17 	ldw	r2,-12(fp)
   53a08:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   53a0c:	d0e72f17 	ldw	r3,-25412(gp)
   53a10:	e0bffd17 	ldw	r2,-12(fp)
   53a14:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   53a18:	e0bffd17 	ldw	r2,-12(fp)
   53a1c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   53a20:	e0bffd17 	ldw	r2,-12(fp)
   53a24:	d0a72f15 	stw	r2,-25412(gp)
   53a28:	e0bff617 	ldw	r2,-40(fp)
   53a2c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53a30:	e0bff717 	ldw	r2,-36(fp)
   53a34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   53a38:	e0bfff17 	ldw	r2,-4(fp)
   53a3c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   53a40:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   53a44:	00003f06 	br	53b44 <OSQDel+0x268>
   53a48:	e0bff617 	ldw	r2,-40(fp)
   53a4c:	e0bff915 	stw	r2,-28(fp)
   53a50:	e0bff917 	ldw	r2,-28(fp)
   53a54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   53a58:	e0bfff17 	ldw	r2,-4(fp)
   53a5c:	00c01244 	movi	r3,73
   53a60:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   53a64:	e0bffd17 	ldw	r2,-12(fp)
   53a68:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   53a6c:	00003506 	br	53b44 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   53a70:	000f883a 	mov	r7,zero
   53a74:	01800104 	movi	r6,4
   53a78:	000b883a 	mov	r5,zero
   53a7c:	e13ffd17 	ldw	r4,-12(fp)
   53a80:	004fa040 	call	4fa04 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   53a84:	e0bffd17 	ldw	r2,-12(fp)
   53a88:	10800283 	ldbu	r2,10(r2)
   53a8c:	10803fcc 	andi	r2,r2,255
   53a90:	103ff71e 	bne	r2,zero,53a70 <__alt_data_end+0xfffee270>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   53a94:	e0bffd17 	ldw	r2,-12(fp)
   53a98:	00c00fc4 	movi	r3,63
   53a9c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   53aa0:	e0bffd17 	ldw	r2,-12(fp)
   53aa4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   53aa8:	e0bffd17 	ldw	r2,-12(fp)
   53aac:	10800117 	ldw	r2,4(r2)
   53ab0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   53ab4:	d0e72d17 	ldw	r3,-25420(gp)
   53ab8:	e0bff817 	ldw	r2,-32(fp)
   53abc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   53ac0:	e0bff817 	ldw	r2,-32(fp)
   53ac4:	d0a72d15 	stw	r2,-25420(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   53ac8:	e0bffd17 	ldw	r2,-12(fp)
   53acc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   53ad0:	d0e72f17 	ldw	r3,-25412(gp)
   53ad4:	e0bffd17 	ldw	r2,-12(fp)
   53ad8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   53adc:	e0bffd17 	ldw	r2,-12(fp)
   53ae0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   53ae4:	e0bffd17 	ldw	r2,-12(fp)
   53ae8:	d0a72f15 	stw	r2,-25412(gp)
   53aec:	e0bff617 	ldw	r2,-40(fp)
   53af0:	e0bffa15 	stw	r2,-24(fp)
   53af4:	e0bffa17 	ldw	r2,-24(fp)
   53af8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   53afc:	e0bff403 	ldbu	r2,-48(fp)
   53b00:	10800058 	cmpnei	r2,r2,1
   53b04:	1000011e 	bne	r2,zero,53b0c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   53b08:	00504500 	call	50450 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   53b0c:	e0bfff17 	ldw	r2,-4(fp)
   53b10:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   53b14:	e03ff515 	stw	zero,-44(fp)
             break;
   53b18:	00000a06 	br	53b44 <OSQDel+0x268>
   53b1c:	e0bff617 	ldw	r2,-40(fp)
   53b20:	e0bffb15 	stw	r2,-20(fp)
   53b24:	e0bffb17 	ldw	r2,-20(fp)
   53b28:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   53b2c:	e0bfff17 	ldw	r2,-4(fp)
   53b30:	00c001c4 	movi	r3,7
   53b34:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   53b38:	e0bffd17 	ldw	r2,-12(fp)
   53b3c:	e0bff515 	stw	r2,-44(fp)
             break;
   53b40:	0001883a 	nop
    }
    return (pevent_return);
   53b44:	e0bff517 	ldw	r2,-44(fp)
}
   53b48:	e037883a 	mov	sp,fp
   53b4c:	dfc00117 	ldw	ra,4(sp)
   53b50:	df000017 	ldw	fp,0(sp)
   53b54:	dec00204 	addi	sp,sp,8
   53b58:	f800283a 	ret

00053b5c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   53b5c:	defffa04 	addi	sp,sp,-24
   53b60:	df000515 	stw	fp,20(sp)
   53b64:	df000504 	addi	fp,sp,20
   53b68:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   53b6c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   53b70:	e0bfff17 	ldw	r2,-4(fp)
   53b74:	1000021e 	bne	r2,zero,53b80 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   53b78:	00800104 	movi	r2,4
   53b7c:	00002106 	br	53c04 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   53b80:	e0bfff17 	ldw	r2,-4(fp)
   53b84:	10800003 	ldbu	r2,0(r2)
   53b88:	10803fcc 	andi	r2,r2,255
   53b8c:	108000a0 	cmpeqi	r2,r2,2
   53b90:	1000021e 	bne	r2,zero,53b9c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   53b94:	00800044 	movi	r2,1
   53b98:	00001a06 	br	53c04 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53b9c:	0005303a 	rdctl	r2,status
   53ba0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53ba4:	e0fffd17 	ldw	r3,-12(fp)
   53ba8:	00bfff84 	movi	r2,-2
   53bac:	1884703a 	and	r2,r3,r2
   53bb0:	1001703a 	wrctl	status,r2
  
  return context;
   53bb4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   53bb8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   53bbc:	e0bfff17 	ldw	r2,-4(fp)
   53bc0:	10800117 	ldw	r2,4(r2)
   53bc4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   53bc8:	e0bffc17 	ldw	r2,-16(fp)
   53bcc:	10c00117 	ldw	r3,4(r2)
   53bd0:	e0bffc17 	ldw	r2,-16(fp)
   53bd4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   53bd8:	e0bffc17 	ldw	r2,-16(fp)
   53bdc:	10c00117 	ldw	r3,4(r2)
   53be0:	e0bffc17 	ldw	r2,-16(fp)
   53be4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   53be8:	e0bffc17 	ldw	r2,-16(fp)
   53bec:	1000058d 	sth	zero,22(r2)
   53bf0:	e0bffb17 	ldw	r2,-20(fp)
   53bf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53bf8:	e0bffe17 	ldw	r2,-8(fp)
   53bfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   53c00:	0005883a 	mov	r2,zero
}
   53c04:	e037883a 	mov	sp,fp
   53c08:	df000017 	ldw	fp,0(sp)
   53c0c:	dec00104 	addi	sp,sp,4
   53c10:	f800283a 	ret

00053c14 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   53c14:	defff304 	addi	sp,sp,-52
   53c18:	dfc00c15 	stw	ra,48(sp)
   53c1c:	df000b15 	stw	fp,44(sp)
   53c20:	df000b04 	addi	fp,sp,44
   53c24:	e13ffd15 	stw	r4,-12(fp)
   53c28:	2805883a 	mov	r2,r5
   53c2c:	e1bfff15 	stw	r6,-4(fp)
   53c30:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   53c34:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   53c38:	e0bfff17 	ldw	r2,-4(fp)
   53c3c:	1000021e 	bne	r2,zero,53c48 <OSQPend+0x34>
        return ((void *)0);
   53c40:	0005883a 	mov	r2,zero
   53c44:	00009106 	br	53e8c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   53c48:	e0bffd17 	ldw	r2,-12(fp)
   53c4c:	1000051e 	bne	r2,zero,53c64 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   53c50:	e0bfff17 	ldw	r2,-4(fp)
   53c54:	00c00104 	movi	r3,4
   53c58:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   53c5c:	0005883a 	mov	r2,zero
   53c60:	00008a06 	br	53e8c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   53c64:	e0bffd17 	ldw	r2,-12(fp)
   53c68:	10800003 	ldbu	r2,0(r2)
   53c6c:	10803fcc 	andi	r2,r2,255
   53c70:	108000a0 	cmpeqi	r2,r2,2
   53c74:	1000051e 	bne	r2,zero,53c8c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   53c78:	e0bfff17 	ldw	r2,-4(fp)
   53c7c:	00c00044 	movi	r3,1
   53c80:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   53c84:	0005883a 	mov	r2,zero
   53c88:	00008006 	br	53e8c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   53c8c:	d0a73003 	ldbu	r2,-25408(gp)
   53c90:	10803fcc 	andi	r2,r2,255
   53c94:	10000526 	beq	r2,zero,53cac <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   53c98:	e0bfff17 	ldw	r2,-4(fp)
   53c9c:	00c00084 	movi	r3,2
   53ca0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   53ca4:	0005883a 	mov	r2,zero
   53ca8:	00007806 	br	53e8c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   53cac:	d0a72203 	ldbu	r2,-25464(gp)
   53cb0:	10803fcc 	andi	r2,r2,255
   53cb4:	10000526 	beq	r2,zero,53ccc <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   53cb8:	e0bfff17 	ldw	r2,-4(fp)
   53cbc:	00c00344 	movi	r3,13
   53cc0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   53cc4:	0005883a 	mov	r2,zero
   53cc8:	00007006 	br	53e8c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53ccc:	0005303a 	rdctl	r2,status
   53cd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53cd4:	e0fffc17 	ldw	r3,-16(fp)
   53cd8:	00bfff84 	movi	r2,-2
   53cdc:	1884703a 	and	r2,r3,r2
   53ce0:	1001703a 	wrctl	status,r2
  
  return context;
   53ce4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   53ce8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   53cec:	e0bffd17 	ldw	r2,-12(fp)
   53cf0:	10800117 	ldw	r2,4(r2)
   53cf4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   53cf8:	e0bff817 	ldw	r2,-32(fp)
   53cfc:	1080058b 	ldhu	r2,22(r2)
   53d00:	10bfffcc 	andi	r2,r2,65535
   53d04:	10001e26 	beq	r2,zero,53d80 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   53d08:	e0bff817 	ldw	r2,-32(fp)
   53d0c:	10800417 	ldw	r2,16(r2)
   53d10:	11000104 	addi	r4,r2,4
   53d14:	e0fff817 	ldw	r3,-32(fp)
   53d18:	19000415 	stw	r4,16(r3)
   53d1c:	10800017 	ldw	r2,0(r2)
   53d20:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   53d24:	e0bff817 	ldw	r2,-32(fp)
   53d28:	1080058b 	ldhu	r2,22(r2)
   53d2c:	10bfffc4 	addi	r2,r2,-1
   53d30:	1007883a 	mov	r3,r2
   53d34:	e0bff817 	ldw	r2,-32(fp)
   53d38:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   53d3c:	e0bff817 	ldw	r2,-32(fp)
   53d40:	10c00417 	ldw	r3,16(r2)
   53d44:	e0bff817 	ldw	r2,-32(fp)
   53d48:	10800217 	ldw	r2,8(r2)
   53d4c:	1880041e 	bne	r3,r2,53d60 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   53d50:	e0bff817 	ldw	r2,-32(fp)
   53d54:	10c00117 	ldw	r3,4(r2)
   53d58:	e0bff817 	ldw	r2,-32(fp)
   53d5c:	10c00415 	stw	r3,16(r2)
   53d60:	e0bff617 	ldw	r2,-40(fp)
   53d64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53d68:	e0bff717 	ldw	r2,-36(fp)
   53d6c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   53d70:	e0bfff17 	ldw	r2,-4(fp)
   53d74:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   53d78:	e0bff517 	ldw	r2,-44(fp)
   53d7c:	00004306 	br	53e8c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   53d80:	d0a73117 	ldw	r2,-25404(gp)
   53d84:	d0e73117 	ldw	r3,-25404(gp)
   53d88:	18c00c03 	ldbu	r3,48(r3)
   53d8c:	18c00114 	ori	r3,r3,4
   53d90:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   53d94:	d0a73117 	ldw	r2,-25404(gp)
   53d98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   53d9c:	d0a73117 	ldw	r2,-25404(gp)
   53da0:	e0fffe0b 	ldhu	r3,-8(fp)
   53da4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   53da8:	e13ffd17 	ldw	r4,-12(fp)
   53dac:	004fb9c0 	call	4fb9c <OS_EventTaskWait>
   53db0:	e0bff617 	ldw	r2,-40(fp)
   53db4:	e0bffb15 	stw	r2,-20(fp)
   53db8:	e0bffb17 	ldw	r2,-20(fp)
   53dbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   53dc0:	00504500 	call	50450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53dc4:	0005303a 	rdctl	r2,status
   53dc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53dcc:	e0fff917 	ldw	r3,-28(fp)
   53dd0:	00bfff84 	movi	r2,-2
   53dd4:	1884703a 	and	r2,r3,r2
   53dd8:	1001703a 	wrctl	status,r2
  
  return context;
   53ddc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   53de0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   53de4:	d0a73117 	ldw	r2,-25404(gp)
   53de8:	10800c43 	ldbu	r2,49(r2)
   53dec:	10803fcc 	andi	r2,r2,255
   53df0:	10000326 	beq	r2,zero,53e00 <OSQPend+0x1ec>
   53df4:	108000a0 	cmpeqi	r2,r2,2
   53df8:	1000071e 	bne	r2,zero,53e18 <OSQPend+0x204>
   53dfc:	00000b06 	br	53e2c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   53e00:	d0a73117 	ldw	r2,-25404(gp)
   53e04:	10800917 	ldw	r2,36(r2)
   53e08:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   53e0c:	e0bfff17 	ldw	r2,-4(fp)
   53e10:	10000005 	stb	zero,0(r2)
             break;
   53e14:	00000e06 	br	53e50 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   53e18:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   53e1c:	e0bfff17 	ldw	r2,-4(fp)
   53e20:	00c00384 	movi	r3,14
   53e24:	10c00005 	stb	r3,0(r2)
             break;
   53e28:	00000906 	br	53e50 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   53e2c:	d0a73117 	ldw	r2,-25404(gp)
   53e30:	e17ffd17 	ldw	r5,-12(fp)
   53e34:	1009883a 	mov	r4,r2
   53e38:	004fdfc0 	call	4fdfc <OS_EventTaskRemove>
             pmsg = (void *)0;
   53e3c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   53e40:	e0bfff17 	ldw	r2,-4(fp)
   53e44:	00c00284 	movi	r3,10
   53e48:	10c00005 	stb	r3,0(r2)
             break;
   53e4c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   53e50:	d0a73117 	ldw	r2,-25404(gp)
   53e54:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   53e58:	d0a73117 	ldw	r2,-25404(gp)
   53e5c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   53e60:	d0a73117 	ldw	r2,-25404(gp)
   53e64:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   53e68:	d0a73117 	ldw	r2,-25404(gp)
   53e6c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   53e70:	d0a73117 	ldw	r2,-25404(gp)
   53e74:	10000915 	stw	zero,36(r2)
   53e78:	e0bff617 	ldw	r2,-40(fp)
   53e7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53e80:	e0bffa17 	ldw	r2,-24(fp)
   53e84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   53e88:	e0bff517 	ldw	r2,-44(fp)
}
   53e8c:	e037883a 	mov	sp,fp
   53e90:	dfc00117 	ldw	ra,4(sp)
   53e94:	df000017 	ldw	fp,0(sp)
   53e98:	dec00204 	addi	sp,sp,8
   53e9c:	f800283a 	ret

00053ea0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   53ea0:	defff604 	addi	sp,sp,-40
   53ea4:	dfc00915 	stw	ra,36(sp)
   53ea8:	df000815 	stw	fp,32(sp)
   53eac:	df000804 	addi	fp,sp,32
   53eb0:	e13ffd15 	stw	r4,-12(fp)
   53eb4:	2805883a 	mov	r2,r5
   53eb8:	e1bfff15 	stw	r6,-4(fp)
   53ebc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   53ec0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   53ec4:	e0bfff17 	ldw	r2,-4(fp)
   53ec8:	1000021e 	bne	r2,zero,53ed4 <OSQPendAbort+0x34>
        return (0);
   53ecc:	0005883a 	mov	r2,zero
   53ed0:	00004906 	br	53ff8 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   53ed4:	e0bffd17 	ldw	r2,-12(fp)
   53ed8:	1000051e 	bne	r2,zero,53ef0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   53edc:	e0bfff17 	ldw	r2,-4(fp)
   53ee0:	00c00104 	movi	r3,4
   53ee4:	10c00005 	stb	r3,0(r2)
        return (0);
   53ee8:	0005883a 	mov	r2,zero
   53eec:	00004206 	br	53ff8 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   53ef0:	e0bffd17 	ldw	r2,-12(fp)
   53ef4:	10800003 	ldbu	r2,0(r2)
   53ef8:	10803fcc 	andi	r2,r2,255
   53efc:	108000a0 	cmpeqi	r2,r2,2
   53f00:	1000051e 	bne	r2,zero,53f18 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   53f04:	e0bfff17 	ldw	r2,-4(fp)
   53f08:	00c00044 	movi	r3,1
   53f0c:	10c00005 	stb	r3,0(r2)
        return (0);
   53f10:	0005883a 	mov	r2,zero
   53f14:	00003806 	br	53ff8 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53f18:	0005303a 	rdctl	r2,status
   53f1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53f20:	e0fffc17 	ldw	r3,-16(fp)
   53f24:	00bfff84 	movi	r2,-2
   53f28:	1884703a 	and	r2,r3,r2
   53f2c:	1001703a 	wrctl	status,r2
  
  return context;
   53f30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   53f34:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   53f38:	e0bffd17 	ldw	r2,-12(fp)
   53f3c:	10800283 	ldbu	r2,10(r2)
   53f40:	10803fcc 	andi	r2,r2,255
   53f44:	10002526 	beq	r2,zero,53fdc <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   53f48:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   53f4c:	e0bffe03 	ldbu	r2,-8(fp)
   53f50:	10800060 	cmpeqi	r2,r2,1
   53f54:	10000e26 	beq	r2,zero,53f90 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   53f58:	00000806 	br	53f7c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   53f5c:	01c00084 	movi	r7,2
   53f60:	01800104 	movi	r6,4
   53f64:	000b883a 	mov	r5,zero
   53f68:	e13ffd17 	ldw	r4,-12(fp)
   53f6c:	004fa040 	call	4fa04 <OS_EventTaskRdy>
                     nbr_tasks++;
   53f70:	e0bff803 	ldbu	r2,-32(fp)
   53f74:	10800044 	addi	r2,r2,1
   53f78:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   53f7c:	e0bffd17 	ldw	r2,-12(fp)
   53f80:	10800283 	ldbu	r2,10(r2)
   53f84:	10803fcc 	andi	r2,r2,255
   53f88:	103ff41e 	bne	r2,zero,53f5c <__alt_data_end+0xfffee75c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   53f8c:	00000906 	br	53fb4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   53f90:	01c00084 	movi	r7,2
   53f94:	01800104 	movi	r6,4
   53f98:	000b883a 	mov	r5,zero
   53f9c:	e13ffd17 	ldw	r4,-12(fp)
   53fa0:	004fa040 	call	4fa04 <OS_EventTaskRdy>
                 nbr_tasks++;
   53fa4:	e0bff803 	ldbu	r2,-32(fp)
   53fa8:	10800044 	addi	r2,r2,1
   53fac:	e0bff805 	stb	r2,-32(fp)
                 break;
   53fb0:	0001883a 	nop
   53fb4:	e0bff917 	ldw	r2,-28(fp)
   53fb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53fbc:	e0bffa17 	ldw	r2,-24(fp)
   53fc0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   53fc4:	00504500 	call	50450 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   53fc8:	e0bfff17 	ldw	r2,-4(fp)
   53fcc:	00c00384 	movi	r3,14
   53fd0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   53fd4:	e0bff803 	ldbu	r2,-32(fp)
   53fd8:	00000706 	br	53ff8 <OSQPendAbort+0x158>
   53fdc:	e0bff917 	ldw	r2,-28(fp)
   53fe0:	e0bffb15 	stw	r2,-20(fp)
   53fe4:	e0bffb17 	ldw	r2,-20(fp)
   53fe8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   53fec:	e0bfff17 	ldw	r2,-4(fp)
   53ff0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   53ff4:	0005883a 	mov	r2,zero
}
   53ff8:	e037883a 	mov	sp,fp
   53ffc:	dfc00117 	ldw	ra,4(sp)
   54000:	df000017 	ldw	fp,0(sp)
   54004:	dec00204 	addi	sp,sp,8
   54008:	f800283a 	ret

0005400c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   5400c:	defff604 	addi	sp,sp,-40
   54010:	dfc00915 	stw	ra,36(sp)
   54014:	df000815 	stw	fp,32(sp)
   54018:	df000804 	addi	fp,sp,32
   5401c:	e13ffe15 	stw	r4,-8(fp)
   54020:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   54024:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   54028:	e0bffe17 	ldw	r2,-8(fp)
   5402c:	1000021e 	bne	r2,zero,54038 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   54030:	00800104 	movi	r2,4
   54034:	00004a06 	br	54160 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   54038:	e0bffe17 	ldw	r2,-8(fp)
   5403c:	10800003 	ldbu	r2,0(r2)
   54040:	10803fcc 	andi	r2,r2,255
   54044:	108000a0 	cmpeqi	r2,r2,2
   54048:	1000021e 	bne	r2,zero,54054 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   5404c:	00800044 	movi	r2,1
   54050:	00004306 	br	54160 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54054:	0005303a 	rdctl	r2,status
   54058:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5405c:	e0fffd17 	ldw	r3,-12(fp)
   54060:	00bfff84 	movi	r2,-2
   54064:	1884703a 	and	r2,r3,r2
   54068:	1001703a 	wrctl	status,r2
  
  return context;
   5406c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   54070:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   54074:	e0bffe17 	ldw	r2,-8(fp)
   54078:	10800283 	ldbu	r2,10(r2)
   5407c:	10803fcc 	andi	r2,r2,255
   54080:	10000c26 	beq	r2,zero,540b4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   54084:	000f883a 	mov	r7,zero
   54088:	01800104 	movi	r6,4
   5408c:	e17fff17 	ldw	r5,-4(fp)
   54090:	e13ffe17 	ldw	r4,-8(fp)
   54094:	004fa040 	call	4fa04 <OS_EventTaskRdy>
   54098:	e0bff817 	ldw	r2,-32(fp)
   5409c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   540a0:	e0bff917 	ldw	r2,-28(fp)
   540a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   540a8:	00504500 	call	50450 <OS_Sched>
        return (OS_ERR_NONE);
   540ac:	0005883a 	mov	r2,zero
   540b0:	00002b06 	br	54160 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   540b4:	e0bffe17 	ldw	r2,-8(fp)
   540b8:	10800117 	ldw	r2,4(r2)
   540bc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   540c0:	e0bffb17 	ldw	r2,-20(fp)
   540c4:	10c0058b 	ldhu	r3,22(r2)
   540c8:	e0bffb17 	ldw	r2,-20(fp)
   540cc:	1080050b 	ldhu	r2,20(r2)
   540d0:	18ffffcc 	andi	r3,r3,65535
   540d4:	10bfffcc 	andi	r2,r2,65535
   540d8:	18800636 	bltu	r3,r2,540f4 <OSQPost+0xe8>
   540dc:	e0bff817 	ldw	r2,-32(fp)
   540e0:	e0bffa15 	stw	r2,-24(fp)
   540e4:	e0bffa17 	ldw	r2,-24(fp)
   540e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   540ec:	00800784 	movi	r2,30
   540f0:	00001b06 	br	54160 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   540f4:	e0bffb17 	ldw	r2,-20(fp)
   540f8:	10800317 	ldw	r2,12(r2)
   540fc:	11000104 	addi	r4,r2,4
   54100:	e0fffb17 	ldw	r3,-20(fp)
   54104:	19000315 	stw	r4,12(r3)
   54108:	e0ffff17 	ldw	r3,-4(fp)
   5410c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   54110:	e0bffb17 	ldw	r2,-20(fp)
   54114:	1080058b 	ldhu	r2,22(r2)
   54118:	10800044 	addi	r2,r2,1
   5411c:	1007883a 	mov	r3,r2
   54120:	e0bffb17 	ldw	r2,-20(fp)
   54124:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   54128:	e0bffb17 	ldw	r2,-20(fp)
   5412c:	10c00317 	ldw	r3,12(r2)
   54130:	e0bffb17 	ldw	r2,-20(fp)
   54134:	10800217 	ldw	r2,8(r2)
   54138:	1880041e 	bne	r3,r2,5414c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   5413c:	e0bffb17 	ldw	r2,-20(fp)
   54140:	10c00117 	ldw	r3,4(r2)
   54144:	e0bffb17 	ldw	r2,-20(fp)
   54148:	10c00315 	stw	r3,12(r2)
   5414c:	e0bff817 	ldw	r2,-32(fp)
   54150:	e0bffc15 	stw	r2,-16(fp)
   54154:	e0bffc17 	ldw	r2,-16(fp)
   54158:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   5415c:	0005883a 	mov	r2,zero
}
   54160:	e037883a 	mov	sp,fp
   54164:	dfc00117 	ldw	ra,4(sp)
   54168:	df000017 	ldw	fp,0(sp)
   5416c:	dec00204 	addi	sp,sp,8
   54170:	f800283a 	ret

00054174 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   54174:	defff604 	addi	sp,sp,-40
   54178:	dfc00915 	stw	ra,36(sp)
   5417c:	df000815 	stw	fp,32(sp)
   54180:	df000804 	addi	fp,sp,32
   54184:	e13ffe15 	stw	r4,-8(fp)
   54188:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   5418c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   54190:	e0bffe17 	ldw	r2,-8(fp)
   54194:	1000021e 	bne	r2,zero,541a0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   54198:	00800104 	movi	r2,4
   5419c:	00004c06 	br	542d0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   541a0:	e0bffe17 	ldw	r2,-8(fp)
   541a4:	10800003 	ldbu	r2,0(r2)
   541a8:	10803fcc 	andi	r2,r2,255
   541ac:	108000a0 	cmpeqi	r2,r2,2
   541b0:	1000021e 	bne	r2,zero,541bc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   541b4:	00800044 	movi	r2,1
   541b8:	00004506 	br	542d0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   541bc:	0005303a 	rdctl	r2,status
   541c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   541c4:	e0fffd17 	ldw	r3,-12(fp)
   541c8:	00bfff84 	movi	r2,-2
   541cc:	1884703a 	and	r2,r3,r2
   541d0:	1001703a 	wrctl	status,r2
  
  return context;
   541d4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   541d8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   541dc:	e0bffe17 	ldw	r2,-8(fp)
   541e0:	10800283 	ldbu	r2,10(r2)
   541e4:	10803fcc 	andi	r2,r2,255
   541e8:	10000c26 	beq	r2,zero,5421c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   541ec:	000f883a 	mov	r7,zero
   541f0:	01800104 	movi	r6,4
   541f4:	e17fff17 	ldw	r5,-4(fp)
   541f8:	e13ffe17 	ldw	r4,-8(fp)
   541fc:	004fa040 	call	4fa04 <OS_EventTaskRdy>
   54200:	e0bff817 	ldw	r2,-32(fp)
   54204:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54208:	e0bff917 	ldw	r2,-28(fp)
   5420c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   54210:	00504500 	call	50450 <OS_Sched>
        return (OS_ERR_NONE);
   54214:	0005883a 	mov	r2,zero
   54218:	00002d06 	br	542d0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   5421c:	e0bffe17 	ldw	r2,-8(fp)
   54220:	10800117 	ldw	r2,4(r2)
   54224:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   54228:	e0bffb17 	ldw	r2,-20(fp)
   5422c:	10c0058b 	ldhu	r3,22(r2)
   54230:	e0bffb17 	ldw	r2,-20(fp)
   54234:	1080050b 	ldhu	r2,20(r2)
   54238:	18ffffcc 	andi	r3,r3,65535
   5423c:	10bfffcc 	andi	r2,r2,65535
   54240:	18800636 	bltu	r3,r2,5425c <OSQPostFront+0xe8>
   54244:	e0bff817 	ldw	r2,-32(fp)
   54248:	e0bffa15 	stw	r2,-24(fp)
   5424c:	e0bffa17 	ldw	r2,-24(fp)
   54250:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   54254:	00800784 	movi	r2,30
   54258:	00001d06 	br	542d0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   5425c:	e0bffb17 	ldw	r2,-20(fp)
   54260:	10c00417 	ldw	r3,16(r2)
   54264:	e0bffb17 	ldw	r2,-20(fp)
   54268:	10800117 	ldw	r2,4(r2)
   5426c:	1880041e 	bne	r3,r2,54280 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   54270:	e0bffb17 	ldw	r2,-20(fp)
   54274:	10c00217 	ldw	r3,8(r2)
   54278:	e0bffb17 	ldw	r2,-20(fp)
   5427c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   54280:	e0bffb17 	ldw	r2,-20(fp)
   54284:	10800417 	ldw	r2,16(r2)
   54288:	10ffff04 	addi	r3,r2,-4
   5428c:	e0bffb17 	ldw	r2,-20(fp)
   54290:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   54294:	e0bffb17 	ldw	r2,-20(fp)
   54298:	10800417 	ldw	r2,16(r2)
   5429c:	e0ffff17 	ldw	r3,-4(fp)
   542a0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   542a4:	e0bffb17 	ldw	r2,-20(fp)
   542a8:	1080058b 	ldhu	r2,22(r2)
   542ac:	10800044 	addi	r2,r2,1
   542b0:	1007883a 	mov	r3,r2
   542b4:	e0bffb17 	ldw	r2,-20(fp)
   542b8:	10c0058d 	sth	r3,22(r2)
   542bc:	e0bff817 	ldw	r2,-32(fp)
   542c0:	e0bffc15 	stw	r2,-16(fp)
   542c4:	e0bffc17 	ldw	r2,-16(fp)
   542c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   542cc:	0005883a 	mov	r2,zero
}
   542d0:	e037883a 	mov	sp,fp
   542d4:	dfc00117 	ldw	ra,4(sp)
   542d8:	df000017 	ldw	fp,0(sp)
   542dc:	dec00204 	addi	sp,sp,8
   542e0:	f800283a 	ret

000542e4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   542e4:	defff504 	addi	sp,sp,-44
   542e8:	dfc00a15 	stw	ra,40(sp)
   542ec:	df000915 	stw	fp,36(sp)
   542f0:	df000904 	addi	fp,sp,36
   542f4:	e13ffd15 	stw	r4,-12(fp)
   542f8:	e17ffe15 	stw	r5,-8(fp)
   542fc:	3005883a 	mov	r2,r6
   54300:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   54304:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   54308:	e0bffd17 	ldw	r2,-12(fp)
   5430c:	1000021e 	bne	r2,zero,54318 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   54310:	00800104 	movi	r2,4
   54314:	00007106 	br	544dc <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   54318:	e0bffd17 	ldw	r2,-12(fp)
   5431c:	10800003 	ldbu	r2,0(r2)
   54320:	10803fcc 	andi	r2,r2,255
   54324:	108000a0 	cmpeqi	r2,r2,2
   54328:	1000021e 	bne	r2,zero,54334 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   5432c:	00800044 	movi	r2,1
   54330:	00006a06 	br	544dc <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54334:	0005303a 	rdctl	r2,status
   54338:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5433c:	e0fffc17 	ldw	r3,-16(fp)
   54340:	00bfff84 	movi	r2,-2
   54344:	1884703a 	and	r2,r3,r2
   54348:	1001703a 	wrctl	status,r2
  
  return context;
   5434c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   54350:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   54354:	e0bffd17 	ldw	r2,-12(fp)
   54358:	10800283 	ldbu	r2,10(r2)
   5435c:	10803fcc 	andi	r2,r2,255
   54360:	10001d26 	beq	r2,zero,543d8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   54364:	e0bfff03 	ldbu	r2,-4(fp)
   54368:	1080004c 	andi	r2,r2,1
   5436c:	10000b26 	beq	r2,zero,5439c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   54370:	00000506 	br	54388 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   54374:	000f883a 	mov	r7,zero
   54378:	01800104 	movi	r6,4
   5437c:	e17ffe17 	ldw	r5,-8(fp)
   54380:	e13ffd17 	ldw	r4,-12(fp)
   54384:	004fa040 	call	4fa04 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   54388:	e0bffd17 	ldw	r2,-12(fp)
   5438c:	10800283 	ldbu	r2,10(r2)
   54390:	10803fcc 	andi	r2,r2,255
   54394:	103ff71e 	bne	r2,zero,54374 <__alt_data_end+0xfffeeb74>
   54398:	00000506 	br	543b0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   5439c:	000f883a 	mov	r7,zero
   543a0:	01800104 	movi	r6,4
   543a4:	e17ffe17 	ldw	r5,-8(fp)
   543a8:	e13ffd17 	ldw	r4,-12(fp)
   543ac:	004fa040 	call	4fa04 <OS_EventTaskRdy>
   543b0:	e0bff717 	ldw	r2,-36(fp)
   543b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   543b8:	e0bff817 	ldw	r2,-32(fp)
   543bc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   543c0:	e0bfff03 	ldbu	r2,-4(fp)
   543c4:	1080010c 	andi	r2,r2,4
   543c8:	1000011e 	bne	r2,zero,543d0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   543cc:	00504500 	call	50450 <OS_Sched>
        }
        return (OS_ERR_NONE);
   543d0:	0005883a 	mov	r2,zero
   543d4:	00004106 	br	544dc <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   543d8:	e0bffd17 	ldw	r2,-12(fp)
   543dc:	10800117 	ldw	r2,4(r2)
   543e0:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   543e4:	e0bffa17 	ldw	r2,-24(fp)
   543e8:	10c0058b 	ldhu	r3,22(r2)
   543ec:	e0bffa17 	ldw	r2,-24(fp)
   543f0:	1080050b 	ldhu	r2,20(r2)
   543f4:	18ffffcc 	andi	r3,r3,65535
   543f8:	10bfffcc 	andi	r2,r2,65535
   543fc:	18800636 	bltu	r3,r2,54418 <OSQPostOpt+0x134>
   54400:	e0bff717 	ldw	r2,-36(fp)
   54404:	e0bff915 	stw	r2,-28(fp)
   54408:	e0bff917 	ldw	r2,-28(fp)
   5440c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   54410:	00800784 	movi	r2,30
   54414:	00003106 	br	544dc <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   54418:	e0bfff03 	ldbu	r2,-4(fp)
   5441c:	1080008c 	andi	r2,r2,2
   54420:	10001326 	beq	r2,zero,54470 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   54424:	e0bffa17 	ldw	r2,-24(fp)
   54428:	10c00417 	ldw	r3,16(r2)
   5442c:	e0bffa17 	ldw	r2,-24(fp)
   54430:	10800117 	ldw	r2,4(r2)
   54434:	1880041e 	bne	r3,r2,54448 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   54438:	e0bffa17 	ldw	r2,-24(fp)
   5443c:	10c00217 	ldw	r3,8(r2)
   54440:	e0bffa17 	ldw	r2,-24(fp)
   54444:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   54448:	e0bffa17 	ldw	r2,-24(fp)
   5444c:	10800417 	ldw	r2,16(r2)
   54450:	10ffff04 	addi	r3,r2,-4
   54454:	e0bffa17 	ldw	r2,-24(fp)
   54458:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   5445c:	e0bffa17 	ldw	r2,-24(fp)
   54460:	10800417 	ldw	r2,16(r2)
   54464:	e0fffe17 	ldw	r3,-8(fp)
   54468:	10c00015 	stw	r3,0(r2)
   5446c:	00001006 	br	544b0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   54470:	e0bffa17 	ldw	r2,-24(fp)
   54474:	10800317 	ldw	r2,12(r2)
   54478:	11000104 	addi	r4,r2,4
   5447c:	e0fffa17 	ldw	r3,-24(fp)
   54480:	19000315 	stw	r4,12(r3)
   54484:	e0fffe17 	ldw	r3,-8(fp)
   54488:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   5448c:	e0bffa17 	ldw	r2,-24(fp)
   54490:	10c00317 	ldw	r3,12(r2)
   54494:	e0bffa17 	ldw	r2,-24(fp)
   54498:	10800217 	ldw	r2,8(r2)
   5449c:	1880041e 	bne	r3,r2,544b0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   544a0:	e0bffa17 	ldw	r2,-24(fp)
   544a4:	10c00117 	ldw	r3,4(r2)
   544a8:	e0bffa17 	ldw	r2,-24(fp)
   544ac:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   544b0:	e0bffa17 	ldw	r2,-24(fp)
   544b4:	1080058b 	ldhu	r2,22(r2)
   544b8:	10800044 	addi	r2,r2,1
   544bc:	1007883a 	mov	r3,r2
   544c0:	e0bffa17 	ldw	r2,-24(fp)
   544c4:	10c0058d 	sth	r3,22(r2)
   544c8:	e0bff717 	ldw	r2,-36(fp)
   544cc:	e0bffb15 	stw	r2,-20(fp)
   544d0:	e0bffb17 	ldw	r2,-20(fp)
   544d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   544d8:	0005883a 	mov	r2,zero
}
   544dc:	e037883a 	mov	sp,fp
   544e0:	dfc00117 	ldw	ra,4(sp)
   544e4:	df000017 	ldw	fp,0(sp)
   544e8:	dec00204 	addi	sp,sp,8
   544ec:	f800283a 	ret

000544f0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   544f0:	defff604 	addi	sp,sp,-40
   544f4:	df000915 	stw	fp,36(sp)
   544f8:	df000904 	addi	fp,sp,36
   544fc:	e13ffe15 	stw	r4,-8(fp)
   54500:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   54504:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   54508:	e0bffe17 	ldw	r2,-8(fp)
   5450c:	1000021e 	bne	r2,zero,54518 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   54510:	00800104 	movi	r2,4
   54514:	00004906 	br	5463c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   54518:	e0bfff17 	ldw	r2,-4(fp)
   5451c:	1000021e 	bne	r2,zero,54528 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   54520:	00800244 	movi	r2,9
   54524:	00004506 	br	5463c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   54528:	e0bffe17 	ldw	r2,-8(fp)
   5452c:	10800003 	ldbu	r2,0(r2)
   54530:	10803fcc 	andi	r2,r2,255
   54534:	108000a0 	cmpeqi	r2,r2,2
   54538:	1000021e 	bne	r2,zero,54544 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   5453c:	00800044 	movi	r2,1
   54540:	00003e06 	br	5463c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54544:	0005303a 	rdctl	r2,status
   54548:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5454c:	e0fffd17 	ldw	r3,-12(fp)
   54550:	00bfff84 	movi	r2,-2
   54554:	1884703a 	and	r2,r3,r2
   54558:	1001703a 	wrctl	status,r2
  
  return context;
   5455c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   54560:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   54564:	e0bffe17 	ldw	r2,-8(fp)
   54568:	10c00283 	ldbu	r3,10(r2)
   5456c:	e0bfff17 	ldw	r2,-4(fp)
   54570:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   54574:	e0bffe17 	ldw	r2,-8(fp)
   54578:	108002c4 	addi	r2,r2,11
   5457c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   54580:	e0bfff17 	ldw	r2,-4(fp)
   54584:	10800204 	addi	r2,r2,8
   54588:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   5458c:	e03ff705 	stb	zero,-36(fp)
   54590:	00000b06 	br	545c0 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   54594:	e0bff917 	ldw	r2,-28(fp)
   54598:	10c00044 	addi	r3,r2,1
   5459c:	e0fff915 	stw	r3,-28(fp)
   545a0:	e0fff817 	ldw	r3,-32(fp)
   545a4:	19000044 	addi	r4,r3,1
   545a8:	e13ff815 	stw	r4,-32(fp)
   545ac:	18c00003 	ldbu	r3,0(r3)
   545b0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   545b4:	e0bff703 	ldbu	r2,-36(fp)
   545b8:	10800044 	addi	r2,r2,1
   545bc:	e0bff705 	stb	r2,-36(fp)
   545c0:	e0bff703 	ldbu	r2,-36(fp)
   545c4:	108000f0 	cmpltui	r2,r2,3
   545c8:	103ff21e 	bne	r2,zero,54594 <__alt_data_end+0xfffeed94>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   545cc:	e0bffe17 	ldw	r2,-8(fp)
   545d0:	10800117 	ldw	r2,4(r2)
   545d4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   545d8:	e0bffc17 	ldw	r2,-16(fp)
   545dc:	1080058b 	ldhu	r2,22(r2)
   545e0:	10bfffcc 	andi	r2,r2,65535
   545e4:	10000626 	beq	r2,zero,54600 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   545e8:	e0bffc17 	ldw	r2,-16(fp)
   545ec:	10800417 	ldw	r2,16(r2)
   545f0:	10c00017 	ldw	r3,0(r2)
   545f4:	e0bfff17 	ldw	r2,-4(fp)
   545f8:	10c00015 	stw	r3,0(r2)
   545fc:	00000206 	br	54608 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   54600:	e0bfff17 	ldw	r2,-4(fp)
   54604:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   54608:	e0bffc17 	ldw	r2,-16(fp)
   5460c:	10c0058b 	ldhu	r3,22(r2)
   54610:	e0bfff17 	ldw	r2,-4(fp)
   54614:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   54618:	e0bffc17 	ldw	r2,-16(fp)
   5461c:	10c0050b 	ldhu	r3,20(r2)
   54620:	e0bfff17 	ldw	r2,-4(fp)
   54624:	10c0018d 	sth	r3,6(r2)
   54628:	e0bffa17 	ldw	r2,-24(fp)
   5462c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54630:	e0bffb17 	ldw	r2,-20(fp)
   54634:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   54638:	0005883a 	mov	r2,zero
}
   5463c:	e037883a 	mov	sp,fp
   54640:	df000017 	ldw	fp,0(sp)
   54644:	dec00104 	addi	sp,sp,4
   54648:	f800283a 	ret

0005464c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   5464c:	defffb04 	addi	sp,sp,-20
   54650:	dfc00415 	stw	ra,16(sp)
   54654:	df000315 	stw	fp,12(sp)
   54658:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   5465c:	01407804 	movi	r5,480
   54660:	010001b4 	movhi	r4,6
   54664:	2109ae04 	addi	r4,r4,9912
   54668:	00503940 	call	50394 <OS_MemClr>
    pq1 = &OSQTbl[0];
   5466c:	008001b4 	movhi	r2,6
   54670:	1089ae04 	addi	r2,r2,9912
   54674:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   54678:	008001b4 	movhi	r2,6
   5467c:	1089b404 	addi	r2,r2,9936
   54680:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   54684:	e03ffd0d 	sth	zero,-12(fp)
   54688:	00000c06 	br	546bc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   5468c:	e0bffe17 	ldw	r2,-8(fp)
   54690:	e0ffff17 	ldw	r3,-4(fp)
   54694:	10c00015 	stw	r3,0(r2)
        pq1++;
   54698:	e0bffe17 	ldw	r2,-8(fp)
   5469c:	10800604 	addi	r2,r2,24
   546a0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   546a4:	e0bfff17 	ldw	r2,-4(fp)
   546a8:	10800604 	addi	r2,r2,24
   546ac:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   546b0:	e0bffd0b 	ldhu	r2,-12(fp)
   546b4:	10800044 	addi	r2,r2,1
   546b8:	e0bffd0d 	sth	r2,-12(fp)
   546bc:	e0bffd0b 	ldhu	r2,-12(fp)
   546c0:	108004f0 	cmpltui	r2,r2,19
   546c4:	103ff11e 	bne	r2,zero,5468c <__alt_data_end+0xfffeee8c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   546c8:	e0bffe17 	ldw	r2,-8(fp)
   546cc:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   546d0:	008001b4 	movhi	r2,6
   546d4:	1089ae04 	addi	r2,r2,9912
   546d8:	d0a72d15 	stw	r2,-25420(gp)
#endif
}
   546dc:	0001883a 	nop
   546e0:	e037883a 	mov	sp,fp
   546e4:	dfc00117 	ldw	ra,4(sp)
   546e8:	df000017 	ldw	fp,0(sp)
   546ec:	dec00204 	addi	sp,sp,8
   546f0:	f800283a 	ret

000546f4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   546f4:	defffa04 	addi	sp,sp,-24
   546f8:	df000515 	stw	fp,20(sp)
   546fc:	df000504 	addi	fp,sp,20
   54700:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   54704:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   54708:	e0bfff17 	ldw	r2,-4(fp)
   5470c:	1000021e 	bne	r2,zero,54718 <OSSemAccept+0x24>
        return (0);
   54710:	0005883a 	mov	r2,zero
   54714:	00001f06 	br	54794 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   54718:	e0bfff17 	ldw	r2,-4(fp)
   5471c:	10800003 	ldbu	r2,0(r2)
   54720:	10803fcc 	andi	r2,r2,255
   54724:	108000e0 	cmpeqi	r2,r2,3
   54728:	1000021e 	bne	r2,zero,54734 <OSSemAccept+0x40>
        return (0);
   5472c:	0005883a 	mov	r2,zero
   54730:	00001806 	br	54794 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54734:	0005303a 	rdctl	r2,status
   54738:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5473c:	e0fffe17 	ldw	r3,-8(fp)
   54740:	00bfff84 	movi	r2,-2
   54744:	1884703a 	and	r2,r3,r2
   54748:	1001703a 	wrctl	status,r2
  
  return context;
   5474c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   54750:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   54754:	e0bfff17 	ldw	r2,-4(fp)
   54758:	1080020b 	ldhu	r2,8(r2)
   5475c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   54760:	e0bffd0b 	ldhu	r2,-12(fp)
   54764:	10000626 	beq	r2,zero,54780 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   54768:	e0bfff17 	ldw	r2,-4(fp)
   5476c:	1080020b 	ldhu	r2,8(r2)
   54770:	10bfffc4 	addi	r2,r2,-1
   54774:	1007883a 	mov	r3,r2
   54778:	e0bfff17 	ldw	r2,-4(fp)
   5477c:	10c0020d 	sth	r3,8(r2)
   54780:	e0bffb17 	ldw	r2,-20(fp)
   54784:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54788:	e0bffc17 	ldw	r2,-16(fp)
   5478c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   54790:	e0bffd0b 	ldhu	r2,-12(fp)
}
   54794:	e037883a 	mov	sp,fp
   54798:	df000017 	ldw	fp,0(sp)
   5479c:	dec00104 	addi	sp,sp,4
   547a0:	f800283a 	ret

000547a4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   547a4:	defff904 	addi	sp,sp,-28
   547a8:	dfc00615 	stw	ra,24(sp)
   547ac:	df000515 	stw	fp,20(sp)
   547b0:	df000504 	addi	fp,sp,20
   547b4:	2005883a 	mov	r2,r4
   547b8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   547bc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   547c0:	d0a73003 	ldbu	r2,-25408(gp)
   547c4:	10803fcc 	andi	r2,r2,255
   547c8:	10000226 	beq	r2,zero,547d4 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   547cc:	0005883a 	mov	r2,zero
   547d0:	00002506 	br	54868 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   547d4:	0005303a 	rdctl	r2,status
   547d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   547dc:	e0fffe17 	ldw	r3,-8(fp)
   547e0:	00bfff84 	movi	r2,-2
   547e4:	1884703a 	and	r2,r3,r2
   547e8:	1001703a 	wrctl	status,r2
  
  return context;
   547ec:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   547f0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   547f4:	d0a72f17 	ldw	r2,-25412(gp)
   547f8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   547fc:	d0a72f17 	ldw	r2,-25412(gp)
   54800:	10000326 	beq	r2,zero,54810 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   54804:	d0a72f17 	ldw	r2,-25412(gp)
   54808:	10800117 	ldw	r2,4(r2)
   5480c:	d0a72f15 	stw	r2,-25412(gp)
   54810:	e0bffb17 	ldw	r2,-20(fp)
   54814:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54818:	e0bffc17 	ldw	r2,-16(fp)
   5481c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   54820:	e0bffd17 	ldw	r2,-12(fp)
   54824:	10000f26 	beq	r2,zero,54864 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   54828:	e0bffd17 	ldw	r2,-12(fp)
   5482c:	00c000c4 	movi	r3,3
   54830:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   54834:	e0bffd17 	ldw	r2,-12(fp)
   54838:	e0ffff0b 	ldhu	r3,-4(fp)
   5483c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   54840:	e0bffd17 	ldw	r2,-12(fp)
   54844:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   54848:	e0bffd17 	ldw	r2,-12(fp)
   5484c:	00c00fc4 	movi	r3,63
   54850:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   54854:	e0bffd17 	ldw	r2,-12(fp)
   54858:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   5485c:	e13ffd17 	ldw	r4,-12(fp)
   54860:	004ffb40 	call	4ffb4 <OS_EventWaitListInit>
    }
    return (pevent);
   54864:	e0bffd17 	ldw	r2,-12(fp)
}
   54868:	e037883a 	mov	sp,fp
   5486c:	dfc00117 	ldw	ra,4(sp)
   54870:	df000017 	ldw	fp,0(sp)
   54874:	dec00204 	addi	sp,sp,8
   54878:	f800283a 	ret

0005487c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   5487c:	defff304 	addi	sp,sp,-52
   54880:	dfc00c15 	stw	ra,48(sp)
   54884:	df000b15 	stw	fp,44(sp)
   54888:	df000b04 	addi	fp,sp,44
   5488c:	e13ffd15 	stw	r4,-12(fp)
   54890:	2805883a 	mov	r2,r5
   54894:	e1bfff15 	stw	r6,-4(fp)
   54898:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   5489c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   548a0:	e0bfff17 	ldw	r2,-4(fp)
   548a4:	1000021e 	bne	r2,zero,548b0 <OSSemDel+0x34>
        return (pevent);
   548a8:	e0bffd17 	ldw	r2,-12(fp)
   548ac:	00007e06 	br	54aa8 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   548b0:	e0bffd17 	ldw	r2,-12(fp)
   548b4:	1000051e 	bne	r2,zero,548cc <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   548b8:	e0bfff17 	ldw	r2,-4(fp)
   548bc:	00c00104 	movi	r3,4
   548c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   548c4:	e0bffd17 	ldw	r2,-12(fp)
   548c8:	00007706 	br	54aa8 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   548cc:	e0bffd17 	ldw	r2,-12(fp)
   548d0:	10800003 	ldbu	r2,0(r2)
   548d4:	10803fcc 	andi	r2,r2,255
   548d8:	108000e0 	cmpeqi	r2,r2,3
   548dc:	1000051e 	bne	r2,zero,548f4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   548e0:	e0bfff17 	ldw	r2,-4(fp)
   548e4:	00c00044 	movi	r3,1
   548e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   548ec:	e0bffd17 	ldw	r2,-12(fp)
   548f0:	00006d06 	br	54aa8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   548f4:	d0a73003 	ldbu	r2,-25408(gp)
   548f8:	10803fcc 	andi	r2,r2,255
   548fc:	10000526 	beq	r2,zero,54914 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   54900:	e0bfff17 	ldw	r2,-4(fp)
   54904:	00c003c4 	movi	r3,15
   54908:	10c00005 	stb	r3,0(r2)
        return (pevent);
   5490c:	e0bffd17 	ldw	r2,-12(fp)
   54910:	00006506 	br	54aa8 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54914:	0005303a 	rdctl	r2,status
   54918:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5491c:	e0fffc17 	ldw	r3,-16(fp)
   54920:	00bfff84 	movi	r2,-2
   54924:	1884703a 	and	r2,r3,r2
   54928:	1001703a 	wrctl	status,r2
  
  return context;
   5492c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   54930:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   54934:	e0bffd17 	ldw	r2,-12(fp)
   54938:	10800283 	ldbu	r2,10(r2)
   5493c:	10803fcc 	andi	r2,r2,255
   54940:	10000326 	beq	r2,zero,54950 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   54944:	00800044 	movi	r2,1
   54948:	e0bff505 	stb	r2,-44(fp)
   5494c:	00000106 	br	54954 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   54950:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   54954:	e0bffe03 	ldbu	r2,-8(fp)
   54958:	10000326 	beq	r2,zero,54968 <OSSemDel+0xec>
   5495c:	10800060 	cmpeqi	r2,r2,1
   54960:	1000281e 	bne	r2,zero,54a04 <OSSemDel+0x188>
   54964:	00004506 	br	54a7c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   54968:	e0bff503 	ldbu	r2,-44(fp)
   5496c:	1000161e 	bne	r2,zero,549c8 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   54970:	e0bffd17 	ldw	r2,-12(fp)
   54974:	00c00fc4 	movi	r3,63
   54978:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   5497c:	e0bffd17 	ldw	r2,-12(fp)
   54980:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   54984:	e0bffd17 	ldw	r2,-12(fp)
   54988:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   5498c:	d0e72f17 	ldw	r3,-25412(gp)
   54990:	e0bffd17 	ldw	r2,-12(fp)
   54994:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   54998:	e0bffd17 	ldw	r2,-12(fp)
   5499c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   549a0:	e0bffd17 	ldw	r2,-12(fp)
   549a4:	d0a72f15 	stw	r2,-25412(gp)
   549a8:	e0bff717 	ldw	r2,-36(fp)
   549ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   549b0:	e0bff817 	ldw	r2,-32(fp)
   549b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   549b8:	e0bfff17 	ldw	r2,-4(fp)
   549bc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   549c0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   549c4:	00003706 	br	54aa4 <OSSemDel+0x228>
   549c8:	e0bff717 	ldw	r2,-36(fp)
   549cc:	e0bff915 	stw	r2,-28(fp)
   549d0:	e0bff917 	ldw	r2,-28(fp)
   549d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   549d8:	e0bfff17 	ldw	r2,-4(fp)
   549dc:	00c01244 	movi	r3,73
   549e0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   549e4:	e0bffd17 	ldw	r2,-12(fp)
   549e8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   549ec:	00002d06 	br	54aa4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   549f0:	000f883a 	mov	r7,zero
   549f4:	01800044 	movi	r6,1
   549f8:	000b883a 	mov	r5,zero
   549fc:	e13ffd17 	ldw	r4,-12(fp)
   54a00:	004fa040 	call	4fa04 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   54a04:	e0bffd17 	ldw	r2,-12(fp)
   54a08:	10800283 	ldbu	r2,10(r2)
   54a0c:	10803fcc 	andi	r2,r2,255
   54a10:	103ff71e 	bne	r2,zero,549f0 <__alt_data_end+0xfffef1f0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   54a14:	e0bffd17 	ldw	r2,-12(fp)
   54a18:	00c00fc4 	movi	r3,63
   54a1c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   54a20:	e0bffd17 	ldw	r2,-12(fp)
   54a24:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   54a28:	e0bffd17 	ldw	r2,-12(fp)
   54a2c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   54a30:	d0e72f17 	ldw	r3,-25412(gp)
   54a34:	e0bffd17 	ldw	r2,-12(fp)
   54a38:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   54a3c:	e0bffd17 	ldw	r2,-12(fp)
   54a40:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   54a44:	e0bffd17 	ldw	r2,-12(fp)
   54a48:	d0a72f15 	stw	r2,-25412(gp)
   54a4c:	e0bff717 	ldw	r2,-36(fp)
   54a50:	e0bffa15 	stw	r2,-24(fp)
   54a54:	e0bffa17 	ldw	r2,-24(fp)
   54a58:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   54a5c:	e0bff503 	ldbu	r2,-44(fp)
   54a60:	10800058 	cmpnei	r2,r2,1
   54a64:	1000011e 	bne	r2,zero,54a6c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   54a68:	00504500 	call	50450 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   54a6c:	e0bfff17 	ldw	r2,-4(fp)
   54a70:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   54a74:	e03ff615 	stw	zero,-40(fp)
             break;
   54a78:	00000a06 	br	54aa4 <OSSemDel+0x228>
   54a7c:	e0bff717 	ldw	r2,-36(fp)
   54a80:	e0bffb15 	stw	r2,-20(fp)
   54a84:	e0bffb17 	ldw	r2,-20(fp)
   54a88:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   54a8c:	e0bfff17 	ldw	r2,-4(fp)
   54a90:	00c001c4 	movi	r3,7
   54a94:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   54a98:	e0bffd17 	ldw	r2,-12(fp)
   54a9c:	e0bff615 	stw	r2,-40(fp)
             break;
   54aa0:	0001883a 	nop
    }
    return (pevent_return);
   54aa4:	e0bff617 	ldw	r2,-40(fp)
}
   54aa8:	e037883a 	mov	sp,fp
   54aac:	dfc00117 	ldw	ra,4(sp)
   54ab0:	df000017 	ldw	fp,0(sp)
   54ab4:	dec00204 	addi	sp,sp,8
   54ab8:	f800283a 	ret

00054abc <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   54abc:	defff504 	addi	sp,sp,-44
   54ac0:	dfc00a15 	stw	ra,40(sp)
   54ac4:	df000915 	stw	fp,36(sp)
   54ac8:	df000904 	addi	fp,sp,36
   54acc:	e13ffd15 	stw	r4,-12(fp)
   54ad0:	2805883a 	mov	r2,r5
   54ad4:	e1bfff15 	stw	r6,-4(fp)
   54ad8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   54adc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   54ae0:	e0bfff17 	ldw	r2,-4(fp)
   54ae4:	10007226 	beq	r2,zero,54cb0 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   54ae8:	e0bffd17 	ldw	r2,-12(fp)
   54aec:	1000041e 	bne	r2,zero,54b00 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   54af0:	e0bfff17 	ldw	r2,-4(fp)
   54af4:	00c00104 	movi	r3,4
   54af8:	10c00005 	stb	r3,0(r2)
        return;
   54afc:	00006d06 	br	54cb4 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   54b00:	e0bffd17 	ldw	r2,-12(fp)
   54b04:	10800003 	ldbu	r2,0(r2)
   54b08:	10803fcc 	andi	r2,r2,255
   54b0c:	108000e0 	cmpeqi	r2,r2,3
   54b10:	1000041e 	bne	r2,zero,54b24 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   54b14:	e0bfff17 	ldw	r2,-4(fp)
   54b18:	00c00044 	movi	r3,1
   54b1c:	10c00005 	stb	r3,0(r2)
        return;
   54b20:	00006406 	br	54cb4 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   54b24:	d0a73003 	ldbu	r2,-25408(gp)
   54b28:	10803fcc 	andi	r2,r2,255
   54b2c:	10000426 	beq	r2,zero,54b40 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   54b30:	e0bfff17 	ldw	r2,-4(fp)
   54b34:	00c00084 	movi	r3,2
   54b38:	10c00005 	stb	r3,0(r2)
        return;
   54b3c:	00005d06 	br	54cb4 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   54b40:	d0a72203 	ldbu	r2,-25464(gp)
   54b44:	10803fcc 	andi	r2,r2,255
   54b48:	10000426 	beq	r2,zero,54b5c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   54b4c:	e0bfff17 	ldw	r2,-4(fp)
   54b50:	00c00344 	movi	r3,13
   54b54:	10c00005 	stb	r3,0(r2)
        return;
   54b58:	00005606 	br	54cb4 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54b5c:	0005303a 	rdctl	r2,status
   54b60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54b64:	e0fffc17 	ldw	r3,-16(fp)
   54b68:	00bfff84 	movi	r2,-2
   54b6c:	1884703a 	and	r2,r3,r2
   54b70:	1001703a 	wrctl	status,r2
  
  return context;
   54b74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   54b78:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   54b7c:	e0bffd17 	ldw	r2,-12(fp)
   54b80:	1080020b 	ldhu	r2,8(r2)
   54b84:	10bfffcc 	andi	r2,r2,65535
   54b88:	10000d26 	beq	r2,zero,54bc0 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   54b8c:	e0bffd17 	ldw	r2,-12(fp)
   54b90:	1080020b 	ldhu	r2,8(r2)
   54b94:	10bfffc4 	addi	r2,r2,-1
   54b98:	1007883a 	mov	r3,r2
   54b9c:	e0bffd17 	ldw	r2,-12(fp)
   54ba0:	10c0020d 	sth	r3,8(r2)
   54ba4:	e0bff717 	ldw	r2,-36(fp)
   54ba8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54bac:	e0bff817 	ldw	r2,-32(fp)
   54bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   54bb4:	e0bfff17 	ldw	r2,-4(fp)
   54bb8:	10000005 	stb	zero,0(r2)
        return;
   54bbc:	00003d06 	br	54cb4 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   54bc0:	d0a73117 	ldw	r2,-25404(gp)
   54bc4:	d0e73117 	ldw	r3,-25404(gp)
   54bc8:	18c00c03 	ldbu	r3,48(r3)
   54bcc:	18c00054 	ori	r3,r3,1
   54bd0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   54bd4:	d0a73117 	ldw	r2,-25404(gp)
   54bd8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   54bdc:	d0a73117 	ldw	r2,-25404(gp)
   54be0:	e0fffe0b 	ldhu	r3,-8(fp)
   54be4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   54be8:	e13ffd17 	ldw	r4,-12(fp)
   54bec:	004fb9c0 	call	4fb9c <OS_EventTaskWait>
   54bf0:	e0bff717 	ldw	r2,-36(fp)
   54bf4:	e0bffb15 	stw	r2,-20(fp)
   54bf8:	e0bffb17 	ldw	r2,-20(fp)
   54bfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   54c00:	00504500 	call	50450 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54c04:	0005303a 	rdctl	r2,status
   54c08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54c0c:	e0fff917 	ldw	r3,-28(fp)
   54c10:	00bfff84 	movi	r2,-2
   54c14:	1884703a 	and	r2,r3,r2
   54c18:	1001703a 	wrctl	status,r2
  
  return context;
   54c1c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   54c20:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   54c24:	d0a73117 	ldw	r2,-25404(gp)
   54c28:	10800c43 	ldbu	r2,49(r2)
   54c2c:	10803fcc 	andi	r2,r2,255
   54c30:	10000326 	beq	r2,zero,54c40 <OSSemPend+0x184>
   54c34:	108000a0 	cmpeqi	r2,r2,2
   54c38:	1000041e 	bne	r2,zero,54c4c <OSSemPend+0x190>
   54c3c:	00000706 	br	54c5c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   54c40:	e0bfff17 	ldw	r2,-4(fp)
   54c44:	10000005 	stb	zero,0(r2)
             break;
   54c48:	00000c06 	br	54c7c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   54c4c:	e0bfff17 	ldw	r2,-4(fp)
   54c50:	00c00384 	movi	r3,14
   54c54:	10c00005 	stb	r3,0(r2)
             break;
   54c58:	00000806 	br	54c7c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   54c5c:	d0a73117 	ldw	r2,-25404(gp)
   54c60:	e17ffd17 	ldw	r5,-12(fp)
   54c64:	1009883a 	mov	r4,r2
   54c68:	004fdfc0 	call	4fdfc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   54c6c:	e0bfff17 	ldw	r2,-4(fp)
   54c70:	00c00284 	movi	r3,10
   54c74:	10c00005 	stb	r3,0(r2)
             break;
   54c78:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   54c7c:	d0a73117 	ldw	r2,-25404(gp)
   54c80:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   54c84:	d0a73117 	ldw	r2,-25404(gp)
   54c88:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   54c8c:	d0a73117 	ldw	r2,-25404(gp)
   54c90:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   54c94:	d0a73117 	ldw	r2,-25404(gp)
   54c98:	10000815 	stw	zero,32(r2)
   54c9c:	e0bff717 	ldw	r2,-36(fp)
   54ca0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54ca4:	e0bffa17 	ldw	r2,-24(fp)
   54ca8:	1001703a 	wrctl	status,r2
   54cac:	00000106 	br	54cb4 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   54cb0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   54cb4:	e037883a 	mov	sp,fp
   54cb8:	dfc00117 	ldw	ra,4(sp)
   54cbc:	df000017 	ldw	fp,0(sp)
   54cc0:	dec00204 	addi	sp,sp,8
   54cc4:	f800283a 	ret

00054cc8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   54cc8:	defff604 	addi	sp,sp,-40
   54ccc:	dfc00915 	stw	ra,36(sp)
   54cd0:	df000815 	stw	fp,32(sp)
   54cd4:	df000804 	addi	fp,sp,32
   54cd8:	e13ffd15 	stw	r4,-12(fp)
   54cdc:	2805883a 	mov	r2,r5
   54ce0:	e1bfff15 	stw	r6,-4(fp)
   54ce4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   54ce8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   54cec:	e0bfff17 	ldw	r2,-4(fp)
   54cf0:	1000021e 	bne	r2,zero,54cfc <OSSemPendAbort+0x34>
        return (0);
   54cf4:	0005883a 	mov	r2,zero
   54cf8:	00004906 	br	54e20 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   54cfc:	e0bffd17 	ldw	r2,-12(fp)
   54d00:	1000051e 	bne	r2,zero,54d18 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   54d04:	e0bfff17 	ldw	r2,-4(fp)
   54d08:	00c00104 	movi	r3,4
   54d0c:	10c00005 	stb	r3,0(r2)
        return (0);
   54d10:	0005883a 	mov	r2,zero
   54d14:	00004206 	br	54e20 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   54d18:	e0bffd17 	ldw	r2,-12(fp)
   54d1c:	10800003 	ldbu	r2,0(r2)
   54d20:	10803fcc 	andi	r2,r2,255
   54d24:	108000e0 	cmpeqi	r2,r2,3
   54d28:	1000051e 	bne	r2,zero,54d40 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   54d2c:	e0bfff17 	ldw	r2,-4(fp)
   54d30:	00c00044 	movi	r3,1
   54d34:	10c00005 	stb	r3,0(r2)
        return (0);
   54d38:	0005883a 	mov	r2,zero
   54d3c:	00003806 	br	54e20 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54d40:	0005303a 	rdctl	r2,status
   54d44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54d48:	e0fffc17 	ldw	r3,-16(fp)
   54d4c:	00bfff84 	movi	r2,-2
   54d50:	1884703a 	and	r2,r3,r2
   54d54:	1001703a 	wrctl	status,r2
  
  return context;
   54d58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   54d5c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   54d60:	e0bffd17 	ldw	r2,-12(fp)
   54d64:	10800283 	ldbu	r2,10(r2)
   54d68:	10803fcc 	andi	r2,r2,255
   54d6c:	10002526 	beq	r2,zero,54e04 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   54d70:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   54d74:	e0bffe03 	ldbu	r2,-8(fp)
   54d78:	10800060 	cmpeqi	r2,r2,1
   54d7c:	10000e26 	beq	r2,zero,54db8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   54d80:	00000806 	br	54da4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   54d84:	01c00084 	movi	r7,2
   54d88:	01800044 	movi	r6,1
   54d8c:	000b883a 	mov	r5,zero
   54d90:	e13ffd17 	ldw	r4,-12(fp)
   54d94:	004fa040 	call	4fa04 <OS_EventTaskRdy>
                     nbr_tasks++;
   54d98:	e0bff803 	ldbu	r2,-32(fp)
   54d9c:	10800044 	addi	r2,r2,1
   54da0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   54da4:	e0bffd17 	ldw	r2,-12(fp)
   54da8:	10800283 	ldbu	r2,10(r2)
   54dac:	10803fcc 	andi	r2,r2,255
   54db0:	103ff41e 	bne	r2,zero,54d84 <__alt_data_end+0xfffef584>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   54db4:	00000906 	br	54ddc <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   54db8:	01c00084 	movi	r7,2
   54dbc:	01800044 	movi	r6,1
   54dc0:	000b883a 	mov	r5,zero
   54dc4:	e13ffd17 	ldw	r4,-12(fp)
   54dc8:	004fa040 	call	4fa04 <OS_EventTaskRdy>
                 nbr_tasks++;
   54dcc:	e0bff803 	ldbu	r2,-32(fp)
   54dd0:	10800044 	addi	r2,r2,1
   54dd4:	e0bff805 	stb	r2,-32(fp)
                 break;
   54dd8:	0001883a 	nop
   54ddc:	e0bff917 	ldw	r2,-28(fp)
   54de0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54de4:	e0bffa17 	ldw	r2,-24(fp)
   54de8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   54dec:	00504500 	call	50450 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   54df0:	e0bfff17 	ldw	r2,-4(fp)
   54df4:	00c00384 	movi	r3,14
   54df8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   54dfc:	e0bff803 	ldbu	r2,-32(fp)
   54e00:	00000706 	br	54e20 <OSSemPendAbort+0x158>
   54e04:	e0bff917 	ldw	r2,-28(fp)
   54e08:	e0bffb15 	stw	r2,-20(fp)
   54e0c:	e0bffb17 	ldw	r2,-20(fp)
   54e10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   54e14:	e0bfff17 	ldw	r2,-4(fp)
   54e18:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   54e1c:	0005883a 	mov	r2,zero
}
   54e20:	e037883a 	mov	sp,fp
   54e24:	dfc00117 	ldw	ra,4(sp)
   54e28:	df000017 	ldw	fp,0(sp)
   54e2c:	dec00204 	addi	sp,sp,8
   54e30:	f800283a 	ret

00054e34 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   54e34:	defff804 	addi	sp,sp,-32
   54e38:	dfc00715 	stw	ra,28(sp)
   54e3c:	df000615 	stw	fp,24(sp)
   54e40:	df000604 	addi	fp,sp,24
   54e44:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   54e48:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   54e4c:	e0bfff17 	ldw	r2,-4(fp)
   54e50:	1000021e 	bne	r2,zero,54e5c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   54e54:	00800104 	movi	r2,4
   54e58:	00003506 	br	54f30 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   54e5c:	e0bfff17 	ldw	r2,-4(fp)
   54e60:	10800003 	ldbu	r2,0(r2)
   54e64:	10803fcc 	andi	r2,r2,255
   54e68:	108000e0 	cmpeqi	r2,r2,3
   54e6c:	1000021e 	bne	r2,zero,54e78 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   54e70:	00800044 	movi	r2,1
   54e74:	00002e06 	br	54f30 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54e78:	0005303a 	rdctl	r2,status
   54e7c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54e80:	e0fffe17 	ldw	r3,-8(fp)
   54e84:	00bfff84 	movi	r2,-2
   54e88:	1884703a 	and	r2,r3,r2
   54e8c:	1001703a 	wrctl	status,r2
  
  return context;
   54e90:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   54e94:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   54e98:	e0bfff17 	ldw	r2,-4(fp)
   54e9c:	10800283 	ldbu	r2,10(r2)
   54ea0:	10803fcc 	andi	r2,r2,255
   54ea4:	10000c26 	beq	r2,zero,54ed8 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   54ea8:	000f883a 	mov	r7,zero
   54eac:	01800044 	movi	r6,1
   54eb0:	000b883a 	mov	r5,zero
   54eb4:	e13fff17 	ldw	r4,-4(fp)
   54eb8:	004fa040 	call	4fa04 <OS_EventTaskRdy>
   54ebc:	e0bffa17 	ldw	r2,-24(fp)
   54ec0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54ec4:	e0bffb17 	ldw	r2,-20(fp)
   54ec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   54ecc:	00504500 	call	50450 <OS_Sched>
        return (OS_ERR_NONE);
   54ed0:	0005883a 	mov	r2,zero
   54ed4:	00001606 	br	54f30 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   54ed8:	e0bfff17 	ldw	r2,-4(fp)
   54edc:	1080020b 	ldhu	r2,8(r2)
   54ee0:	10ffffcc 	andi	r3,r2,65535
   54ee4:	00bfffd4 	movui	r2,65535
   54ee8:	18800c26 	beq	r3,r2,54f1c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   54eec:	e0bfff17 	ldw	r2,-4(fp)
   54ef0:	1080020b 	ldhu	r2,8(r2)
   54ef4:	10800044 	addi	r2,r2,1
   54ef8:	1007883a 	mov	r3,r2
   54efc:	e0bfff17 	ldw	r2,-4(fp)
   54f00:	10c0020d 	sth	r3,8(r2)
   54f04:	e0bffa17 	ldw	r2,-24(fp)
   54f08:	e0bffc15 	stw	r2,-16(fp)
   54f0c:	e0bffc17 	ldw	r2,-16(fp)
   54f10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   54f14:	0005883a 	mov	r2,zero
   54f18:	00000506 	br	54f30 <OSSemPost+0xfc>
   54f1c:	e0bffa17 	ldw	r2,-24(fp)
   54f20:	e0bffd15 	stw	r2,-12(fp)
   54f24:	e0bffd17 	ldw	r2,-12(fp)
   54f28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   54f2c:	00800c84 	movi	r2,50
}
   54f30:	e037883a 	mov	sp,fp
   54f34:	dfc00117 	ldw	ra,4(sp)
   54f38:	df000017 	ldw	fp,0(sp)
   54f3c:	dec00204 	addi	sp,sp,8
   54f40:	f800283a 	ret

00054f44 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   54f44:	defff704 	addi	sp,sp,-36
   54f48:	df000815 	stw	fp,32(sp)
   54f4c:	df000804 	addi	fp,sp,32
   54f50:	e13ffe15 	stw	r4,-8(fp)
   54f54:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   54f58:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   54f5c:	e0bffe17 	ldw	r2,-8(fp)
   54f60:	1000021e 	bne	r2,zero,54f6c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   54f64:	00800104 	movi	r2,4
   54f68:	00003606 	br	55044 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   54f6c:	e0bfff17 	ldw	r2,-4(fp)
   54f70:	1000021e 	bne	r2,zero,54f7c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   54f74:	00800244 	movi	r2,9
   54f78:	00003206 	br	55044 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   54f7c:	e0bffe17 	ldw	r2,-8(fp)
   54f80:	10800003 	ldbu	r2,0(r2)
   54f84:	10803fcc 	andi	r2,r2,255
   54f88:	108000e0 	cmpeqi	r2,r2,3
   54f8c:	1000021e 	bne	r2,zero,54f98 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   54f90:	00800044 	movi	r2,1
   54f94:	00002b06 	br	55044 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54f98:	0005303a 	rdctl	r2,status
   54f9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54fa0:	e0fffd17 	ldw	r3,-12(fp)
   54fa4:	00bfff84 	movi	r2,-2
   54fa8:	1884703a 	and	r2,r3,r2
   54fac:	1001703a 	wrctl	status,r2
  
  return context;
   54fb0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   54fb4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   54fb8:	e0bffe17 	ldw	r2,-8(fp)
   54fbc:	10c00283 	ldbu	r3,10(r2)
   54fc0:	e0bfff17 	ldw	r2,-4(fp)
   54fc4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   54fc8:	e0bffe17 	ldw	r2,-8(fp)
   54fcc:	108002c4 	addi	r2,r2,11
   54fd0:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   54fd4:	e0bfff17 	ldw	r2,-4(fp)
   54fd8:	10800084 	addi	r2,r2,2
   54fdc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   54fe0:	e03ffa05 	stb	zero,-24(fp)
   54fe4:	00000b06 	br	55014 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   54fe8:	e0bff917 	ldw	r2,-28(fp)
   54fec:	10c00044 	addi	r3,r2,1
   54ff0:	e0fff915 	stw	r3,-28(fp)
   54ff4:	e0fff817 	ldw	r3,-32(fp)
   54ff8:	19000044 	addi	r4,r3,1
   54ffc:	e13ff815 	stw	r4,-32(fp)
   55000:	18c00003 	ldbu	r3,0(r3)
   55004:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   55008:	e0bffa03 	ldbu	r2,-24(fp)
   5500c:	10800044 	addi	r2,r2,1
   55010:	e0bffa05 	stb	r2,-24(fp)
   55014:	e0bffa03 	ldbu	r2,-24(fp)
   55018:	108000f0 	cmpltui	r2,r2,3
   5501c:	103ff21e 	bne	r2,zero,54fe8 <__alt_data_end+0xfffef7e8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   55020:	e0bffe17 	ldw	r2,-8(fp)
   55024:	10c0020b 	ldhu	r3,8(r2)
   55028:	e0bfff17 	ldw	r2,-4(fp)
   5502c:	10c0000d 	sth	r3,0(r2)
   55030:	e0bffb17 	ldw	r2,-20(fp)
   55034:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55038:	e0bffc17 	ldw	r2,-16(fp)
   5503c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   55040:	0005883a 	mov	r2,zero
}
   55044:	e037883a 	mov	sp,fp
   55048:	df000017 	ldw	fp,0(sp)
   5504c:	dec00104 	addi	sp,sp,4
   55050:	f800283a 	ret

00055054 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   55054:	defff904 	addi	sp,sp,-28
   55058:	df000615 	stw	fp,24(sp)
   5505c:	df000604 	addi	fp,sp,24
   55060:	e13ffd15 	stw	r4,-12(fp)
   55064:	2805883a 	mov	r2,r5
   55068:	e1bfff15 	stw	r6,-4(fp)
   5506c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   55070:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   55074:	e0bfff17 	ldw	r2,-4(fp)
   55078:	10003126 	beq	r2,zero,55140 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   5507c:	e0bffd17 	ldw	r2,-12(fp)
   55080:	1000041e 	bne	r2,zero,55094 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   55084:	e0bfff17 	ldw	r2,-4(fp)
   55088:	00c00104 	movi	r3,4
   5508c:	10c00005 	stb	r3,0(r2)
        return;
   55090:	00002c06 	br	55144 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   55094:	e0bffd17 	ldw	r2,-12(fp)
   55098:	10800003 	ldbu	r2,0(r2)
   5509c:	10803fcc 	andi	r2,r2,255
   550a0:	108000e0 	cmpeqi	r2,r2,3
   550a4:	1000041e 	bne	r2,zero,550b8 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   550a8:	e0bfff17 	ldw	r2,-4(fp)
   550ac:	00c00044 	movi	r3,1
   550b0:	10c00005 	stb	r3,0(r2)
        return;
   550b4:	00002306 	br	55144 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   550b8:	0005303a 	rdctl	r2,status
   550bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   550c0:	e0fffc17 	ldw	r3,-16(fp)
   550c4:	00bfff84 	movi	r2,-2
   550c8:	1884703a 	and	r2,r3,r2
   550cc:	1001703a 	wrctl	status,r2
  
  return context;
   550d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   550d4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   550d8:	e0bfff17 	ldw	r2,-4(fp)
   550dc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   550e0:	e0bffd17 	ldw	r2,-12(fp)
   550e4:	1080020b 	ldhu	r2,8(r2)
   550e8:	10bfffcc 	andi	r2,r2,65535
   550ec:	10000426 	beq	r2,zero,55100 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   550f0:	e0bffd17 	ldw	r2,-12(fp)
   550f4:	e0fffe0b 	ldhu	r3,-8(fp)
   550f8:	10c0020d 	sth	r3,8(r2)
   550fc:	00000b06 	br	5512c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   55100:	e0bffd17 	ldw	r2,-12(fp)
   55104:	10800283 	ldbu	r2,10(r2)
   55108:	10803fcc 	andi	r2,r2,255
   5510c:	1000041e 	bne	r2,zero,55120 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   55110:	e0bffd17 	ldw	r2,-12(fp)
   55114:	e0fffe0b 	ldhu	r3,-8(fp)
   55118:	10c0020d 	sth	r3,8(r2)
   5511c:	00000306 	br	5512c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   55120:	e0bfff17 	ldw	r2,-4(fp)
   55124:	00c01244 	movi	r3,73
   55128:	10c00005 	stb	r3,0(r2)
   5512c:	e0bffa17 	ldw	r2,-24(fp)
   55130:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55134:	e0bffb17 	ldw	r2,-20(fp)
   55138:	1001703a 	wrctl	status,r2
   5513c:	00000106 	br	55144 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   55140:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   55144:	e037883a 	mov	sp,fp
   55148:	df000017 	ldw	fp,0(sp)
   5514c:	dec00104 	addi	sp,sp,4
   55150:	f800283a 	ret

00055154 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   55154:	defff104 	addi	sp,sp,-60
   55158:	dfc00e15 	stw	ra,56(sp)
   5515c:	df000d15 	stw	fp,52(sp)
   55160:	df000d04 	addi	fp,sp,52
   55164:	2007883a 	mov	r3,r4
   55168:	2805883a 	mov	r2,r5
   5516c:	e0fffe05 	stb	r3,-8(fp)
   55170:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   55174:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   55178:	e0bffe03 	ldbu	r2,-8(fp)
   5517c:	10800530 	cmpltui	r2,r2,20
   55180:	1000051e 	bne	r2,zero,55198 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   55184:	e0bffe03 	ldbu	r2,-8(fp)
   55188:	10803fe0 	cmpeqi	r2,r2,255
   5518c:	1000021e 	bne	r2,zero,55198 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   55190:	00800a84 	movi	r2,42
   55194:	00012606 	br	55630 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   55198:	e0bfff03 	ldbu	r2,-4(fp)
   5519c:	10800530 	cmpltui	r2,r2,20
   551a0:	1000021e 	bne	r2,zero,551ac <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   551a4:	00800a84 	movi	r2,42
   551a8:	00012106 	br	55630 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   551ac:	0005303a 	rdctl	r2,status
   551b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   551b4:	e0fffd17 	ldw	r3,-12(fp)
   551b8:	00bfff84 	movi	r2,-2
   551bc:	1884703a 	and	r2,r3,r2
   551c0:	1001703a 	wrctl	status,r2
  
  return context;
   551c4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   551c8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   551cc:	e0ffff03 	ldbu	r3,-4(fp)
   551d0:	008001b4 	movhi	r2,6
   551d4:	10903a04 	addi	r2,r2,16616
   551d8:	18c7883a 	add	r3,r3,r3
   551dc:	18c7883a 	add	r3,r3,r3
   551e0:	10c5883a 	add	r2,r2,r3
   551e4:	10800017 	ldw	r2,0(r2)
   551e8:	10000626 	beq	r2,zero,55204 <OSTaskChangePrio+0xb0>
   551ec:	e0bff517 	ldw	r2,-44(fp)
   551f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   551f4:	e0bff617 	ldw	r2,-40(fp)
   551f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   551fc:	00800a04 	movi	r2,40
   55200:	00010b06 	br	55630 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   55204:	e0bffe03 	ldbu	r2,-8(fp)
   55208:	10803fd8 	cmpnei	r2,r2,255
   5520c:	1000031e 	bne	r2,zero,5521c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   55210:	d0a73117 	ldw	r2,-25404(gp)
   55214:	10800c83 	ldbu	r2,50(r2)
   55218:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   5521c:	e0fffe03 	ldbu	r3,-8(fp)
   55220:	008001b4 	movhi	r2,6
   55224:	10903a04 	addi	r2,r2,16616
   55228:	18c7883a 	add	r3,r3,r3
   5522c:	18c7883a 	add	r3,r3,r3
   55230:	10c5883a 	add	r2,r2,r3
   55234:	10800017 	ldw	r2,0(r2)
   55238:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   5523c:	e0bff817 	ldw	r2,-32(fp)
   55240:	1000061e 	bne	r2,zero,5525c <OSTaskChangePrio+0x108>
   55244:	e0bff517 	ldw	r2,-44(fp)
   55248:	e0bff715 	stw	r2,-36(fp)
   5524c:	e0bff717 	ldw	r2,-36(fp)
   55250:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   55254:	00800a44 	movi	r2,41
   55258:	0000f506 	br	55630 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   5525c:	e0bff817 	ldw	r2,-32(fp)
   55260:	10800058 	cmpnei	r2,r2,1
   55264:	1000061e 	bne	r2,zero,55280 <OSTaskChangePrio+0x12c>
   55268:	e0bff517 	ldw	r2,-44(fp)
   5526c:	e0bff915 	stw	r2,-28(fp)
   55270:	e0bff917 	ldw	r2,-28(fp)
   55274:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   55278:	008010c4 	movi	r2,67
   5527c:	0000ec06 	br	55630 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   55280:	e0bfff03 	ldbu	r2,-4(fp)
   55284:	1004d0fa 	srli	r2,r2,3
   55288:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   5528c:	e0bfff03 	ldbu	r2,-4(fp)
   55290:	108001cc 	andi	r2,r2,7
   55294:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   55298:	e0bffb03 	ldbu	r2,-20(fp)
   5529c:	00c00044 	movi	r3,1
   552a0:	1884983a 	sll	r2,r3,r2
   552a4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   552a8:	e0bffb43 	ldbu	r2,-19(fp)
   552ac:	00c00044 	movi	r3,1
   552b0:	1884983a 	sll	r2,r3,r2
   552b4:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   552b8:	e0fffe03 	ldbu	r3,-8(fp)
   552bc:	008001b4 	movhi	r2,6
   552c0:	10903a04 	addi	r2,r2,16616
   552c4:	18c7883a 	add	r3,r3,r3
   552c8:	18c7883a 	add	r3,r3,r3
   552cc:	10c5883a 	add	r2,r2,r3
   552d0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   552d4:	e0ffff03 	ldbu	r3,-4(fp)
   552d8:	008001b4 	movhi	r2,6
   552dc:	10903a04 	addi	r2,r2,16616
   552e0:	18c7883a 	add	r3,r3,r3
   552e4:	18c7883a 	add	r3,r3,r3
   552e8:	10c5883a 	add	r2,r2,r3
   552ec:	e0fff817 	ldw	r3,-32(fp)
   552f0:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   552f4:	e0bff817 	ldw	r2,-32(fp)
   552f8:	10800d03 	ldbu	r2,52(r2)
   552fc:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   55300:	e0bff817 	ldw	r2,-32(fp)
   55304:	10800d83 	ldbu	r2,54(r2)
   55308:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   5530c:	e0bff817 	ldw	r2,-32(fp)
   55310:	10800d43 	ldbu	r2,53(r2)
   55314:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   55318:	e0fffc03 	ldbu	r3,-16(fp)
   5531c:	d0a72e44 	addi	r2,gp,-25415
   55320:	1885883a 	add	r2,r3,r2
   55324:	10c00003 	ldbu	r3,0(r2)
   55328:	e0bffc83 	ldbu	r2,-14(fp)
   5532c:	1884703a 	and	r2,r3,r2
   55330:	10803fcc 	andi	r2,r2,255
   55334:	10002826 	beq	r2,zero,553d8 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   55338:	e0fffc03 	ldbu	r3,-16(fp)
   5533c:	e13ffc03 	ldbu	r4,-16(fp)
   55340:	d0a72e44 	addi	r2,gp,-25415
   55344:	2085883a 	add	r2,r4,r2
   55348:	10800003 	ldbu	r2,0(r2)
   5534c:	1009883a 	mov	r4,r2
   55350:	e0bffc83 	ldbu	r2,-14(fp)
   55354:	0084303a 	nor	r2,zero,r2
   55358:	2084703a 	and	r2,r4,r2
   5535c:	1009883a 	mov	r4,r2
   55360:	d0a72e44 	addi	r2,gp,-25415
   55364:	1885883a 	add	r2,r3,r2
   55368:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   5536c:	e0fffc03 	ldbu	r3,-16(fp)
   55370:	d0a72e44 	addi	r2,gp,-25415
   55374:	1885883a 	add	r2,r3,r2
   55378:	10800003 	ldbu	r2,0(r2)
   5537c:	10803fcc 	andi	r2,r2,255
   55380:	1000061e 	bne	r2,zero,5539c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   55384:	e0bffc43 	ldbu	r2,-15(fp)
   55388:	0084303a 	nor	r2,zero,r2
   5538c:	1007883a 	mov	r3,r2
   55390:	d0a72e03 	ldbu	r2,-25416(gp)
   55394:	1884703a 	and	r2,r3,r2
   55398:	d0a72e05 	stb	r2,-25416(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   5539c:	d0e72e03 	ldbu	r3,-25416(gp)
   553a0:	e0bffb83 	ldbu	r2,-18(fp)
   553a4:	1884b03a 	or	r2,r3,r2
   553a8:	d0a72e05 	stb	r2,-25416(gp)
         OSRdyTbl[y_new] |= bitx_new;
   553ac:	e0fffb03 	ldbu	r3,-20(fp)
   553b0:	e13ffb03 	ldbu	r4,-20(fp)
   553b4:	d0a72e44 	addi	r2,gp,-25415
   553b8:	2085883a 	add	r2,r4,r2
   553bc:	11000003 	ldbu	r4,0(r2)
   553c0:	e0bffbc3 	ldbu	r2,-17(fp)
   553c4:	2084b03a 	or	r2,r4,r2
   553c8:	1009883a 	mov	r4,r2
   553cc:	d0a72e44 	addi	r2,gp,-25415
   553d0:	1885883a 	add	r2,r3,r2
   553d4:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   553d8:	e0bff817 	ldw	r2,-32(fp)
   553dc:	10800717 	ldw	r2,28(r2)
   553e0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   553e4:	e0bff317 	ldw	r2,-52(fp)
   553e8:	10003326 	beq	r2,zero,554b8 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   553ec:	e0bffc03 	ldbu	r2,-16(fp)
   553f0:	e0fffc03 	ldbu	r3,-16(fp)
   553f4:	e13ff317 	ldw	r4,-52(fp)
   553f8:	20c7883a 	add	r3,r4,r3
   553fc:	18c002c4 	addi	r3,r3,11
   55400:	18c00003 	ldbu	r3,0(r3)
   55404:	1809883a 	mov	r4,r3
   55408:	e0fffc83 	ldbu	r3,-14(fp)
   5540c:	00c6303a 	nor	r3,zero,r3
   55410:	20c6703a 	and	r3,r4,r3
   55414:	1809883a 	mov	r4,r3
   55418:	e0fff317 	ldw	r3,-52(fp)
   5541c:	1885883a 	add	r2,r3,r2
   55420:	108002c4 	addi	r2,r2,11
   55424:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   55428:	e0bffc03 	ldbu	r2,-16(fp)
   5542c:	e0fff317 	ldw	r3,-52(fp)
   55430:	1885883a 	add	r2,r3,r2
   55434:	108002c4 	addi	r2,r2,11
   55438:	10800003 	ldbu	r2,0(r2)
   5543c:	10803fcc 	andi	r2,r2,255
   55440:	1000091e 	bne	r2,zero,55468 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   55444:	e0bff317 	ldw	r2,-52(fp)
   55448:	10800283 	ldbu	r2,10(r2)
   5544c:	1007883a 	mov	r3,r2
   55450:	e0bffc43 	ldbu	r2,-15(fp)
   55454:	0084303a 	nor	r2,zero,r2
   55458:	1884703a 	and	r2,r3,r2
   5545c:	1007883a 	mov	r3,r2
   55460:	e0bff317 	ldw	r2,-52(fp)
   55464:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   55468:	e0bff317 	ldw	r2,-52(fp)
   5546c:	10c00283 	ldbu	r3,10(r2)
   55470:	e0bffb83 	ldbu	r2,-18(fp)
   55474:	1884b03a 	or	r2,r3,r2
   55478:	1007883a 	mov	r3,r2
   5547c:	e0bff317 	ldw	r2,-52(fp)
   55480:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   55484:	e0bffb03 	ldbu	r2,-20(fp)
   55488:	e0fffb03 	ldbu	r3,-20(fp)
   5548c:	e13ff317 	ldw	r4,-52(fp)
   55490:	20c7883a 	add	r3,r4,r3
   55494:	18c002c4 	addi	r3,r3,11
   55498:	19000003 	ldbu	r4,0(r3)
   5549c:	e0fffbc3 	ldbu	r3,-17(fp)
   554a0:	20c6b03a 	or	r3,r4,r3
   554a4:	1809883a 	mov	r4,r3
   554a8:	e0fff317 	ldw	r3,-52(fp)
   554ac:	1885883a 	add	r2,r3,r2
   554b0:	108002c4 	addi	r2,r2,11
   554b4:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   554b8:	e0bff817 	ldw	r2,-32(fp)
   554bc:	10800817 	ldw	r2,32(r2)
   554c0:	10004226 	beq	r2,zero,555cc <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   554c4:	e0bff817 	ldw	r2,-32(fp)
   554c8:	10800817 	ldw	r2,32(r2)
   554cc:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   554d0:	e0bff417 	ldw	r2,-48(fp)
   554d4:	10800017 	ldw	r2,0(r2)
   554d8:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   554dc:	00003906 	br	555c4 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   554e0:	e0bffc03 	ldbu	r2,-16(fp)
   554e4:	e0fffc03 	ldbu	r3,-16(fp)
   554e8:	e13ff317 	ldw	r4,-52(fp)
   554ec:	20c7883a 	add	r3,r4,r3
   554f0:	18c002c4 	addi	r3,r3,11
   554f4:	18c00003 	ldbu	r3,0(r3)
   554f8:	1809883a 	mov	r4,r3
   554fc:	e0fffc83 	ldbu	r3,-14(fp)
   55500:	00c6303a 	nor	r3,zero,r3
   55504:	20c6703a 	and	r3,r4,r3
   55508:	1809883a 	mov	r4,r3
   5550c:	e0fff317 	ldw	r3,-52(fp)
   55510:	1885883a 	add	r2,r3,r2
   55514:	108002c4 	addi	r2,r2,11
   55518:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   5551c:	e0bffc03 	ldbu	r2,-16(fp)
   55520:	e0fff317 	ldw	r3,-52(fp)
   55524:	1885883a 	add	r2,r3,r2
   55528:	108002c4 	addi	r2,r2,11
   5552c:	10800003 	ldbu	r2,0(r2)
   55530:	10803fcc 	andi	r2,r2,255
   55534:	1000091e 	bne	r2,zero,5555c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   55538:	e0bff317 	ldw	r2,-52(fp)
   5553c:	10800283 	ldbu	r2,10(r2)
   55540:	1007883a 	mov	r3,r2
   55544:	e0bffc43 	ldbu	r2,-15(fp)
   55548:	0084303a 	nor	r2,zero,r2
   5554c:	1884703a 	and	r2,r3,r2
   55550:	1007883a 	mov	r3,r2
   55554:	e0bff317 	ldw	r2,-52(fp)
   55558:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   5555c:	e0bff317 	ldw	r2,-52(fp)
   55560:	10c00283 	ldbu	r3,10(r2)
   55564:	e0bffb83 	ldbu	r2,-18(fp)
   55568:	1884b03a 	or	r2,r3,r2
   5556c:	1007883a 	mov	r3,r2
   55570:	e0bff317 	ldw	r2,-52(fp)
   55574:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   55578:	e0bffb03 	ldbu	r2,-20(fp)
   5557c:	e0fffb03 	ldbu	r3,-20(fp)
   55580:	e13ff317 	ldw	r4,-52(fp)
   55584:	20c7883a 	add	r3,r4,r3
   55588:	18c002c4 	addi	r3,r3,11
   5558c:	19000003 	ldbu	r4,0(r3)
   55590:	e0fffbc3 	ldbu	r3,-17(fp)
   55594:	20c6b03a 	or	r3,r4,r3
   55598:	1809883a 	mov	r4,r3
   5559c:	e0fff317 	ldw	r3,-52(fp)
   555a0:	1885883a 	add	r2,r3,r2
   555a4:	108002c4 	addi	r2,r2,11
   555a8:	11000005 	stb	r4,0(r2)
            pevents++;
   555ac:	e0bff417 	ldw	r2,-48(fp)
   555b0:	10800104 	addi	r2,r2,4
   555b4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   555b8:	e0bff417 	ldw	r2,-48(fp)
   555bc:	10800017 	ldw	r2,0(r2)
   555c0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   555c4:	e0bff317 	ldw	r2,-52(fp)
   555c8:	103fc51e 	bne	r2,zero,554e0 <__alt_data_end+0xfffefce0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   555cc:	e0bff817 	ldw	r2,-32(fp)
   555d0:	e0ffff03 	ldbu	r3,-4(fp)
   555d4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   555d8:	e0bff817 	ldw	r2,-32(fp)
   555dc:	e0fffb03 	ldbu	r3,-20(fp)
   555e0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   555e4:	e0bff817 	ldw	r2,-32(fp)
   555e8:	e0fffb43 	ldbu	r3,-19(fp)
   555ec:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   555f0:	e0bff817 	ldw	r2,-32(fp)
   555f4:	e0fffb83 	ldbu	r3,-18(fp)
   555f8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   555fc:	e0bff817 	ldw	r2,-32(fp)
   55600:	e0fffbc3 	ldbu	r3,-17(fp)
   55604:	10c00d45 	stb	r3,53(r2)
   55608:	e0bff517 	ldw	r2,-44(fp)
   5560c:	e0bffa15 	stw	r2,-24(fp)
   55610:	e0bffa17 	ldw	r2,-24(fp)
   55614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   55618:	d0a72243 	ldbu	r2,-25463(gp)
   5561c:	10803fcc 	andi	r2,r2,255
   55620:	10800058 	cmpnei	r2,r2,1
   55624:	1000011e 	bne	r2,zero,5562c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   55628:	00504500 	call	50450 <OS_Sched>
    }
    return (OS_ERR_NONE);
   5562c:	0005883a 	mov	r2,zero
}
   55630:	e037883a 	mov	sp,fp
   55634:	dfc00117 	ldw	ra,4(sp)
   55638:	df000017 	ldw	fp,0(sp)
   5563c:	dec00204 	addi	sp,sp,8
   55640:	f800283a 	ret

00055644 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   55644:	deffee04 	addi	sp,sp,-72
   55648:	dfc01115 	stw	ra,68(sp)
   5564c:	df001015 	stw	fp,64(sp)
   55650:	df001004 	addi	fp,sp,64
   55654:	e13ffc15 	stw	r4,-16(fp)
   55658:	e17ffd15 	stw	r5,-12(fp)
   5565c:	e1bffe15 	stw	r6,-8(fp)
   55660:	3805883a 	mov	r2,r7
   55664:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   55668:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   5566c:	e0bfff03 	ldbu	r2,-4(fp)
   55670:	10800570 	cmpltui	r2,r2,21
   55674:	1000021e 	bne	r2,zero,55680 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   55678:	00800a84 	movi	r2,42
   5567c:	00005706 	br	557dc <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55680:	0005303a 	rdctl	r2,status
   55684:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55688:	e0fffb17 	ldw	r3,-20(fp)
   5568c:	00bfff84 	movi	r2,-2
   55690:	1884703a 	and	r2,r3,r2
   55694:	1001703a 	wrctl	status,r2
  
  return context;
   55698:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   5569c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   556a0:	d0a73003 	ldbu	r2,-25408(gp)
   556a4:	10803fcc 	andi	r2,r2,255
   556a8:	10000626 	beq	r2,zero,556c4 <OSTaskCreate+0x80>
   556ac:	e0bff317 	ldw	r2,-52(fp)
   556b0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   556b4:	e0bff417 	ldw	r2,-48(fp)
   556b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   556bc:	00800f04 	movi	r2,60
   556c0:	00004606 	br	557dc <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   556c4:	e0ffff03 	ldbu	r3,-4(fp)
   556c8:	008001b4 	movhi	r2,6
   556cc:	10903a04 	addi	r2,r2,16616
   556d0:	18c7883a 	add	r3,r3,r3
   556d4:	18c7883a 	add	r3,r3,r3
   556d8:	10c5883a 	add	r2,r2,r3
   556dc:	10800017 	ldw	r2,0(r2)
   556e0:	1000391e 	bne	r2,zero,557c8 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   556e4:	e0ffff03 	ldbu	r3,-4(fp)
   556e8:	008001b4 	movhi	r2,6
   556ec:	10903a04 	addi	r2,r2,16616
   556f0:	18c7883a 	add	r3,r3,r3
   556f4:	18c7883a 	add	r3,r3,r3
   556f8:	10c5883a 	add	r2,r2,r3
   556fc:	00c00044 	movi	r3,1
   55700:	10c00015 	stw	r3,0(r2)
   55704:	e0bff317 	ldw	r2,-52(fp)
   55708:	e0bff515 	stw	r2,-44(fp)
   5570c:	e0bff517 	ldw	r2,-44(fp)
   55710:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   55714:	000f883a 	mov	r7,zero
   55718:	e1bffe17 	ldw	r6,-8(fp)
   5571c:	e17ffd17 	ldw	r5,-12(fp)
   55720:	e13ffc17 	ldw	r4,-16(fp)
   55724:	00589580 	call	58958 <OSTaskStkInit>
   55728:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   5572c:	e0bfff03 	ldbu	r2,-4(fp)
   55730:	d8000215 	stw	zero,8(sp)
   55734:	d8000115 	stw	zero,4(sp)
   55738:	d8000015 	stw	zero,0(sp)
   5573c:	000f883a 	mov	r7,zero
   55740:	000d883a 	mov	r6,zero
   55744:	e17ff717 	ldw	r5,-36(fp)
   55748:	1009883a 	mov	r4,r2
   5574c:	00508500 	call	50850 <OS_TCBInit>
   55750:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   55754:	e0bff803 	ldbu	r2,-32(fp)
   55758:	1000061e 	bne	r2,zero,55774 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   5575c:	d0a72243 	ldbu	r2,-25463(gp)
   55760:	10803fcc 	andi	r2,r2,255
   55764:	10800058 	cmpnei	r2,r2,1
   55768:	1000151e 	bne	r2,zero,557c0 <OSTaskCreate+0x17c>
                OS_Sched();
   5576c:	00504500 	call	50450 <OS_Sched>
   55770:	00001306 	br	557c0 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55774:	0005303a 	rdctl	r2,status
   55778:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5577c:	e0fffa17 	ldw	r3,-24(fp)
   55780:	00bfff84 	movi	r2,-2
   55784:	1884703a 	and	r2,r3,r2
   55788:	1001703a 	wrctl	status,r2
  
  return context;
   5578c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   55790:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   55794:	e0ffff03 	ldbu	r3,-4(fp)
   55798:	008001b4 	movhi	r2,6
   5579c:	10903a04 	addi	r2,r2,16616
   557a0:	18c7883a 	add	r3,r3,r3
   557a4:	18c7883a 	add	r3,r3,r3
   557a8:	10c5883a 	add	r2,r2,r3
   557ac:	10000015 	stw	zero,0(r2)
   557b0:	e0bff317 	ldw	r2,-52(fp)
   557b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   557b8:	e0bff617 	ldw	r2,-40(fp)
   557bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   557c0:	e0bff803 	ldbu	r2,-32(fp)
   557c4:	00000506 	br	557dc <OSTaskCreate+0x198>
   557c8:	e0bff317 	ldw	r2,-52(fp)
   557cc:	e0bff915 	stw	r2,-28(fp)
   557d0:	e0bff917 	ldw	r2,-28(fp)
   557d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   557d8:	00800a04 	movi	r2,40
}
   557dc:	e037883a 	mov	sp,fp
   557e0:	dfc00117 	ldw	ra,4(sp)
   557e4:	df000017 	ldw	fp,0(sp)
   557e8:	dec00204 	addi	sp,sp,8
   557ec:	f800283a 	ret

000557f0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   557f0:	deffec04 	addi	sp,sp,-80
   557f4:	dfc01315 	stw	ra,76(sp)
   557f8:	df001215 	stw	fp,72(sp)
   557fc:	df001204 	addi	fp,sp,72
   55800:	e13ffa15 	stw	r4,-24(fp)
   55804:	e17ffb15 	stw	r5,-20(fp)
   55808:	e1bffc15 	stw	r6,-16(fp)
   5580c:	3809883a 	mov	r4,r7
   55810:	e0c00217 	ldw	r3,8(fp)
   55814:	e0800617 	ldw	r2,24(fp)
   55818:	e13ffd05 	stb	r4,-12(fp)
   5581c:	e0fffe0d 	sth	r3,-8(fp)
   55820:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   55824:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   55828:	e0bffd03 	ldbu	r2,-12(fp)
   5582c:	10800570 	cmpltui	r2,r2,21
   55830:	1000021e 	bne	r2,zero,5583c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   55834:	00800a84 	movi	r2,42
   55838:	00006106 	br	559c0 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5583c:	0005303a 	rdctl	r2,status
   55840:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55844:	e0fff917 	ldw	r3,-28(fp)
   55848:	00bfff84 	movi	r2,-2
   5584c:	1884703a 	and	r2,r3,r2
   55850:	1001703a 	wrctl	status,r2
  
  return context;
   55854:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   55858:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   5585c:	d0a73003 	ldbu	r2,-25408(gp)
   55860:	10803fcc 	andi	r2,r2,255
   55864:	10000626 	beq	r2,zero,55880 <OSTaskCreateExt+0x90>
   55868:	e0bff117 	ldw	r2,-60(fp)
   5586c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55870:	e0bff217 	ldw	r2,-56(fp)
   55874:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   55878:	00800f04 	movi	r2,60
   5587c:	00005006 	br	559c0 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   55880:	e0fffd03 	ldbu	r3,-12(fp)
   55884:	008001b4 	movhi	r2,6
   55888:	10903a04 	addi	r2,r2,16616
   5588c:	18c7883a 	add	r3,r3,r3
   55890:	18c7883a 	add	r3,r3,r3
   55894:	10c5883a 	add	r2,r2,r3
   55898:	10800017 	ldw	r2,0(r2)
   5589c:	1000431e 	bne	r2,zero,559ac <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   558a0:	e0fffd03 	ldbu	r3,-12(fp)
   558a4:	008001b4 	movhi	r2,6
   558a8:	10903a04 	addi	r2,r2,16616
   558ac:	18c7883a 	add	r3,r3,r3
   558b0:	18c7883a 	add	r3,r3,r3
   558b4:	10c5883a 	add	r2,r2,r3
   558b8:	00c00044 	movi	r3,1
   558bc:	10c00015 	stw	r3,0(r2)
   558c0:	e0bff117 	ldw	r2,-60(fp)
   558c4:	e0bff315 	stw	r2,-52(fp)
   558c8:	e0bff317 	ldw	r2,-52(fp)
   558cc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   558d0:	e0bfff0b 	ldhu	r2,-4(fp)
   558d4:	100d883a 	mov	r6,r2
   558d8:	e1400417 	ldw	r5,16(fp)
   558dc:	e1000317 	ldw	r4,12(fp)
   558e0:	00568500 	call	56850 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   558e4:	e0bfff0b 	ldhu	r2,-4(fp)
   558e8:	100f883a 	mov	r7,r2
   558ec:	e1bffc17 	ldw	r6,-16(fp)
   558f0:	e17ffb17 	ldw	r5,-20(fp)
   558f4:	e13ffa17 	ldw	r4,-24(fp)
   558f8:	00589580 	call	58958 <OSTaskStkInit>
   558fc:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   55900:	e0fffd03 	ldbu	r3,-12(fp)
   55904:	e13ffe0b 	ldhu	r4,-8(fp)
   55908:	e0bfff0b 	ldhu	r2,-4(fp)
   5590c:	d8800215 	stw	r2,8(sp)
   55910:	e0800517 	ldw	r2,20(fp)
   55914:	d8800115 	stw	r2,4(sp)
   55918:	e0800417 	ldw	r2,16(fp)
   5591c:	d8800015 	stw	r2,0(sp)
   55920:	200f883a 	mov	r7,r4
   55924:	e1800317 	ldw	r6,12(fp)
   55928:	e17ff517 	ldw	r5,-44(fp)
   5592c:	1809883a 	mov	r4,r3
   55930:	00508500 	call	50850 <OS_TCBInit>
   55934:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   55938:	e0bff603 	ldbu	r2,-40(fp)
   5593c:	1000061e 	bne	r2,zero,55958 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   55940:	d0a72243 	ldbu	r2,-25463(gp)
   55944:	10803fcc 	andi	r2,r2,255
   55948:	10800058 	cmpnei	r2,r2,1
   5594c:	1000151e 	bne	r2,zero,559a4 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   55950:	00504500 	call	50450 <OS_Sched>
   55954:	00001306 	br	559a4 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55958:	0005303a 	rdctl	r2,status
   5595c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55960:	e0fff817 	ldw	r3,-32(fp)
   55964:	00bfff84 	movi	r2,-2
   55968:	1884703a 	and	r2,r3,r2
   5596c:	1001703a 	wrctl	status,r2
  
  return context;
   55970:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   55974:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   55978:	e0fffd03 	ldbu	r3,-12(fp)
   5597c:	008001b4 	movhi	r2,6
   55980:	10903a04 	addi	r2,r2,16616
   55984:	18c7883a 	add	r3,r3,r3
   55988:	18c7883a 	add	r3,r3,r3
   5598c:	10c5883a 	add	r2,r2,r3
   55990:	10000015 	stw	zero,0(r2)
   55994:	e0bff117 	ldw	r2,-60(fp)
   55998:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5599c:	e0bff417 	ldw	r2,-48(fp)
   559a0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   559a4:	e0bff603 	ldbu	r2,-40(fp)
   559a8:	00000506 	br	559c0 <OSTaskCreateExt+0x1d0>
   559ac:	e0bff117 	ldw	r2,-60(fp)
   559b0:	e0bff715 	stw	r2,-36(fp)
   559b4:	e0bff717 	ldw	r2,-36(fp)
   559b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   559bc:	00800a04 	movi	r2,40
}
   559c0:	e037883a 	mov	sp,fp
   559c4:	dfc00117 	ldw	ra,4(sp)
   559c8:	df000017 	ldw	fp,0(sp)
   559cc:	dec00204 	addi	sp,sp,8
   559d0:	f800283a 	ret

000559d4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   559d4:	defff404 	addi	sp,sp,-48
   559d8:	dfc00b15 	stw	ra,44(sp)
   559dc:	df000a15 	stw	fp,40(sp)
   559e0:	df000a04 	addi	fp,sp,40
   559e4:	2005883a 	mov	r2,r4
   559e8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   559ec:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   559f0:	d0a73003 	ldbu	r2,-25408(gp)
   559f4:	10803fcc 	andi	r2,r2,255
   559f8:	10000226 	beq	r2,zero,55a04 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   559fc:	00801004 	movi	r2,64
   55a00:	0000c006 	br	55d04 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   55a04:	e0bfff03 	ldbu	r2,-4(fp)
   55a08:	10800518 	cmpnei	r2,r2,20
   55a0c:	1000021e 	bne	r2,zero,55a18 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   55a10:	00800f84 	movi	r2,62
   55a14:	0000bb06 	br	55d04 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   55a18:	e0bfff03 	ldbu	r2,-4(fp)
   55a1c:	10800530 	cmpltui	r2,r2,20
   55a20:	1000051e 	bne	r2,zero,55a38 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   55a24:	e0bfff03 	ldbu	r2,-4(fp)
   55a28:	10803fe0 	cmpeqi	r2,r2,255
   55a2c:	1000021e 	bne	r2,zero,55a38 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   55a30:	00800a84 	movi	r2,42
   55a34:	0000b306 	br	55d04 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55a38:	0005303a 	rdctl	r2,status
   55a3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55a40:	e0fffe17 	ldw	r3,-8(fp)
   55a44:	00bfff84 	movi	r2,-2
   55a48:	1884703a 	and	r2,r3,r2
   55a4c:	1001703a 	wrctl	status,r2
  
  return context;
   55a50:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   55a54:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   55a58:	e0bfff03 	ldbu	r2,-4(fp)
   55a5c:	10803fd8 	cmpnei	r2,r2,255
   55a60:	1000031e 	bne	r2,zero,55a70 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   55a64:	d0a73117 	ldw	r2,-25404(gp)
   55a68:	10800c83 	ldbu	r2,50(r2)
   55a6c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   55a70:	e0ffff03 	ldbu	r3,-4(fp)
   55a74:	008001b4 	movhi	r2,6
   55a78:	10903a04 	addi	r2,r2,16616
   55a7c:	18c7883a 	add	r3,r3,r3
   55a80:	18c7883a 	add	r3,r3,r3
   55a84:	10c5883a 	add	r2,r2,r3
   55a88:	10800017 	ldw	r2,0(r2)
   55a8c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   55a90:	e0bff817 	ldw	r2,-32(fp)
   55a94:	1000061e 	bne	r2,zero,55ab0 <OSTaskDel+0xdc>
   55a98:	e0bff617 	ldw	r2,-40(fp)
   55a9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55aa0:	e0bff717 	ldw	r2,-36(fp)
   55aa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   55aa8:	008010c4 	movi	r2,67
   55aac:	00009506 	br	55d04 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   55ab0:	e0bff817 	ldw	r2,-32(fp)
   55ab4:	10800058 	cmpnei	r2,r2,1
   55ab8:	1000061e 	bne	r2,zero,55ad4 <OSTaskDel+0x100>
   55abc:	e0bff617 	ldw	r2,-40(fp)
   55ac0:	e0bff915 	stw	r2,-28(fp)
   55ac4:	e0bff917 	ldw	r2,-28(fp)
   55ac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   55acc:	00800f44 	movi	r2,61
   55ad0:	00008c06 	br	55d04 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   55ad4:	e0bff817 	ldw	r2,-32(fp)
   55ad8:	10800d03 	ldbu	r2,52(r2)
   55adc:	10c03fcc 	andi	r3,r2,255
   55ae0:	e0bff817 	ldw	r2,-32(fp)
   55ae4:	10800d03 	ldbu	r2,52(r2)
   55ae8:	11003fcc 	andi	r4,r2,255
   55aec:	d0a72e44 	addi	r2,gp,-25415
   55af0:	2085883a 	add	r2,r4,r2
   55af4:	10800003 	ldbu	r2,0(r2)
   55af8:	1009883a 	mov	r4,r2
   55afc:	e0bff817 	ldw	r2,-32(fp)
   55b00:	10800d43 	ldbu	r2,53(r2)
   55b04:	0084303a 	nor	r2,zero,r2
   55b08:	2084703a 	and	r2,r4,r2
   55b0c:	1009883a 	mov	r4,r2
   55b10:	d0a72e44 	addi	r2,gp,-25415
   55b14:	1885883a 	add	r2,r3,r2
   55b18:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   55b1c:	e0bff817 	ldw	r2,-32(fp)
   55b20:	10800d03 	ldbu	r2,52(r2)
   55b24:	10c03fcc 	andi	r3,r2,255
   55b28:	d0a72e44 	addi	r2,gp,-25415
   55b2c:	1885883a 	add	r2,r3,r2
   55b30:	10800003 	ldbu	r2,0(r2)
   55b34:	10803fcc 	andi	r2,r2,255
   55b38:	1000071e 	bne	r2,zero,55b58 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   55b3c:	e0bff817 	ldw	r2,-32(fp)
   55b40:	10800d83 	ldbu	r2,54(r2)
   55b44:	0084303a 	nor	r2,zero,r2
   55b48:	1007883a 	mov	r3,r2
   55b4c:	d0a72e03 	ldbu	r2,-25416(gp)
   55b50:	1884703a 	and	r2,r3,r2
   55b54:	d0a72e05 	stb	r2,-25416(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   55b58:	e0bff817 	ldw	r2,-32(fp)
   55b5c:	10800717 	ldw	r2,28(r2)
   55b60:	10000526 	beq	r2,zero,55b78 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   55b64:	e0bff817 	ldw	r2,-32(fp)
   55b68:	10800717 	ldw	r2,28(r2)
   55b6c:	100b883a 	mov	r5,r2
   55b70:	e13ff817 	ldw	r4,-32(fp)
   55b74:	004fdfc0 	call	4fdfc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   55b78:	e0bff817 	ldw	r2,-32(fp)
   55b7c:	10800817 	ldw	r2,32(r2)
   55b80:	10000526 	beq	r2,zero,55b98 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   55b84:	e0bff817 	ldw	r2,-32(fp)
   55b88:	10800817 	ldw	r2,32(r2)
   55b8c:	100b883a 	mov	r5,r2
   55b90:	e13ff817 	ldw	r4,-32(fp)
   55b94:	004feb40 	call	4feb4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   55b98:	e0bff817 	ldw	r2,-32(fp)
   55b9c:	10800a17 	ldw	r2,40(r2)
   55ba0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   55ba4:	e0bffb17 	ldw	r2,-20(fp)
   55ba8:	10000226 	beq	r2,zero,55bb4 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   55bac:	e13ffb17 	ldw	r4,-20(fp)
   55bb0:	00523240 	call	52324 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   55bb4:	e0bff817 	ldw	r2,-32(fp)
   55bb8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   55bbc:	e0bff817 	ldw	r2,-32(fp)
   55bc0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   55bc4:	e0bff817 	ldw	r2,-32(fp)
   55bc8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   55bcc:	d0a72203 	ldbu	r2,-25464(gp)
   55bd0:	10803fcc 	andi	r2,r2,255
   55bd4:	10803fe0 	cmpeqi	r2,r2,255
   55bd8:	1000031e 	bne	r2,zero,55be8 <OSTaskDel+0x214>
        OSLockNesting++;
   55bdc:	d0a72203 	ldbu	r2,-25464(gp)
   55be0:	10800044 	addi	r2,r2,1
   55be4:	d0a72205 	stb	r2,-25464(gp)
   55be8:	e0bff617 	ldw	r2,-40(fp)
   55bec:	e0bffd15 	stw	r2,-12(fp)
   55bf0:	e0bffd17 	ldw	r2,-12(fp)
   55bf4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   55bf8:	004f9e40 	call	4f9e4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55bfc:	0005303a 	rdctl	r2,status
   55c00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55c04:	e0fffa17 	ldw	r3,-24(fp)
   55c08:	00bfff84 	movi	r2,-2
   55c0c:	1884703a 	and	r2,r3,r2
   55c10:	1001703a 	wrctl	status,r2
  
  return context;
   55c14:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   55c18:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   55c1c:	d0a72203 	ldbu	r2,-25464(gp)
   55c20:	10803fcc 	andi	r2,r2,255
   55c24:	10000326 	beq	r2,zero,55c34 <OSTaskDel+0x260>
        OSLockNesting--;
   55c28:	d0a72203 	ldbu	r2,-25464(gp)
   55c2c:	10bfffc4 	addi	r2,r2,-1
   55c30:	d0a72205 	stb	r2,-25464(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   55c34:	e13ff817 	ldw	r4,-32(fp)
   55c38:	0058ad80 	call	58ad8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   55c3c:	d0a72a43 	ldbu	r2,-25431(gp)
   55c40:	10bfffc4 	addi	r2,r2,-1
   55c44:	d0a72a45 	stb	r2,-25431(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   55c48:	e0ffff03 	ldbu	r3,-4(fp)
   55c4c:	008001b4 	movhi	r2,6
   55c50:	10903a04 	addi	r2,r2,16616
   55c54:	18c7883a 	add	r3,r3,r3
   55c58:	18c7883a 	add	r3,r3,r3
   55c5c:	10c5883a 	add	r2,r2,r3
   55c60:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   55c64:	e0bff817 	ldw	r2,-32(fp)
   55c68:	10800617 	ldw	r2,24(r2)
   55c6c:	1000071e 	bne	r2,zero,55c8c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   55c70:	e0bff817 	ldw	r2,-32(fp)
   55c74:	10800517 	ldw	r2,20(r2)
   55c78:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   55c7c:	e0bff817 	ldw	r2,-32(fp)
   55c80:	10800517 	ldw	r2,20(r2)
   55c84:	d0a72515 	stw	r2,-25452(gp)
   55c88:	00000a06 	br	55cb4 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   55c8c:	e0bff817 	ldw	r2,-32(fp)
   55c90:	10800617 	ldw	r2,24(r2)
   55c94:	e0fff817 	ldw	r3,-32(fp)
   55c98:	18c00517 	ldw	r3,20(r3)
   55c9c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   55ca0:	e0bff817 	ldw	r2,-32(fp)
   55ca4:	10800517 	ldw	r2,20(r2)
   55ca8:	e0fff817 	ldw	r3,-32(fp)
   55cac:	18c00617 	ldw	r3,24(r3)
   55cb0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   55cb4:	d0e72917 	ldw	r3,-25436(gp)
   55cb8:	e0bff817 	ldw	r2,-32(fp)
   55cbc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   55cc0:	e0bff817 	ldw	r2,-32(fp)
   55cc4:	d0a72915 	stw	r2,-25436(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   55cc8:	e0bff817 	ldw	r2,-32(fp)
   55ccc:	00c00fc4 	movi	r3,63
   55cd0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   55cd4:	e0bff817 	ldw	r2,-32(fp)
   55cd8:	10001345 	stb	zero,77(r2)
   55cdc:	e0bff617 	ldw	r2,-40(fp)
   55ce0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55ce4:	e0bffc17 	ldw	r2,-16(fp)
   55ce8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   55cec:	d0a72243 	ldbu	r2,-25463(gp)
   55cf0:	10803fcc 	andi	r2,r2,255
   55cf4:	10800058 	cmpnei	r2,r2,1
   55cf8:	1000011e 	bne	r2,zero,55d00 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   55cfc:	00504500 	call	50450 <OS_Sched>
    }
    return (OS_ERR_NONE);
   55d00:	0005883a 	mov	r2,zero
}
   55d04:	e037883a 	mov	sp,fp
   55d08:	dfc00117 	ldw	ra,4(sp)
   55d0c:	df000017 	ldw	fp,0(sp)
   55d10:	dec00204 	addi	sp,sp,8
   55d14:	f800283a 	ret

00055d18 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   55d18:	defff504 	addi	sp,sp,-44
   55d1c:	df000a15 	stw	fp,40(sp)
   55d20:	df000a04 	addi	fp,sp,40
   55d24:	2005883a 	mov	r2,r4
   55d28:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   55d2c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   55d30:	e0bfff03 	ldbu	r2,-4(fp)
   55d34:	10800518 	cmpnei	r2,r2,20
   55d38:	1000021e 	bne	r2,zero,55d44 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   55d3c:	00800f84 	movi	r2,62
   55d40:	00004506 	br	55e58 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   55d44:	e0bfff03 	ldbu	r2,-4(fp)
   55d48:	10800530 	cmpltui	r2,r2,20
   55d4c:	1000051e 	bne	r2,zero,55d64 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   55d50:	e0bfff03 	ldbu	r2,-4(fp)
   55d54:	10803fe0 	cmpeqi	r2,r2,255
   55d58:	1000021e 	bne	r2,zero,55d64 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   55d5c:	00800a84 	movi	r2,42
   55d60:	00003d06 	br	55e58 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   55d64:	e0bfff03 	ldbu	r2,-4(fp)
   55d68:	10803fd8 	cmpnei	r2,r2,255
   55d6c:	1000111e 	bne	r2,zero,55db4 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55d70:	0005303a 	rdctl	r2,status
   55d74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55d78:	e0fff917 	ldw	r3,-28(fp)
   55d7c:	00bfff84 	movi	r2,-2
   55d80:	1884703a 	and	r2,r3,r2
   55d84:	1001703a 	wrctl	status,r2
  
  return context;
   55d88:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   55d8c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   55d90:	d0a73117 	ldw	r2,-25404(gp)
   55d94:	10800dc3 	ldbu	r2,55(r2)
   55d98:	e0bff805 	stb	r2,-32(fp)
   55d9c:	e0bff617 	ldw	r2,-40(fp)
   55da0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55da4:	e0bffe17 	ldw	r2,-8(fp)
   55da8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   55dac:	e0bff803 	ldbu	r2,-32(fp)
   55db0:	00002906 	br	55e58 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55db4:	0005303a 	rdctl	r2,status
   55db8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55dbc:	e0fff717 	ldw	r3,-36(fp)
   55dc0:	00bfff84 	movi	r2,-2
   55dc4:	1884703a 	and	r2,r3,r2
   55dc8:	1001703a 	wrctl	status,r2
  
  return context;
   55dcc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   55dd0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   55dd4:	e0ffff03 	ldbu	r3,-4(fp)
   55dd8:	008001b4 	movhi	r2,6
   55ddc:	10903a04 	addi	r2,r2,16616
   55de0:	18c7883a 	add	r3,r3,r3
   55de4:	18c7883a 	add	r3,r3,r3
   55de8:	10c5883a 	add	r2,r2,r3
   55dec:	10800017 	ldw	r2,0(r2)
   55df0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   55df4:	e0bffb17 	ldw	r2,-20(fp)
   55df8:	1000061e 	bne	r2,zero,55e14 <OSTaskDelReq+0xfc>
   55dfc:	e0bff617 	ldw	r2,-40(fp)
   55e00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55e04:	e0bffa17 	ldw	r2,-24(fp)
   55e08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   55e0c:	008010c4 	movi	r2,67
   55e10:	00001106 	br	55e58 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   55e14:	e0bffb17 	ldw	r2,-20(fp)
   55e18:	10800058 	cmpnei	r2,r2,1
   55e1c:	1000061e 	bne	r2,zero,55e38 <OSTaskDelReq+0x120>
   55e20:	e0bff617 	ldw	r2,-40(fp)
   55e24:	e0bffc15 	stw	r2,-16(fp)
   55e28:	e0bffc17 	ldw	r2,-16(fp)
   55e2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   55e30:	00800f44 	movi	r2,61
   55e34:	00000806 	br	55e58 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   55e38:	e0bffb17 	ldw	r2,-20(fp)
   55e3c:	00c00fc4 	movi	r3,63
   55e40:	10c00dc5 	stb	r3,55(r2)
   55e44:	e0bff617 	ldw	r2,-40(fp)
   55e48:	e0bffd15 	stw	r2,-12(fp)
   55e4c:	e0bffd17 	ldw	r2,-12(fp)
   55e50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   55e54:	0005883a 	mov	r2,zero
}
   55e58:	e037883a 	mov	sp,fp
   55e5c:	df000017 	ldw	fp,0(sp)
   55e60:	dec00104 	addi	sp,sp,4
   55e64:	f800283a 	ret

00055e68 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   55e68:	defff404 	addi	sp,sp,-48
   55e6c:	dfc00b15 	stw	ra,44(sp)
   55e70:	df000a15 	stw	fp,40(sp)
   55e74:	df000a04 	addi	fp,sp,40
   55e78:	2005883a 	mov	r2,r4
   55e7c:	e17ffe15 	stw	r5,-8(fp)
   55e80:	e1bfff15 	stw	r6,-4(fp)
   55e84:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   55e88:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   55e8c:	e0bfff17 	ldw	r2,-4(fp)
   55e90:	1000021e 	bne	r2,zero,55e9c <OSTaskNameGet+0x34>
        return (0);
   55e94:	0005883a 	mov	r2,zero
   55e98:	00005406 	br	55fec <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   55e9c:	e0bffd03 	ldbu	r2,-12(fp)
   55ea0:	10800570 	cmpltui	r2,r2,21
   55ea4:	1000081e 	bne	r2,zero,55ec8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   55ea8:	e0bffd03 	ldbu	r2,-12(fp)
   55eac:	10803fe0 	cmpeqi	r2,r2,255
   55eb0:	1000051e 	bne	r2,zero,55ec8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   55eb4:	e0bfff17 	ldw	r2,-4(fp)
   55eb8:	00c00a84 	movi	r3,42
   55ebc:	10c00005 	stb	r3,0(r2)
            return (0);
   55ec0:	0005883a 	mov	r2,zero
   55ec4:	00004906 	br	55fec <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   55ec8:	e0bffe17 	ldw	r2,-8(fp)
   55ecc:	1000051e 	bne	r2,zero,55ee4 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   55ed0:	e0bfff17 	ldw	r2,-4(fp)
   55ed4:	00c00304 	movi	r3,12
   55ed8:	10c00005 	stb	r3,0(r2)
        return (0);
   55edc:	0005883a 	mov	r2,zero
   55ee0:	00004206 	br	55fec <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   55ee4:	d0a73003 	ldbu	r2,-25408(gp)
   55ee8:	10803fcc 	andi	r2,r2,255
   55eec:	10000526 	beq	r2,zero,55f04 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   55ef0:	e0bfff17 	ldw	r2,-4(fp)
   55ef4:	00c00444 	movi	r3,17
   55ef8:	10c00005 	stb	r3,0(r2)
        return (0);
   55efc:	0005883a 	mov	r2,zero
   55f00:	00003a06 	br	55fec <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55f04:	0005303a 	rdctl	r2,status
   55f08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55f0c:	e0fffc17 	ldw	r3,-16(fp)
   55f10:	00bfff84 	movi	r2,-2
   55f14:	1884703a 	and	r2,r3,r2
   55f18:	1001703a 	wrctl	status,r2
  
  return context;
   55f1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   55f20:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   55f24:	e0bffd03 	ldbu	r2,-12(fp)
   55f28:	10803fd8 	cmpnei	r2,r2,255
   55f2c:	1000031e 	bne	r2,zero,55f3c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   55f30:	d0a73117 	ldw	r2,-25404(gp)
   55f34:	10800c83 	ldbu	r2,50(r2)
   55f38:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   55f3c:	e0fffd03 	ldbu	r3,-12(fp)
   55f40:	008001b4 	movhi	r2,6
   55f44:	10903a04 	addi	r2,r2,16616
   55f48:	18c7883a 	add	r3,r3,r3
   55f4c:	18c7883a 	add	r3,r3,r3
   55f50:	10c5883a 	add	r2,r2,r3
   55f54:	10800017 	ldw	r2,0(r2)
   55f58:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   55f5c:	e0bff817 	ldw	r2,-32(fp)
   55f60:	1000091e 	bne	r2,zero,55f88 <OSTaskNameGet+0x120>
   55f64:	e0bff617 	ldw	r2,-40(fp)
   55f68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55f6c:	e0bff717 	ldw	r2,-36(fp)
   55f70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   55f74:	e0bfff17 	ldw	r2,-4(fp)
   55f78:	00c010c4 	movi	r3,67
   55f7c:	10c00005 	stb	r3,0(r2)
        return (0);
   55f80:	0005883a 	mov	r2,zero
   55f84:	00001906 	br	55fec <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   55f88:	e0bff817 	ldw	r2,-32(fp)
   55f8c:	10800058 	cmpnei	r2,r2,1
   55f90:	1000091e 	bne	r2,zero,55fb8 <OSTaskNameGet+0x150>
   55f94:	e0bff617 	ldw	r2,-40(fp)
   55f98:	e0bff915 	stw	r2,-28(fp)
   55f9c:	e0bff917 	ldw	r2,-28(fp)
   55fa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   55fa4:	e0bfff17 	ldw	r2,-4(fp)
   55fa8:	00c010c4 	movi	r3,67
   55fac:	10c00005 	stb	r3,0(r2)
        return (0);
   55fb0:	0005883a 	mov	r2,zero
   55fb4:	00000d06 	br	55fec <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   55fb8:	e0bff817 	ldw	r2,-32(fp)
   55fbc:	10801304 	addi	r2,r2,76
   55fc0:	100b883a 	mov	r5,r2
   55fc4:	e13ffe17 	ldw	r4,-8(fp)
   55fc8:	00505940 	call	50594 <OS_StrCopy>
   55fcc:	e0bffb05 	stb	r2,-20(fp)
   55fd0:	e0bff617 	ldw	r2,-40(fp)
   55fd4:	e0bffa15 	stw	r2,-24(fp)
   55fd8:	e0bffa17 	ldw	r2,-24(fp)
   55fdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   55fe0:	e0bfff17 	ldw	r2,-4(fp)
   55fe4:	10000005 	stb	zero,0(r2)
    return (len);
   55fe8:	e0bffb03 	ldbu	r2,-20(fp)
}
   55fec:	e037883a 	mov	sp,fp
   55ff0:	dfc00117 	ldw	ra,4(sp)
   55ff4:	df000017 	ldw	fp,0(sp)
   55ff8:	dec00204 	addi	sp,sp,8
   55ffc:	f800283a 	ret

00056000 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   56000:	defff304 	addi	sp,sp,-52
   56004:	dfc00c15 	stw	ra,48(sp)
   56008:	df000b15 	stw	fp,44(sp)
   5600c:	df000b04 	addi	fp,sp,44
   56010:	2005883a 	mov	r2,r4
   56014:	e17ffe15 	stw	r5,-8(fp)
   56018:	e1bfff15 	stw	r6,-4(fp)
   5601c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   56020:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   56024:	e0bfff17 	ldw	r2,-4(fp)
   56028:	10005c26 	beq	r2,zero,5619c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   5602c:	e0bffd03 	ldbu	r2,-12(fp)
   56030:	10800570 	cmpltui	r2,r2,21
   56034:	1000071e 	bne	r2,zero,56054 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   56038:	e0bffd03 	ldbu	r2,-12(fp)
   5603c:	10803fe0 	cmpeqi	r2,r2,255
   56040:	1000041e 	bne	r2,zero,56054 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   56044:	e0bfff17 	ldw	r2,-4(fp)
   56048:	00c00a84 	movi	r3,42
   5604c:	10c00005 	stb	r3,0(r2)
            return;
   56050:	00005306 	br	561a0 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   56054:	e0bffe17 	ldw	r2,-8(fp)
   56058:	1000041e 	bne	r2,zero,5606c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   5605c:	e0bfff17 	ldw	r2,-4(fp)
   56060:	00c00304 	movi	r3,12
   56064:	10c00005 	stb	r3,0(r2)
        return;
   56068:	00004d06 	br	561a0 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   5606c:	d0a73003 	ldbu	r2,-25408(gp)
   56070:	10803fcc 	andi	r2,r2,255
   56074:	10000426 	beq	r2,zero,56088 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   56078:	e0bfff17 	ldw	r2,-4(fp)
   5607c:	00c00484 	movi	r3,18
   56080:	10c00005 	stb	r3,0(r2)
        return;
   56084:	00004606 	br	561a0 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56088:	0005303a 	rdctl	r2,status
   5608c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56090:	e0fffc17 	ldw	r3,-16(fp)
   56094:	00bfff84 	movi	r2,-2
   56098:	1884703a 	and	r2,r3,r2
   5609c:	1001703a 	wrctl	status,r2
  
  return context;
   560a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   560a4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   560a8:	e0bffd03 	ldbu	r2,-12(fp)
   560ac:	10803fd8 	cmpnei	r2,r2,255
   560b0:	1000031e 	bne	r2,zero,560c0 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   560b4:	d0a73117 	ldw	r2,-25404(gp)
   560b8:	10800c83 	ldbu	r2,50(r2)
   560bc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   560c0:	e0fffd03 	ldbu	r3,-12(fp)
   560c4:	008001b4 	movhi	r2,6
   560c8:	10903a04 	addi	r2,r2,16616
   560cc:	18c7883a 	add	r3,r3,r3
   560d0:	18c7883a 	add	r3,r3,r3
   560d4:	10c5883a 	add	r2,r2,r3
   560d8:	10800017 	ldw	r2,0(r2)
   560dc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   560e0:	e0bff717 	ldw	r2,-36(fp)
   560e4:	1000081e 	bne	r2,zero,56108 <OSTaskNameSet+0x108>
   560e8:	e0bff517 	ldw	r2,-44(fp)
   560ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   560f0:	e0bff617 	ldw	r2,-40(fp)
   560f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   560f8:	e0bfff17 	ldw	r2,-4(fp)
   560fc:	00c010c4 	movi	r3,67
   56100:	10c00005 	stb	r3,0(r2)
        return;
   56104:	00002606 	br	561a0 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   56108:	e0bff717 	ldw	r2,-36(fp)
   5610c:	10800058 	cmpnei	r2,r2,1
   56110:	1000081e 	bne	r2,zero,56134 <OSTaskNameSet+0x134>
   56114:	e0bff517 	ldw	r2,-44(fp)
   56118:	e0bff815 	stw	r2,-32(fp)
   5611c:	e0bff817 	ldw	r2,-32(fp)
   56120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   56124:	e0bfff17 	ldw	r2,-4(fp)
   56128:	00c010c4 	movi	r3,67
   5612c:	10c00005 	stb	r3,0(r2)
        return;
   56130:	00001b06 	br	561a0 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   56134:	e13ffe17 	ldw	r4,-8(fp)
   56138:	00506080 	call	50608 <OS_StrLen>
   5613c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   56140:	e0bffa03 	ldbu	r2,-24(fp)
   56144:	10800830 	cmpltui	r2,r2,32
   56148:	1000081e 	bne	r2,zero,5616c <OSTaskNameSet+0x16c>
   5614c:	e0bff517 	ldw	r2,-44(fp)
   56150:	e0bff915 	stw	r2,-28(fp)
   56154:	e0bff917 	ldw	r2,-28(fp)
   56158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   5615c:	e0bfff17 	ldw	r2,-4(fp)
   56160:	00c01044 	movi	r3,65
   56164:	10c00005 	stb	r3,0(r2)
        return;
   56168:	00000d06 	br	561a0 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   5616c:	e0bff717 	ldw	r2,-36(fp)
   56170:	10801304 	addi	r2,r2,76
   56174:	e17ffe17 	ldw	r5,-8(fp)
   56178:	1009883a 	mov	r4,r2
   5617c:	00505940 	call	50594 <OS_StrCopy>
   56180:	e0bff517 	ldw	r2,-44(fp)
   56184:	e0bffb15 	stw	r2,-20(fp)
   56188:	e0bffb17 	ldw	r2,-20(fp)
   5618c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   56190:	e0bfff17 	ldw	r2,-4(fp)
   56194:	10000005 	stb	zero,0(r2)
   56198:	00000106 	br	561a0 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   5619c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   561a0:	e037883a 	mov	sp,fp
   561a4:	dfc00117 	ldw	ra,4(sp)
   561a8:	df000017 	ldw	fp,0(sp)
   561ac:	dec00204 	addi	sp,sp,8
   561b0:	f800283a 	ret

000561b4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   561b4:	defff404 	addi	sp,sp,-48
   561b8:	dfc00b15 	stw	ra,44(sp)
   561bc:	df000a15 	stw	fp,40(sp)
   561c0:	df000a04 	addi	fp,sp,40
   561c4:	2005883a 	mov	r2,r4
   561c8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   561cc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   561d0:	e0bfff03 	ldbu	r2,-4(fp)
   561d4:	10800530 	cmpltui	r2,r2,20
   561d8:	1000021e 	bne	r2,zero,561e4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   561dc:	00800a84 	movi	r2,42
   561e0:	00006406 	br	56374 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   561e4:	0005303a 	rdctl	r2,status
   561e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   561ec:	e0fffe17 	ldw	r3,-8(fp)
   561f0:	00bfff84 	movi	r2,-2
   561f4:	1884703a 	and	r2,r3,r2
   561f8:	1001703a 	wrctl	status,r2
  
  return context;
   561fc:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   56200:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   56204:	e0ffff03 	ldbu	r3,-4(fp)
   56208:	008001b4 	movhi	r2,6
   5620c:	10903a04 	addi	r2,r2,16616
   56210:	18c7883a 	add	r3,r3,r3
   56214:	18c7883a 	add	r3,r3,r3
   56218:	10c5883a 	add	r2,r2,r3
   5621c:	10800017 	ldw	r2,0(r2)
   56220:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   56224:	e0bff817 	ldw	r2,-32(fp)
   56228:	1000061e 	bne	r2,zero,56244 <OSTaskResume+0x90>
   5622c:	e0bff617 	ldw	r2,-40(fp)
   56230:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56234:	e0bff717 	ldw	r2,-36(fp)
   56238:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   5623c:	00801184 	movi	r2,70
   56240:	00004c06 	br	56374 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   56244:	e0bff817 	ldw	r2,-32(fp)
   56248:	10800058 	cmpnei	r2,r2,1
   5624c:	1000061e 	bne	r2,zero,56268 <OSTaskResume+0xb4>
   56250:	e0bff617 	ldw	r2,-40(fp)
   56254:	e0bff915 	stw	r2,-28(fp)
   56258:	e0bff917 	ldw	r2,-28(fp)
   5625c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   56260:	008010c4 	movi	r2,67
   56264:	00004306 	br	56374 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   56268:	e0bff817 	ldw	r2,-32(fp)
   5626c:	10800c03 	ldbu	r2,48(r2)
   56270:	10803fcc 	andi	r2,r2,255
   56274:	1080020c 	andi	r2,r2,8
   56278:	10003926 	beq	r2,zero,56360 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   5627c:	e0bff817 	ldw	r2,-32(fp)
   56280:	10c00c03 	ldbu	r3,48(r2)
   56284:	00bffdc4 	movi	r2,-9
   56288:	1884703a 	and	r2,r3,r2
   5628c:	1007883a 	mov	r3,r2
   56290:	e0bff817 	ldw	r2,-32(fp)
   56294:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   56298:	e0bff817 	ldw	r2,-32(fp)
   5629c:	10800c03 	ldbu	r2,48(r2)
   562a0:	10803fcc 	andi	r2,r2,255
   562a4:	1000281e 	bne	r2,zero,56348 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   562a8:	e0bff817 	ldw	r2,-32(fp)
   562ac:	10800b8b 	ldhu	r2,46(r2)
   562b0:	10bfffcc 	andi	r2,r2,65535
   562b4:	10001f1e 	bne	r2,zero,56334 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   562b8:	e0bff817 	ldw	r2,-32(fp)
   562bc:	10c00d83 	ldbu	r3,54(r2)
   562c0:	d0a72e03 	ldbu	r2,-25416(gp)
   562c4:	1884b03a 	or	r2,r3,r2
   562c8:	d0a72e05 	stb	r2,-25416(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   562cc:	e0bff817 	ldw	r2,-32(fp)
   562d0:	10800d03 	ldbu	r2,52(r2)
   562d4:	10c03fcc 	andi	r3,r2,255
   562d8:	e0bff817 	ldw	r2,-32(fp)
   562dc:	10800d03 	ldbu	r2,52(r2)
   562e0:	11003fcc 	andi	r4,r2,255
   562e4:	d0a72e44 	addi	r2,gp,-25415
   562e8:	2085883a 	add	r2,r4,r2
   562ec:	11000003 	ldbu	r4,0(r2)
   562f0:	e0bff817 	ldw	r2,-32(fp)
   562f4:	10800d43 	ldbu	r2,53(r2)
   562f8:	2084b03a 	or	r2,r4,r2
   562fc:	1009883a 	mov	r4,r2
   56300:	d0a72e44 	addi	r2,gp,-25415
   56304:	1885883a 	add	r2,r3,r2
   56308:	11000005 	stb	r4,0(r2)
   5630c:	e0bff617 	ldw	r2,-40(fp)
   56310:	e0bffa15 	stw	r2,-24(fp)
   56314:	e0bffa17 	ldw	r2,-24(fp)
   56318:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   5631c:	d0a72243 	ldbu	r2,-25463(gp)
   56320:	10803fcc 	andi	r2,r2,255
   56324:	10800058 	cmpnei	r2,r2,1
   56328:	10000b1e 	bne	r2,zero,56358 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   5632c:	00504500 	call	50450 <OS_Sched>
   56330:	00000906 	br	56358 <OSTaskResume+0x1a4>
   56334:	e0bff617 	ldw	r2,-40(fp)
   56338:	e0bffb15 	stw	r2,-20(fp)
   5633c:	e0bffb17 	ldw	r2,-20(fp)
   56340:	1001703a 	wrctl	status,r2
   56344:	00000406 	br	56358 <OSTaskResume+0x1a4>
   56348:	e0bff617 	ldw	r2,-40(fp)
   5634c:	e0bffc15 	stw	r2,-16(fp)
   56350:	e0bffc17 	ldw	r2,-16(fp)
   56354:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   56358:	0005883a 	mov	r2,zero
   5635c:	00000506 	br	56374 <OSTaskResume+0x1c0>
   56360:	e0bff617 	ldw	r2,-40(fp)
   56364:	e0bffd15 	stw	r2,-12(fp)
   56368:	e0bffd17 	ldw	r2,-12(fp)
   5636c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   56370:	00801104 	movi	r2,68
}
   56374:	e037883a 	mov	sp,fp
   56378:	dfc00117 	ldw	ra,4(sp)
   5637c:	df000017 	ldw	fp,0(sp)
   56380:	dec00204 	addi	sp,sp,8
   56384:	f800283a 	ret

00056388 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   56388:	defff304 	addi	sp,sp,-52
   5638c:	df000c15 	stw	fp,48(sp)
   56390:	df000c04 	addi	fp,sp,48
   56394:	2005883a 	mov	r2,r4
   56398:	e17fff15 	stw	r5,-4(fp)
   5639c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   563a0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   563a4:	e0bffe03 	ldbu	r2,-8(fp)
   563a8:	10800570 	cmpltui	r2,r2,21
   563ac:	1000051e 	bne	r2,zero,563c4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   563b0:	e0bffe03 	ldbu	r2,-8(fp)
   563b4:	10803fe0 	cmpeqi	r2,r2,255
   563b8:	1000021e 	bne	r2,zero,563c4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   563bc:	00800a84 	movi	r2,42
   563c0:	00005d06 	br	56538 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   563c4:	e0bfff17 	ldw	r2,-4(fp)
   563c8:	1000021e 	bne	r2,zero,563d4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   563cc:	00800244 	movi	r2,9
   563d0:	00005906 	br	56538 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   563d4:	e0bfff17 	ldw	r2,-4(fp)
   563d8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   563dc:	e0bfff17 	ldw	r2,-4(fp)
   563e0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   563e4:	0005303a 	rdctl	r2,status
   563e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   563ec:	e0fffd17 	ldw	r3,-12(fp)
   563f0:	00bfff84 	movi	r2,-2
   563f4:	1884703a 	and	r2,r3,r2
   563f8:	1001703a 	wrctl	status,r2
  
  return context;
   563fc:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   56400:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   56404:	e0bffe03 	ldbu	r2,-8(fp)
   56408:	10803fd8 	cmpnei	r2,r2,255
   5640c:	1000031e 	bne	r2,zero,5641c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   56410:	d0a73117 	ldw	r2,-25404(gp)
   56414:	10800c83 	ldbu	r2,50(r2)
   56418:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   5641c:	e0fffe03 	ldbu	r3,-8(fp)
   56420:	008001b4 	movhi	r2,6
   56424:	10903a04 	addi	r2,r2,16616
   56428:	18c7883a 	add	r3,r3,r3
   5642c:	18c7883a 	add	r3,r3,r3
   56430:	10c5883a 	add	r2,r2,r3
   56434:	10800017 	ldw	r2,0(r2)
   56438:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   5643c:	e0bff817 	ldw	r2,-32(fp)
   56440:	1000061e 	bne	r2,zero,5645c <OSTaskStkChk+0xd4>
   56444:	e0bff617 	ldw	r2,-40(fp)
   56448:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5644c:	e0bff717 	ldw	r2,-36(fp)
   56450:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   56454:	008010c4 	movi	r2,67
   56458:	00003706 	br	56538 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   5645c:	e0bff817 	ldw	r2,-32(fp)
   56460:	10800058 	cmpnei	r2,r2,1
   56464:	1000061e 	bne	r2,zero,56480 <OSTaskStkChk+0xf8>
   56468:	e0bff617 	ldw	r2,-40(fp)
   5646c:	e0bff915 	stw	r2,-28(fp)
   56470:	e0bff917 	ldw	r2,-28(fp)
   56474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   56478:	008010c4 	movi	r2,67
   5647c:	00002e06 	br	56538 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   56480:	e0bff817 	ldw	r2,-32(fp)
   56484:	1080040b 	ldhu	r2,16(r2)
   56488:	10bfffcc 	andi	r2,r2,65535
   5648c:	1080004c 	andi	r2,r2,1
   56490:	1000061e 	bne	r2,zero,564ac <OSTaskStkChk+0x124>
   56494:	e0bff617 	ldw	r2,-40(fp)
   56498:	e0bffa15 	stw	r2,-24(fp)
   5649c:	e0bffa17 	ldw	r2,-24(fp)
   564a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   564a4:	00801144 	movi	r2,69
   564a8:	00002306 	br	56538 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   564ac:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   564b0:	e0bff817 	ldw	r2,-32(fp)
   564b4:	10800317 	ldw	r2,12(r2)
   564b8:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   564bc:	e0bff817 	ldw	r2,-32(fp)
   564c0:	10800217 	ldw	r2,8(r2)
   564c4:	e0bff415 	stw	r2,-48(fp)
   564c8:	e0bff617 	ldw	r2,-40(fp)
   564cc:	e0bffb15 	stw	r2,-20(fp)
   564d0:	e0bffb17 	ldw	r2,-20(fp)
   564d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   564d8:	00000306 	br	564e8 <OSTaskStkChk+0x160>
        nfree++;
   564dc:	e0bff517 	ldw	r2,-44(fp)
   564e0:	10800044 	addi	r2,r2,1
   564e4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   564e8:	e0bff417 	ldw	r2,-48(fp)
   564ec:	10c00104 	addi	r3,r2,4
   564f0:	e0fff415 	stw	r3,-48(fp)
   564f4:	10800017 	ldw	r2,0(r2)
   564f8:	103ff826 	beq	r2,zero,564dc <__alt_data_end+0xffff0cdc>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   564fc:	e0bff517 	ldw	r2,-44(fp)
   56500:	1085883a 	add	r2,r2,r2
   56504:	1085883a 	add	r2,r2,r2
   56508:	1007883a 	mov	r3,r2
   5650c:	e0bfff17 	ldw	r2,-4(fp)
   56510:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   56514:	e0fffc17 	ldw	r3,-16(fp)
   56518:	e0bff517 	ldw	r2,-44(fp)
   5651c:	1885c83a 	sub	r2,r3,r2
   56520:	1085883a 	add	r2,r2,r2
   56524:	1085883a 	add	r2,r2,r2
   56528:	1007883a 	mov	r3,r2
   5652c:	e0bfff17 	ldw	r2,-4(fp)
   56530:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   56534:	0005883a 	mov	r2,zero
}
   56538:	e037883a 	mov	sp,fp
   5653c:	df000017 	ldw	fp,0(sp)
   56540:	dec00104 	addi	sp,sp,4
   56544:	f800283a 	ret

00056548 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   56548:	defff504 	addi	sp,sp,-44
   5654c:	dfc00a15 	stw	ra,40(sp)
   56550:	df000915 	stw	fp,36(sp)
   56554:	df000904 	addi	fp,sp,36
   56558:	2005883a 	mov	r2,r4
   5655c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   56560:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   56564:	e0bfff03 	ldbu	r2,-4(fp)
   56568:	10800518 	cmpnei	r2,r2,20
   5656c:	1000021e 	bne	r2,zero,56578 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   56570:	008011c4 	movi	r2,71
   56574:	00006806 	br	56718 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   56578:	e0bfff03 	ldbu	r2,-4(fp)
   5657c:	10800530 	cmpltui	r2,r2,20
   56580:	1000051e 	bne	r2,zero,56598 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   56584:	e0bfff03 	ldbu	r2,-4(fp)
   56588:	10803fe0 	cmpeqi	r2,r2,255
   5658c:	1000021e 	bne	r2,zero,56598 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   56590:	00800a84 	movi	r2,42
   56594:	00006006 	br	56718 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56598:	0005303a 	rdctl	r2,status
   5659c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   565a0:	e0fffe17 	ldw	r3,-8(fp)
   565a4:	00bfff84 	movi	r2,-2
   565a8:	1884703a 	and	r2,r3,r2
   565ac:	1001703a 	wrctl	status,r2
  
  return context;
   565b0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   565b4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   565b8:	e0bfff03 	ldbu	r2,-4(fp)
   565bc:	10803fd8 	cmpnei	r2,r2,255
   565c0:	1000061e 	bne	r2,zero,565dc <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   565c4:	d0a73117 	ldw	r2,-25404(gp)
   565c8:	10800c83 	ldbu	r2,50(r2)
   565cc:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   565d0:	00800044 	movi	r2,1
   565d4:	e0bff705 	stb	r2,-36(fp)
   565d8:	00000906 	br	56600 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   565dc:	d0a73117 	ldw	r2,-25404(gp)
   565e0:	10800c83 	ldbu	r2,50(r2)
   565e4:	10c03fcc 	andi	r3,r2,255
   565e8:	e0bfff03 	ldbu	r2,-4(fp)
   565ec:	1880031e 	bne	r3,r2,565fc <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   565f0:	00800044 	movi	r2,1
   565f4:	e0bff705 	stb	r2,-36(fp)
   565f8:	00000106 	br	56600 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   565fc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   56600:	e0ffff03 	ldbu	r3,-4(fp)
   56604:	008001b4 	movhi	r2,6
   56608:	10903a04 	addi	r2,r2,16616
   5660c:	18c7883a 	add	r3,r3,r3
   56610:	18c7883a 	add	r3,r3,r3
   56614:	10c5883a 	add	r2,r2,r3
   56618:	10800017 	ldw	r2,0(r2)
   5661c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   56620:	e0bffa17 	ldw	r2,-24(fp)
   56624:	1000061e 	bne	r2,zero,56640 <OSTaskSuspend+0xf8>
   56628:	e0bff817 	ldw	r2,-32(fp)
   5662c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56630:	e0bff917 	ldw	r2,-28(fp)
   56634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   56638:	00801204 	movi	r2,72
   5663c:	00003606 	br	56718 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   56640:	e0bffa17 	ldw	r2,-24(fp)
   56644:	10800058 	cmpnei	r2,r2,1
   56648:	1000061e 	bne	r2,zero,56664 <OSTaskSuspend+0x11c>
   5664c:	e0bff817 	ldw	r2,-32(fp)
   56650:	e0bffb15 	stw	r2,-20(fp)
   56654:	e0bffb17 	ldw	r2,-20(fp)
   56658:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   5665c:	008010c4 	movi	r2,67
   56660:	00002d06 	br	56718 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   56664:	e0bffa17 	ldw	r2,-24(fp)
   56668:	10800d03 	ldbu	r2,52(r2)
   5666c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   56670:	e0fffd03 	ldbu	r3,-12(fp)
   56674:	e13ffd03 	ldbu	r4,-12(fp)
   56678:	d0a72e44 	addi	r2,gp,-25415
   5667c:	2085883a 	add	r2,r4,r2
   56680:	10800003 	ldbu	r2,0(r2)
   56684:	1009883a 	mov	r4,r2
   56688:	e0bffa17 	ldw	r2,-24(fp)
   5668c:	10800d43 	ldbu	r2,53(r2)
   56690:	0084303a 	nor	r2,zero,r2
   56694:	2084703a 	and	r2,r4,r2
   56698:	1009883a 	mov	r4,r2
   5669c:	d0a72e44 	addi	r2,gp,-25415
   566a0:	1885883a 	add	r2,r3,r2
   566a4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   566a8:	e0fffd03 	ldbu	r3,-12(fp)
   566ac:	d0a72e44 	addi	r2,gp,-25415
   566b0:	1885883a 	add	r2,r3,r2
   566b4:	10800003 	ldbu	r2,0(r2)
   566b8:	10803fcc 	andi	r2,r2,255
   566bc:	1000071e 	bne	r2,zero,566dc <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   566c0:	e0bffa17 	ldw	r2,-24(fp)
   566c4:	10800d83 	ldbu	r2,54(r2)
   566c8:	0084303a 	nor	r2,zero,r2
   566cc:	1007883a 	mov	r3,r2
   566d0:	d0a72e03 	ldbu	r2,-25416(gp)
   566d4:	1884703a 	and	r2,r3,r2
   566d8:	d0a72e05 	stb	r2,-25416(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   566dc:	e0bffa17 	ldw	r2,-24(fp)
   566e0:	10800c03 	ldbu	r2,48(r2)
   566e4:	10800214 	ori	r2,r2,8
   566e8:	1007883a 	mov	r3,r2
   566ec:	e0bffa17 	ldw	r2,-24(fp)
   566f0:	10c00c05 	stb	r3,48(r2)
   566f4:	e0bff817 	ldw	r2,-32(fp)
   566f8:	e0bffc15 	stw	r2,-16(fp)
   566fc:	e0bffc17 	ldw	r2,-16(fp)
   56700:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   56704:	e0bff703 	ldbu	r2,-36(fp)
   56708:	10800058 	cmpnei	r2,r2,1
   5670c:	1000011e 	bne	r2,zero,56714 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   56710:	00504500 	call	50450 <OS_Sched>
    }
    return (OS_ERR_NONE);
   56714:	0005883a 	mov	r2,zero
}
   56718:	e037883a 	mov	sp,fp
   5671c:	dfc00117 	ldw	ra,4(sp)
   56720:	df000017 	ldw	fp,0(sp)
   56724:	dec00204 	addi	sp,sp,8
   56728:	f800283a 	ret

0005672c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   5672c:	defff604 	addi	sp,sp,-40
   56730:	dfc00915 	stw	ra,36(sp)
   56734:	df000815 	stw	fp,32(sp)
   56738:	df000804 	addi	fp,sp,32
   5673c:	2005883a 	mov	r2,r4
   56740:	e17fff15 	stw	r5,-4(fp)
   56744:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   56748:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   5674c:	e0bffe03 	ldbu	r2,-8(fp)
   56750:	10800570 	cmpltui	r2,r2,21
   56754:	1000051e 	bne	r2,zero,5676c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   56758:	e0bffe03 	ldbu	r2,-8(fp)
   5675c:	10803fe0 	cmpeqi	r2,r2,255
   56760:	1000021e 	bne	r2,zero,5676c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   56764:	00800a84 	movi	r2,42
   56768:	00003406 	br	5683c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   5676c:	e0bfff17 	ldw	r2,-4(fp)
   56770:	1000021e 	bne	r2,zero,5677c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   56774:	00800244 	movi	r2,9
   56778:	00003006 	br	5683c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5677c:	0005303a 	rdctl	r2,status
   56780:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56784:	e0fffd17 	ldw	r3,-12(fp)
   56788:	00bfff84 	movi	r2,-2
   5678c:	1884703a 	and	r2,r3,r2
   56790:	1001703a 	wrctl	status,r2
  
  return context;
   56794:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   56798:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   5679c:	e0bffe03 	ldbu	r2,-8(fp)
   567a0:	10803fd8 	cmpnei	r2,r2,255
   567a4:	1000031e 	bne	r2,zero,567b4 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   567a8:	d0a73117 	ldw	r2,-25404(gp)
   567ac:	10800c83 	ldbu	r2,50(r2)
   567b0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   567b4:	e0fffe03 	ldbu	r3,-8(fp)
   567b8:	008001b4 	movhi	r2,6
   567bc:	10903a04 	addi	r2,r2,16616
   567c0:	18c7883a 	add	r3,r3,r3
   567c4:	18c7883a 	add	r3,r3,r3
   567c8:	10c5883a 	add	r2,r2,r3
   567cc:	10800017 	ldw	r2,0(r2)
   567d0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   567d4:	e0bffa17 	ldw	r2,-24(fp)
   567d8:	1000061e 	bne	r2,zero,567f4 <OSTaskQuery+0xc8>
   567dc:	e0bff817 	ldw	r2,-32(fp)
   567e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   567e4:	e0bff917 	ldw	r2,-28(fp)
   567e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   567ec:	00800a44 	movi	r2,41
   567f0:	00001206 	br	5683c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   567f4:	e0bffa17 	ldw	r2,-24(fp)
   567f8:	10800058 	cmpnei	r2,r2,1
   567fc:	1000061e 	bne	r2,zero,56818 <OSTaskQuery+0xec>
   56800:	e0bff817 	ldw	r2,-32(fp)
   56804:	e0bffb15 	stw	r2,-20(fp)
   56808:	e0bffb17 	ldw	r2,-20(fp)
   5680c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   56810:	008010c4 	movi	r2,67
   56814:	00000906 	br	5683c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   56818:	01801b04 	movi	r6,108
   5681c:	e17ffa17 	ldw	r5,-24(fp)
   56820:	e13fff17 	ldw	r4,-4(fp)
   56824:	00503e80 	call	503e8 <OS_MemCopy>
   56828:	e0bff817 	ldw	r2,-32(fp)
   5682c:	e0bffc15 	stw	r2,-16(fp)
   56830:	e0bffc17 	ldw	r2,-16(fp)
   56834:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   56838:	0005883a 	mov	r2,zero
}
   5683c:	e037883a 	mov	sp,fp
   56840:	dfc00117 	ldw	ra,4(sp)
   56844:	df000017 	ldw	fp,0(sp)
   56848:	dec00204 	addi	sp,sp,8
   5684c:	f800283a 	ret

00056850 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   56850:	defffc04 	addi	sp,sp,-16
   56854:	df000315 	stw	fp,12(sp)
   56858:	df000304 	addi	fp,sp,12
   5685c:	e13ffd15 	stw	r4,-12(fp)
   56860:	e17ffe15 	stw	r5,-8(fp)
   56864:	3005883a 	mov	r2,r6
   56868:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   5686c:	e0bfff0b 	ldhu	r2,-4(fp)
   56870:	1080004c 	andi	r2,r2,1
   56874:	10000d26 	beq	r2,zero,568ac <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   56878:	e0bfff0b 	ldhu	r2,-4(fp)
   5687c:	1080008c 	andi	r2,r2,2
   56880:	10000a26 	beq	r2,zero,568ac <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   56884:	00000706 	br	568a4 <OS_TaskStkClr+0x54>
                size--;
   56888:	e0bffe17 	ldw	r2,-8(fp)
   5688c:	10bfffc4 	addi	r2,r2,-1
   56890:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   56894:	e0bffd17 	ldw	r2,-12(fp)
   56898:	10c00104 	addi	r3,r2,4
   5689c:	e0fffd15 	stw	r3,-12(fp)
   568a0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   568a4:	e0bffe17 	ldw	r2,-8(fp)
   568a8:	103ff71e 	bne	r2,zero,56888 <__alt_data_end+0xffff1088>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   568ac:	0001883a 	nop
   568b0:	e037883a 	mov	sp,fp
   568b4:	df000017 	ldw	fp,0(sp)
   568b8:	dec00104 	addi	sp,sp,4
   568bc:	f800283a 	ret

000568c0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   568c0:	defff904 	addi	sp,sp,-28
   568c4:	dfc00615 	stw	ra,24(sp)
   568c8:	df000515 	stw	fp,20(sp)
   568cc:	df000504 	addi	fp,sp,20
   568d0:	2005883a 	mov	r2,r4
   568d4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   568d8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   568dc:	d0a73003 	ldbu	r2,-25408(gp)
   568e0:	10803fcc 	andi	r2,r2,255
   568e4:	1000311e 	bne	r2,zero,569ac <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   568e8:	e0bfff0b 	ldhu	r2,-4(fp)
   568ec:	10003026 	beq	r2,zero,569b0 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   568f0:	0005303a 	rdctl	r2,status
   568f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   568f8:	e0fffe17 	ldw	r3,-8(fp)
   568fc:	00bfff84 	movi	r2,-2
   56900:	1884703a 	and	r2,r3,r2
   56904:	1001703a 	wrctl	status,r2
  
  return context;
   56908:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   5690c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   56910:	d0a73117 	ldw	r2,-25404(gp)
   56914:	10800d03 	ldbu	r2,52(r2)
   56918:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   5691c:	e0fffd03 	ldbu	r3,-12(fp)
   56920:	e13ffd03 	ldbu	r4,-12(fp)
   56924:	d0a72e44 	addi	r2,gp,-25415
   56928:	2085883a 	add	r2,r4,r2
   5692c:	10800003 	ldbu	r2,0(r2)
   56930:	1009883a 	mov	r4,r2
   56934:	d0a73117 	ldw	r2,-25404(gp)
   56938:	10800d43 	ldbu	r2,53(r2)
   5693c:	0084303a 	nor	r2,zero,r2
   56940:	2084703a 	and	r2,r4,r2
   56944:	1009883a 	mov	r4,r2
   56948:	d0a72e44 	addi	r2,gp,-25415
   5694c:	1885883a 	add	r2,r3,r2
   56950:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   56954:	e0fffd03 	ldbu	r3,-12(fp)
   56958:	d0a72e44 	addi	r2,gp,-25415
   5695c:	1885883a 	add	r2,r3,r2
   56960:	10800003 	ldbu	r2,0(r2)
   56964:	10803fcc 	andi	r2,r2,255
   56968:	1000071e 	bne	r2,zero,56988 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   5696c:	d0a73117 	ldw	r2,-25404(gp)
   56970:	10800d83 	ldbu	r2,54(r2)
   56974:	0084303a 	nor	r2,zero,r2
   56978:	1007883a 	mov	r3,r2
   5697c:	d0a72e03 	ldbu	r2,-25416(gp)
   56980:	1884703a 	and	r2,r3,r2
   56984:	d0a72e05 	stb	r2,-25416(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   56988:	d0a73117 	ldw	r2,-25404(gp)
   5698c:	e0ffff0b 	ldhu	r3,-4(fp)
   56990:	10c00b8d 	sth	r3,46(r2)
   56994:	e0bffb17 	ldw	r2,-20(fp)
   56998:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5699c:	e0bffc17 	ldw	r2,-16(fp)
   569a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   569a4:	00504500 	call	50450 <OS_Sched>
   569a8:	00000106 	br	569b0 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   569ac:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   569b0:	e037883a 	mov	sp,fp
   569b4:	dfc00117 	ldw	ra,4(sp)
   569b8:	df000017 	ldw	fp,0(sp)
   569bc:	dec00204 	addi	sp,sp,8
   569c0:	f800283a 	ret

000569c4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   569c4:	defff704 	addi	sp,sp,-36
   569c8:	dfc00815 	stw	ra,32(sp)
   569cc:	df000715 	stw	fp,28(sp)
   569d0:	dc000615 	stw	r16,24(sp)
   569d4:	df000704 	addi	fp,sp,28
   569d8:	2011883a 	mov	r8,r4
   569dc:	2809883a 	mov	r4,r5
   569e0:	3007883a 	mov	r3,r6
   569e4:	3805883a 	mov	r2,r7
   569e8:	e23ffb05 	stb	r8,-20(fp)
   569ec:	e13ffc05 	stb	r4,-16(fp)
   569f0:	e0fffd05 	stb	r3,-12(fp)
   569f4:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   569f8:	d0a73003 	ldbu	r2,-25408(gp)
   569fc:	10803fcc 	andi	r2,r2,255
   56a00:	10000226 	beq	r2,zero,56a0c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   56a04:	00801544 	movi	r2,85
   56a08:	00004706 	br	56b28 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   56a0c:	e0bffb03 	ldbu	r2,-20(fp)
   56a10:	1000081e 	bne	r2,zero,56a34 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   56a14:	e0bffc03 	ldbu	r2,-16(fp)
   56a18:	1000061e 	bne	r2,zero,56a34 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   56a1c:	e0bffd03 	ldbu	r2,-12(fp)
   56a20:	1000041e 	bne	r2,zero,56a34 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   56a24:	e0bffe0b 	ldhu	r2,-8(fp)
   56a28:	1000021e 	bne	r2,zero,56a34 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   56a2c:	00801504 	movi	r2,84
   56a30:	00003d06 	br	56b28 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
   56a34:	e0bffc03 	ldbu	r2,-16(fp)
   56a38:	10800f30 	cmpltui	r2,r2,60
   56a3c:	1000021e 	bne	r2,zero,56a48 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   56a40:	00801444 	movi	r2,81
   56a44:	00003806 	br	56b28 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
   56a48:	e0bffd03 	ldbu	r2,-12(fp)
   56a4c:	10800f30 	cmpltui	r2,r2,60
   56a50:	1000021e 	bne	r2,zero,56a5c <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   56a54:	00801484 	movi	r2,82
   56a58:	00003306 	br	56b28 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
   56a5c:	e0bffe0b 	ldhu	r2,-8(fp)
   56a60:	1080fa30 	cmpltui	r2,r2,1000
   56a64:	1000021e 	bne	r2,zero,56a70 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   56a68:	008014c4 	movi	r2,83
   56a6c:	00002e06 	br	56b28 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   56a70:	e0bffb03 	ldbu	r2,-20(fp)
   56a74:	01438404 	movi	r5,3600
   56a78:	1009883a 	mov	r4,r2
   56a7c:	00407040 	call	40704 <__mulsi3>
   56a80:	1021883a 	mov	r16,r2
   56a84:	e0bffc03 	ldbu	r2,-16(fp)
   56a88:	01400f04 	movi	r5,60
   56a8c:	1009883a 	mov	r4,r2
   56a90:	00407040 	call	40704 <__mulsi3>
   56a94:	8087883a 	add	r3,r16,r2
   56a98:	e0bffd03 	ldbu	r2,-12(fp)
   56a9c:	1885883a 	add	r2,r3,r2
   56aa0:	0140fa04 	movi	r5,1000
   56aa4:	1009883a 	mov	r4,r2
   56aa8:	00407040 	call	40704 <__mulsi3>
   56aac:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   56ab0:	e0bffe0b 	ldhu	r2,-8(fp)
   56ab4:	0140fa04 	movi	r5,1000
   56ab8:	1009883a 	mov	r4,r2
   56abc:	00407040 	call	40704 <__mulsi3>
   56ac0:	0140fa04 	movi	r5,1000
   56ac4:	1009883a 	mov	r4,r2
   56ac8:	004b2d80 	call	4b2d8 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   56acc:	8085883a 	add	r2,r16,r2
   56ad0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   56ad4:	e0bffa17 	ldw	r2,-24(fp)
   56ad8:	1004d43a 	srli	r2,r2,16
   56adc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   56ae0:	e0bffa17 	ldw	r2,-24(fp)
   56ae4:	10bfffcc 	andi	r2,r2,65535
   56ae8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   56aec:	e0bffa17 	ldw	r2,-24(fp)
   56af0:	10bfffcc 	andi	r2,r2,65535
   56af4:	1009883a 	mov	r4,r2
   56af8:	00568c00 	call	568c0 <OSTimeDly>
    while (loops > 0) {
   56afc:	00000706 	br	56b1c <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
   56b00:	01200014 	movui	r4,32768
   56b04:	00568c00 	call	568c0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   56b08:	01200014 	movui	r4,32768
   56b0c:	00568c00 	call	568c0 <OSTimeDly>
        loops--;
   56b10:	e0bff90b 	ldhu	r2,-28(fp)
   56b14:	10bfffc4 	addi	r2,r2,-1
   56b18:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   56b1c:	e0bff90b 	ldhu	r2,-28(fp)
   56b20:	103ff71e 	bne	r2,zero,56b00 <__alt_data_end+0xffff1300>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   56b24:	0005883a 	mov	r2,zero
}
   56b28:	e6ffff04 	addi	sp,fp,-4
   56b2c:	dfc00217 	ldw	ra,8(sp)
   56b30:	df000117 	ldw	fp,4(sp)
   56b34:	dc000017 	ldw	r16,0(sp)
   56b38:	dec00304 	addi	sp,sp,12
   56b3c:	f800283a 	ret

00056b40 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   56b40:	defff504 	addi	sp,sp,-44
   56b44:	dfc00a15 	stw	ra,40(sp)
   56b48:	df000915 	stw	fp,36(sp)
   56b4c:	df000904 	addi	fp,sp,36
   56b50:	2005883a 	mov	r2,r4
   56b54:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   56b58:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   56b5c:	e0bfff03 	ldbu	r2,-4(fp)
   56b60:	10800530 	cmpltui	r2,r2,20
   56b64:	1000021e 	bne	r2,zero,56b70 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   56b68:	00800a84 	movi	r2,42
   56b6c:	00006406 	br	56d00 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56b70:	0005303a 	rdctl	r2,status
   56b74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56b78:	e0fffe17 	ldw	r3,-8(fp)
   56b7c:	00bfff84 	movi	r2,-2
   56b80:	1884703a 	and	r2,r3,r2
   56b84:	1001703a 	wrctl	status,r2
  
  return context;
   56b88:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   56b8c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   56b90:	e0ffff03 	ldbu	r3,-4(fp)
   56b94:	008001b4 	movhi	r2,6
   56b98:	10903a04 	addi	r2,r2,16616
   56b9c:	18c7883a 	add	r3,r3,r3
   56ba0:	18c7883a 	add	r3,r3,r3
   56ba4:	10c5883a 	add	r2,r2,r3
   56ba8:	10800017 	ldw	r2,0(r2)
   56bac:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   56bb0:	e0bff917 	ldw	r2,-28(fp)
   56bb4:	1000061e 	bne	r2,zero,56bd0 <OSTimeDlyResume+0x90>
   56bb8:	e0bff717 	ldw	r2,-36(fp)
   56bbc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56bc0:	e0bff817 	ldw	r2,-32(fp)
   56bc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   56bc8:	008010c4 	movi	r2,67
   56bcc:	00004c06 	br	56d00 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   56bd0:	e0bff917 	ldw	r2,-28(fp)
   56bd4:	10800058 	cmpnei	r2,r2,1
   56bd8:	1000061e 	bne	r2,zero,56bf4 <OSTimeDlyResume+0xb4>
   56bdc:	e0bff717 	ldw	r2,-36(fp)
   56be0:	e0bffa15 	stw	r2,-24(fp)
   56be4:	e0bffa17 	ldw	r2,-24(fp)
   56be8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   56bec:	008010c4 	movi	r2,67
   56bf0:	00004306 	br	56d00 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   56bf4:	e0bff917 	ldw	r2,-28(fp)
   56bf8:	10800b8b 	ldhu	r2,46(r2)
   56bfc:	10bfffcc 	andi	r2,r2,65535
   56c00:	1000061e 	bne	r2,zero,56c1c <OSTimeDlyResume+0xdc>
   56c04:	e0bff717 	ldw	r2,-36(fp)
   56c08:	e0bffb15 	stw	r2,-20(fp)
   56c0c:	e0bffb17 	ldw	r2,-20(fp)
   56c10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   56c14:	00801404 	movi	r2,80
   56c18:	00003906 	br	56d00 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   56c1c:	e0bff917 	ldw	r2,-28(fp)
   56c20:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   56c24:	e0bff917 	ldw	r2,-28(fp)
   56c28:	10800c03 	ldbu	r2,48(r2)
   56c2c:	10803fcc 	andi	r2,r2,255
   56c30:	10800dcc 	andi	r2,r2,55
   56c34:	10000b26 	beq	r2,zero,56c64 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   56c38:	e0bff917 	ldw	r2,-28(fp)
   56c3c:	10c00c03 	ldbu	r3,48(r2)
   56c40:	00bff204 	movi	r2,-56
   56c44:	1884703a 	and	r2,r3,r2
   56c48:	1007883a 	mov	r3,r2
   56c4c:	e0bff917 	ldw	r2,-28(fp)
   56c50:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   56c54:	e0bff917 	ldw	r2,-28(fp)
   56c58:	00c00044 	movi	r3,1
   56c5c:	10c00c45 	stb	r3,49(r2)
   56c60:	00000206 	br	56c6c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   56c64:	e0bff917 	ldw	r2,-28(fp)
   56c68:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   56c6c:	e0bff917 	ldw	r2,-28(fp)
   56c70:	10800c03 	ldbu	r2,48(r2)
   56c74:	10803fcc 	andi	r2,r2,255
   56c78:	1080020c 	andi	r2,r2,8
   56c7c:	10001b1e 	bne	r2,zero,56cec <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   56c80:	e0bff917 	ldw	r2,-28(fp)
   56c84:	10c00d83 	ldbu	r3,54(r2)
   56c88:	d0a72e03 	ldbu	r2,-25416(gp)
   56c8c:	1884b03a 	or	r2,r3,r2
   56c90:	d0a72e05 	stb	r2,-25416(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   56c94:	e0bff917 	ldw	r2,-28(fp)
   56c98:	10800d03 	ldbu	r2,52(r2)
   56c9c:	10c03fcc 	andi	r3,r2,255
   56ca0:	e0bff917 	ldw	r2,-28(fp)
   56ca4:	10800d03 	ldbu	r2,52(r2)
   56ca8:	11003fcc 	andi	r4,r2,255
   56cac:	d0a72e44 	addi	r2,gp,-25415
   56cb0:	2085883a 	add	r2,r4,r2
   56cb4:	11000003 	ldbu	r4,0(r2)
   56cb8:	e0bff917 	ldw	r2,-28(fp)
   56cbc:	10800d43 	ldbu	r2,53(r2)
   56cc0:	2084b03a 	or	r2,r4,r2
   56cc4:	1009883a 	mov	r4,r2
   56cc8:	d0a72e44 	addi	r2,gp,-25415
   56ccc:	1885883a 	add	r2,r3,r2
   56cd0:	11000005 	stb	r4,0(r2)
   56cd4:	e0bff717 	ldw	r2,-36(fp)
   56cd8:	e0bffc15 	stw	r2,-16(fp)
   56cdc:	e0bffc17 	ldw	r2,-16(fp)
   56ce0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   56ce4:	00504500 	call	50450 <OS_Sched>
   56ce8:	00000406 	br	56cfc <OSTimeDlyResume+0x1bc>
   56cec:	e0bff717 	ldw	r2,-36(fp)
   56cf0:	e0bffd15 	stw	r2,-12(fp)
   56cf4:	e0bffd17 	ldw	r2,-12(fp)
   56cf8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   56cfc:	0005883a 	mov	r2,zero
}
   56d00:	e037883a 	mov	sp,fp
   56d04:	dfc00117 	ldw	ra,4(sp)
   56d08:	df000017 	ldw	fp,0(sp)
   56d0c:	dec00204 	addi	sp,sp,8
   56d10:	f800283a 	ret

00056d14 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   56d14:	defffb04 	addi	sp,sp,-20
   56d18:	df000415 	stw	fp,16(sp)
   56d1c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   56d20:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56d24:	0005303a 	rdctl	r2,status
   56d28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56d2c:	e0fffe17 	ldw	r3,-8(fp)
   56d30:	00bfff84 	movi	r2,-2
   56d34:	1884703a 	and	r2,r3,r2
   56d38:	1001703a 	wrctl	status,r2
  
  return context;
   56d3c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   56d40:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   56d44:	d0a73217 	ldw	r2,-25400(gp)
   56d48:	e0bffd15 	stw	r2,-12(fp)
   56d4c:	e0bffc17 	ldw	r2,-16(fp)
   56d50:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56d54:	e0bfff17 	ldw	r2,-4(fp)
   56d58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   56d5c:	e0bffd17 	ldw	r2,-12(fp)
}
   56d60:	e037883a 	mov	sp,fp
   56d64:	df000017 	ldw	fp,0(sp)
   56d68:	dec00104 	addi	sp,sp,4
   56d6c:	f800283a 	ret

00056d70 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   56d70:	defffb04 	addi	sp,sp,-20
   56d74:	df000415 	stw	fp,16(sp)
   56d78:	df000404 	addi	fp,sp,16
   56d7c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   56d80:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56d84:	0005303a 	rdctl	r2,status
   56d88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56d8c:	e0fffd17 	ldw	r3,-12(fp)
   56d90:	00bfff84 	movi	r2,-2
   56d94:	1884703a 	and	r2,r3,r2
   56d98:	1001703a 	wrctl	status,r2
  
  return context;
   56d9c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   56da0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   56da4:	e0bfff17 	ldw	r2,-4(fp)
   56da8:	d0a73215 	stw	r2,-25400(gp)
   56dac:	e0bffc17 	ldw	r2,-16(fp)
   56db0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56db4:	e0bffe17 	ldw	r2,-8(fp)
   56db8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   56dbc:	0001883a 	nop
   56dc0:	e037883a 	mov	sp,fp
   56dc4:	df000017 	ldw	fp,0(sp)
   56dc8:	dec00104 	addi	sp,sp,4
   56dcc:	f800283a 	ret

00056dd0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   56dd0:	defffd04 	addi	sp,sp,-12
   56dd4:	dfc00215 	stw	ra,8(sp)
   56dd8:	df000115 	stw	fp,4(sp)
   56ddc:	df000104 	addi	fp,sp,4
   56de0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   56de4:	d1600904 	addi	r5,gp,-32732
   56de8:	e13fff17 	ldw	r4,-4(fp)
   56dec:	00580bc0 	call	580bc <alt_dev_llist_insert>
}
   56df0:	e037883a 	mov	sp,fp
   56df4:	dfc00117 	ldw	ra,4(sp)
   56df8:	df000017 	ldw	fp,0(sp)
   56dfc:	dec00204 	addi	sp,sp,8
   56e00:	f800283a 	ret

00056e04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   56e04:	defffd04 	addi	sp,sp,-12
   56e08:	dfc00215 	stw	ra,8(sp)
   56e0c:	df000115 	stw	fp,4(sp)
   56e10:	df000104 	addi	fp,sp,4
   56e14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   56e18:	00588640 	call	58864 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   56e1c:	00800044 	movi	r2,1
   56e20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   56e24:	0001883a 	nop
   56e28:	e037883a 	mov	sp,fp
   56e2c:	dfc00117 	ldw	ra,4(sp)
   56e30:	df000017 	ldw	fp,0(sp)
   56e34:	dec00204 	addi	sp,sp,8
   56e38:	f800283a 	ret

00056e3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   56e3c:	defffe04 	addi	sp,sp,-8
   56e40:	dfc00115 	stw	ra,4(sp)
   56e44:	df000015 	stw	fp,0(sp)
   56e48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   56e4c:	01c0fa04 	movi	r7,1000
   56e50:	01800044 	movi	r6,1
   56e54:	000b883a 	mov	r5,zero
   56e58:	01000234 	movhi	r4,8
   56e5c:	21040804 	addi	r4,r4,4128
   56e60:	0057c440 	call	57c44 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   56e64:	01800404 	movi	r6,16
   56e68:	000b883a 	mov	r5,zero
   56e6c:	010001b4 	movhi	r4,6
   56e70:	21283204 	addi	r4,r4,-24376
   56e74:	00570040 	call	57004 <altera_avalon_jtag_uart_init>
   56e78:	010001b4 	movhi	r4,6
   56e7c:	21282804 	addi	r4,r4,-24416
   56e80:	0056dd00 	call	56dd0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   56e84:	0001883a 	nop
}
   56e88:	0001883a 	nop
   56e8c:	e037883a 	mov	sp,fp
   56e90:	dfc00117 	ldw	ra,4(sp)
   56e94:	df000017 	ldw	fp,0(sp)
   56e98:	dec00204 	addi	sp,sp,8
   56e9c:	f800283a 	ret

00056ea0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   56ea0:	defffa04 	addi	sp,sp,-24
   56ea4:	dfc00515 	stw	ra,20(sp)
   56ea8:	df000415 	stw	fp,16(sp)
   56eac:	df000404 	addi	fp,sp,16
   56eb0:	e13ffd15 	stw	r4,-12(fp)
   56eb4:	e17ffe15 	stw	r5,-8(fp)
   56eb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   56ebc:	e0bffd17 	ldw	r2,-12(fp)
   56ec0:	10800017 	ldw	r2,0(r2)
   56ec4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   56ec8:	e0bffc17 	ldw	r2,-16(fp)
   56ecc:	10c00a04 	addi	r3,r2,40
   56ed0:	e0bffd17 	ldw	r2,-12(fp)
   56ed4:	10800217 	ldw	r2,8(r2)
   56ed8:	100f883a 	mov	r7,r2
   56edc:	e1bfff17 	ldw	r6,-4(fp)
   56ee0:	e17ffe17 	ldw	r5,-8(fp)
   56ee4:	1809883a 	mov	r4,r3
   56ee8:	005764c0 	call	5764c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   56eec:	e037883a 	mov	sp,fp
   56ef0:	dfc00117 	ldw	ra,4(sp)
   56ef4:	df000017 	ldw	fp,0(sp)
   56ef8:	dec00204 	addi	sp,sp,8
   56efc:	f800283a 	ret

00056f00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   56f00:	defffa04 	addi	sp,sp,-24
   56f04:	dfc00515 	stw	ra,20(sp)
   56f08:	df000415 	stw	fp,16(sp)
   56f0c:	df000404 	addi	fp,sp,16
   56f10:	e13ffd15 	stw	r4,-12(fp)
   56f14:	e17ffe15 	stw	r5,-8(fp)
   56f18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   56f1c:	e0bffd17 	ldw	r2,-12(fp)
   56f20:	10800017 	ldw	r2,0(r2)
   56f24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   56f28:	e0bffc17 	ldw	r2,-16(fp)
   56f2c:	10c00a04 	addi	r3,r2,40
   56f30:	e0bffd17 	ldw	r2,-12(fp)
   56f34:	10800217 	ldw	r2,8(r2)
   56f38:	100f883a 	mov	r7,r2
   56f3c:	e1bfff17 	ldw	r6,-4(fp)
   56f40:	e17ffe17 	ldw	r5,-8(fp)
   56f44:	1809883a 	mov	r4,r3
   56f48:	00579080 	call	57908 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   56f4c:	e037883a 	mov	sp,fp
   56f50:	dfc00117 	ldw	ra,4(sp)
   56f54:	df000017 	ldw	fp,0(sp)
   56f58:	dec00204 	addi	sp,sp,8
   56f5c:	f800283a 	ret

00056f60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   56f60:	defffc04 	addi	sp,sp,-16
   56f64:	dfc00315 	stw	ra,12(sp)
   56f68:	df000215 	stw	fp,8(sp)
   56f6c:	df000204 	addi	fp,sp,8
   56f70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   56f74:	e0bfff17 	ldw	r2,-4(fp)
   56f78:	10800017 	ldw	r2,0(r2)
   56f7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   56f80:	e0bffe17 	ldw	r2,-8(fp)
   56f84:	10c00a04 	addi	r3,r2,40
   56f88:	e0bfff17 	ldw	r2,-4(fp)
   56f8c:	10800217 	ldw	r2,8(r2)
   56f90:	100b883a 	mov	r5,r2
   56f94:	1809883a 	mov	r4,r3
   56f98:	00574f40 	call	574f4 <altera_avalon_jtag_uart_close>
}
   56f9c:	e037883a 	mov	sp,fp
   56fa0:	dfc00117 	ldw	ra,4(sp)
   56fa4:	df000017 	ldw	fp,0(sp)
   56fa8:	dec00204 	addi	sp,sp,8
   56fac:	f800283a 	ret

00056fb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   56fb0:	defffa04 	addi	sp,sp,-24
   56fb4:	dfc00515 	stw	ra,20(sp)
   56fb8:	df000415 	stw	fp,16(sp)
   56fbc:	df000404 	addi	fp,sp,16
   56fc0:	e13ffd15 	stw	r4,-12(fp)
   56fc4:	e17ffe15 	stw	r5,-8(fp)
   56fc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   56fcc:	e0bffd17 	ldw	r2,-12(fp)
   56fd0:	10800017 	ldw	r2,0(r2)
   56fd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   56fd8:	e0bffc17 	ldw	r2,-16(fp)
   56fdc:	10800a04 	addi	r2,r2,40
   56fe0:	e1bfff17 	ldw	r6,-4(fp)
   56fe4:	e17ffe17 	ldw	r5,-8(fp)
   56fe8:	1009883a 	mov	r4,r2
   56fec:	005755c0 	call	5755c <altera_avalon_jtag_uart_ioctl>
}
   56ff0:	e037883a 	mov	sp,fp
   56ff4:	dfc00117 	ldw	ra,4(sp)
   56ff8:	df000017 	ldw	fp,0(sp)
   56ffc:	dec00204 	addi	sp,sp,8
   57000:	f800283a 	ret

00057004 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   57004:	defff104 	addi	sp,sp,-60
   57008:	dfc00e15 	stw	ra,56(sp)
   5700c:	df000d15 	stw	fp,52(sp)
   57010:	df000d04 	addi	fp,sp,52
   57014:	e13ff915 	stw	r4,-28(fp)
   57018:	e17ffa15 	stw	r5,-24(fp)
   5701c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   57020:	e0bff917 	ldw	r2,-28(fp)
   57024:	10800c04 	addi	r2,r2,48
   57028:	e0bff415 	stw	r2,-48(fp)
   5702c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   57030:	e0bff80b 	ldhu	r2,-32(fp)
   57034:	e0fff884 	addi	r3,fp,-30
   57038:	180b883a 	mov	r5,r3
   5703c:	1009883a 	mov	r4,r2
   57040:	0050fbc0 	call	50fbc <OSFlagCreate>
   57044:	1007883a 	mov	r3,r2
   57048:	e0bff417 	ldw	r2,-48(fp)
   5704c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   57050:	e0bff917 	ldw	r2,-28(fp)
   57054:	10800a04 	addi	r2,r2,40
   57058:	e0bff515 	stw	r2,-44(fp)
   5705c:	00800044 	movi	r2,1
   57060:	e0bff78d 	sth	r2,-34(fp)
   57064:	e0bff78b 	ldhu	r2,-34(fp)
   57068:	1009883a 	mov	r4,r2
   5706c:	00547a40 	call	547a4 <OSSemCreate>
   57070:	1007883a 	mov	r3,r2
   57074:	e0bff517 	ldw	r2,-44(fp)
   57078:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   5707c:	e0bff917 	ldw	r2,-28(fp)
   57080:	10800b04 	addi	r2,r2,44
   57084:	e0bff615 	stw	r2,-40(fp)
   57088:	00800044 	movi	r2,1
   5708c:	e0bff70d 	sth	r2,-36(fp)
   57090:	e0bff70b 	ldhu	r2,-36(fp)
   57094:	1009883a 	mov	r4,r2
   57098:	00547a40 	call	547a4 <OSSemCreate>
   5709c:	1007883a 	mov	r3,r2
   570a0:	e0bff617 	ldw	r2,-40(fp)
   570a4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   570a8:	e0bff917 	ldw	r2,-28(fp)
   570ac:	00c00044 	movi	r3,1
   570b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   570b4:	e0bff917 	ldw	r2,-28(fp)
   570b8:	10800017 	ldw	r2,0(r2)
   570bc:	10800104 	addi	r2,r2,4
   570c0:	1007883a 	mov	r3,r2
   570c4:	e0bff917 	ldw	r2,-28(fp)
   570c8:	10800817 	ldw	r2,32(r2)
   570cc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   570d0:	e0bffa17 	ldw	r2,-24(fp)
   570d4:	e0fffb17 	ldw	r3,-20(fp)
   570d8:	d8000015 	stw	zero,0(sp)
   570dc:	e1fff917 	ldw	r7,-28(fp)
   570e0:	01800174 	movhi	r6,5
   570e4:	319c5304 	addi	r6,r6,29004
   570e8:	180b883a 	mov	r5,r3
   570ec:	1009883a 	mov	r4,r2
   570f0:	004de080 	call	4de08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   570f4:	e0bff917 	ldw	r2,-28(fp)
   570f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   570fc:	e0bff917 	ldw	r2,-28(fp)
   57100:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   57104:	d0e73717 	ldw	r3,-25380(gp)
   57108:	e1fff917 	ldw	r7,-28(fp)
   5710c:	01800174 	movhi	r6,5
   57110:	319cfc04 	addi	r6,r6,29680
   57114:	180b883a 	mov	r5,r3
   57118:	1009883a 	mov	r4,r2
   5711c:	0057f340 	call	57f34 <alt_alarm_start>
   57120:	1000040e 	bge	r2,zero,57134 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   57124:	e0fff917 	ldw	r3,-28(fp)
   57128:	00a00034 	movhi	r2,32768
   5712c:	10bfffc4 	addi	r2,r2,-1
   57130:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   57134:	0001883a 	nop
   57138:	e037883a 	mov	sp,fp
   5713c:	dfc00117 	ldw	ra,4(sp)
   57140:	df000017 	ldw	fp,0(sp)
   57144:	dec00204 	addi	sp,sp,8
   57148:	f800283a 	ret

0005714c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   5714c:	defff204 	addi	sp,sp,-56
   57150:	dfc00d15 	stw	ra,52(sp)
   57154:	df000c15 	stw	fp,48(sp)
   57158:	df000c04 	addi	fp,sp,48
   5715c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   57160:	e0bfff17 	ldw	r2,-4(fp)
   57164:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   57168:	e0bff617 	ldw	r2,-40(fp)
   5716c:	10800017 	ldw	r2,0(r2)
   57170:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   57174:	e0bff717 	ldw	r2,-36(fp)
   57178:	10800104 	addi	r2,r2,4
   5717c:	10800037 	ldwio	r2,0(r2)
   57180:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   57184:	e0bff817 	ldw	r2,-32(fp)
   57188:	1080c00c 	andi	r2,r2,768
   5718c:	10009126 	beq	r2,zero,573d4 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   57190:	e0bff817 	ldw	r2,-32(fp)
   57194:	1080400c 	andi	r2,r2,256
   57198:	10004726 	beq	r2,zero,572b8 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   5719c:	00800074 	movhi	r2,1
   571a0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   571a4:	e0bff617 	ldw	r2,-40(fp)
   571a8:	10800d17 	ldw	r2,52(r2)
   571ac:	10800044 	addi	r2,r2,1
   571b0:	1081ffcc 	andi	r2,r2,2047
   571b4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   571b8:	e0bff617 	ldw	r2,-40(fp)
   571bc:	10c00e17 	ldw	r3,56(r2)
   571c0:	e0bff917 	ldw	r2,-28(fp)
   571c4:	18802726 	beq	r3,r2,57264 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   571c8:	e0bff717 	ldw	r2,-36(fp)
   571cc:	10800037 	ldwio	r2,0(r2)
   571d0:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   571d4:	e0bff417 	ldw	r2,-48(fp)
   571d8:	10a0000c 	andi	r2,r2,32768
   571dc:	10002326 	beq	r2,zero,5726c <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   571e0:	e0bff617 	ldw	r2,-40(fp)
   571e4:	10800d17 	ldw	r2,52(r2)
   571e8:	e0fff417 	ldw	r3,-48(fp)
   571ec:	1809883a 	mov	r4,r3
   571f0:	e0fff617 	ldw	r3,-40(fp)
   571f4:	1885883a 	add	r2,r3,r2
   571f8:	10801104 	addi	r2,r2,68
   571fc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   57200:	e0bff617 	ldw	r2,-40(fp)
   57204:	10800d17 	ldw	r2,52(r2)
   57208:	10800044 	addi	r2,r2,1
   5720c:	10c1ffcc 	andi	r3,r2,2047
   57210:	e0bff617 	ldw	r2,-40(fp)
   57214:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   57218:	e0bff617 	ldw	r2,-40(fp)
   5721c:	10800c17 	ldw	r2,48(r2)
   57220:	e0bffb15 	stw	r2,-20(fp)
   57224:	00800044 	movi	r2,1
   57228:	e0bffc0d 	sth	r2,-16(fp)
   5722c:	00800044 	movi	r2,1
   57230:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   57234:	d0a72243 	ldbu	r2,-25463(gp)
   57238:	10803fcc 	andi	r2,r2,255
   5723c:	103fd926 	beq	r2,zero,571a4 <__alt_data_end+0xffff19a4>
  {
    OSFlagPost (group, flags, opt, &err);
   57240:	e0bffc0b 	ldhu	r2,-16(fp)
   57244:	e0fffc83 	ldbu	r3,-14(fp)
   57248:	e13ffdc4 	addi	r4,fp,-9
   5724c:	200f883a 	mov	r7,r4
   57250:	180d883a 	mov	r6,r3
   57254:	100b883a 	mov	r5,r2
   57258:	e13ffb17 	ldw	r4,-20(fp)
   5725c:	0051b980 	call	51b98 <OSFlagPost>
      }
   57260:	003fd006 	br	571a4 <__alt_data_end+0xffff19a4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   57264:	0001883a 	nop
   57268:	00000106 	br	57270 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   5726c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   57270:	e0bff417 	ldw	r2,-48(fp)
   57274:	10bfffec 	andhi	r2,r2,65535
   57278:	10000f26 	beq	r2,zero,572b8 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   5727c:	e0bff617 	ldw	r2,-40(fp)
   57280:	10c00817 	ldw	r3,32(r2)
   57284:	00bfff84 	movi	r2,-2
   57288:	1886703a 	and	r3,r3,r2
   5728c:	e0bff617 	ldw	r2,-40(fp)
   57290:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   57294:	e0bff717 	ldw	r2,-36(fp)
   57298:	10800104 	addi	r2,r2,4
   5729c:	1007883a 	mov	r3,r2
   572a0:	e0bff617 	ldw	r2,-40(fp)
   572a4:	10800817 	ldw	r2,32(r2)
   572a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   572ac:	e0bff717 	ldw	r2,-36(fp)
   572b0:	10800104 	addi	r2,r2,4
   572b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   572b8:	e0bff817 	ldw	r2,-32(fp)
   572bc:	1080800c 	andi	r2,r2,512
   572c0:	103fac26 	beq	r2,zero,57174 <__alt_data_end+0xffff1974>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   572c4:	e0bff817 	ldw	r2,-32(fp)
   572c8:	1004d43a 	srli	r2,r2,16
   572cc:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   572d0:	00002606 	br	5736c <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   572d4:	e0bff717 	ldw	r2,-36(fp)
   572d8:	e0fff617 	ldw	r3,-40(fp)
   572dc:	18c01017 	ldw	r3,64(r3)
   572e0:	e13ff617 	ldw	r4,-40(fp)
   572e4:	20c7883a 	add	r3,r4,r3
   572e8:	18c21104 	addi	r3,r3,2116
   572ec:	18c00003 	ldbu	r3,0(r3)
   572f0:	18c03fcc 	andi	r3,r3,255
   572f4:	18c0201c 	xori	r3,r3,128
   572f8:	18ffe004 	addi	r3,r3,-128
   572fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   57300:	e0bff617 	ldw	r2,-40(fp)
   57304:	10801017 	ldw	r2,64(r2)
   57308:	10800044 	addi	r2,r2,1
   5730c:	10c1ffcc 	andi	r3,r2,2047
   57310:	e0bff617 	ldw	r2,-40(fp)
   57314:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   57318:	e0bff617 	ldw	r2,-40(fp)
   5731c:	10800c17 	ldw	r2,48(r2)
   57320:	e0bffa15 	stw	r2,-24(fp)
   57324:	00800084 	movi	r2,2
   57328:	e0bffd0d 	sth	r2,-12(fp)
   5732c:	00800044 	movi	r2,1
   57330:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   57334:	d0a72243 	ldbu	r2,-25463(gp)
   57338:	10803fcc 	andi	r2,r2,255
   5733c:	10000826 	beq	r2,zero,57360 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   57340:	e0bffd0b 	ldhu	r2,-12(fp)
   57344:	e0fffd83 	ldbu	r3,-10(fp)
   57348:	e13ffe04 	addi	r4,fp,-8
   5734c:	200f883a 	mov	r7,r4
   57350:	180d883a 	mov	r6,r3
   57354:	100b883a 	mov	r5,r2
   57358:	e13ffa17 	ldw	r4,-24(fp)
   5735c:	0051b980 	call	51b98 <OSFlagPost>

        space--;
   57360:	e0bff517 	ldw	r2,-44(fp)
   57364:	10bfffc4 	addi	r2,r2,-1
   57368:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   5736c:	e0bff517 	ldw	r2,-44(fp)
   57370:	10000526 	beq	r2,zero,57388 <altera_avalon_jtag_uart_irq+0x23c>
   57374:	e0bff617 	ldw	r2,-40(fp)
   57378:	10c01017 	ldw	r3,64(r2)
   5737c:	e0bff617 	ldw	r2,-40(fp)
   57380:	10800f17 	ldw	r2,60(r2)
   57384:	18bfd31e 	bne	r3,r2,572d4 <__alt_data_end+0xffff1ad4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   57388:	e0bff517 	ldw	r2,-44(fp)
   5738c:	103f7926 	beq	r2,zero,57174 <__alt_data_end+0xffff1974>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   57390:	e0bff617 	ldw	r2,-40(fp)
   57394:	10c00817 	ldw	r3,32(r2)
   57398:	00bfff44 	movi	r2,-3
   5739c:	1886703a 	and	r3,r3,r2
   573a0:	e0bff617 	ldw	r2,-40(fp)
   573a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   573a8:	e0bff617 	ldw	r2,-40(fp)
   573ac:	10800017 	ldw	r2,0(r2)
   573b0:	10800104 	addi	r2,r2,4
   573b4:	1007883a 	mov	r3,r2
   573b8:	e0bff617 	ldw	r2,-40(fp)
   573bc:	10800817 	ldw	r2,32(r2)
   573c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   573c4:	e0bff717 	ldw	r2,-36(fp)
   573c8:	10800104 	addi	r2,r2,4
   573cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   573d0:	003f6806 	br	57174 <__alt_data_end+0xffff1974>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   573d4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   573d8:	0001883a 	nop
   573dc:	e037883a 	mov	sp,fp
   573e0:	dfc00117 	ldw	ra,4(sp)
   573e4:	df000017 	ldw	fp,0(sp)
   573e8:	dec00204 	addi	sp,sp,8
   573ec:	f800283a 	ret

000573f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   573f0:	defff904 	addi	sp,sp,-28
   573f4:	dfc00615 	stw	ra,24(sp)
   573f8:	df000515 	stw	fp,20(sp)
   573fc:	df000504 	addi	fp,sp,20
   57400:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   57404:	e0bfff17 	ldw	r2,-4(fp)
   57408:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   5740c:	e0bffb17 	ldw	r2,-20(fp)
   57410:	10800017 	ldw	r2,0(r2)
   57414:	10800104 	addi	r2,r2,4
   57418:	10800037 	ldwio	r2,0(r2)
   5741c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   57420:	e0bffc17 	ldw	r2,-16(fp)
   57424:	1081000c 	andi	r2,r2,1024
   57428:	10000b26 	beq	r2,zero,57458 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   5742c:	e0bffb17 	ldw	r2,-20(fp)
   57430:	10800017 	ldw	r2,0(r2)
   57434:	10800104 	addi	r2,r2,4
   57438:	1007883a 	mov	r3,r2
   5743c:	e0bffb17 	ldw	r2,-20(fp)
   57440:	10800817 	ldw	r2,32(r2)
   57444:	10810014 	ori	r2,r2,1024
   57448:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   5744c:	e0bffb17 	ldw	r2,-20(fp)
   57450:	10000915 	stw	zero,36(r2)
   57454:	00002106 	br	574dc <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   57458:	e0bffb17 	ldw	r2,-20(fp)
   5745c:	10c00917 	ldw	r3,36(r2)
   57460:	00a00034 	movhi	r2,32768
   57464:	10bfff04 	addi	r2,r2,-4
   57468:	10c01c36 	bltu	r2,r3,574dc <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   5746c:	e0bffb17 	ldw	r2,-20(fp)
   57470:	10800917 	ldw	r2,36(r2)
   57474:	10c00044 	addi	r3,r2,1
   57478:	e0bffb17 	ldw	r2,-20(fp)
   5747c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   57480:	e0bffb17 	ldw	r2,-20(fp)
   57484:	10c00917 	ldw	r3,36(r2)
   57488:	e0bffb17 	ldw	r2,-20(fp)
   5748c:	10800117 	ldw	r2,4(r2)
   57490:	18801236 	bltu	r3,r2,574dc <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   57494:	e0bffb17 	ldw	r2,-20(fp)
   57498:	10800c17 	ldw	r2,48(r2)
   5749c:	e0bffd15 	stw	r2,-12(fp)
   574a0:	00800104 	movi	r2,4
   574a4:	e0bffe0d 	sth	r2,-8(fp)
   574a8:	00800044 	movi	r2,1
   574ac:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   574b0:	d0a72243 	ldbu	r2,-25463(gp)
   574b4:	10803fcc 	andi	r2,r2,255
   574b8:	10000826 	beq	r2,zero,574dc <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   574bc:	e0bffe0b 	ldhu	r2,-8(fp)
   574c0:	e0fffe83 	ldbu	r3,-6(fp)
   574c4:	e13ffec4 	addi	r4,fp,-5
   574c8:	200f883a 	mov	r7,r4
   574cc:	180d883a 	mov	r6,r3
   574d0:	100b883a 	mov	r5,r2
   574d4:	e13ffd17 	ldw	r4,-12(fp)
   574d8:	0051b980 	call	51b98 <OSFlagPost>
   574dc:	d0a73717 	ldw	r2,-25380(gp)
    }
  }

  return alt_ticks_per_second();
}
   574e0:	e037883a 	mov	sp,fp
   574e4:	dfc00117 	ldw	ra,4(sp)
   574e8:	df000017 	ldw	fp,0(sp)
   574ec:	dec00204 	addi	sp,sp,8
   574f0:	f800283a 	ret

000574f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   574f4:	defffd04 	addi	sp,sp,-12
   574f8:	df000215 	stw	fp,8(sp)
   574fc:	df000204 	addi	fp,sp,8
   57500:	e13ffe15 	stw	r4,-8(fp)
   57504:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   57508:	00000506 	br	57520 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   5750c:	e0bfff17 	ldw	r2,-4(fp)
   57510:	1090000c 	andi	r2,r2,16384
   57514:	10000226 	beq	r2,zero,57520 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   57518:	00bffd44 	movi	r2,-11
   5751c:	00000b06 	br	5754c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   57520:	e0bffe17 	ldw	r2,-8(fp)
   57524:	10c01017 	ldw	r3,64(r2)
   57528:	e0bffe17 	ldw	r2,-8(fp)
   5752c:	10800f17 	ldw	r2,60(r2)
   57530:	18800526 	beq	r3,r2,57548 <altera_avalon_jtag_uart_close+0x54>
   57534:	e0bffe17 	ldw	r2,-8(fp)
   57538:	10c00917 	ldw	r3,36(r2)
   5753c:	e0bffe17 	ldw	r2,-8(fp)
   57540:	10800117 	ldw	r2,4(r2)
   57544:	18bff136 	bltu	r3,r2,5750c <__alt_data_end+0xffff1d0c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   57548:	0005883a 	mov	r2,zero
}
   5754c:	e037883a 	mov	sp,fp
   57550:	df000017 	ldw	fp,0(sp)
   57554:	dec00104 	addi	sp,sp,4
   57558:	f800283a 	ret

0005755c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   5755c:	defffa04 	addi	sp,sp,-24
   57560:	df000515 	stw	fp,20(sp)
   57564:	df000504 	addi	fp,sp,20
   57568:	e13ffd15 	stw	r4,-12(fp)
   5756c:	e17ffe15 	stw	r5,-8(fp)
   57570:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   57574:	00bff9c4 	movi	r2,-25
   57578:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   5757c:	e0bffe17 	ldw	r2,-8(fp)
   57580:	10da8060 	cmpeqi	r3,r2,27137
   57584:	1800031e 	bne	r3,zero,57594 <altera_avalon_jtag_uart_ioctl+0x38>
   57588:	109a80a0 	cmpeqi	r2,r2,27138
   5758c:	1000181e 	bne	r2,zero,575f0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   57590:	00002906 	br	57638 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   57594:	e0bffd17 	ldw	r2,-12(fp)
   57598:	10c00117 	ldw	r3,4(r2)
   5759c:	00a00034 	movhi	r2,32768
   575a0:	10bfffc4 	addi	r2,r2,-1
   575a4:	18802126 	beq	r3,r2,5762c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   575a8:	e0bfff17 	ldw	r2,-4(fp)
   575ac:	10800017 	ldw	r2,0(r2)
   575b0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   575b4:	e0bffc17 	ldw	r2,-16(fp)
   575b8:	10800090 	cmplti	r2,r2,2
   575bc:	1000061e 	bne	r2,zero,575d8 <altera_avalon_jtag_uart_ioctl+0x7c>
   575c0:	e0fffc17 	ldw	r3,-16(fp)
   575c4:	00a00034 	movhi	r2,32768
   575c8:	10bfffc4 	addi	r2,r2,-1
   575cc:	18800226 	beq	r3,r2,575d8 <altera_avalon_jtag_uart_ioctl+0x7c>
   575d0:	e0bffc17 	ldw	r2,-16(fp)
   575d4:	00000206 	br	575e0 <altera_avalon_jtag_uart_ioctl+0x84>
   575d8:	00a00034 	movhi	r2,32768
   575dc:	10bfff84 	addi	r2,r2,-2
   575e0:	e0fffd17 	ldw	r3,-12(fp)
   575e4:	18800115 	stw	r2,4(r3)
      rc = 0;
   575e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   575ec:	00000f06 	br	5762c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   575f0:	e0bffd17 	ldw	r2,-12(fp)
   575f4:	10c00117 	ldw	r3,4(r2)
   575f8:	00a00034 	movhi	r2,32768
   575fc:	10bfffc4 	addi	r2,r2,-1
   57600:	18800c26 	beq	r3,r2,57634 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   57604:	e0bffd17 	ldw	r2,-12(fp)
   57608:	10c00917 	ldw	r3,36(r2)
   5760c:	e0bffd17 	ldw	r2,-12(fp)
   57610:	10800117 	ldw	r2,4(r2)
   57614:	1885803a 	cmpltu	r2,r3,r2
   57618:	10c03fcc 	andi	r3,r2,255
   5761c:	e0bfff17 	ldw	r2,-4(fp)
   57620:	10c00015 	stw	r3,0(r2)
      rc = 0;
   57624:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   57628:	00000206 	br	57634 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   5762c:	0001883a 	nop
   57630:	00000106 	br	57638 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   57634:	0001883a 	nop

  default:
    break;
  }

  return rc;
   57638:	e0bffb17 	ldw	r2,-20(fp)
}
   5763c:	e037883a 	mov	sp,fp
   57640:	df000017 	ldw	fp,0(sp)
   57644:	dec00104 	addi	sp,sp,4
   57648:	f800283a 	ret

0005764c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   5764c:	deffed04 	addi	sp,sp,-76
   57650:	dfc01215 	stw	ra,72(sp)
   57654:	df001115 	stw	fp,68(sp)
   57658:	df001104 	addi	fp,sp,68
   5765c:	e13ffc15 	stw	r4,-16(fp)
   57660:	e17ffd15 	stw	r5,-12(fp)
   57664:	e1bffe15 	stw	r6,-8(fp)
   57668:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   5766c:	e0bffd17 	ldw	r2,-12(fp)
   57670:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   57674:	e0bffc17 	ldw	r2,-16(fp)
   57678:	10800a17 	ldw	r2,40(r2)
   5767c:	e0bff815 	stw	r2,-32(fp)
   57680:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   57684:	e0bff90b 	ldhu	r2,-28(fp)
   57688:	e0fffb04 	addi	r3,fp,-20
   5768c:	180d883a 	mov	r6,r3
   57690:	100b883a 	mov	r5,r2
   57694:	e13ff817 	ldw	r4,-32(fp)
   57698:	0054abc0 	call	54abc <OSSemPend>

  while (space > 0)
   5769c:	00006106 	br	57824 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   576a0:	e0bffc17 	ldw	r2,-16(fp)
   576a4:	10800d17 	ldw	r2,52(r2)
   576a8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   576ac:	e0bffc17 	ldw	r2,-16(fp)
   576b0:	10800e17 	ldw	r2,56(r2)
   576b4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   576b8:	e0fff317 	ldw	r3,-52(fp)
   576bc:	e0bff417 	ldw	r2,-48(fp)
   576c0:	18800536 	bltu	r3,r2,576d8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   576c4:	e0fff317 	ldw	r3,-52(fp)
   576c8:	e0bff417 	ldw	r2,-48(fp)
   576cc:	1885c83a 	sub	r2,r3,r2
   576d0:	e0bff115 	stw	r2,-60(fp)
   576d4:	00000406 	br	576e8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   576d8:	00c20004 	movi	r3,2048
   576dc:	e0bff417 	ldw	r2,-48(fp)
   576e0:	1885c83a 	sub	r2,r3,r2
   576e4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   576e8:	e0bff117 	ldw	r2,-60(fp)
   576ec:	10001e26 	beq	r2,zero,57768 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   576f0:	e0fffe17 	ldw	r3,-8(fp)
   576f4:	e0bff117 	ldw	r2,-60(fp)
   576f8:	1880022e 	bgeu	r3,r2,57704 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   576fc:	e0bffe17 	ldw	r2,-8(fp)
   57700:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   57704:	e0bffc17 	ldw	r2,-16(fp)
   57708:	10c01104 	addi	r3,r2,68
   5770c:	e0bff417 	ldw	r2,-48(fp)
   57710:	1885883a 	add	r2,r3,r2
   57714:	e1bff117 	ldw	r6,-60(fp)
   57718:	100b883a 	mov	r5,r2
   5771c:	e13ff017 	ldw	r4,-64(fp)
   57720:	00463b40 	call	463b4 <memcpy>
      ptr   += n;
   57724:	e0fff017 	ldw	r3,-64(fp)
   57728:	e0bff117 	ldw	r2,-60(fp)
   5772c:	1885883a 	add	r2,r3,r2
   57730:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   57734:	e0fffe17 	ldw	r3,-8(fp)
   57738:	e0bff117 	ldw	r2,-60(fp)
   5773c:	1885c83a 	sub	r2,r3,r2
   57740:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   57744:	e0fff417 	ldw	r3,-48(fp)
   57748:	e0bff117 	ldw	r2,-60(fp)
   5774c:	1885883a 	add	r2,r3,r2
   57750:	10c1ffcc 	andi	r3,r2,2047
   57754:	e0bffc17 	ldw	r2,-16(fp)
   57758:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   5775c:	e0bffe17 	ldw	r2,-8(fp)
   57760:	00bfcf16 	blt	zero,r2,576a0 <__alt_data_end+0xffff1ea0>
   57764:	00000106 	br	5776c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   57768:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   5776c:	e0fff017 	ldw	r3,-64(fp)
   57770:	e0bffd17 	ldw	r2,-12(fp)
   57774:	18802e1e 	bne	r3,r2,57830 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   57778:	e0bfff17 	ldw	r2,-4(fp)
   5777c:	1090000c 	andi	r2,r2,16384
   57780:	10002d1e 	bne	r2,zero,57838 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   57784:	d0a72243 	ldbu	r2,-25463(gp)
   57788:	10803fcc 	andi	r2,r2,255
   5778c:	10800058 	cmpnei	r2,r2,1
   57790:	1000161e 	bne	r2,zero,577ec <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   57794:	e0bffc17 	ldw	r2,-16(fp)
   57798:	10800c17 	ldw	r2,48(r2)
   5779c:	e0bff215 	stw	r2,-56(fp)
   577a0:	00800144 	movi	r2,5
   577a4:	e0bff98d 	sth	r2,-26(fp)
   577a8:	00bfe0c4 	movi	r2,-125
   577ac:	e0bffa05 	stb	r2,-24(fp)
   577b0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   577b4:	d0a72243 	ldbu	r2,-25463(gp)
   577b8:	10803fcc 	andi	r2,r2,255
   577bc:	10001526 	beq	r2,zero,57814 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   577c0:	e0fff98b 	ldhu	r3,-26(fp)
   577c4:	e13ffa03 	ldbu	r4,-24(fp)
   577c8:	e17ffa8b 	ldhu	r5,-22(fp)
   577cc:	e0bffb44 	addi	r2,fp,-19
   577d0:	d8800015 	stw	r2,0(sp)
   577d4:	280f883a 	mov	r7,r5
   577d8:	200d883a 	mov	r6,r4
   577dc:	180b883a 	mov	r5,r3
   577e0:	e13ff217 	ldw	r4,-56(fp)
   577e4:	00515800 	call	51580 <OSFlagPend>
   577e8:	00000a06 	br	57814 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   577ec:	0001883a 	nop
   577f0:	e0bffc17 	ldw	r2,-16(fp)
   577f4:	10c00d17 	ldw	r3,52(r2)
   577f8:	e0bff317 	ldw	r2,-52(fp)
   577fc:	1880051e 	bne	r3,r2,57814 <altera_avalon_jtag_uart_read+0x1c8>
   57800:	e0bffc17 	ldw	r2,-16(fp)
   57804:	10c00917 	ldw	r3,36(r2)
   57808:	e0bffc17 	ldw	r2,-16(fp)
   5780c:	10800117 	ldw	r2,4(r2)
   57810:	18bff736 	bltu	r3,r2,577f0 <__alt_data_end+0xffff1ff0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   57814:	e0bffc17 	ldw	r2,-16(fp)
   57818:	10c00d17 	ldw	r3,52(r2)
   5781c:	e0bff317 	ldw	r2,-52(fp)
   57820:	18800726 	beq	r3,r2,57840 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   57824:	e0bffe17 	ldw	r2,-8(fp)
   57828:	00bf9d16 	blt	zero,r2,576a0 <__alt_data_end+0xffff1ea0>
   5782c:	00000506 	br	57844 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   57830:	0001883a 	nop
   57834:	00000306 	br	57844 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   57838:	0001883a 	nop
   5783c:	00000106 	br	57844 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   57840:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   57844:	e0bffc17 	ldw	r2,-16(fp)
   57848:	10800a17 	ldw	r2,40(r2)
   5784c:	1009883a 	mov	r4,r2
   57850:	0054e340 	call	54e34 <OSSemPost>

  if (ptr != buffer)
   57854:	e0fff017 	ldw	r3,-64(fp)
   57858:	e0bffd17 	ldw	r2,-12(fp)
   5785c:	18801826 	beq	r3,r2,578c0 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57860:	0005303a 	rdctl	r2,status
   57864:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57868:	e0fff717 	ldw	r3,-36(fp)
   5786c:	00bfff84 	movi	r2,-2
   57870:	1884703a 	and	r2,r3,r2
   57874:	1001703a 	wrctl	status,r2
  
  return context;
   57878:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   5787c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   57880:	e0bffc17 	ldw	r2,-16(fp)
   57884:	10800817 	ldw	r2,32(r2)
   57888:	10c00054 	ori	r3,r2,1
   5788c:	e0bffc17 	ldw	r2,-16(fp)
   57890:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   57894:	e0bffc17 	ldw	r2,-16(fp)
   57898:	10800017 	ldw	r2,0(r2)
   5789c:	10800104 	addi	r2,r2,4
   578a0:	1007883a 	mov	r3,r2
   578a4:	e0bffc17 	ldw	r2,-16(fp)
   578a8:	10800817 	ldw	r2,32(r2)
   578ac:	18800035 	stwio	r2,0(r3)
   578b0:	e0bff617 	ldw	r2,-40(fp)
   578b4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   578b8:	e0bff517 	ldw	r2,-44(fp)
   578bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   578c0:	e0fff017 	ldw	r3,-64(fp)
   578c4:	e0bffd17 	ldw	r2,-12(fp)
   578c8:	18800426 	beq	r3,r2,578dc <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   578cc:	e0fff017 	ldw	r3,-64(fp)
   578d0:	e0bffd17 	ldw	r2,-12(fp)
   578d4:	1885c83a 	sub	r2,r3,r2
   578d8:	00000606 	br	578f4 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   578dc:	e0bfff17 	ldw	r2,-4(fp)
   578e0:	1090000c 	andi	r2,r2,16384
   578e4:	10000226 	beq	r2,zero,578f0 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   578e8:	00bffd44 	movi	r2,-11
   578ec:	00000106 	br	578f4 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   578f0:	00bffec4 	movi	r2,-5
}
   578f4:	e037883a 	mov	sp,fp
   578f8:	dfc00117 	ldw	ra,4(sp)
   578fc:	df000017 	ldw	fp,0(sp)
   57900:	dec00204 	addi	sp,sp,8
   57904:	f800283a 	ret

00057908 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   57908:	deffed04 	addi	sp,sp,-76
   5790c:	dfc01215 	stw	ra,72(sp)
   57910:	df001115 	stw	fp,68(sp)
   57914:	df001104 	addi	fp,sp,68
   57918:	e13ffc15 	stw	r4,-16(fp)
   5791c:	e17ffd15 	stw	r5,-12(fp)
   57920:	e1bffe15 	stw	r6,-8(fp)
   57924:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   57928:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   5792c:	e0bffd17 	ldw	r2,-12(fp)
   57930:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   57934:	e0bffc17 	ldw	r2,-16(fp)
   57938:	10800b17 	ldw	r2,44(r2)
   5793c:	e0bff815 	stw	r2,-32(fp)
   57940:	e03ff90d 	sth	zero,-28(fp)
   57944:	e0bff90b 	ldhu	r2,-28(fp)
   57948:	e0fffb44 	addi	r3,fp,-19
   5794c:	180d883a 	mov	r6,r3
   57950:	100b883a 	mov	r5,r2
   57954:	e13ff817 	ldw	r4,-32(fp)
   57958:	0054abc0 	call	54abc <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   5795c:	00003706 	br	57a3c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   57960:	e0bffc17 	ldw	r2,-16(fp)
   57964:	10800f17 	ldw	r2,60(r2)
   57968:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   5796c:	e0bffc17 	ldw	r2,-16(fp)
   57970:	10801017 	ldw	r2,64(r2)
   57974:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   57978:	e0fff417 	ldw	r3,-48(fp)
   5797c:	e0bff017 	ldw	r2,-64(fp)
   57980:	1880062e 	bgeu	r3,r2,5799c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   57984:	e0fff017 	ldw	r3,-64(fp)
   57988:	e0bff417 	ldw	r2,-48(fp)
   5798c:	1885c83a 	sub	r2,r3,r2
   57990:	10bfffc4 	addi	r2,r2,-1
   57994:	e0bff115 	stw	r2,-60(fp)
   57998:	00000b06 	br	579c8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   5799c:	e0bff017 	ldw	r2,-64(fp)
   579a0:	10000526 	beq	r2,zero,579b8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   579a4:	00c20004 	movi	r3,2048
   579a8:	e0bff417 	ldw	r2,-48(fp)
   579ac:	1885c83a 	sub	r2,r3,r2
   579b0:	e0bff115 	stw	r2,-60(fp)
   579b4:	00000406 	br	579c8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   579b8:	00c1ffc4 	movi	r3,2047
   579bc:	e0bff417 	ldw	r2,-48(fp)
   579c0:	1885c83a 	sub	r2,r3,r2
   579c4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   579c8:	e0bff117 	ldw	r2,-60(fp)
   579cc:	10001e26 	beq	r2,zero,57a48 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   579d0:	e0fffe17 	ldw	r3,-8(fp)
   579d4:	e0bff117 	ldw	r2,-60(fp)
   579d8:	1880022e 	bgeu	r3,r2,579e4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   579dc:	e0bffe17 	ldw	r2,-8(fp)
   579e0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   579e4:	e0bffc17 	ldw	r2,-16(fp)
   579e8:	10c21104 	addi	r3,r2,2116
   579ec:	e0bff417 	ldw	r2,-48(fp)
   579f0:	1885883a 	add	r2,r3,r2
   579f4:	e1bff117 	ldw	r6,-60(fp)
   579f8:	e17ffd17 	ldw	r5,-12(fp)
   579fc:	1009883a 	mov	r4,r2
   57a00:	00463b40 	call	463b4 <memcpy>
      ptr   += n;
   57a04:	e0fffd17 	ldw	r3,-12(fp)
   57a08:	e0bff117 	ldw	r2,-60(fp)
   57a0c:	1885883a 	add	r2,r3,r2
   57a10:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   57a14:	e0fffe17 	ldw	r3,-8(fp)
   57a18:	e0bff117 	ldw	r2,-60(fp)
   57a1c:	1885c83a 	sub	r2,r3,r2
   57a20:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   57a24:	e0fff417 	ldw	r3,-48(fp)
   57a28:	e0bff117 	ldw	r2,-60(fp)
   57a2c:	1885883a 	add	r2,r3,r2
   57a30:	10c1ffcc 	andi	r3,r2,2047
   57a34:	e0bffc17 	ldw	r2,-16(fp)
   57a38:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   57a3c:	e0bffe17 	ldw	r2,-8(fp)
   57a40:	00bfc716 	blt	zero,r2,57960 <__alt_data_end+0xffff2160>
   57a44:	00000106 	br	57a4c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   57a48:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57a4c:	0005303a 	rdctl	r2,status
   57a50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57a54:	e0fff717 	ldw	r3,-36(fp)
   57a58:	00bfff84 	movi	r2,-2
   57a5c:	1884703a 	and	r2,r3,r2
   57a60:	1001703a 	wrctl	status,r2
  
  return context;
   57a64:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   57a68:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   57a6c:	e0bffc17 	ldw	r2,-16(fp)
   57a70:	10800817 	ldw	r2,32(r2)
   57a74:	10c00094 	ori	r3,r2,2
   57a78:	e0bffc17 	ldw	r2,-16(fp)
   57a7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   57a80:	e0bffc17 	ldw	r2,-16(fp)
   57a84:	10800017 	ldw	r2,0(r2)
   57a88:	10800104 	addi	r2,r2,4
   57a8c:	1007883a 	mov	r3,r2
   57a90:	e0bffc17 	ldw	r2,-16(fp)
   57a94:	10800817 	ldw	r2,32(r2)
   57a98:	18800035 	stwio	r2,0(r3)
   57a9c:	e0bff617 	ldw	r2,-40(fp)
   57aa0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   57aa4:	e0bff317 	ldw	r2,-52(fp)
   57aa8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   57aac:	e0bffe17 	ldw	r2,-8(fp)
   57ab0:	00802a0e 	bge	zero,r2,57b5c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   57ab4:	e0bfff17 	ldw	r2,-4(fp)
   57ab8:	1090000c 	andi	r2,r2,16384
   57abc:	10002a1e 	bne	r2,zero,57b68 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   57ac0:	d0a72243 	ldbu	r2,-25463(gp)
   57ac4:	10803fcc 	andi	r2,r2,255
   57ac8:	10800058 	cmpnei	r2,r2,1
   57acc:	1000161e 	bne	r2,zero,57b28 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   57ad0:	e0bffc17 	ldw	r2,-16(fp)
   57ad4:	10800c17 	ldw	r2,48(r2)
   57ad8:	e0bff515 	stw	r2,-44(fp)
   57adc:	00800184 	movi	r2,6
   57ae0:	e0bff98d 	sth	r2,-26(fp)
   57ae4:	00bfe0c4 	movi	r2,-125
   57ae8:	e0bffa05 	stb	r2,-24(fp)
   57aec:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   57af0:	d0a72243 	ldbu	r2,-25463(gp)
   57af4:	10803fcc 	andi	r2,r2,255
   57af8:	10001526 	beq	r2,zero,57b50 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   57afc:	e0fff98b 	ldhu	r3,-26(fp)
   57b00:	e13ffa03 	ldbu	r4,-24(fp)
   57b04:	e17ffa8b 	ldhu	r5,-22(fp)
   57b08:	e0bffb04 	addi	r2,fp,-20
   57b0c:	d8800015 	stw	r2,0(sp)
   57b10:	280f883a 	mov	r7,r5
   57b14:	200d883a 	mov	r6,r4
   57b18:	180b883a 	mov	r5,r3
   57b1c:	e13ff517 	ldw	r4,-44(fp)
   57b20:	00515800 	call	51580 <OSFlagPend>
   57b24:	00000a06 	br	57b50 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   57b28:	0001883a 	nop
   57b2c:	e0bffc17 	ldw	r2,-16(fp)
   57b30:	10c01017 	ldw	r3,64(r2)
   57b34:	e0bff017 	ldw	r2,-64(fp)
   57b38:	1880051e 	bne	r3,r2,57b50 <altera_avalon_jtag_uart_write+0x248>
   57b3c:	e0bffc17 	ldw	r2,-16(fp)
   57b40:	10c00917 	ldw	r3,36(r2)
   57b44:	e0bffc17 	ldw	r2,-16(fp)
   57b48:	10800117 	ldw	r2,4(r2)
   57b4c:	18bff736 	bltu	r3,r2,57b2c <__alt_data_end+0xffff232c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   57b50:	e0bffc17 	ldw	r2,-16(fp)
   57b54:	10800917 	ldw	r2,36(r2)
   57b58:	1000051e 	bne	r2,zero,57b70 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   57b5c:	e0bffe17 	ldw	r2,-8(fp)
   57b60:	00bfb616 	blt	zero,r2,57a3c <__alt_data_end+0xffff223c>
   57b64:	00000306 	br	57b74 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   57b68:	0001883a 	nop
   57b6c:	00000106 	br	57b74 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   57b70:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   57b74:	e0bffc17 	ldw	r2,-16(fp)
   57b78:	10800b17 	ldw	r2,44(r2)
   57b7c:	1009883a 	mov	r4,r2
   57b80:	0054e340 	call	54e34 <OSSemPost>

  if (ptr != start)
   57b84:	e0fffd17 	ldw	r3,-12(fp)
   57b88:	e0bff217 	ldw	r2,-56(fp)
   57b8c:	18800426 	beq	r3,r2,57ba0 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   57b90:	e0fffd17 	ldw	r3,-12(fp)
   57b94:	e0bff217 	ldw	r2,-56(fp)
   57b98:	1885c83a 	sub	r2,r3,r2
   57b9c:	00000606 	br	57bb8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   57ba0:	e0bfff17 	ldw	r2,-4(fp)
   57ba4:	1090000c 	andi	r2,r2,16384
   57ba8:	10000226 	beq	r2,zero,57bb4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   57bac:	00bffd44 	movi	r2,-11
   57bb0:	00000106 	br	57bb8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   57bb4:	00bffec4 	movi	r2,-5
}
   57bb8:	e037883a 	mov	sp,fp
   57bbc:	dfc00117 	ldw	ra,4(sp)
   57bc0:	df000017 	ldw	fp,0(sp)
   57bc4:	dec00204 	addi	sp,sp,8
   57bc8:	f800283a 	ret

00057bcc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   57bcc:	defffa04 	addi	sp,sp,-24
   57bd0:	dfc00515 	stw	ra,20(sp)
   57bd4:	df000415 	stw	fp,16(sp)
   57bd8:	df000404 	addi	fp,sp,16
   57bdc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   57be0:	0007883a 	mov	r3,zero
   57be4:	e0bfff17 	ldw	r2,-4(fp)
   57be8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   57bec:	e0bfff17 	ldw	r2,-4(fp)
   57bf0:	10800104 	addi	r2,r2,4
   57bf4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57bf8:	0005303a 	rdctl	r2,status
   57bfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57c00:	e0fffd17 	ldw	r3,-12(fp)
   57c04:	00bfff84 	movi	r2,-2
   57c08:	1884703a 	and	r2,r3,r2
   57c0c:	1001703a 	wrctl	status,r2
  
  return context;
   57c10:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   57c14:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   57c18:	005875c0 	call	5875c <alt_tick>
   57c1c:	e0bffc17 	ldw	r2,-16(fp)
   57c20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   57c24:	e0bffe17 	ldw	r2,-8(fp)
   57c28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   57c2c:	0001883a 	nop
   57c30:	e037883a 	mov	sp,fp
   57c34:	dfc00117 	ldw	ra,4(sp)
   57c38:	df000017 	ldw	fp,0(sp)
   57c3c:	dec00204 	addi	sp,sp,8
   57c40:	f800283a 	ret

00057c44 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   57c44:	defff804 	addi	sp,sp,-32
   57c48:	dfc00715 	stw	ra,28(sp)
   57c4c:	df000615 	stw	fp,24(sp)
   57c50:	df000604 	addi	fp,sp,24
   57c54:	e13ffc15 	stw	r4,-16(fp)
   57c58:	e17ffd15 	stw	r5,-12(fp)
   57c5c:	e1bffe15 	stw	r6,-8(fp)
   57c60:	e1ffff15 	stw	r7,-4(fp)
   57c64:	e0bfff17 	ldw	r2,-4(fp)
   57c68:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   57c6c:	d0a73717 	ldw	r2,-25380(gp)
   57c70:	1000021e 	bne	r2,zero,57c7c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   57c74:	e0bffb17 	ldw	r2,-20(fp)
   57c78:	d0a73715 	stw	r2,-25380(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   57c7c:	e0bffc17 	ldw	r2,-16(fp)
   57c80:	10800104 	addi	r2,r2,4
   57c84:	00c001c4 	movi	r3,7
   57c88:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   57c8c:	d8000015 	stw	zero,0(sp)
   57c90:	e1fffc17 	ldw	r7,-16(fp)
   57c94:	01800174 	movhi	r6,5
   57c98:	319ef304 	addi	r6,r6,31692
   57c9c:	e17ffe17 	ldw	r5,-8(fp)
   57ca0:	e13ffd17 	ldw	r4,-12(fp)
   57ca4:	004de080 	call	4de08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   57ca8:	0001883a 	nop
   57cac:	e037883a 	mov	sp,fp
   57cb0:	dfc00117 	ldw	ra,4(sp)
   57cb4:	df000017 	ldw	fp,0(sp)
   57cb8:	dec00204 	addi	sp,sp,8
   57cbc:	f800283a 	ret

00057cc0 <check_mm_if_busy>:
#include "unistd.h" //usleep()

// #define DEBUG

int check_mm_if_busy(void)
{
   57cc0:	defffe04 	addi	sp,sp,-8
   57cc4:	df000115 	stw	fp,4(sp)
   57cc8:	df000104 	addi	fp,sp,4
    //Read control register of I2C-mm if
    int res = IORD(I2C_AVALON_MM_IF_0_BASE,CTRL_REG);
   57ccc:	00800234 	movhi	r2,8
   57cd0:	10840004 	addi	r2,r2,4096
   57cd4:	10800037 	ldwio	r2,0(r2)
   57cd8:	e0bfff15 	stw	r2,-4(fp)
    //check if I2C_AVALON_MM_IF state machine is busy
  #ifdef DEBUG
    printf("CTRL: 0x%x\n",res);
  #endif
    if (check_bit(res,MM_IF_BUSY))
   57cdc:	e0bfff17 	ldw	r2,-4(fp)
   57ce0:	1080200c 	andi	r2,r2,128
   57ce4:	10000226 	beq	r2,zero,57cf0 <check_mm_if_busy+0x30>
    {
        return 1;
   57ce8:	00800044 	movi	r2,1
   57cec:	00000106 	br	57cf4 <check_mm_if_busy+0x34>
    }
    else
    {
        return 0;
   57cf0:	0005883a 	mov	r2,zero
    }
}
   57cf4:	e037883a 	mov	sp,fp
   57cf8:	df000017 	ldw	fp,0(sp)
   57cfc:	dec00104 	addi	sp,sp,4
   57d00:	f800283a 	ret

00057d04 <write_to_i2c_device>:

void write_to_i2c_device(alt_u8 i2c_device_addr, alt_u8 i2c_reg_addr,alt_u8 no_bytes,alt_u32 data)
{
   57d04:	defffa04 	addi	sp,sp,-24
   57d08:	dfc00515 	stw	ra,20(sp)
   57d0c:	df000415 	stw	fp,16(sp)
   57d10:	df000404 	addi	fp,sp,16
   57d14:	2807883a 	mov	r3,r5
   57d18:	3005883a 	mov	r2,r6
   57d1c:	e1ffff15 	stw	r7,-4(fp)
   57d20:	e13ffc05 	stb	r4,-16(fp)
   57d24:	e0fffd05 	stb	r3,-12(fp)
   57d28:	e0bffe05 	stb	r2,-8(fp)
    //write to address register of i2c mm if
    IOWR(I2C_AVALON_MM_IF_0_BASE,ADDR_REG, i2c_reg_addr << 8 | i2c_device_addr);
   57d2c:	e0bffd03 	ldbu	r2,-12(fp)
   57d30:	1006923a 	slli	r3,r2,8
   57d34:	e0bffc03 	ldbu	r2,-16(fp)
   57d38:	1886b03a 	or	r3,r3,r2
   57d3c:	00800234 	movhi	r2,8
   57d40:	10840104 	addi	r2,r2,4100
   57d44:	10c00035 	stwio	r3,0(r2)
    //write to the data register of the i2c mm if
    IOWR(I2C_AVALON_MM_IF_0_BASE,WRITE_REG,data);
   57d48:	e0ffff17 	ldw	r3,-4(fp)
   57d4c:	00800234 	movhi	r2,8
   57d50:	10840204 	addi	r2,r2,4104
   57d54:	10c00035 	stwio	r3,0(r2)
    //Set the corresponding bits of the ctrl register to enable the i2c communication
    IOWR(I2C_AVALON_MM_IF_0_BASE,CTRL_REG,no_bytes << 2 | CMD_ENA_WR);
   57d58:	e0bffe03 	ldbu	r2,-8(fp)
   57d5c:	1085883a 	add	r2,r2,r2
   57d60:	1085883a 	add	r2,r2,r2
   57d64:	10c00054 	ori	r3,r2,1
   57d68:	00800234 	movhi	r2,8
   57d6c:	10840004 	addi	r2,r2,4096
   57d70:	10c00035 	stwio	r3,0(r2)
    //Check for busy in the ctrl register (i2c busy or mm if busy), and continue when no longer busy
    while(check_mm_if_busy()) continue;
   57d74:	00000106 	br	57d7c <write_to_i2c_device+0x78>
   57d78:	0001883a 	nop
   57d7c:	0057cc00 	call	57cc0 <check_mm_if_busy>
   57d80:	103ffd1e 	bne	r2,zero,57d78 <__alt_data_end+0xffff2578>
}
   57d84:	0001883a 	nop
   57d88:	e037883a 	mov	sp,fp
   57d8c:	dfc00117 	ldw	ra,4(sp)
   57d90:	df000017 	ldw	fp,0(sp)
   57d94:	dec00204 	addi	sp,sp,8
   57d98:	f800283a 	ret

00057d9c <read_from_i2c_device>:

void read_from_i2c_device(alt_u8 i2c_device_addr,alt_u8 i2c_reg_addr,alt_u8 no_bytes, alt_u8* data)
{
   57d9c:	defff404 	addi	sp,sp,-48
   57da0:	dfc00b15 	stw	ra,44(sp)
   57da4:	df000a15 	stw	fp,40(sp)
   57da8:	df000a04 	addi	fp,sp,40
   57dac:	2807883a 	mov	r3,r5
   57db0:	3005883a 	mov	r2,r6
   57db4:	e1ffff15 	stw	r7,-4(fp)
   57db8:	e13ffc05 	stb	r4,-16(fp)
   57dbc:	e0fffd05 	stb	r3,-12(fp)
   57dc0:	e0bffe05 	stb	r2,-8(fp)
    alt_u32 read_reg[2] = {0};
   57dc4:	0005883a 	mov	r2,zero
   57dc8:	0007883a 	mov	r3,zero
   57dcc:	e0bff815 	stw	r2,-32(fp)
   57dd0:	e0fff915 	stw	r3,-28(fp)
    alt_u8 data_temp[8] = {0};
   57dd4:	e03ffa15 	stw	zero,-24(fp)
   57dd8:	e03ffb15 	stw	zero,-20(fp)

    //write to address register of i2c mm if
    //6..0: 7-bits i2c device addres
    //15..8: 8 bits register address of i2c device
    IOWR(I2C_AVALON_MM_IF_0_BASE,ADDR_REG, i2c_reg_addr << 8 | i2c_device_addr);
   57ddc:	e0bffd03 	ldbu	r2,-12(fp)
   57de0:	1006923a 	slli	r3,r2,8
   57de4:	e0bffc03 	ldbu	r2,-16(fp)
   57de8:	1886b03a 	or	r3,r3,r2
   57dec:	00800234 	movhi	r2,8
   57df0:	10840104 	addi	r2,r2,4100
   57df4:	10c00035 	stwio	r3,0(r2)
    //Write to i2c mm if ctrl register to enable i2c command
    IOWR(I2C_AVALON_MM_IF_0_BASE,CTRL_REG, CMD_ENA_WR);
   57df8:	00c00044 	movi	r3,1
   57dfc:	00800234 	movhi	r2,8
   57e00:	10840004 	addi	r2,r2,4096
   57e04:	10c00035 	stwio	r3,0(r2)
    //Check for busy in the ctrl register (i2c busy or mm if busy), and continue when no longer busy
    while(check_mm_if_busy()) continue;
   57e08:	00000106 	br	57e10 <read_from_i2c_device+0x74>
   57e0c:	0001883a 	nop
   57e10:	0057cc00 	call	57cc0 <check_mm_if_busy>
   57e14:	103ffd1e 	bne	r2,zero,57e0c <__alt_data_end+0xffff260c>

    //no_bytes to be read from the i2c device

    IOWR(I2C_AVALON_MM_IF_0_BASE,CTRL_REG,no_bytes << 2 | CMD_ENA_RD);
   57e18:	e0bffe03 	ldbu	r2,-8(fp)
   57e1c:	1085883a 	add	r2,r2,r2
   57e20:	1085883a 	add	r2,r2,r2
   57e24:	10c000d4 	ori	r3,r2,3
   57e28:	00800234 	movhi	r2,8
   57e2c:	10840004 	addi	r2,r2,4096
   57e30:	10c00035 	stwio	r3,0(r2)
    while(check_mm_if_busy()) continue;
   57e34:	00000106 	br	57e3c <read_from_i2c_device+0xa0>
   57e38:	0001883a 	nop
   57e3c:	0057cc00 	call	57cc0 <check_mm_if_busy>
   57e40:	103ffd1e 	bne	r2,zero,57e38 <__alt_data_end+0xffff2638>

    read_reg[0] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_LOW);
   57e44:	00800234 	movhi	r2,8
   57e48:	10840304 	addi	r2,r2,4108
   57e4c:	10800037 	ldwio	r2,0(r2)
   57e50:	e0bff815 	stw	r2,-32(fp)
    read_reg[1] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_HIGH);
   57e54:	00800234 	movhi	r2,8
   57e58:	10840404 	addi	r2,r2,4112
   57e5c:	10800037 	ldwio	r2,0(r2)
   57e60:	e0bff915 	stw	r2,-28(fp)

    //Move data in to byte array
    for(int i = 0; i<4; i++) {
   57e64:	e03ff615 	stw	zero,-40(fp)
   57e68:	00001606 	br	57ec4 <read_from_i2c_device+0x128>
        data_temp[i] = (read_reg[0] >> i*8) & 0xff;
   57e6c:	e0fff817 	ldw	r3,-32(fp)
   57e70:	e0bff617 	ldw	r2,-40(fp)
   57e74:	100490fa 	slli	r2,r2,3
   57e78:	1884d83a 	srl	r2,r3,r2
   57e7c:	1009883a 	mov	r4,r2
   57e80:	e0fffa04 	addi	r3,fp,-24
   57e84:	e0bff617 	ldw	r2,-40(fp)
   57e88:	1885883a 	add	r2,r3,r2
   57e8c:	11000005 	stb	r4,0(r2)
        data_temp[i+4] = (read_reg[1] >> i*8) & 0xff;
   57e90:	e0bff617 	ldw	r2,-40(fp)
   57e94:	10800104 	addi	r2,r2,4
   57e98:	e13ff917 	ldw	r4,-28(fp)
   57e9c:	e0fff617 	ldw	r3,-40(fp)
   57ea0:	180690fa 	slli	r3,r3,3
   57ea4:	20c6d83a 	srl	r3,r4,r3
   57ea8:	1809883a 	mov	r4,r3
   57eac:	e0fffa04 	addi	r3,fp,-24
   57eb0:	1885883a 	add	r2,r3,r2
   57eb4:	11000005 	stb	r4,0(r2)

    read_reg[0] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_LOW);
    read_reg[1] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_HIGH);

    //Move data in to byte array
    for(int i = 0; i<4; i++) {
   57eb8:	e0bff617 	ldw	r2,-40(fp)
   57ebc:	10800044 	addi	r2,r2,1
   57ec0:	e0bff615 	stw	r2,-40(fp)
   57ec4:	e0bff617 	ldw	r2,-40(fp)
   57ec8:	10800110 	cmplti	r2,r2,4
   57ecc:	103fe71e 	bne	r2,zero,57e6c <__alt_data_end+0xffff266c>
        data_temp[i] = (read_reg[0] >> i*8) & 0xff;
        data_temp[i+4] = (read_reg[1] >> i*8) & 0xff;
    }

    //reverse byte array to have first received byte in the lowest array position
    for(int i = 0; i<no_bytes; i++) {
   57ed0:	e03ff715 	stw	zero,-36(fp)
   57ed4:	00000e06 	br	57f10 <read_from_i2c_device+0x174>
        data[i] = data_temp[(no_bytes-1)-i];
   57ed8:	e0bff717 	ldw	r2,-36(fp)
   57edc:	e0ffff17 	ldw	r3,-4(fp)
   57ee0:	1885883a 	add	r2,r3,r2
   57ee4:	e0fffe03 	ldbu	r3,-8(fp)
   57ee8:	193fffc4 	addi	r4,r3,-1
   57eec:	e0fff717 	ldw	r3,-36(fp)
   57ef0:	20c7c83a 	sub	r3,r4,r3
   57ef4:	e13ffa04 	addi	r4,fp,-24
   57ef8:	20c7883a 	add	r3,r4,r3
   57efc:	18c00003 	ldbu	r3,0(r3)
   57f00:	10c00005 	stb	r3,0(r2)
        data_temp[i] = (read_reg[0] >> i*8) & 0xff;
        data_temp[i+4] = (read_reg[1] >> i*8) & 0xff;
    }

    //reverse byte array to have first received byte in the lowest array position
    for(int i = 0; i<no_bytes; i++) {
   57f04:	e0bff717 	ldw	r2,-36(fp)
   57f08:	10800044 	addi	r2,r2,1
   57f0c:	e0bff715 	stw	r2,-36(fp)
   57f10:	e0bffe03 	ldbu	r2,-8(fp)
   57f14:	e0fff717 	ldw	r3,-36(fp)
   57f18:	18bfef16 	blt	r3,r2,57ed8 <__alt_data_end+0xffff26d8>
        data[i] = data_temp[(no_bytes-1)-i];
        //printf("i: %d, no_bytes: %d\n" ,i,(no_bytes-1)-i);
    }

   57f1c:	0001883a 	nop
   57f20:	e037883a 	mov	sp,fp
   57f24:	dfc00117 	ldw	ra,4(sp)
   57f28:	df000017 	ldw	fp,0(sp)
   57f2c:	dec00204 	addi	sp,sp,8
   57f30:	f800283a 	ret

00057f34 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   57f34:	defff504 	addi	sp,sp,-44
   57f38:	df000a15 	stw	fp,40(sp)
   57f3c:	df000a04 	addi	fp,sp,40
   57f40:	e13ffc15 	stw	r4,-16(fp)
   57f44:	e17ffd15 	stw	r5,-12(fp)
   57f48:	e1bffe15 	stw	r6,-8(fp)
   57f4c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   57f50:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   57f54:	d0a73717 	ldw	r2,-25380(gp)
  
  if (alt_ticks_per_second ())
   57f58:	10003c26 	beq	r2,zero,5804c <alt_alarm_start+0x118>
  {
    if (alarm)
   57f5c:	e0bffc17 	ldw	r2,-16(fp)
   57f60:	10003826 	beq	r2,zero,58044 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   57f64:	e0bffc17 	ldw	r2,-16(fp)
   57f68:	e0fffe17 	ldw	r3,-8(fp)
   57f6c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   57f70:	e0bffc17 	ldw	r2,-16(fp)
   57f74:	e0ffff17 	ldw	r3,-4(fp)
   57f78:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57f7c:	0005303a 	rdctl	r2,status
   57f80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57f84:	e0fff917 	ldw	r3,-28(fp)
   57f88:	00bfff84 	movi	r2,-2
   57f8c:	1884703a 	and	r2,r3,r2
   57f90:	1001703a 	wrctl	status,r2
  
  return context;
   57f94:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   57f98:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   57f9c:	d0a73817 	ldw	r2,-25376(gp)
      
      current_nticks = alt_nticks();
   57fa0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   57fa4:	e0fffd17 	ldw	r3,-12(fp)
   57fa8:	e0bff617 	ldw	r2,-40(fp)
   57fac:	1885883a 	add	r2,r3,r2
   57fb0:	10c00044 	addi	r3,r2,1
   57fb4:	e0bffc17 	ldw	r2,-16(fp)
   57fb8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   57fbc:	e0bffc17 	ldw	r2,-16(fp)
   57fc0:	10c00217 	ldw	r3,8(r2)
   57fc4:	e0bff617 	ldw	r2,-40(fp)
   57fc8:	1880042e 	bgeu	r3,r2,57fdc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   57fcc:	e0bffc17 	ldw	r2,-16(fp)
   57fd0:	00c00044 	movi	r3,1
   57fd4:	10c00405 	stb	r3,16(r2)
   57fd8:	00000206 	br	57fe4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   57fdc:	e0bffc17 	ldw	r2,-16(fp)
   57fe0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   57fe4:	e0bffc17 	ldw	r2,-16(fp)
   57fe8:	d0e02e04 	addi	r3,gp,-32584
   57fec:	e0fffa15 	stw	r3,-24(fp)
   57ff0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   57ff4:	e0bffb17 	ldw	r2,-20(fp)
   57ff8:	e0fffa17 	ldw	r3,-24(fp)
   57ffc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   58000:	e0bffa17 	ldw	r2,-24(fp)
   58004:	10c00017 	ldw	r3,0(r2)
   58008:	e0bffb17 	ldw	r2,-20(fp)
   5800c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   58010:	e0bffa17 	ldw	r2,-24(fp)
   58014:	10800017 	ldw	r2,0(r2)
   58018:	e0fffb17 	ldw	r3,-20(fp)
   5801c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   58020:	e0bffa17 	ldw	r2,-24(fp)
   58024:	e0fffb17 	ldw	r3,-20(fp)
   58028:	10c00015 	stw	r3,0(r2)
   5802c:	e0bff817 	ldw	r2,-32(fp)
   58030:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   58034:	e0bff717 	ldw	r2,-36(fp)
   58038:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   5803c:	0005883a 	mov	r2,zero
   58040:	00000306 	br	58050 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   58044:	00bffa84 	movi	r2,-22
   58048:	00000106 	br	58050 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   5804c:	00bfde84 	movi	r2,-134
  }
}
   58050:	e037883a 	mov	sp,fp
   58054:	df000017 	ldw	fp,0(sp)
   58058:	dec00104 	addi	sp,sp,4
   5805c:	f800283a 	ret

00058060 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   58060:	deffff04 	addi	sp,sp,-4
   58064:	df000015 	stw	fp,0(sp)
   58068:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   5806c:	0001883a 	nop
   58070:	e037883a 	mov	sp,fp
   58074:	df000017 	ldw	fp,0(sp)
   58078:	dec00104 	addi	sp,sp,4
   5807c:	f800283a 	ret

00058080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   58080:	defffe04 	addi	sp,sp,-8
   58084:	dfc00115 	stw	ra,4(sp)
   58088:	df000015 	stw	fp,0(sp)
   5808c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   58090:	d0a00c17 	ldw	r2,-32720(gp)
   58094:	10000326 	beq	r2,zero,580a4 <alt_get_errno+0x24>
   58098:	d0a00c17 	ldw	r2,-32720(gp)
   5809c:	103ee83a 	callr	r2
   580a0:	00000106 	br	580a8 <alt_get_errno+0x28>
   580a4:	d0a71804 	addi	r2,gp,-25504
}
   580a8:	e037883a 	mov	sp,fp
   580ac:	dfc00117 	ldw	ra,4(sp)
   580b0:	df000017 	ldw	fp,0(sp)
   580b4:	dec00204 	addi	sp,sp,8
   580b8:	f800283a 	ret

000580bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   580bc:	defffa04 	addi	sp,sp,-24
   580c0:	dfc00515 	stw	ra,20(sp)
   580c4:	df000415 	stw	fp,16(sp)
   580c8:	df000404 	addi	fp,sp,16
   580cc:	e13ffe15 	stw	r4,-8(fp)
   580d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   580d4:	e0bffe17 	ldw	r2,-8(fp)
   580d8:	10000326 	beq	r2,zero,580e8 <alt_dev_llist_insert+0x2c>
   580dc:	e0bffe17 	ldw	r2,-8(fp)
   580e0:	10800217 	ldw	r2,8(r2)
   580e4:	1000061e 	bne	r2,zero,58100 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   580e8:	00580800 	call	58080 <alt_get_errno>
   580ec:	1007883a 	mov	r3,r2
   580f0:	00800584 	movi	r2,22
   580f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   580f8:	00bffa84 	movi	r2,-22
   580fc:	00001306 	br	5814c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   58100:	e0bffe17 	ldw	r2,-8(fp)
   58104:	e0ffff17 	ldw	r3,-4(fp)
   58108:	e0fffc15 	stw	r3,-16(fp)
   5810c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   58110:	e0bffd17 	ldw	r2,-12(fp)
   58114:	e0fffc17 	ldw	r3,-16(fp)
   58118:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5811c:	e0bffc17 	ldw	r2,-16(fp)
   58120:	10c00017 	ldw	r3,0(r2)
   58124:	e0bffd17 	ldw	r2,-12(fp)
   58128:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5812c:	e0bffc17 	ldw	r2,-16(fp)
   58130:	10800017 	ldw	r2,0(r2)
   58134:	e0fffd17 	ldw	r3,-12(fp)
   58138:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5813c:	e0bffc17 	ldw	r2,-16(fp)
   58140:	e0fffd17 	ldw	r3,-12(fp)
   58144:	10c00015 	stw	r3,0(r2)

  return 0;  
   58148:	0005883a 	mov	r2,zero
}
   5814c:	e037883a 	mov	sp,fp
   58150:	dfc00117 	ldw	ra,4(sp)
   58154:	df000017 	ldw	fp,0(sp)
   58158:	dec00204 	addi	sp,sp,8
   5815c:	f800283a 	ret

00058160 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   58160:	defffd04 	addi	sp,sp,-12
   58164:	dfc00215 	stw	ra,8(sp)
   58168:	df000115 	stw	fp,4(sp)
   5816c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   58170:	008001b4 	movhi	r2,6
   58174:	10a47f04 	addi	r2,r2,-28164
   58178:	e0bfff15 	stw	r2,-4(fp)
   5817c:	00000606 	br	58198 <_do_ctors+0x38>
        (*ctor) (); 
   58180:	e0bfff17 	ldw	r2,-4(fp)
   58184:	10800017 	ldw	r2,0(r2)
   58188:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5818c:	e0bfff17 	ldw	r2,-4(fp)
   58190:	10bfff04 	addi	r2,r2,-4
   58194:	e0bfff15 	stw	r2,-4(fp)
   58198:	e0ffff17 	ldw	r3,-4(fp)
   5819c:	008001b4 	movhi	r2,6
   581a0:	10a48004 	addi	r2,r2,-28160
   581a4:	18bff62e 	bgeu	r3,r2,58180 <__alt_data_end+0xffff2980>
        (*ctor) (); 
}
   581a8:	0001883a 	nop
   581ac:	e037883a 	mov	sp,fp
   581b0:	dfc00117 	ldw	ra,4(sp)
   581b4:	df000017 	ldw	fp,0(sp)
   581b8:	dec00204 	addi	sp,sp,8
   581bc:	f800283a 	ret

000581c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   581c0:	defffd04 	addi	sp,sp,-12
   581c4:	dfc00215 	stw	ra,8(sp)
   581c8:	df000115 	stw	fp,4(sp)
   581cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   581d0:	008001b4 	movhi	r2,6
   581d4:	10a47f04 	addi	r2,r2,-28164
   581d8:	e0bfff15 	stw	r2,-4(fp)
   581dc:	00000606 	br	581f8 <_do_dtors+0x38>
        (*dtor) (); 
   581e0:	e0bfff17 	ldw	r2,-4(fp)
   581e4:	10800017 	ldw	r2,0(r2)
   581e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   581ec:	e0bfff17 	ldw	r2,-4(fp)
   581f0:	10bfff04 	addi	r2,r2,-4
   581f4:	e0bfff15 	stw	r2,-4(fp)
   581f8:	e0ffff17 	ldw	r3,-4(fp)
   581fc:	008001b4 	movhi	r2,6
   58200:	10a48004 	addi	r2,r2,-28160
   58204:	18bff62e 	bgeu	r3,r2,581e0 <__alt_data_end+0xffff29e0>
        (*dtor) (); 
}
   58208:	0001883a 	nop
   5820c:	e037883a 	mov	sp,fp
   58210:	dfc00117 	ldw	ra,4(sp)
   58214:	df000017 	ldw	fp,0(sp)
   58218:	dec00204 	addi	sp,sp,8
   5821c:	f800283a 	ret

00058220 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   58220:	deffff04 	addi	sp,sp,-4
   58224:	df000015 	stw	fp,0(sp)
   58228:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   5822c:	0001883a 	nop
   58230:	e037883a 	mov	sp,fp
   58234:	df000017 	ldw	fp,0(sp)
   58238:	dec00104 	addi	sp,sp,4
   5823c:	f800283a 	ret

00058240 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   58240:	defffe04 	addi	sp,sp,-8
   58244:	df000115 	stw	fp,4(sp)
   58248:	df000104 	addi	fp,sp,4
   5824c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   58250:	e0bfff17 	ldw	r2,-4(fp)
   58254:	10bffe84 	addi	r2,r2,-6
   58258:	10c00428 	cmpgeui	r3,r2,16
   5825c:	18001a1e 	bne	r3,zero,582c8 <alt_exception_cause_generated_bad_addr+0x88>
   58260:	100690ba 	slli	r3,r2,2
   58264:	008001b4 	movhi	r2,6
   58268:	10a09e04 	addi	r2,r2,-32136
   5826c:	1885883a 	add	r2,r3,r2
   58270:	10800017 	ldw	r2,0(r2)
   58274:	1000683a 	jmp	r2
   58278:	000582b8 	rdprs	zero,zero,5642
   5827c:	000582b8 	rdprs	zero,zero,5642
   58280:	000582c8 	cmpgei	zero,zero,5643
   58284:	000582c8 	cmpgei	zero,zero,5643
   58288:	000582c8 	cmpgei	zero,zero,5643
   5828c:	000582b8 	rdprs	zero,zero,5642
   58290:	000582c0 	call	582c <OSCtxSw_SWITCH_PC+0x57ec>
   58294:	000582c8 	cmpgei	zero,zero,5643
   58298:	000582b8 	rdprs	zero,zero,5642
   5829c:	000582b8 	rdprs	zero,zero,5642
   582a0:	000582c8 	cmpgei	zero,zero,5643
   582a4:	000582b8 	rdprs	zero,zero,5642
   582a8:	000582c0 	call	582c <OSCtxSw_SWITCH_PC+0x57ec>
   582ac:	000582c8 	cmpgei	zero,zero,5643
   582b0:	000582c8 	cmpgei	zero,zero,5643
   582b4:	000582b8 	rdprs	zero,zero,5642
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   582b8:	00800044 	movi	r2,1
   582bc:	00000306 	br	582cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   582c0:	0005883a 	mov	r2,zero
   582c4:	00000106 	br	582cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   582c8:	0005883a 	mov	r2,zero
  }
}
   582cc:	e037883a 	mov	sp,fp
   582d0:	df000017 	ldw	fp,0(sp)
   582d4:	dec00104 	addi	sp,sp,4
   582d8:	f800283a 	ret

000582dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   582dc:	defff804 	addi	sp,sp,-32
   582e0:	dfc00715 	stw	ra,28(sp)
   582e4:	df000615 	stw	fp,24(sp)
   582e8:	dc000515 	stw	r16,20(sp)
   582ec:	df000604 	addi	fp,sp,24
   582f0:	e13ffb15 	stw	r4,-20(fp)
   582f4:	e17ffc15 	stw	r5,-16(fp)
   582f8:	e1bffd15 	stw	r6,-12(fp)
   582fc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   58300:	e1bffe17 	ldw	r6,-8(fp)
   58304:	e17ffd17 	ldw	r5,-12(fp)
   58308:	e13ffc17 	ldw	r4,-16(fp)
   5830c:	00585640 	call	58564 <open>
   58310:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   58314:	e0bffa17 	ldw	r2,-24(fp)
   58318:	10002216 	blt	r2,zero,583a4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   5831c:	040001b4 	movhi	r16,6
   58320:	8427c804 	addi	r16,r16,-24800
   58324:	e0bffa17 	ldw	r2,-24(fp)
   58328:	01400304 	movi	r5,12
   5832c:	1009883a 	mov	r4,r2
   58330:	00407040 	call	40704 <__mulsi3>
   58334:	8085883a 	add	r2,r16,r2
   58338:	10c00017 	ldw	r3,0(r2)
   5833c:	e0bffb17 	ldw	r2,-20(fp)
   58340:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   58344:	040001b4 	movhi	r16,6
   58348:	8427c804 	addi	r16,r16,-24800
   5834c:	e0bffa17 	ldw	r2,-24(fp)
   58350:	01400304 	movi	r5,12
   58354:	1009883a 	mov	r4,r2
   58358:	00407040 	call	40704 <__mulsi3>
   5835c:	8085883a 	add	r2,r16,r2
   58360:	10800104 	addi	r2,r2,4
   58364:	10c00017 	ldw	r3,0(r2)
   58368:	e0bffb17 	ldw	r2,-20(fp)
   5836c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   58370:	040001b4 	movhi	r16,6
   58374:	8427c804 	addi	r16,r16,-24800
   58378:	e0bffa17 	ldw	r2,-24(fp)
   5837c:	01400304 	movi	r5,12
   58380:	1009883a 	mov	r4,r2
   58384:	00407040 	call	40704 <__mulsi3>
   58388:	8085883a 	add	r2,r16,r2
   5838c:	10800204 	addi	r2,r2,8
   58390:	10c00017 	ldw	r3,0(r2)
   58394:	e0bffb17 	ldw	r2,-20(fp)
   58398:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   5839c:	e13ffa17 	ldw	r4,-24(fp)
   583a0:	004e5900 	call	4e590 <alt_release_fd>
  }
} 
   583a4:	0001883a 	nop
   583a8:	e6ffff04 	addi	sp,fp,-4
   583ac:	dfc00217 	ldw	ra,8(sp)
   583b0:	df000117 	ldw	fp,4(sp)
   583b4:	dc000017 	ldw	r16,0(sp)
   583b8:	dec00304 	addi	sp,sp,12
   583bc:	f800283a 	ret

000583c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   583c0:	defffb04 	addi	sp,sp,-20
   583c4:	dfc00415 	stw	ra,16(sp)
   583c8:	df000315 	stw	fp,12(sp)
   583cc:	df000304 	addi	fp,sp,12
   583d0:	e13ffd15 	stw	r4,-12(fp)
   583d4:	e17ffe15 	stw	r5,-8(fp)
   583d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   583dc:	01c07fc4 	movi	r7,511
   583e0:	01800044 	movi	r6,1
   583e4:	e17ffd17 	ldw	r5,-12(fp)
   583e8:	010001b4 	movhi	r4,6
   583ec:	2127cb04 	addi	r4,r4,-24788
   583f0:	00582dc0 	call	582dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   583f4:	01c07fc4 	movi	r7,511
   583f8:	000d883a 	mov	r6,zero
   583fc:	e17ffe17 	ldw	r5,-8(fp)
   58400:	010001b4 	movhi	r4,6
   58404:	2127c804 	addi	r4,r4,-24800
   58408:	00582dc0 	call	582dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   5840c:	01c07fc4 	movi	r7,511
   58410:	01800044 	movi	r6,1
   58414:	e17fff17 	ldw	r5,-4(fp)
   58418:	010001b4 	movhi	r4,6
   5841c:	2127ce04 	addi	r4,r4,-24776
   58420:	00582dc0 	call	582dc <alt_open_fd>
}  
   58424:	0001883a 	nop
   58428:	e037883a 	mov	sp,fp
   5842c:	dfc00117 	ldw	ra,4(sp)
   58430:	df000017 	ldw	fp,0(sp)
   58434:	dec00204 	addi	sp,sp,8
   58438:	f800283a 	ret

0005843c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5843c:	defffe04 	addi	sp,sp,-8
   58440:	dfc00115 	stw	ra,4(sp)
   58444:	df000015 	stw	fp,0(sp)
   58448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5844c:	d0a00c17 	ldw	r2,-32720(gp)
   58450:	10000326 	beq	r2,zero,58460 <alt_get_errno+0x24>
   58454:	d0a00c17 	ldw	r2,-32720(gp)
   58458:	103ee83a 	callr	r2
   5845c:	00000106 	br	58464 <alt_get_errno+0x28>
   58460:	d0a71804 	addi	r2,gp,-25504
}
   58464:	e037883a 	mov	sp,fp
   58468:	dfc00117 	ldw	ra,4(sp)
   5846c:	df000017 	ldw	fp,0(sp)
   58470:	dec00204 	addi	sp,sp,8
   58474:	f800283a 	ret

00058478 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   58478:	defffb04 	addi	sp,sp,-20
   5847c:	dfc00415 	stw	ra,16(sp)
   58480:	df000315 	stw	fp,12(sp)
   58484:	dc000215 	stw	r16,8(sp)
   58488:	df000304 	addi	fp,sp,12
   5848c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   58490:	e0bffe17 	ldw	r2,-8(fp)
   58494:	10800217 	ldw	r2,8(r2)
   58498:	10d00034 	orhi	r3,r2,16384
   5849c:	e0bffe17 	ldw	r2,-8(fp)
   584a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   584a4:	e03ffd15 	stw	zero,-12(fp)
   584a8:	00002306 	br	58538 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   584ac:	040001b4 	movhi	r16,6
   584b0:	8427c804 	addi	r16,r16,-24800
   584b4:	e0bffd17 	ldw	r2,-12(fp)
   584b8:	01400304 	movi	r5,12
   584bc:	1009883a 	mov	r4,r2
   584c0:	00407040 	call	40704 <__mulsi3>
   584c4:	8085883a 	add	r2,r16,r2
   584c8:	10c00017 	ldw	r3,0(r2)
   584cc:	e0bffe17 	ldw	r2,-8(fp)
   584d0:	10800017 	ldw	r2,0(r2)
   584d4:	1880151e 	bne	r3,r2,5852c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   584d8:	040001b4 	movhi	r16,6
   584dc:	8427c804 	addi	r16,r16,-24800
   584e0:	e0bffd17 	ldw	r2,-12(fp)
   584e4:	01400304 	movi	r5,12
   584e8:	1009883a 	mov	r4,r2
   584ec:	00407040 	call	40704 <__mulsi3>
   584f0:	8085883a 	add	r2,r16,r2
   584f4:	10800204 	addi	r2,r2,8
   584f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   584fc:	10000b0e 	bge	r2,zero,5852c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   58500:	01400304 	movi	r5,12
   58504:	e13ffd17 	ldw	r4,-12(fp)
   58508:	00407040 	call	40704 <__mulsi3>
   5850c:	1007883a 	mov	r3,r2
   58510:	008001b4 	movhi	r2,6
   58514:	10a7c804 	addi	r2,r2,-24800
   58518:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   5851c:	e0bffe17 	ldw	r2,-8(fp)
   58520:	18800226 	beq	r3,r2,5852c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   58524:	00bffcc4 	movi	r2,-13
   58528:	00000806 	br	5854c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   5852c:	e0bffd17 	ldw	r2,-12(fp)
   58530:	10800044 	addi	r2,r2,1
   58534:	e0bffd15 	stw	r2,-12(fp)
   58538:	d0a00b17 	ldw	r2,-32724(gp)
   5853c:	1007883a 	mov	r3,r2
   58540:	e0bffd17 	ldw	r2,-12(fp)
   58544:	18bfd92e 	bgeu	r3,r2,584ac <__alt_data_end+0xffff2cac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   58548:	0005883a 	mov	r2,zero
}
   5854c:	e6ffff04 	addi	sp,fp,-4
   58550:	dfc00217 	ldw	ra,8(sp)
   58554:	df000117 	ldw	fp,4(sp)
   58558:	dc000017 	ldw	r16,0(sp)
   5855c:	dec00304 	addi	sp,sp,12
   58560:	f800283a 	ret

00058564 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   58564:	defff604 	addi	sp,sp,-40
   58568:	dfc00915 	stw	ra,36(sp)
   5856c:	df000815 	stw	fp,32(sp)
   58570:	df000804 	addi	fp,sp,32
   58574:	e13ffd15 	stw	r4,-12(fp)
   58578:	e17ffe15 	stw	r5,-8(fp)
   5857c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   58580:	00bfffc4 	movi	r2,-1
   58584:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   58588:	00bffb44 	movi	r2,-19
   5858c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   58590:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   58594:	d1600904 	addi	r5,gp,-32732
   58598:	e13ffd17 	ldw	r4,-12(fp)
   5859c:	0058be00 	call	58be0 <alt_find_dev>
   585a0:	e0bff815 	stw	r2,-32(fp)
   585a4:	e0bff817 	ldw	r2,-32(fp)
   585a8:	1000051e 	bne	r2,zero,585c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   585ac:	e13ffd17 	ldw	r4,-12(fp)
   585b0:	0058c700 	call	58c70 <alt_find_file>
   585b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   585b8:	00800044 	movi	r2,1
   585bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   585c0:	e0bff817 	ldw	r2,-32(fp)
   585c4:	10002b26 	beq	r2,zero,58674 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   585c8:	e13ff817 	ldw	r4,-32(fp)
   585cc:	0058d780 	call	58d78 <alt_get_fd>
   585d0:	e0bff915 	stw	r2,-28(fp)
   585d4:	e0bff917 	ldw	r2,-28(fp)
   585d8:	1000030e 	bge	r2,zero,585e8 <open+0x84>
    {
      status = index;
   585dc:	e0bff917 	ldw	r2,-28(fp)
   585e0:	e0bffa15 	stw	r2,-24(fp)
   585e4:	00002506 	br	5867c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   585e8:	01400304 	movi	r5,12
   585ec:	e13ff917 	ldw	r4,-28(fp)
   585f0:	00407040 	call	40704 <__mulsi3>
   585f4:	1007883a 	mov	r3,r2
   585f8:	008001b4 	movhi	r2,6
   585fc:	10a7c804 	addi	r2,r2,-24800
   58600:	1885883a 	add	r2,r3,r2
   58604:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   58608:	e0fffe17 	ldw	r3,-8(fp)
   5860c:	00900034 	movhi	r2,16384
   58610:	10bfffc4 	addi	r2,r2,-1
   58614:	1886703a 	and	r3,r3,r2
   58618:	e0bffc17 	ldw	r2,-16(fp)
   5861c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   58620:	e0bffb17 	ldw	r2,-20(fp)
   58624:	1000051e 	bne	r2,zero,5863c <open+0xd8>
   58628:	e13ffc17 	ldw	r4,-16(fp)
   5862c:	00584780 	call	58478 <alt_file_locked>
   58630:	e0bffa15 	stw	r2,-24(fp)
   58634:	e0bffa17 	ldw	r2,-24(fp)
   58638:	10001016 	blt	r2,zero,5867c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   5863c:	e0bff817 	ldw	r2,-32(fp)
   58640:	10800317 	ldw	r2,12(r2)
   58644:	10000826 	beq	r2,zero,58668 <open+0x104>
   58648:	e0bff817 	ldw	r2,-32(fp)
   5864c:	10800317 	ldw	r2,12(r2)
   58650:	e1ffff17 	ldw	r7,-4(fp)
   58654:	e1bffe17 	ldw	r6,-8(fp)
   58658:	e17ffd17 	ldw	r5,-12(fp)
   5865c:	e13ffc17 	ldw	r4,-16(fp)
   58660:	103ee83a 	callr	r2
   58664:	00000106 	br	5866c <open+0x108>
   58668:	0005883a 	mov	r2,zero
   5866c:	e0bffa15 	stw	r2,-24(fp)
   58670:	00000206 	br	5867c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   58674:	00bffb44 	movi	r2,-19
   58678:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   5867c:	e0bffa17 	ldw	r2,-24(fp)
   58680:	1000090e 	bge	r2,zero,586a8 <open+0x144>
  {
    alt_release_fd (index);  
   58684:	e13ff917 	ldw	r4,-28(fp)
   58688:	004e5900 	call	4e590 <alt_release_fd>
    ALT_ERRNO = -status;
   5868c:	005843c0 	call	5843c <alt_get_errno>
   58690:	1007883a 	mov	r3,r2
   58694:	e0bffa17 	ldw	r2,-24(fp)
   58698:	0085c83a 	sub	r2,zero,r2
   5869c:	18800015 	stw	r2,0(r3)
    return -1;
   586a0:	00bfffc4 	movi	r2,-1
   586a4:	00000106 	br	586ac <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   586a8:	e0bff917 	ldw	r2,-28(fp)
}
   586ac:	e037883a 	mov	sp,fp
   586b0:	dfc00117 	ldw	ra,4(sp)
   586b4:	df000017 	ldw	fp,0(sp)
   586b8:	dec00204 	addi	sp,sp,8
   586bc:	f800283a 	ret

000586c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   586c0:	defffa04 	addi	sp,sp,-24
   586c4:	df000515 	stw	fp,20(sp)
   586c8:	df000504 	addi	fp,sp,20
   586cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   586d0:	0005303a 	rdctl	r2,status
   586d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   586d8:	e0fffc17 	ldw	r3,-16(fp)
   586dc:	00bfff84 	movi	r2,-2
   586e0:	1884703a 	and	r2,r3,r2
   586e4:	1001703a 	wrctl	status,r2
  
  return context;
   586e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   586ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   586f0:	e0bfff17 	ldw	r2,-4(fp)
   586f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   586f8:	e0bffd17 	ldw	r2,-12(fp)
   586fc:	10800017 	ldw	r2,0(r2)
   58700:	e0fffd17 	ldw	r3,-12(fp)
   58704:	18c00117 	ldw	r3,4(r3)
   58708:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   5870c:	e0bffd17 	ldw	r2,-12(fp)
   58710:	10800117 	ldw	r2,4(r2)
   58714:	e0fffd17 	ldw	r3,-12(fp)
   58718:	18c00017 	ldw	r3,0(r3)
   5871c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   58720:	e0bffd17 	ldw	r2,-12(fp)
   58724:	e0fffd17 	ldw	r3,-12(fp)
   58728:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   5872c:	e0bffd17 	ldw	r2,-12(fp)
   58730:	e0fffd17 	ldw	r3,-12(fp)
   58734:	10c00015 	stw	r3,0(r2)
   58738:	e0bffb17 	ldw	r2,-20(fp)
   5873c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   58740:	e0bffe17 	ldw	r2,-8(fp)
   58744:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   58748:	0001883a 	nop
   5874c:	e037883a 	mov	sp,fp
   58750:	df000017 	ldw	fp,0(sp)
   58754:	dec00104 	addi	sp,sp,4
   58758:	f800283a 	ret

0005875c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   5875c:	defffb04 	addi	sp,sp,-20
   58760:	dfc00415 	stw	ra,16(sp)
   58764:	df000315 	stw	fp,12(sp)
   58768:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   5876c:	d0a02e17 	ldw	r2,-32584(gp)
   58770:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   58774:	d0a73817 	ldw	r2,-25376(gp)
   58778:	10800044 	addi	r2,r2,1
   5877c:	d0a73815 	stw	r2,-25376(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   58780:	00002e06 	br	5883c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   58784:	e0bffd17 	ldw	r2,-12(fp)
   58788:	10800017 	ldw	r2,0(r2)
   5878c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   58790:	e0bffd17 	ldw	r2,-12(fp)
   58794:	10800403 	ldbu	r2,16(r2)
   58798:	10803fcc 	andi	r2,r2,255
   5879c:	10000426 	beq	r2,zero,587b0 <alt_tick+0x54>
   587a0:	d0a73817 	ldw	r2,-25376(gp)
   587a4:	1000021e 	bne	r2,zero,587b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   587a8:	e0bffd17 	ldw	r2,-12(fp)
   587ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   587b0:	e0bffd17 	ldw	r2,-12(fp)
   587b4:	10800217 	ldw	r2,8(r2)
   587b8:	d0e73817 	ldw	r3,-25376(gp)
   587bc:	18801d36 	bltu	r3,r2,58834 <alt_tick+0xd8>
   587c0:	e0bffd17 	ldw	r2,-12(fp)
   587c4:	10800403 	ldbu	r2,16(r2)
   587c8:	10803fcc 	andi	r2,r2,255
   587cc:	1000191e 	bne	r2,zero,58834 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   587d0:	e0bffd17 	ldw	r2,-12(fp)
   587d4:	10800317 	ldw	r2,12(r2)
   587d8:	e0fffd17 	ldw	r3,-12(fp)
   587dc:	18c00517 	ldw	r3,20(r3)
   587e0:	1809883a 	mov	r4,r3
   587e4:	103ee83a 	callr	r2
   587e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   587ec:	e0bfff17 	ldw	r2,-4(fp)
   587f0:	1000031e 	bne	r2,zero,58800 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   587f4:	e13ffd17 	ldw	r4,-12(fp)
   587f8:	00586c00 	call	586c0 <alt_alarm_stop>
   587fc:	00000d06 	br	58834 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   58800:	e0bffd17 	ldw	r2,-12(fp)
   58804:	10c00217 	ldw	r3,8(r2)
   58808:	e0bfff17 	ldw	r2,-4(fp)
   5880c:	1887883a 	add	r3,r3,r2
   58810:	e0bffd17 	ldw	r2,-12(fp)
   58814:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   58818:	e0bffd17 	ldw	r2,-12(fp)
   5881c:	10c00217 	ldw	r3,8(r2)
   58820:	d0a73817 	ldw	r2,-25376(gp)
   58824:	1880032e 	bgeu	r3,r2,58834 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   58828:	e0bffd17 	ldw	r2,-12(fp)
   5882c:	00c00044 	movi	r3,1
   58830:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   58834:	e0bffe17 	ldw	r2,-8(fp)
   58838:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   5883c:	e0fffd17 	ldw	r3,-12(fp)
   58840:	d0a02e04 	addi	r2,gp,-32584
   58844:	18bfcf1e 	bne	r3,r2,58784 <__alt_data_end+0xffff2f84>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   58848:	004f7a40 	call	4f7a4 <OSTimeTick>
}
   5884c:	0001883a 	nop
   58850:	e037883a 	mov	sp,fp
   58854:	dfc00117 	ldw	ra,4(sp)
   58858:	df000017 	ldw	fp,0(sp)
   5885c:	dec00204 	addi	sp,sp,8
   58860:	f800283a 	ret

00058864 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   58864:	deffff04 	addi	sp,sp,-4
   58868:	df000015 	stw	fp,0(sp)
   5886c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   58870:	000170fa 	wrctl	ienable,zero
}
   58874:	0001883a 	nop
   58878:	e037883a 	mov	sp,fp
   5887c:	df000017 	ldw	fp,0(sp)
   58880:	dec00104 	addi	sp,sp,4
   58884:	f800283a 	ret

00058888 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   58888:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   5888c:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   58890:	d1273117 	ldw	r4,-25404(gp)

      stw ra,  0(sp)
   58894:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   58898:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   5889c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   588a0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   588a4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   588a8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   588ac:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   588b0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   588b4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   588b8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   588bc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   588c0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   588c4:	0058afc0 	call	58afc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   588c8:	d1272c17 	ldw	r4,-25424(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   588cc:	d1672407 	ldb	r5,-25456(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   588d0:	d1273115 	stw	r4,-25404(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   588d4:	d1672445 	stb	r5,-25455(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   588d8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   588dc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   588e0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   588e4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   588e8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   588ec:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   588f0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   588f4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   588f8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   588fc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   58900:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   58904:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   58908:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   5890c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   58910:	f800283a 	ret

00058914 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   58914:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   58918:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   5891c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   58920:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   58924:	0058afc0 	call	58afc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   58928:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   5892c:	d4a72245 	stb	r18,-25463(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   58930:	003fe506 	br	588c8 <__alt_data_end+0xffff30c8>

00058934 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   58934:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   58938:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   5893c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   58940:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   58944:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   58948:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   5894c:	dec00204 	addi	sp,sp,8

      callr r2
   58950:	103ee83a 	callr	r2

      nop
   58954:	0001883a 	nop

00058958 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   58958:	defff704 	addi	sp,sp,-36
   5895c:	dfc00815 	stw	ra,32(sp)
   58960:	df000715 	stw	fp,28(sp)
   58964:	df000704 	addi	fp,sp,28
   58968:	e13ffc15 	stw	r4,-16(fp)
   5896c:	e17ffd15 	stw	r5,-12(fp)
   58970:	e1bffe15 	stw	r6,-8(fp)
   58974:	3805883a 	mov	r2,r7
   58978:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   5897c:	e0fffe17 	ldw	r3,-8(fp)
   58980:	00bfff04 	movi	r2,-4
   58984:	1884703a 	and	r2,r3,r2
   58988:	10bef704 	addi	r2,r2,-1060
   5898c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   58990:	01810904 	movi	r6,1060
   58994:	000b883a 	mov	r5,zero
   58998:	e13ff917 	ldw	r4,-28(fp)
   5899c:	00464fc0 	call	464fc <memset>
   589a0:	e0bff917 	ldw	r2,-28(fp)
   589a4:	10c0bb04 	addi	r3,r2,748
   589a8:	e0bff917 	ldw	r2,-28(fp)
   589ac:	10c00115 	stw	r3,4(r2)
   589b0:	e0bff917 	ldw	r2,-28(fp)
   589b4:	10c0d504 	addi	r3,r2,852
   589b8:	e0bff917 	ldw	r2,-28(fp)
   589bc:	10c00215 	stw	r3,8(r2)
   589c0:	e0bff917 	ldw	r2,-28(fp)
   589c4:	10c0ef04 	addi	r3,r2,956
   589c8:	e0bff917 	ldw	r2,-28(fp)
   589cc:	10c00315 	stw	r3,12(r2)
   589d0:	e0fff917 	ldw	r3,-28(fp)
   589d4:	008001b4 	movhi	r2,6
   589d8:	10a59404 	addi	r2,r2,-27056
   589dc:	18800d15 	stw	r2,52(r3)
   589e0:	e0bff917 	ldw	r2,-28(fp)
   589e4:	00c00044 	movi	r3,1
   589e8:	10c02915 	stw	r3,164(r2)
   589ec:	10002a15 	stw	zero,168(r2)
   589f0:	e0bff917 	ldw	r2,-28(fp)
   589f4:	00ccc384 	movi	r3,13070
   589f8:	10c02b0d 	sth	r3,172(r2)
   589fc:	e0bff917 	ldw	r2,-28(fp)
   58a00:	00eaf344 	movi	r3,-21555
   58a04:	10c02b8d 	sth	r3,174(r2)
   58a08:	e0bff917 	ldw	r2,-28(fp)
   58a0c:	00c48d04 	movi	r3,4660
   58a10:	10c02c0d 	sth	r3,176(r2)
   58a14:	e0bff917 	ldw	r2,-28(fp)
   58a18:	00f99b44 	movi	r3,-6547
   58a1c:	10c02c8d 	sth	r3,178(r2)
   58a20:	e0bff917 	ldw	r2,-28(fp)
   58a24:	00f7bb04 	movi	r3,-8468
   58a28:	10c02d0d 	sth	r3,180(r2)
   58a2c:	e0bff917 	ldw	r2,-28(fp)
   58a30:	00c00144 	movi	r3,5
   58a34:	10c02d8d 	sth	r3,182(r2)
   58a38:	e0bff917 	ldw	r2,-28(fp)
   58a3c:	00c002c4 	movi	r3,11
   58a40:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   58a44:	e0bff917 	ldw	r2,-28(fp)
   58a48:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   58a4c:	e0bffa17 	ldw	r2,-24(fp)
   58a50:	10bff304 	addi	r2,r2,-52
   58a54:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   58a58:	e0bffb17 	ldw	r2,-20(fp)
   58a5c:	10800c04 	addi	r2,r2,48
   58a60:	e0fffc17 	ldw	r3,-16(fp)
   58a64:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   58a68:	e0bffb17 	ldw	r2,-20(fp)
   58a6c:	10800b04 	addi	r2,r2,44
   58a70:	e0fffd17 	ldw	r3,-12(fp)
   58a74:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   58a78:	e0bffb17 	ldw	r2,-20(fp)
   58a7c:	10800a04 	addi	r2,r2,40
   58a80:	e0fff917 	ldw	r3,-28(fp)
   58a84:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   58a88:	008001b4 	movhi	r2,6
   58a8c:	10a24d04 	addi	r2,r2,-30412
   58a90:	10c00104 	addi	r3,r2,4
   58a94:	e0bffb17 	ldw	r2,-20(fp)
   58a98:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   58a9c:	e0bffb17 	ldw	r2,-20(fp)
}
   58aa0:	e037883a 	mov	sp,fp
   58aa4:	dfc00117 	ldw	ra,4(sp)
   58aa8:	df000017 	ldw	fp,0(sp)
   58aac:	dec00204 	addi	sp,sp,8
   58ab0:	f800283a 	ret

00058ab4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   58ab4:	defffe04 	addi	sp,sp,-8
   58ab8:	df000115 	stw	fp,4(sp)
   58abc:	df000104 	addi	fp,sp,4
   58ac0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   58ac4:	0001883a 	nop
   58ac8:	e037883a 	mov	sp,fp
   58acc:	df000017 	ldw	fp,0(sp)
   58ad0:	dec00104 	addi	sp,sp,4
   58ad4:	f800283a 	ret

00058ad8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   58ad8:	defffe04 	addi	sp,sp,-8
   58adc:	df000115 	stw	fp,4(sp)
   58ae0:	df000104 	addi	fp,sp,4
   58ae4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   58ae8:	0001883a 	nop
   58aec:	e037883a 	mov	sp,fp
   58af0:	df000017 	ldw	fp,0(sp)
   58af4:	dec00104 	addi	sp,sp,4
   58af8:	f800283a 	ret

00058afc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   58afc:	deffff04 	addi	sp,sp,-4
   58b00:	df000015 	stw	fp,0(sp)
   58b04:	d839883a 	mov	fp,sp
}
   58b08:	0001883a 	nop
   58b0c:	e037883a 	mov	sp,fp
   58b10:	df000017 	ldw	fp,0(sp)
   58b14:	dec00104 	addi	sp,sp,4
   58b18:	f800283a 	ret

00058b1c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   58b1c:	deffff04 	addi	sp,sp,-4
   58b20:	df000015 	stw	fp,0(sp)
   58b24:	d839883a 	mov	fp,sp
}
   58b28:	0001883a 	nop
   58b2c:	e037883a 	mov	sp,fp
   58b30:	df000017 	ldw	fp,0(sp)
   58b34:	dec00104 	addi	sp,sp,4
   58b38:	f800283a 	ret

00058b3c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   58b3c:	deffff04 	addi	sp,sp,-4
   58b40:	df000015 	stw	fp,0(sp)
   58b44:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   58b48:	0001883a 	nop
   58b4c:	e037883a 	mov	sp,fp
   58b50:	df000017 	ldw	fp,0(sp)
   58b54:	dec00104 	addi	sp,sp,4
   58b58:	f800283a 	ret

00058b5c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   58b5c:	deffff04 	addi	sp,sp,-4
   58b60:	df000015 	stw	fp,0(sp)
   58b64:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   58b68:	0001883a 	nop
   58b6c:	e037883a 	mov	sp,fp
   58b70:	df000017 	ldw	fp,0(sp)
   58b74:	dec00104 	addi	sp,sp,4
   58b78:	f800283a 	ret

00058b7c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   58b7c:	deffff04 	addi	sp,sp,-4
   58b80:	df000015 	stw	fp,0(sp)
   58b84:	d839883a 	mov	fp,sp
}
   58b88:	0001883a 	nop
   58b8c:	e037883a 	mov	sp,fp
   58b90:	df000017 	ldw	fp,0(sp)
   58b94:	dec00104 	addi	sp,sp,4
   58b98:	f800283a 	ret

00058b9c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   58b9c:	deffff04 	addi	sp,sp,-4
   58ba0:	df000015 	stw	fp,0(sp)
   58ba4:	d839883a 	mov	fp,sp
}
   58ba8:	0001883a 	nop
   58bac:	e037883a 	mov	sp,fp
   58bb0:	df000017 	ldw	fp,0(sp)
   58bb4:	dec00104 	addi	sp,sp,4
   58bb8:	f800283a 	ret

00058bbc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   58bbc:	defffe04 	addi	sp,sp,-8
   58bc0:	df000115 	stw	fp,4(sp)
   58bc4:	df000104 	addi	fp,sp,4
   58bc8:	e13fff15 	stw	r4,-4(fp)
}
   58bcc:	0001883a 	nop
   58bd0:	e037883a 	mov	sp,fp
   58bd4:	df000017 	ldw	fp,0(sp)
   58bd8:	dec00104 	addi	sp,sp,4
   58bdc:	f800283a 	ret

00058be0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   58be0:	defffa04 	addi	sp,sp,-24
   58be4:	dfc00515 	stw	ra,20(sp)
   58be8:	df000415 	stw	fp,16(sp)
   58bec:	df000404 	addi	fp,sp,16
   58bf0:	e13ffe15 	stw	r4,-8(fp)
   58bf4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   58bf8:	e0bfff17 	ldw	r2,-4(fp)
   58bfc:	10800017 	ldw	r2,0(r2)
   58c00:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   58c04:	e13ffe17 	ldw	r4,-8(fp)
   58c08:	00479bc0 	call	479bc <strlen>
   58c0c:	10800044 	addi	r2,r2,1
   58c10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   58c14:	00000d06 	br	58c4c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   58c18:	e0bffc17 	ldw	r2,-16(fp)
   58c1c:	10800217 	ldw	r2,8(r2)
   58c20:	e0fffd17 	ldw	r3,-12(fp)
   58c24:	180d883a 	mov	r6,r3
   58c28:	e17ffe17 	ldw	r5,-8(fp)
   58c2c:	1009883a 	mov	r4,r2
   58c30:	0058eb80 	call	58eb8 <memcmp>
   58c34:	1000021e 	bne	r2,zero,58c40 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   58c38:	e0bffc17 	ldw	r2,-16(fp)
   58c3c:	00000706 	br	58c5c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   58c40:	e0bffc17 	ldw	r2,-16(fp)
   58c44:	10800017 	ldw	r2,0(r2)
   58c48:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   58c4c:	e0fffc17 	ldw	r3,-16(fp)
   58c50:	e0bfff17 	ldw	r2,-4(fp)
   58c54:	18bff01e 	bne	r3,r2,58c18 <__alt_data_end+0xffff3418>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   58c58:	0005883a 	mov	r2,zero
}
   58c5c:	e037883a 	mov	sp,fp
   58c60:	dfc00117 	ldw	ra,4(sp)
   58c64:	df000017 	ldw	fp,0(sp)
   58c68:	dec00204 	addi	sp,sp,8
   58c6c:	f800283a 	ret

00058c70 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   58c70:	defffb04 	addi	sp,sp,-20
   58c74:	dfc00415 	stw	ra,16(sp)
   58c78:	df000315 	stw	fp,12(sp)
   58c7c:	df000304 	addi	fp,sp,12
   58c80:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   58c84:	d0a00717 	ldw	r2,-32740(gp)
   58c88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   58c8c:	00003106 	br	58d54 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   58c90:	e0bffd17 	ldw	r2,-12(fp)
   58c94:	10800217 	ldw	r2,8(r2)
   58c98:	1009883a 	mov	r4,r2
   58c9c:	00479bc0 	call	479bc <strlen>
   58ca0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   58ca4:	e0bffd17 	ldw	r2,-12(fp)
   58ca8:	10c00217 	ldw	r3,8(r2)
   58cac:	e0bffe17 	ldw	r2,-8(fp)
   58cb0:	10bfffc4 	addi	r2,r2,-1
   58cb4:	1885883a 	add	r2,r3,r2
   58cb8:	10800003 	ldbu	r2,0(r2)
   58cbc:	10803fcc 	andi	r2,r2,255
   58cc0:	1080201c 	xori	r2,r2,128
   58cc4:	10bfe004 	addi	r2,r2,-128
   58cc8:	10800bd8 	cmpnei	r2,r2,47
   58ccc:	1000031e 	bne	r2,zero,58cdc <alt_find_file+0x6c>
    {
      len -= 1;
   58cd0:	e0bffe17 	ldw	r2,-8(fp)
   58cd4:	10bfffc4 	addi	r2,r2,-1
   58cd8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   58cdc:	e0bffe17 	ldw	r2,-8(fp)
   58ce0:	e0ffff17 	ldw	r3,-4(fp)
   58ce4:	1885883a 	add	r2,r3,r2
   58ce8:	10800003 	ldbu	r2,0(r2)
   58cec:	10803fcc 	andi	r2,r2,255
   58cf0:	1080201c 	xori	r2,r2,128
   58cf4:	10bfe004 	addi	r2,r2,-128
   58cf8:	10800be0 	cmpeqi	r2,r2,47
   58cfc:	1000081e 	bne	r2,zero,58d20 <alt_find_file+0xb0>
   58d00:	e0bffe17 	ldw	r2,-8(fp)
   58d04:	e0ffff17 	ldw	r3,-4(fp)
   58d08:	1885883a 	add	r2,r3,r2
   58d0c:	10800003 	ldbu	r2,0(r2)
   58d10:	10803fcc 	andi	r2,r2,255
   58d14:	1080201c 	xori	r2,r2,128
   58d18:	10bfe004 	addi	r2,r2,-128
   58d1c:	10000a1e 	bne	r2,zero,58d48 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   58d20:	e0bffd17 	ldw	r2,-12(fp)
   58d24:	10800217 	ldw	r2,8(r2)
   58d28:	e0fffe17 	ldw	r3,-8(fp)
   58d2c:	180d883a 	mov	r6,r3
   58d30:	e17fff17 	ldw	r5,-4(fp)
   58d34:	1009883a 	mov	r4,r2
   58d38:	0058eb80 	call	58eb8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   58d3c:	1000021e 	bne	r2,zero,58d48 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   58d40:	e0bffd17 	ldw	r2,-12(fp)
   58d44:	00000706 	br	58d64 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   58d48:	e0bffd17 	ldw	r2,-12(fp)
   58d4c:	10800017 	ldw	r2,0(r2)
   58d50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   58d54:	e0fffd17 	ldw	r3,-12(fp)
   58d58:	d0a00704 	addi	r2,gp,-32740
   58d5c:	18bfcc1e 	bne	r3,r2,58c90 <__alt_data_end+0xffff3490>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   58d60:	0005883a 	mov	r2,zero
}
   58d64:	e037883a 	mov	sp,fp
   58d68:	dfc00117 	ldw	ra,4(sp)
   58d6c:	df000017 	ldw	fp,0(sp)
   58d70:	dec00204 	addi	sp,sp,8
   58d74:	f800283a 	ret

00058d78 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   58d78:	defff804 	addi	sp,sp,-32
   58d7c:	dfc00715 	stw	ra,28(sp)
   58d80:	df000615 	stw	fp,24(sp)
   58d84:	dc000515 	stw	r16,20(sp)
   58d88:	df000604 	addi	fp,sp,24
   58d8c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   58d90:	00bffa04 	movi	r2,-24
   58d94:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   58d98:	d0a71917 	ldw	r2,-25500(gp)
   58d9c:	e0bffc15 	stw	r2,-16(fp)
   58da0:	e03ffd0d 	sth	zero,-12(fp)
   58da4:	e0bffd0b 	ldhu	r2,-12(fp)
   58da8:	e0fffd84 	addi	r3,fp,-10
   58dac:	180d883a 	mov	r6,r3
   58db0:	100b883a 	mov	r5,r2
   58db4:	e13ffc17 	ldw	r4,-16(fp)
   58db8:	0054abc0 	call	54abc <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   58dbc:	e03ffa15 	stw	zero,-24(fp)
   58dc0:	00001d06 	br	58e38 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   58dc4:	040001b4 	movhi	r16,6
   58dc8:	8427c804 	addi	r16,r16,-24800
   58dcc:	e0bffa17 	ldw	r2,-24(fp)
   58dd0:	01400304 	movi	r5,12
   58dd4:	1009883a 	mov	r4,r2
   58dd8:	00407040 	call	40704 <__mulsi3>
   58ddc:	8085883a 	add	r2,r16,r2
   58de0:	10800017 	ldw	r2,0(r2)
   58de4:	1000111e 	bne	r2,zero,58e2c <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   58de8:	040001b4 	movhi	r16,6
   58dec:	8427c804 	addi	r16,r16,-24800
   58df0:	e0bffa17 	ldw	r2,-24(fp)
   58df4:	01400304 	movi	r5,12
   58df8:	1009883a 	mov	r4,r2
   58dfc:	00407040 	call	40704 <__mulsi3>
   58e00:	8085883a 	add	r2,r16,r2
   58e04:	e0fffe17 	ldw	r3,-8(fp)
   58e08:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   58e0c:	d0e00b17 	ldw	r3,-32724(gp)
   58e10:	e0bffa17 	ldw	r2,-24(fp)
   58e14:	1880020e 	bge	r3,r2,58e20 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   58e18:	e0bffa17 	ldw	r2,-24(fp)
   58e1c:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   58e20:	e0bffa17 	ldw	r2,-24(fp)
   58e24:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   58e28:	00000606 	br	58e44 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   58e2c:	e0bffa17 	ldw	r2,-24(fp)
   58e30:	10800044 	addi	r2,r2,1
   58e34:	e0bffa15 	stw	r2,-24(fp)
   58e38:	e0bffa17 	ldw	r2,-24(fp)
   58e3c:	10800810 	cmplti	r2,r2,32
   58e40:	103fe01e 	bne	r2,zero,58dc4 <__alt_data_end+0xffff35c4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   58e44:	d0a71917 	ldw	r2,-25500(gp)
   58e48:	1009883a 	mov	r4,r2
   58e4c:	0054e340 	call	54e34 <OSSemPost>

  return rc;
   58e50:	e0bffb17 	ldw	r2,-20(fp)
}
   58e54:	e6ffff04 	addi	sp,fp,-4
   58e58:	dfc00217 	ldw	ra,8(sp)
   58e5c:	df000117 	ldw	fp,4(sp)
   58e60:	dc000017 	ldw	r16,0(sp)
   58e64:	dec00304 	addi	sp,sp,12
   58e68:	f800283a 	ret

00058e6c <atexit>:
   58e6c:	200b883a 	mov	r5,r4
   58e70:	000f883a 	mov	r7,zero
   58e74:	000d883a 	mov	r6,zero
   58e78:	0009883a 	mov	r4,zero
   58e7c:	0058f341 	jmpi	58f34 <__register_exitproc>

00058e80 <exit>:
   58e80:	defffe04 	addi	sp,sp,-8
   58e84:	000b883a 	mov	r5,zero
   58e88:	dc000015 	stw	r16,0(sp)
   58e8c:	dfc00115 	stw	ra,4(sp)
   58e90:	2021883a 	mov	r16,r4
   58e94:	005904c0 	call	5904c <__call_exitprocs>
   58e98:	008001b4 	movhi	r2,6
   58e9c:	10ac4404 	addi	r2,r2,-20208
   58ea0:	11000017 	ldw	r4,0(r2)
   58ea4:	20800f17 	ldw	r2,60(r4)
   58ea8:	10000126 	beq	r2,zero,58eb0 <exit+0x30>
   58eac:	103ee83a 	callr	r2
   58eb0:	8009883a 	mov	r4,r16
   58eb4:	00591cc0 	call	591cc <_exit>

00058eb8 <memcmp>:
   58eb8:	01c000c4 	movi	r7,3
   58ebc:	3980192e 	bgeu	r7,r6,58f24 <memcmp+0x6c>
   58ec0:	2144b03a 	or	r2,r4,r5
   58ec4:	11c4703a 	and	r2,r2,r7
   58ec8:	10000f26 	beq	r2,zero,58f08 <memcmp+0x50>
   58ecc:	20800003 	ldbu	r2,0(r4)
   58ed0:	28c00003 	ldbu	r3,0(r5)
   58ed4:	10c0151e 	bne	r2,r3,58f2c <memcmp+0x74>
   58ed8:	31bfff84 	addi	r6,r6,-2
   58edc:	01ffffc4 	movi	r7,-1
   58ee0:	00000406 	br	58ef4 <memcmp+0x3c>
   58ee4:	20800003 	ldbu	r2,0(r4)
   58ee8:	28c00003 	ldbu	r3,0(r5)
   58eec:	31bfffc4 	addi	r6,r6,-1
   58ef0:	10c00e1e 	bne	r2,r3,58f2c <memcmp+0x74>
   58ef4:	21000044 	addi	r4,r4,1
   58ef8:	29400044 	addi	r5,r5,1
   58efc:	31fff91e 	bne	r6,r7,58ee4 <__alt_data_end+0xffff36e4>
   58f00:	0005883a 	mov	r2,zero
   58f04:	f800283a 	ret
   58f08:	20c00017 	ldw	r3,0(r4)
   58f0c:	28800017 	ldw	r2,0(r5)
   58f10:	18bfee1e 	bne	r3,r2,58ecc <__alt_data_end+0xffff36cc>
   58f14:	31bfff04 	addi	r6,r6,-4
   58f18:	21000104 	addi	r4,r4,4
   58f1c:	29400104 	addi	r5,r5,4
   58f20:	39bff936 	bltu	r7,r6,58f08 <__alt_data_end+0xffff3708>
   58f24:	303fe91e 	bne	r6,zero,58ecc <__alt_data_end+0xffff36cc>
   58f28:	003ff506 	br	58f00 <__alt_data_end+0xffff3700>
   58f2c:	10c5c83a 	sub	r2,r2,r3
   58f30:	f800283a 	ret

00058f34 <__register_exitproc>:
   58f34:	defffa04 	addi	sp,sp,-24
   58f38:	dc000315 	stw	r16,12(sp)
   58f3c:	040001b4 	movhi	r16,6
   58f40:	842c4404 	addi	r16,r16,-20208
   58f44:	80c00017 	ldw	r3,0(r16)
   58f48:	dc400415 	stw	r17,16(sp)
   58f4c:	dfc00515 	stw	ra,20(sp)
   58f50:	18805217 	ldw	r2,328(r3)
   58f54:	2023883a 	mov	r17,r4
   58f58:	10003726 	beq	r2,zero,59038 <__register_exitproc+0x104>
   58f5c:	10c00117 	ldw	r3,4(r2)
   58f60:	010007c4 	movi	r4,31
   58f64:	20c00e16 	blt	r4,r3,58fa0 <__register_exitproc+0x6c>
   58f68:	1a000044 	addi	r8,r3,1
   58f6c:	8800221e 	bne	r17,zero,58ff8 <__register_exitproc+0xc4>
   58f70:	18c00084 	addi	r3,r3,2
   58f74:	18c7883a 	add	r3,r3,r3
   58f78:	18c7883a 	add	r3,r3,r3
   58f7c:	12000115 	stw	r8,4(r2)
   58f80:	10c7883a 	add	r3,r2,r3
   58f84:	19400015 	stw	r5,0(r3)
   58f88:	0005883a 	mov	r2,zero
   58f8c:	dfc00517 	ldw	ra,20(sp)
   58f90:	dc400417 	ldw	r17,16(sp)
   58f94:	dc000317 	ldw	r16,12(sp)
   58f98:	dec00604 	addi	sp,sp,24
   58f9c:	f800283a 	ret
   58fa0:	00800034 	movhi	r2,0
   58fa4:	10800004 	addi	r2,r2,0
   58fa8:	10002626 	beq	r2,zero,59044 <__register_exitproc+0x110>
   58fac:	01006404 	movi	r4,400
   58fb0:	d9400015 	stw	r5,0(sp)
   58fb4:	d9800115 	stw	r6,4(sp)
   58fb8:	d9c00215 	stw	r7,8(sp)
   58fbc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   58fc0:	d9400017 	ldw	r5,0(sp)
   58fc4:	d9800117 	ldw	r6,4(sp)
   58fc8:	d9c00217 	ldw	r7,8(sp)
   58fcc:	10001d26 	beq	r2,zero,59044 <__register_exitproc+0x110>
   58fd0:	81000017 	ldw	r4,0(r16)
   58fd4:	10000115 	stw	zero,4(r2)
   58fd8:	02000044 	movi	r8,1
   58fdc:	22405217 	ldw	r9,328(r4)
   58fe0:	0007883a 	mov	r3,zero
   58fe4:	12400015 	stw	r9,0(r2)
   58fe8:	20805215 	stw	r2,328(r4)
   58fec:	10006215 	stw	zero,392(r2)
   58ff0:	10006315 	stw	zero,396(r2)
   58ff4:	883fde26 	beq	r17,zero,58f70 <__alt_data_end+0xffff3770>
   58ff8:	18c9883a 	add	r4,r3,r3
   58ffc:	2109883a 	add	r4,r4,r4
   59000:	1109883a 	add	r4,r2,r4
   59004:	21802215 	stw	r6,136(r4)
   59008:	01800044 	movi	r6,1
   5900c:	12406217 	ldw	r9,392(r2)
   59010:	30cc983a 	sll	r6,r6,r3
   59014:	4992b03a 	or	r9,r9,r6
   59018:	12406215 	stw	r9,392(r2)
   5901c:	21c04215 	stw	r7,264(r4)
   59020:	01000084 	movi	r4,2
   59024:	893fd21e 	bne	r17,r4,58f70 <__alt_data_end+0xffff3770>
   59028:	11006317 	ldw	r4,396(r2)
   5902c:	218cb03a 	or	r6,r4,r6
   59030:	11806315 	stw	r6,396(r2)
   59034:	003fce06 	br	58f70 <__alt_data_end+0xffff3770>
   59038:	18805304 	addi	r2,r3,332
   5903c:	18805215 	stw	r2,328(r3)
   59040:	003fc606 	br	58f5c <__alt_data_end+0xffff375c>
   59044:	00bfffc4 	movi	r2,-1
   59048:	003fd006 	br	58f8c <__alt_data_end+0xffff378c>

0005904c <__call_exitprocs>:
   5904c:	defff504 	addi	sp,sp,-44
   59050:	df000915 	stw	fp,36(sp)
   59054:	dd400615 	stw	r21,24(sp)
   59058:	dc800315 	stw	r18,12(sp)
   5905c:	dfc00a15 	stw	ra,40(sp)
   59060:	ddc00815 	stw	r23,32(sp)
   59064:	dd800715 	stw	r22,28(sp)
   59068:	dd000515 	stw	r20,20(sp)
   5906c:	dcc00415 	stw	r19,16(sp)
   59070:	dc400215 	stw	r17,8(sp)
   59074:	dc000115 	stw	r16,4(sp)
   59078:	d9000015 	stw	r4,0(sp)
   5907c:	2839883a 	mov	fp,r5
   59080:	04800044 	movi	r18,1
   59084:	057fffc4 	movi	r21,-1
   59088:	008001b4 	movhi	r2,6
   5908c:	10ac4404 	addi	r2,r2,-20208
   59090:	12000017 	ldw	r8,0(r2)
   59094:	45005217 	ldw	r20,328(r8)
   59098:	44c05204 	addi	r19,r8,328
   5909c:	a0001c26 	beq	r20,zero,59110 <__call_exitprocs+0xc4>
   590a0:	a0800117 	ldw	r2,4(r20)
   590a4:	15ffffc4 	addi	r23,r2,-1
   590a8:	b8000d16 	blt	r23,zero,590e0 <__call_exitprocs+0x94>
   590ac:	14000044 	addi	r16,r2,1
   590b0:	8421883a 	add	r16,r16,r16
   590b4:	8421883a 	add	r16,r16,r16
   590b8:	84402004 	addi	r17,r16,128
   590bc:	a463883a 	add	r17,r20,r17
   590c0:	a421883a 	add	r16,r20,r16
   590c4:	e0001e26 	beq	fp,zero,59140 <__call_exitprocs+0xf4>
   590c8:	80804017 	ldw	r2,256(r16)
   590cc:	e0801c26 	beq	fp,r2,59140 <__call_exitprocs+0xf4>
   590d0:	bdffffc4 	addi	r23,r23,-1
   590d4:	843fff04 	addi	r16,r16,-4
   590d8:	8c7fff04 	addi	r17,r17,-4
   590dc:	bd7ff91e 	bne	r23,r21,590c4 <__alt_data_end+0xffff38c4>
   590e0:	00800034 	movhi	r2,0
   590e4:	10800004 	addi	r2,r2,0
   590e8:	10000926 	beq	r2,zero,59110 <__call_exitprocs+0xc4>
   590ec:	a0800117 	ldw	r2,4(r20)
   590f0:	1000301e 	bne	r2,zero,591b4 <__call_exitprocs+0x168>
   590f4:	a0800017 	ldw	r2,0(r20)
   590f8:	10003226 	beq	r2,zero,591c4 <__call_exitprocs+0x178>
   590fc:	a009883a 	mov	r4,r20
   59100:	98800015 	stw	r2,0(r19)
   59104:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   59108:	9d000017 	ldw	r20,0(r19)
   5910c:	a03fe41e 	bne	r20,zero,590a0 <__alt_data_end+0xffff38a0>
   59110:	dfc00a17 	ldw	ra,40(sp)
   59114:	df000917 	ldw	fp,36(sp)
   59118:	ddc00817 	ldw	r23,32(sp)
   5911c:	dd800717 	ldw	r22,28(sp)
   59120:	dd400617 	ldw	r21,24(sp)
   59124:	dd000517 	ldw	r20,20(sp)
   59128:	dcc00417 	ldw	r19,16(sp)
   5912c:	dc800317 	ldw	r18,12(sp)
   59130:	dc400217 	ldw	r17,8(sp)
   59134:	dc000117 	ldw	r16,4(sp)
   59138:	dec00b04 	addi	sp,sp,44
   5913c:	f800283a 	ret
   59140:	a0800117 	ldw	r2,4(r20)
   59144:	80c00017 	ldw	r3,0(r16)
   59148:	10bfffc4 	addi	r2,r2,-1
   5914c:	15c01426 	beq	r2,r23,591a0 <__call_exitprocs+0x154>
   59150:	80000015 	stw	zero,0(r16)
   59154:	183fde26 	beq	r3,zero,590d0 <__alt_data_end+0xffff38d0>
   59158:	95c8983a 	sll	r4,r18,r23
   5915c:	a0806217 	ldw	r2,392(r20)
   59160:	a5800117 	ldw	r22,4(r20)
   59164:	2084703a 	and	r2,r4,r2
   59168:	10000b26 	beq	r2,zero,59198 <__call_exitprocs+0x14c>
   5916c:	a0806317 	ldw	r2,396(r20)
   59170:	2088703a 	and	r4,r4,r2
   59174:	20000c1e 	bne	r4,zero,591a8 <__call_exitprocs+0x15c>
   59178:	89400017 	ldw	r5,0(r17)
   5917c:	d9000017 	ldw	r4,0(sp)
   59180:	183ee83a 	callr	r3
   59184:	a0800117 	ldw	r2,4(r20)
   59188:	15bfbf1e 	bne	r2,r22,59088 <__alt_data_end+0xffff3888>
   5918c:	98800017 	ldw	r2,0(r19)
   59190:	153fcf26 	beq	r2,r20,590d0 <__alt_data_end+0xffff38d0>
   59194:	003fbc06 	br	59088 <__alt_data_end+0xffff3888>
   59198:	183ee83a 	callr	r3
   5919c:	003ff906 	br	59184 <__alt_data_end+0xffff3984>
   591a0:	a5c00115 	stw	r23,4(r20)
   591a4:	003feb06 	br	59154 <__alt_data_end+0xffff3954>
   591a8:	89000017 	ldw	r4,0(r17)
   591ac:	183ee83a 	callr	r3
   591b0:	003ff406 	br	59184 <__alt_data_end+0xffff3984>
   591b4:	a0800017 	ldw	r2,0(r20)
   591b8:	a027883a 	mov	r19,r20
   591bc:	1029883a 	mov	r20,r2
   591c0:	003fb606 	br	5909c <__alt_data_end+0xffff389c>
   591c4:	0005883a 	mov	r2,zero
   591c8:	003ffb06 	br	591b8 <__alt_data_end+0xffff39b8>

000591cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   591cc:	defffd04 	addi	sp,sp,-12
   591d0:	df000215 	stw	fp,8(sp)
   591d4:	df000204 	addi	fp,sp,8
   591d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   591dc:	d0272245 	stb	zero,-25463(gp)
   591e0:	e0bfff17 	ldw	r2,-4(fp)
   591e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   591e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   591ec:	10000226 	beq	r2,zero,591f8 <_exit+0x2c>
    ALT_SIM_FAIL();
   591f0:	002af070 	cmpltui	zero,zero,43969
   591f4:	00000106 	br	591fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   591f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   591fc:	003fff06 	br	591fc <__alt_data_end+0xffff39fc>
